{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-typeset .md-content__button {display: none!important; } .md-footer__inner { display: none!important; } .md-typeset h1, .md-typeset h2 { display: none!important; } .md-typeset h5 {text-transform: none!important; color: #212529!important;} .md-typeset h3 { font-weight: bold!important; color: #212529!important;} HFCQGIS: HELP FUNZIONI CALCOLATORE DI CAMPI DI QGIS Questa guida nasce per rispondere alle numerose richieste di aiuto sull\u2019uso del calcolatore di campi, a integrazione - con esempi e molti screenshot - della guida ufficiale di QGIS 80 Esempi Svolti! Field Calculator Il calcolatore di campi consente di eseguire calcoli sulla base di valori di attributo esistenti o funzioni definite, ad esempio, per calcolare la lunghezza o l'area delle caratteristiche geometriche. I risultati possono essere scritti in un nuovo campo di attributo, un campo virtuale, oppure possono essere utilizzati per aggiornare i valori in un campo esistente. Funzioni Questa guida nasce per rispondere alle numerose richieste di aiuto sull\u2019uso del calcolatore di campi e per colmare un vuoto sulla guida online di QGIS con esempi e molti screenshot. Nella sezione ESERCIZI si trovano esempi pratici e svolti step by step per rendere facile la comprensione di alcune funzioni di base come Area, lunghezza, Buffer ecc... Corso di formazione Il corso \u00e8 rivolto agli utenti che conoscono l'uso generale di QGIS e desiderano approfondire l'uso della tabella attributi e del calcolatore di campi. Il corso \u00e8 strutturato per durare almeno 16 ore - preferibilmente fulltime (due giorni da otto ore) Programma... Supporter Per realizzare questa guida ho impiegato del tempo e messo a disposizione tutta la mia conoscenza sullo strumento. Puoi contribuire a HfcQGIS con una donazione , divulgando questo manuale, segnalando bug, suggerendo miglioramenti, suggerendo esempi/esercizi, Pull Requests o documentare una funzione con donazione. La guida Questa guida NON sostituisce il manuale online di QGIS, cerca solo di rendere pi\u00f9 facile la comprensione dello strumento. La versione in formato MkDocs del lavoro di Salvatore FIANDACA, \u00e8 stata realizzata dalla comunit\u00e0 OpenDataSicilia , in particolare da: Andrea Borruso , Tot\u00f2 Fiandaca e Giovan Battista Vitrano utilizzando il tema Material for MkDocs","title":"Home"},{"location":"LICENSE_my/","text":"La licenza di questo sito (dati e immagini) fa riferimento alla CC-BY-SA-4.0 eccezion fatta per: la sezione Esempi svolti e tutti gli esercizi svolti, dove la licenza \u00e8 CC-BY-NC-SA 4.0 ; Provaci tu , dove la licenza \u00e8 CC-BY-NC-SA 4.0 .","title":"Licenza"},{"location":"autore/","text":"Bio \u21b5 Salvatore FIANDACA ( aka pigreco , per gli amici Tot\u00f2 ) Usa spesso, nei vari social, il nickname pigreco ma \u00e8 nel titolo del suo blog - Pigrecoinfinito - che si cela il suo nome in siciliano. Per capire quale sia occorre osservare con attenzione il logo che lo rappresenta: sono sovrapposti i simboli di pi greco, dell'infinito e della derivata prima: tre simboli matematici che hanno rivoluzionato la scienza; se osservate bene vedrete scritto il suo nome. Prima di iniziare l'attivit\u00e0 di divulgatore del Open Source (OS), Salvatore ha utilizzato - per anni - software proprietari, solo dopo la scoperta del OS abbandon\u00f2 definitivamente il mondo Close Source e decise di divulgare la filosofia OS tramite blog post e video su youtube. Attualmente il blog \u00e8 seguito in tutto il mondo ed il canale youtube ha oltre 2800 iscritti (giu-2021). Cura il Blog ' Pigrecoinfinito ' e il canale YouTube dove scrive e parla di QGIS,Qfield, SpatiaLite, PostegreSQL/PostGIS, GDAL/OGR, GRASS GIS, SAGA GIS, GitHub, OSGeo4W, ed altri FOSS; ama usare, nella professione e non solo, software OS come LibreOffice, InkSCAPE, GIMP ecc... Libero Professionista, attualmente \u00e8 socio GFOSS.it dal 2017, membro di QGIS Italia dal 2015 e di QGIS.org dal 2020, moderatore di vari forum con argomenti GFOSS. Partecipa, nel 2014, alla fondazione di Open Data Sicilia realizzando uno dei primi progetti del gruppo (Balneazione Palermo 2014, Piano regolatore del Comune di Palermo 2015 ), nel 2016 \u00e8 tra i relatori del #ODS16 OpenDataSicilia Summer Edition Messina, in cui parla di QGIS. Salvatore \u00e8 disponibile per nuovi progetti di divulgazione, oltre a consulenze private. Puoi raggiungere Salvatore all'indirizzo @pigrecoinfinito Molto attivo nella comunit\u00e0 di QGIS: ha partecipato alla realizzazione di un plugin ( Select by Relationship ); utilizza la OSGeo4W Network installer per fare testing sulle versione dev di QGIS; ha aperto numerosi ticket nel QGIS Issue Tracking ; scrive nelle mailing list di: QGIS-it-user, GFOSS, Spatialite, gvSIG; \u00e8 co-admin della pagina ufficiale di QGIS Italia ; ha collaborato per i testing di nuove feature di QGIS; si diverte a compilare la versione QGIS dev su GNU/Linux MINT; ha realizzato Pull request (PR) nel progetto princiaple di QGIS ; \u00e8 iscritto a gis.stackexchange . Ha organizzato e partecipato alle prime due Hack Fest QGIS Italia realizzate a Bologna e Padova (2017) e parteciper\u00e0 alla prossima a Viterbo (2018) . Foto : Hack Fest QGIS ITA Bologna 2017, da sinistra: Luca Mandolesi, Giuseppe Guarino, Salvatore Fiandaca, Pierluigi de Rosa e Enrico Ferreguti (uno dei pi\u00f9 attivi sviluppatori di plugin italiani Foto : Hack Fest QGIS ITA Padova 2017, da sinistra: Salvatore Fiandaca, Amedeo Fadini, Federico Gianoli, Matteo Ghetta,prof. Massimo De Marchi, Stefano Campus, Alessandro Sarretta, Enrico Ferreguti Foto : Hack Fest QGIS ITA Viterbo 2018 Foto : Hack Fest QGIS ITA Padova 2019 QGIS Summer Camp \u21b5 Padova luglio 2019 Foto : QGIS Summer Camp Padova 2019 5/7 luglio Certificate of Appreciation Foto da sinistra: Rocco Pispico, Enrico Ferreguti, Federico Gianoli, Matteo Ghetta, Stefano Campus, Tot\u00f2 (io) e Paolo Cavallini. FOSS4G-IT 2021 \u21b5 On-line 20/09/2021 24h QGIS Contributors Meeting in Firenze 2022 \u21b5 Workshop e Seminari \u21b5 Anno descrizione link 2016 OpenDataSicilia - ODS16 Messina https://github.com/pigreco/ODS16_QGIS 2020 GIScience - COVID: Analisi geografica con strumenti GIS Open Source https://github.com/pigreco/workshop-estate-gis-2020 2021 Workshop estate GIS 2021 UNIPD https://github.com/pigreco/workshop-estate-gis-2021 2021 GIScience - Dagli Open Data all'Open Source: lavorare in QGIS con le mappe catastali https://github.com/pigreco/geobreack_28_by_Gter 2021 Gter - Alla scoperta delle espressioni di QGIS: come e dove usarle (primo incontro) https://github.com/pigreco/geobreack_28_by_Gter) 2021 FOSS4G-IT 2021 - Alla scoperta delle espressioni di QGIS: come e dove usarle https://github.com/pigreco/Workshop_FOSS4G-IT-2021 2021 Gter - Alla scoperta delle espressioni di QGIS: come e dove usarle (secondo incontro) https://github.com/pigreco/geobreack_32_by_Gter 2022 Gter - QGIS, l'installazione https://github.com/pigreco/geobreack_41_by_Gter 2022 VISIDATA - OpenDataSicilia - Come semplificare la vita di un/a progfessionista GIS https://github.com/pigreco/visidata-gis 2022 FIELD CALC DI QGIS - Che cosa \u00e8 e come usarlo: applicato all'idraulica e/o all'idrologia https://github.com/pigreco/field_calc_idraulica 2022 DAL CAD AL GIS: MAPPE CATASTALI, DISEGNO CAD E TAVOLE DI PROGETTO https://github.com/pigreco/workshop-estate-gis-2022 2022 QGIS nel mondo e in Italia - Planetek Italia - Bari Slide Sponsoring \u21b5 QGIS e OSGeo \u21b5 da febbraio 2022 Ama ascoltare E. Morricone Contatti \u21b5","title":"Autore HfcQGIS"},{"location":"autore/#bio","text":"Salvatore FIANDACA ( aka pigreco , per gli amici Tot\u00f2 ) Usa spesso, nei vari social, il nickname pigreco ma \u00e8 nel titolo del suo blog - Pigrecoinfinito - che si cela il suo nome in siciliano. Per capire quale sia occorre osservare con attenzione il logo che lo rappresenta: sono sovrapposti i simboli di pi greco, dell'infinito e della derivata prima: tre simboli matematici che hanno rivoluzionato la scienza; se osservate bene vedrete scritto il suo nome. Prima di iniziare l'attivit\u00e0 di divulgatore del Open Source (OS), Salvatore ha utilizzato - per anni - software proprietari, solo dopo la scoperta del OS abbandon\u00f2 definitivamente il mondo Close Source e decise di divulgare la filosofia OS tramite blog post e video su youtube. Attualmente il blog \u00e8 seguito in tutto il mondo ed il canale youtube ha oltre 2800 iscritti (giu-2021). Cura il Blog ' Pigrecoinfinito ' e il canale YouTube dove scrive e parla di QGIS,Qfield, SpatiaLite, PostegreSQL/PostGIS, GDAL/OGR, GRASS GIS, SAGA GIS, GitHub, OSGeo4W, ed altri FOSS; ama usare, nella professione e non solo, software OS come LibreOffice, InkSCAPE, GIMP ecc... Libero Professionista, attualmente \u00e8 socio GFOSS.it dal 2017, membro di QGIS Italia dal 2015 e di QGIS.org dal 2020, moderatore di vari forum con argomenti GFOSS. Partecipa, nel 2014, alla fondazione di Open Data Sicilia realizzando uno dei primi progetti del gruppo (Balneazione Palermo 2014, Piano regolatore del Comune di Palermo 2015 ), nel 2016 \u00e8 tra i relatori del #ODS16 OpenDataSicilia Summer Edition Messina, in cui parla di QGIS. Salvatore \u00e8 disponibile per nuovi progetti di divulgazione, oltre a consulenze private. Puoi raggiungere Salvatore all'indirizzo @pigrecoinfinito Molto attivo nella comunit\u00e0 di QGIS: ha partecipato alla realizzazione di un plugin ( Select by Relationship ); utilizza la OSGeo4W Network installer per fare testing sulle versione dev di QGIS; ha aperto numerosi ticket nel QGIS Issue Tracking ; scrive nelle mailing list di: QGIS-it-user, GFOSS, Spatialite, gvSIG; \u00e8 co-admin della pagina ufficiale di QGIS Italia ; ha collaborato per i testing di nuove feature di QGIS; si diverte a compilare la versione QGIS dev su GNU/Linux MINT; ha realizzato Pull request (PR) nel progetto princiaple di QGIS ; \u00e8 iscritto a gis.stackexchange . Ha organizzato e partecipato alle prime due Hack Fest QGIS Italia realizzate a Bologna e Padova (2017) e parteciper\u00e0 alla prossima a Viterbo (2018) . Foto : Hack Fest QGIS ITA Bologna 2017, da sinistra: Luca Mandolesi, Giuseppe Guarino, Salvatore Fiandaca, Pierluigi de Rosa e Enrico Ferreguti (uno dei pi\u00f9 attivi sviluppatori di plugin italiani Foto : Hack Fest QGIS ITA Padova 2017, da sinistra: Salvatore Fiandaca, Amedeo Fadini, Federico Gianoli, Matteo Ghetta,prof. Massimo De Marchi, Stefano Campus, Alessandro Sarretta, Enrico Ferreguti Foto : Hack Fest QGIS ITA Viterbo 2018 Foto : Hack Fest QGIS ITA Padova 2019","title":"Bio"},{"location":"autore/#qgis-summer-camp","text":"Padova luglio 2019 Foto : QGIS Summer Camp Padova 2019 5/7 luglio Certificate of Appreciation Foto da sinistra: Rocco Pispico, Enrico Ferreguti, Federico Gianoli, Matteo Ghetta, Stefano Campus, Tot\u00f2 (io) e Paolo Cavallini.","title":"QGIS Summer Camp"},{"location":"autore/#foss4g-it-2021","text":"On-line 20/09/2021","title":"FOSS4G-IT 2021"},{"location":"autore/#24h-qgis-contributors-meeting-in-firenze-2022","text":"","title":"24h QGIS Contributors Meeting in Firenze 2022"},{"location":"autore/#workshop-e-seminari","text":"Anno descrizione link 2016 OpenDataSicilia - ODS16 Messina https://github.com/pigreco/ODS16_QGIS 2020 GIScience - COVID: Analisi geografica con strumenti GIS Open Source https://github.com/pigreco/workshop-estate-gis-2020 2021 Workshop estate GIS 2021 UNIPD https://github.com/pigreco/workshop-estate-gis-2021 2021 GIScience - Dagli Open Data all'Open Source: lavorare in QGIS con le mappe catastali https://github.com/pigreco/geobreack_28_by_Gter 2021 Gter - Alla scoperta delle espressioni di QGIS: come e dove usarle (primo incontro) https://github.com/pigreco/geobreack_28_by_Gter) 2021 FOSS4G-IT 2021 - Alla scoperta delle espressioni di QGIS: come e dove usarle https://github.com/pigreco/Workshop_FOSS4G-IT-2021 2021 Gter - Alla scoperta delle espressioni di QGIS: come e dove usarle (secondo incontro) https://github.com/pigreco/geobreack_32_by_Gter 2022 Gter - QGIS, l'installazione https://github.com/pigreco/geobreack_41_by_Gter 2022 VISIDATA - OpenDataSicilia - Come semplificare la vita di un/a progfessionista GIS https://github.com/pigreco/visidata-gis 2022 FIELD CALC DI QGIS - Che cosa \u00e8 e come usarlo: applicato all'idraulica e/o all'idrologia https://github.com/pigreco/field_calc_idraulica 2022 DAL CAD AL GIS: MAPPE CATASTALI, DISEGNO CAD E TAVOLE DI PROGETTO https://github.com/pigreco/workshop-estate-gis-2022 2022 QGIS nel mondo e in Italia - Planetek Italia - Bari Slide","title":"Workshop e Seminari"},{"location":"autore/#sponsoring","text":"","title":"Sponsoring"},{"location":"autore/#qgis-e-osgeo","text":"da febbraio 2022 Ama ascoltare E. Morricone","title":"QGIS e OSGeo"},{"location":"autore/#contatti","text":"","title":"Contatti"},{"location":"changelog/","tags":["changelog","novit\u00e0"],"text":"Changelog \u21b5 In questa sezione verranno inserite ogni modifica o aggiunta di esempi, funzioni e altro. data descrizione 06/09/2021 lancio #HfcQGIS v2 07/09/2021 aggiunto 54esimo esempio 07/09/2021 attivate le Discussions nel repository 07/09/2021 aggiornata la sezione Parlano di Noi - Post di GTer 16/09/2021 aggiunto le novit\u00e0 rilevanti della QGIS 3.22 Bia\u0142owie\u017ca 17/09/2021 aggiunto 55esimo esempio 18/09/2021 aggiunta nuova funzione Custom, MinMaxValueFieldName qui 26/09/2021 aggiunta funzioni utilizzate nella lista esempi svolti 26/09/2021 aggiornato programma corso di formazione, aggiunte le Maps 26/09/2021 aggiunto 56esimo esempio 27/09/2021 aggiunto screenshot di esempio alla funzione affine_transform 27/09/2021 aggiornata sezione autore con workshop al FOSS4G-IT 2021 01/10/2021 aggiunto 57esimo esempio 04/10/2021 aggiunta colonna Versione nella sezione contributors 12/10/2021 aggiornata pagina sitografia 13/10/2021 aggiunto 58esimo esempio 14/10/2021 aggiornata pagina Parlano di Noi 18/10/2021 aggiunto corso di formazione avanzato 02/11/2021 aggiunto 59esimo esempio 03/11/2021 aggiornato pagina sitografia 05/11/2021 aggiunto 60esimo esempio 06/11/2021 aggiunto 61esimo esempio 11/11/2021 aggiunto 62esimo esempio 22/11/2021 aggiunto 63esimo esempio 24/11/2021 aggiunto 64esimo esempio 29/11/2021 aggiunto 65esimo esempio 02/12/2021 aggiunto 66esimo esempio 12/12/2021 aggiunto 67esimo esempio 15/12/2021 aggiornata sezione Pull Request 18/12/2021 aggiunto 68esimo esempio 24/12/2021 aggiunto 69esimo esempio 28/12/2021 aggiunto 70esimo esempio 16/01/2022 Pull request per il Natural sorting in array_sort 18/01/2022 aggiunto 71esimo esempio 18/01/2022 aggiunti due nuove funzioni personalizzate sul Natural sorting funzioni esempio 27/01/2022 aggiunte le nuove funzioni della versione QGIS 3.24 28/01/2022 aggiunta colonna numero nelle novit\u00e0. 28/01/2022 aggiunta cartella mini per creare le miniature degli splashscreen 28/01/2022 aggiunto 72esimo esempio 01/02/2022 aggiunto il gruppo Form nella sezione Funzioni 03/02/2022 aggiunto sezione Gruppo Espressioni Utente nella sezione calcolatore di campi 03/02/2022 aggiunto sezione Tabella degli Attributi 05/02/2022 Sponsor QGIS.org - sezione 10/02/2022 Aggiunti i tag delle espressioni, nuova caratteristica introdotta nella 3.24 13/02/2022 Aggiunta sezione gis-stackexchange 17/02/2022 Attivati i tag!!! 03/03/2022 aggiunto 73esimo esempio 11/03/2022 aggiunti link a due seminari e aggiornato Parlano di noi 12/03/2022 aggiunto 74esimo esempio 14/03/2022 aggiunta funzione Custom Ordina punti lungo una linea orientata 15/03/2022 aggiunto 75esimo esempio 16/03/2022 aggiunta sezione Editor delle funzioni 31/03/2022 aggiornata sezione autore con workshop su Canale Modellazione Idraulica e GIS 08/04/2022 aggiunto 76esimo esempio 14/05/2022 Aggiunta sezione Calcolatore Campi in Processing 21/05/2022 Parlano di noi 4 anni di HfcQGIS 31/05/2022 aggiunto 77esimo esempio 02/06/2022 aggiunta nuova funzione personalizzata per estrarre testo legenda funzioni esempio 11/06/2022 aggiunto le novit\u00e0 rilevanti della QGIS 3.26 Buonos Aires 25/06/2022 aggiunto 78esimo esempio 10/07/2022 aggiunto 79esimo esempio 06/08/2022 aggiunto 80esimo esempio 21/10/2022 aggiunte le nuove funzioni della versione QGIS 3.28 Firenze 28/10/2022 aggiunto 81esimo esempio","title":"Changelog"},{"location":"changelog/#changelog","text":"In questa sezione verranno inserite ogni modifica o aggiunta di esempi, funzioni e altro. data descrizione 06/09/2021 lancio #HfcQGIS v2 07/09/2021 aggiunto 54esimo esempio 07/09/2021 attivate le Discussions nel repository 07/09/2021 aggiornata la sezione Parlano di Noi - Post di GTer 16/09/2021 aggiunto le novit\u00e0 rilevanti della QGIS 3.22 Bia\u0142owie\u017ca 17/09/2021 aggiunto 55esimo esempio 18/09/2021 aggiunta nuova funzione Custom, MinMaxValueFieldName qui 26/09/2021 aggiunta funzioni utilizzate nella lista esempi svolti 26/09/2021 aggiornato programma corso di formazione, aggiunte le Maps 26/09/2021 aggiunto 56esimo esempio 27/09/2021 aggiunto screenshot di esempio alla funzione affine_transform 27/09/2021 aggiornata sezione autore con workshop al FOSS4G-IT 2021 01/10/2021 aggiunto 57esimo esempio 04/10/2021 aggiunta colonna Versione nella sezione contributors 12/10/2021 aggiornata pagina sitografia 13/10/2021 aggiunto 58esimo esempio 14/10/2021 aggiornata pagina Parlano di Noi 18/10/2021 aggiunto corso di formazione avanzato 02/11/2021 aggiunto 59esimo esempio 03/11/2021 aggiornato pagina sitografia 05/11/2021 aggiunto 60esimo esempio 06/11/2021 aggiunto 61esimo esempio 11/11/2021 aggiunto 62esimo esempio 22/11/2021 aggiunto 63esimo esempio 24/11/2021 aggiunto 64esimo esempio 29/11/2021 aggiunto 65esimo esempio 02/12/2021 aggiunto 66esimo esempio 12/12/2021 aggiunto 67esimo esempio 15/12/2021 aggiornata sezione Pull Request 18/12/2021 aggiunto 68esimo esempio 24/12/2021 aggiunto 69esimo esempio 28/12/2021 aggiunto 70esimo esempio 16/01/2022 Pull request per il Natural sorting in array_sort 18/01/2022 aggiunto 71esimo esempio 18/01/2022 aggiunti due nuove funzioni personalizzate sul Natural sorting funzioni esempio 27/01/2022 aggiunte le nuove funzioni della versione QGIS 3.24 28/01/2022 aggiunta colonna numero nelle novit\u00e0. 28/01/2022 aggiunta cartella mini per creare le miniature degli splashscreen 28/01/2022 aggiunto 72esimo esempio 01/02/2022 aggiunto il gruppo Form nella sezione Funzioni 03/02/2022 aggiunto sezione Gruppo Espressioni Utente nella sezione calcolatore di campi 03/02/2022 aggiunto sezione Tabella degli Attributi 05/02/2022 Sponsor QGIS.org - sezione 10/02/2022 Aggiunti i tag delle espressioni, nuova caratteristica introdotta nella 3.24 13/02/2022 Aggiunta sezione gis-stackexchange 17/02/2022 Attivati i tag!!! 03/03/2022 aggiunto 73esimo esempio 11/03/2022 aggiunti link a due seminari e aggiornato Parlano di noi 12/03/2022 aggiunto 74esimo esempio 14/03/2022 aggiunta funzione Custom Ordina punti lungo una linea orientata 15/03/2022 aggiunto 75esimo esempio 16/03/2022 aggiunta sezione Editor delle funzioni 31/03/2022 aggiornata sezione autore con workshop su Canale Modellazione Idraulica e GIS 08/04/2022 aggiunto 76esimo esempio 14/05/2022 Aggiunta sezione Calcolatore Campi in Processing 21/05/2022 Parlano di noi 4 anni di HfcQGIS 31/05/2022 aggiunto 77esimo esempio 02/06/2022 aggiunta nuova funzione personalizzata per estrarre testo legenda funzioni esempio 11/06/2022 aggiunto le novit\u00e0 rilevanti della QGIS 3.26 Buonos Aires 25/06/2022 aggiunto 78esimo esempio 10/07/2022 aggiunto 79esimo esempio 06/08/2022 aggiunto 80esimo esempio 21/10/2022 aggiunte le nuove funzioni della versione QGIS 3.28 Firenze 28/10/2022 aggiunto 81esimo esempio","title":"Changelog"},{"location":"classici_problemi_gis/","text":"Risoluzione di classici problemi GIS \u21b5 In questa sezione sono presenti soluzioni relativi ai classici problemi GIS utilizzando le espressioni di QGIS. Un classico problema GIS \u00e8 il conteggio di punti ricadenti all'interno di poligoni, oppure quali punti sono pi\u00f9 vicini ad una rete stradale, oppure qaunti punti ricadono entro 500 metri dall'asta di un fiume. in lavorazione","title":"Risoluzione di classici problemi GIS"},{"location":"classici_problemi_gis/#risoluzione-di-classici-problemi-gis","text":"In questa sezione sono presenti soluzioni relativi ai classici problemi GIS utilizzando le espressioni di QGIS. Un classico problema GIS \u00e8 il conteggio di punti ricadenti all'interno di poligoni, oppure quali punti sono pi\u00f9 vicini ad una rete stradale, oppure qaunti punti ricadono entro 500 metri dall'asta di un fiume. in lavorazione","title":"Risoluzione di classici problemi GIS"},{"location":"contributing/","text":"Contribuire a HfcQGIS \u21b5 Prima di tutto, grazie per aver dedicato del tempo a questo progetto! \ud83d\udc4d Quella che segue \u00e8 una serie di linee guida per contribuire a HfcQGIS . Queste sono principalmente linee guida, non regole. Usa il buon senso e sentiti libero di proporre modifiche a questo documento in una pull request. Come puoi contribuire \u21b5 Donando \u21b5 Per realizzare questa guida ho impiegato del tempo e messo a disposizione tutta la mia conoscenza sullo strumento. Divulgando \u21b5 Per favore usa i tasti di condivisione social inserendo alcuni hastag: #hfcqgis #qgis @opendatasicilia (se hai attivo un ad blocker , i tasti di condivisione non verranno visualizzati). Segnalando \u21b5 Se trovi qualche malfunzionamento segnalalo, cos\u00ec da migliorare la guida, usa le issue del repository. Suggerendo \u21b5 Se hai suggerimenti o migliorie segnalali usando le Discussions . Esercizi \u21b5 Se vuoi che la sezione esempi cresca, suggerisci degli esempi/esercizi che vorresti vedere magari aprendo una discussione qui . Pull Requests \u21b5 Includere screenshot e GIF animate nella richiesta di pull, quando possibile. Documenta bene Terminare tutti i file con una nuova riga Evita il codice dipendente dalla piattaforma da documentare \u21b5 Elenco funzione/variabili da documentare tramite donazione Apri elenco","title":"Contribuire"},{"location":"contributing/#contribuire-a-hfcqgis","text":"Prima di tutto, grazie per aver dedicato del tempo a questo progetto! \ud83d\udc4d Quella che segue \u00e8 una serie di linee guida per contribuire a HfcQGIS . Queste sono principalmente linee guida, non regole. Usa il buon senso e sentiti libero di proporre modifiche a questo documento in una pull request.","title":"Contribuire a HfcQGIS"},{"location":"contributing/#come-puoi-contribuire","text":"","title":"Come puoi contribuire"},{"location":"contributing/#donando","text":"Per realizzare questa guida ho impiegato del tempo e messo a disposizione tutta la mia conoscenza sullo strumento.","title":"Donando"},{"location":"contributing/#divulgando","text":"Per favore usa i tasti di condivisione social inserendo alcuni hastag: #hfcqgis #qgis @opendatasicilia (se hai attivo un ad blocker , i tasti di condivisione non verranno visualizzati).","title":"Divulgando"},{"location":"contributing/#segnalando","text":"Se trovi qualche malfunzionamento segnalalo, cos\u00ec da migliorare la guida, usa le issue del repository.","title":"Segnalando"},{"location":"contributing/#suggerendo","text":"Se hai suggerimenti o migliorie segnalali usando le Discussions .","title":"Suggerendo"},{"location":"contributing/#esercizi","text":"Se vuoi che la sezione esempi cresca, suggerisci degli esempi/esercizi che vorresti vedere magari aprendo una discussione qui .","title":"Esercizi"},{"location":"contributing/#pull-requests","text":"Includere screenshot e GIF animate nella richiesta di pull, quando possibile. Documenta bene Terminare tutti i file con una nuova riga Evita il codice dipendente dalla piattaforma","title":"Pull Requests"},{"location":"contributing/#da-documentare","text":"Elenco funzione/variabili da documentare tramite donazione Apri elenco","title":"da documentare"},{"location":"disclaimer/","text":"Disclaimer \u21b5 Questa guida NON sostituisce il manuale online di QGIS, cerca solo di rendere pi\u00f9 facile la comprensione dello strumento. Il marchio QGIS \u00e8 stato realizzato da Anita Graser , l\u2019immagine HfcQGIS \u00e8 stata realizzata da Tot\u00f2 Fiandaca (autore del manuale) usando InkSCAPE e il carattere Trueno Bold . I colori utilizzati in questo sito sono fedeli alla Visual Style Guide di QGIS","title":"Disclaimer"},{"location":"disclaimer/#disclaimer","text":"Questa guida NON sostituisce il manuale online di QGIS, cerca solo di rendere pi\u00f9 facile la comprensione dello strumento. Il marchio QGIS \u00e8 stato realizzato da Anita Graser , l\u2019immagine HfcQGIS \u00e8 stata realizzata da Tot\u00f2 Fiandaca (autore del manuale) usando InkSCAPE e il carattere Trueno Bold . I colori utilizzati in questo sito sono fedeli alla Visual Style Guide di QGIS","title":"Disclaimer"},{"location":"gis-stackexchange/","tags":["gis-stackexchange","domande","risposte"],"text":"gis-stackexchange \u21b5 IN COSTRUZIONE Abstract In questa sezione una raccolte di alcune risposte dove si utilizzano le espressioni. data link espressioni 15/02/2022 https://gis.stackexchange.com/a/423947/73605 with_variable, maximum, minimum 15/02/2022 https://gis.stackexchange.com/a/423834/73605 array_foreach, generate_series, num_geometries, round, area, geometry_n, $geometry 13/02/2022 https://gis.stackexchange.com/a/423748/73605 geom_from_wkt, geom_to_wkt, $geometry 13/02/2022 https://gis.stackexchange.com/a/423717/73605 regexp_replace 28/01/2022 https://gis.stackexchange.com/a/422357/73605 array_to_string, with_variable, aggregate, intersects, array_foreach, array_distinct, @parent 23/01/2022 https://gis.stackexchange.com/a/421841/73605 CASE 18/02/2022 https://gis.stackexchange.com/a/421398/73605 funzione personalizzata 11/03/2022 https://gis.stackexchange.com/a/425887/73605 Calculate length of common boundary ... link: https://gis.stackexchange.com/users/73605/pigreco?tab=answers&sort=newest&page=1 https://stackexchange.com/users/8482031/pigreco?tab=activity https://api.stackexchange.com/2.2/users/73605/answers?site=gis.stackexchange.com&pagesize=100","title":"gis-stackexchange"},{"location":"gis-stackexchange/#gis-stackexchange","text":"IN COSTRUZIONE Abstract In questa sezione una raccolte di alcune risposte dove si utilizzano le espressioni. data link espressioni 15/02/2022 https://gis.stackexchange.com/a/423947/73605 with_variable, maximum, minimum 15/02/2022 https://gis.stackexchange.com/a/423834/73605 array_foreach, generate_series, num_geometries, round, area, geometry_n, $geometry 13/02/2022 https://gis.stackexchange.com/a/423748/73605 geom_from_wkt, geom_to_wkt, $geometry 13/02/2022 https://gis.stackexchange.com/a/423717/73605 regexp_replace 28/01/2022 https://gis.stackexchange.com/a/422357/73605 array_to_string, with_variable, aggregate, intersects, array_foreach, array_distinct, @parent 23/01/2022 https://gis.stackexchange.com/a/421841/73605 CASE 18/02/2022 https://gis.stackexchange.com/a/421398/73605 funzione personalizzata 11/03/2022 https://gis.stackexchange.com/a/425887/73605 Calculate length of common boundary ... link: https://gis.stackexchange.com/users/73605/pigreco?tab=answers&sort=newest&page=1 https://stackexchange.com/users/8482031/pigreco?tab=activity https://api.stackexchange.com/2.2/users/73605/answers?site=gis.stackexchange.com&pagesize=100","title":"gis-stackexchange"},{"location":"mettiti_alla_prova/","tags":["prova","test","esercizi","csv"],"text":"Mettiti alla prova con le espressioni di QGIS \u21b5 Provaci Tu \u21b5 Risolvi questi quesiti e scopri il tuo livello di conoscenza delle funzioni/espressioni del Field Calc di QGIS. Dati utilizzati \u21b5 Gli shapefile ISTAT 2021 generalizzati scaricabili da qui Esercizi e quesiti da svolgere con QGIS 3.16 Hannover o superiore: Quesiti \u21b5 1.Usando il layer Reg01012020_g_WGS84 , tracciare il Bounding Box (poligono) delle regioni, usando il Generatore di geometrie: 2.segue esempio 1), visualizzare etichetta solo nel Bounding Box della Puglia, nell'angolo in alto a destra: 3.Usando i layer Reg01012021_g_WGS84 e RipGeo01012021_WGS84 creare un vettore lineare usando il geo-algoritmo Geometria tramite espressione che colleghi i centroidi delle ripartizioni geografiche con i centroidi delle relative regioni, vedi sotto: 4.Usando il layer ProvCM01012021_WGS84 , calcolare la lunghezza della linea che collega tutti i point_on_surface delle province ordinate per regione; poi etichettare lo stesso strato in modo da visualizzare in basso a sinistra la lunghezza totale formattata, vedi sotto: 5.Come selezionare la provincia italiana che ha il maggior numero di province confinanti?; 6.Come selezionare la terza provincia pi\u00f9 estesa della ripartizione geografica Nord-Est ; 7.Creare un campo numerico e popolarlo con la classifica (1,2,3,4\u2026.) delle province pi\u00f9 estese raggruppate per ripartizione geografica (ovvero, 5 classifiche, una per ogni ripartizione, in modo che possa leggere quale sia l'ordine delle province pi\u00f9 estese per ogni ripartizione); 8.Perch\u00e9 in generale $area <> area($geometry) ? 9.Con quale espressione \u00e8 possibile tracciare il centroide lungo una linea (non rettilinea)? 10.Perch\u00e9 sono utili i campi virtuali? 11.In che condizioni \u00e8 vera questa uguaglianza $x = x($geometry)) ? 12.Usando i layer Reg01012021_g_WGS84 e ProvCM01012021_WGS84 (filtro per cod_reg=9) creare l'effetto visualizzabile nello screenshot di sotto (spostando il mouse, \u00e8 visibile il layer sottostante e la relativa etichetta): 13.I Raster possono essere utilizzati nel Field Calc? motivare la risposta. 14.Posso richiamare i valori di un altro layer usando le espressioni di QGIS? Se s\u00ec, con quali funzioni? 15.Per fare la concatenazione di stringhe \u00e8 possibile utilizzare sia || che + , ma che differenza c'\u00e8 tra i due ? 16.Utilizzando lo shapefile Reg01012021_g_WGS84 quale espressione permette di selezionare le feature pari? 17.All'interno della Finestra di dialogo del Field Calc (dove scriviamo le espressioni) \u00e8 possibile scrivere dei commenti, in quale modo? 18.Utilizzando lo shapefile Reg01012021_g_WGS84 , quale elemento restituisce questa espressione array_agg(\"COD_REG\")[-1] (il primo, l'ultimo, nessuno, \u2026)? 19.Utilizzando lo shapefile ProvCM01012021_WGS84 , quale valore devo sostituire al posto della X affinch\u00e9 l'uguaglianza sia soddisfatta: array_first(array_agg(\"COD_PROV\")) = array_agg(\"COD_PROV\")[X] ? 20.Nella Selezione per Espressione , quale tipo di output (numero, testo, booleano) deve dare l'espressione utilizzata nella finestra di dialogo sottostante (stesso concetto vale per i filtri) ? 21.Usando i layer Reg01012021_g_WGS84 e RipGeo01012021_WGS84 etichettare il layer RipGeo01012021_WGS84 con il numero delle regioni corrispondenti, come sotto (utilizzare solo espressioni): 22.Dove posso utilizzare la variabile @parent ? (ovunque o solo in?) 23.Le variabili dipendono dal contesto in cui lavoriamo (field calc, seleziona per espressione, compositore di stampe, ecc\u2026) ? motivare la risposta; 24.Posso utilizzare le espressioni nel compositore di stampe ? fai qualche esempio 25.La variabile @atlas_geometry \u00e8 sempre disponibile? motivare la risposta. 26.Nel Field Calc \u00e8 possibile aggiornare un attributo, cosa significa aggiornare l'attributo geometria tramite espressione, fai un esempio ? 27.Cosa sono e a che servono i parametri denominati nelle espressioni ? 28.Mettiti alla prova, rispondi prima di verificare in QGIS: '1' + '20' = 21 \u00e8 corretta questa uguaglianza ? motiva la risposta. 29.Il Field Calc popola un attributo alla volta, \u00e8 vera questa affermazione ? motiva risposta. 30.A partire dalla colonna \"cod_rip\", come ottenere la colonna \"INVERTI\" ? che espressione useresti ? vedi sotto: 31.Usando il layer ProvCM01012021_WGS84 selezionare le province che hanno il nome (\"den_uts\") con meno di 5 lettere: 32.Supponiamo di avere, in una tabella degli attributi, due colonne: la prima ( field_1 ) \u00e8 una descrizione caratterizzata da un lungo testo; un secondo campo ( field_2 ) in cui c'\u00e8 una parola; come verificare che la parola sia presente nel attributo descrizione ? 33.Usando il layer ProvCM01012021_WGS84 come scoprire il suo EPSG usando le espressioni ? 34.Usando i layer RipGeo01012021_WGS84 e in particolare la sua tabella degli attributi, aggiungere un campo ( cum ) e popolarlo con la somma cumulativa del campo \"cod_rip\", in modo da ottenere: 35.Alla variabile @parent \u00e8 assegnata una feature o un valore ? motivare la risposta. 36.La seguente uguaglianza $id = @rownumber relativamente alla prima feature, \u00e8 vera quando? 37.Usando uno shapefile, $id inizia da 1 o 0 ? 38.Usando un GeoPackage, @row_number inizia da 0 o 1 ? 39.\u00c8 possibile realizzare una JOIN tabellare (al volo) usando solo espressioni ? motivare la risposta. (esempio: fare una join tabellare tra il vettore RipGeo01012021_WGS84 e il file CSV sottostante) id valore 1 ciao 2 viva 3 QGIS 4 3.16.6 5 Hannover 40.\u00c8 uno dei geo-algoritmi pi\u00f9 famosi in ambito GIS Conta punti nel Poligono , \u00e8 possibile fare la stessa cosa usando solo le espressioni del Field Calc di QGIS ? motivare la risposta 41.Con quale espressione \u00e8 possibile aggiungere il numero di pagine in un atlante (nel formato nro pagina/totale pagine) ? 42.Quale valore memorizza la variabile @project_folder ? 43.\u00c8 possibile associare a una variabile una immagine SVG ? se s\u00ec, in quali casi ? 44.Se definissi una variabile Globale con nome my_var = 5 e poi definissi la stessa variabile a livello di Progetto my_var = 50; quale valore verrebbe associato alla variabile ? motivare la risposta 45.Le espressioni di QGIS sono utilizzabili ovunque in QGIS, per esempio: tabella attributi , tematizzazione , etichettatura , strumenti di processing , compositore di stampe , atlanti , report , moduli inserimento dati , widget , legenda , azioni , plugin , modellatore grafico , diagrammi , filtri , selezione , decorazioni , copyright , ecc.. lo sapevi ? motivare la risposta!\ud83d\ude01 46.Quattro vettori da 4 provider differenti (PostGIS, Spatialite, GeoPackage e shapefile), dove funzionano meglio le espressioni di QGIS ? motivare la risposta 47.La funzione array_agg() permette di trasformare un campo in un array , quale funzione trasforma una feature in un array ? 48.Nella finestra del Calcolatore di Campi , nella sezioni Gruppi (dove ci sono tutti le funzioni suddivise per gruppi), alcuni gruppi sono presenti solo in certe condizioni, per esempio il gruppo Relazioni quando \u00e8 visibile ? 49.Supponiamo di avere il seguente CSV con tre attributi, l'ultimo GPS contiene la coppia di coordinate separate da , come da tabella sotto: DATA NOME GPS 01/02/20 cucu 44.852747416606434,10.028176383697463 02/02/20 ciao 44.044566892850995,12.055562011167229 03/02/20 arrivederci 41.83774391119999,13.131616192302847 04/02/20 pluto 41.08389804418973,16.013252812971114 05/02/20 paperino 38.336008270894254,16.06188803019758 domanda 1 : come ottenere quest'altra tabella, dividendo i campi latitudine e longitudine ? DATA NOME GPS latitude longitude 01/02/20 cucu 44.852747416606434,10.028176383697463 44.852747416606434 10.028176383697463 02/02/20 ciao 44.044566892850995,12.055562011167229 44.044566892850995 12.055562011167229 03/02/20 arrivederci 41.83774391119999,13.131616192302847 41.8377439119999 13.131616192302847 04/02/20 pluto 41.08389804418973,16.013252812971114 41.08389804418973 16.013252812971114 05/02/20 paperino 38.336008270894254,16.06188803019758 38.336008270894254 16.06188803019758 domanda 2 : come ottenere solo sei cifre decimali per gli ultimi due campi ? DATA NOME GPS latitude longitude 01/02/20 cucu 44.852747416606434,10.028176383697463 44.852747 10.028176 02/02/20 ciao 44.044566892850995,12.055562011167229 44.044566 12.055562 03/02/20 arrivederci 41.83774391119999,13.131616192302847 41.837743 13.131616 04/02/20 pluto 41.08389804418973,16.013252812971114 41.083898 16.013252 05/02/20 paperino 38.336008270894254,16.06188803019758 38.336008 16.061888 50.A cosa serve l'operatore '\\n' ? Esito esercizi \u21b5 Per chi volesse sapere l'esito degli esercizi svolti, inviare le risposte alla mail: pigrecoinfinito@gmail.com con OGGETTO: Test #HfcQGIS Risultati \u21b5 Sono 50 quesiti di difficolt\u00e0 variabile ( media-alta ), sotto i consigli di Pigreco nro range (risposte esatte) significato 1 tra 0 e 10 occorre urgentemente seguire il Corso HfcQGIS \ud83d\ude01 2 tra 11 e 25 seguire il Corso ti permetterebbe di rispondere bene quasi a tutte \ud83d\ude0a 3 tra 26 e 40 hai qualche lacuna che potresti colmare seguendo il Corso HfcQGIS \ud83d\ude0e 4 tra 41 e 50 conosci bene il Field Calc ! \ud83d\ude0d Contatto : \u2709 pigrecoinfinito@gmail.com Licenza \u21b5 In questa sezione Provaci tu e tutti gli esercizi svolti, la licenza \u00e8 CC-BY-NC-SA 4.0","title":"Provaci tu"},{"location":"mettiti_alla_prova/#mettiti-alla-prova-con-le-espressioni-di-qgis","text":"","title":"Mettiti alla prova con le espressioni di QGIS"},{"location":"mettiti_alla_prova/#provaci-tu","text":"Risolvi questi quesiti e scopri il tuo livello di conoscenza delle funzioni/espressioni del Field Calc di QGIS.","title":"Provaci Tu"},{"location":"mettiti_alla_prova/#dati-utilizzati","text":"Gli shapefile ISTAT 2021 generalizzati scaricabili da qui Esercizi e quesiti da svolgere con QGIS 3.16 Hannover o superiore:","title":"Dati utilizzati"},{"location":"mettiti_alla_prova/#quesiti","text":"1.Usando il layer Reg01012020_g_WGS84 , tracciare il Bounding Box (poligono) delle regioni, usando il Generatore di geometrie: 2.segue esempio 1), visualizzare etichetta solo nel Bounding Box della Puglia, nell'angolo in alto a destra: 3.Usando i layer Reg01012021_g_WGS84 e RipGeo01012021_WGS84 creare un vettore lineare usando il geo-algoritmo Geometria tramite espressione che colleghi i centroidi delle ripartizioni geografiche con i centroidi delle relative regioni, vedi sotto: 4.Usando il layer ProvCM01012021_WGS84 , calcolare la lunghezza della linea che collega tutti i point_on_surface delle province ordinate per regione; poi etichettare lo stesso strato in modo da visualizzare in basso a sinistra la lunghezza totale formattata, vedi sotto: 5.Come selezionare la provincia italiana che ha il maggior numero di province confinanti?; 6.Come selezionare la terza provincia pi\u00f9 estesa della ripartizione geografica Nord-Est ; 7.Creare un campo numerico e popolarlo con la classifica (1,2,3,4\u2026.) delle province pi\u00f9 estese raggruppate per ripartizione geografica (ovvero, 5 classifiche, una per ogni ripartizione, in modo che possa leggere quale sia l'ordine delle province pi\u00f9 estese per ogni ripartizione); 8.Perch\u00e9 in generale $area <> area($geometry) ? 9.Con quale espressione \u00e8 possibile tracciare il centroide lungo una linea (non rettilinea)? 10.Perch\u00e9 sono utili i campi virtuali? 11.In che condizioni \u00e8 vera questa uguaglianza $x = x($geometry)) ? 12.Usando i layer Reg01012021_g_WGS84 e ProvCM01012021_WGS84 (filtro per cod_reg=9) creare l'effetto visualizzabile nello screenshot di sotto (spostando il mouse, \u00e8 visibile il layer sottostante e la relativa etichetta): 13.I Raster possono essere utilizzati nel Field Calc? motivare la risposta. 14.Posso richiamare i valori di un altro layer usando le espressioni di QGIS? Se s\u00ec, con quali funzioni? 15.Per fare la concatenazione di stringhe \u00e8 possibile utilizzare sia || che + , ma che differenza c'\u00e8 tra i due ? 16.Utilizzando lo shapefile Reg01012021_g_WGS84 quale espressione permette di selezionare le feature pari? 17.All'interno della Finestra di dialogo del Field Calc (dove scriviamo le espressioni) \u00e8 possibile scrivere dei commenti, in quale modo? 18.Utilizzando lo shapefile Reg01012021_g_WGS84 , quale elemento restituisce questa espressione array_agg(\"COD_REG\")[-1] (il primo, l'ultimo, nessuno, \u2026)? 19.Utilizzando lo shapefile ProvCM01012021_WGS84 , quale valore devo sostituire al posto della X affinch\u00e9 l'uguaglianza sia soddisfatta: array_first(array_agg(\"COD_PROV\")) = array_agg(\"COD_PROV\")[X] ? 20.Nella Selezione per Espressione , quale tipo di output (numero, testo, booleano) deve dare l'espressione utilizzata nella finestra di dialogo sottostante (stesso concetto vale per i filtri) ? 21.Usando i layer Reg01012021_g_WGS84 e RipGeo01012021_WGS84 etichettare il layer RipGeo01012021_WGS84 con il numero delle regioni corrispondenti, come sotto (utilizzare solo espressioni): 22.Dove posso utilizzare la variabile @parent ? (ovunque o solo in?) 23.Le variabili dipendono dal contesto in cui lavoriamo (field calc, seleziona per espressione, compositore di stampe, ecc\u2026) ? motivare la risposta; 24.Posso utilizzare le espressioni nel compositore di stampe ? fai qualche esempio 25.La variabile @atlas_geometry \u00e8 sempre disponibile? motivare la risposta. 26.Nel Field Calc \u00e8 possibile aggiornare un attributo, cosa significa aggiornare l'attributo geometria tramite espressione, fai un esempio ? 27.Cosa sono e a che servono i parametri denominati nelle espressioni ? 28.Mettiti alla prova, rispondi prima di verificare in QGIS: '1' + '20' = 21 \u00e8 corretta questa uguaglianza ? motiva la risposta. 29.Il Field Calc popola un attributo alla volta, \u00e8 vera questa affermazione ? motiva risposta. 30.A partire dalla colonna \"cod_rip\", come ottenere la colonna \"INVERTI\" ? che espressione useresti ? vedi sotto: 31.Usando il layer ProvCM01012021_WGS84 selezionare le province che hanno il nome (\"den_uts\") con meno di 5 lettere: 32.Supponiamo di avere, in una tabella degli attributi, due colonne: la prima ( field_1 ) \u00e8 una descrizione caratterizzata da un lungo testo; un secondo campo ( field_2 ) in cui c'\u00e8 una parola; come verificare che la parola sia presente nel attributo descrizione ? 33.Usando il layer ProvCM01012021_WGS84 come scoprire il suo EPSG usando le espressioni ? 34.Usando i layer RipGeo01012021_WGS84 e in particolare la sua tabella degli attributi, aggiungere un campo ( cum ) e popolarlo con la somma cumulativa del campo \"cod_rip\", in modo da ottenere: 35.Alla variabile @parent \u00e8 assegnata una feature o un valore ? motivare la risposta. 36.La seguente uguaglianza $id = @rownumber relativamente alla prima feature, \u00e8 vera quando? 37.Usando uno shapefile, $id inizia da 1 o 0 ? 38.Usando un GeoPackage, @row_number inizia da 0 o 1 ? 39.\u00c8 possibile realizzare una JOIN tabellare (al volo) usando solo espressioni ? motivare la risposta. (esempio: fare una join tabellare tra il vettore RipGeo01012021_WGS84 e il file CSV sottostante) id valore 1 ciao 2 viva 3 QGIS 4 3.16.6 5 Hannover 40.\u00c8 uno dei geo-algoritmi pi\u00f9 famosi in ambito GIS Conta punti nel Poligono , \u00e8 possibile fare la stessa cosa usando solo le espressioni del Field Calc di QGIS ? motivare la risposta 41.Con quale espressione \u00e8 possibile aggiungere il numero di pagine in un atlante (nel formato nro pagina/totale pagine) ? 42.Quale valore memorizza la variabile @project_folder ? 43.\u00c8 possibile associare a una variabile una immagine SVG ? se s\u00ec, in quali casi ? 44.Se definissi una variabile Globale con nome my_var = 5 e poi definissi la stessa variabile a livello di Progetto my_var = 50; quale valore verrebbe associato alla variabile ? motivare la risposta 45.Le espressioni di QGIS sono utilizzabili ovunque in QGIS, per esempio: tabella attributi , tematizzazione , etichettatura , strumenti di processing , compositore di stampe , atlanti , report , moduli inserimento dati , widget , legenda , azioni , plugin , modellatore grafico , diagrammi , filtri , selezione , decorazioni , copyright , ecc.. lo sapevi ? motivare la risposta!\ud83d\ude01 46.Quattro vettori da 4 provider differenti (PostGIS, Spatialite, GeoPackage e shapefile), dove funzionano meglio le espressioni di QGIS ? motivare la risposta 47.La funzione array_agg() permette di trasformare un campo in un array , quale funzione trasforma una feature in un array ? 48.Nella finestra del Calcolatore di Campi , nella sezioni Gruppi (dove ci sono tutti le funzioni suddivise per gruppi), alcuni gruppi sono presenti solo in certe condizioni, per esempio il gruppo Relazioni quando \u00e8 visibile ? 49.Supponiamo di avere il seguente CSV con tre attributi, l'ultimo GPS contiene la coppia di coordinate separate da , come da tabella sotto: DATA NOME GPS 01/02/20 cucu 44.852747416606434,10.028176383697463 02/02/20 ciao 44.044566892850995,12.055562011167229 03/02/20 arrivederci 41.83774391119999,13.131616192302847 04/02/20 pluto 41.08389804418973,16.013252812971114 05/02/20 paperino 38.336008270894254,16.06188803019758 domanda 1 : come ottenere quest'altra tabella, dividendo i campi latitudine e longitudine ? DATA NOME GPS latitude longitude 01/02/20 cucu 44.852747416606434,10.028176383697463 44.852747416606434 10.028176383697463 02/02/20 ciao 44.044566892850995,12.055562011167229 44.044566892850995 12.055562011167229 03/02/20 arrivederci 41.83774391119999,13.131616192302847 41.8377439119999 13.131616192302847 04/02/20 pluto 41.08389804418973,16.013252812971114 41.08389804418973 16.013252812971114 05/02/20 paperino 38.336008270894254,16.06188803019758 38.336008270894254 16.06188803019758 domanda 2 : come ottenere solo sei cifre decimali per gli ultimi due campi ? DATA NOME GPS latitude longitude 01/02/20 cucu 44.852747416606434,10.028176383697463 44.852747 10.028176 02/02/20 ciao 44.044566892850995,12.055562011167229 44.044566 12.055562 03/02/20 arrivederci 41.83774391119999,13.131616192302847 41.837743 13.131616 04/02/20 pluto 41.08389804418973,16.013252812971114 41.083898 16.013252 05/02/20 paperino 38.336008270894254,16.06188803019758 38.336008 16.061888 50.A cosa serve l'operatore '\\n' ?","title":"Quesiti"},{"location":"mettiti_alla_prova/#esito-esercizi","text":"Per chi volesse sapere l'esito degli esercizi svolti, inviare le risposte alla mail: pigrecoinfinito@gmail.com con OGGETTO: Test #HfcQGIS","title":"Esito esercizi"},{"location":"mettiti_alla_prova/#risultati","text":"Sono 50 quesiti di difficolt\u00e0 variabile ( media-alta ), sotto i consigli di Pigreco nro range (risposte esatte) significato 1 tra 0 e 10 occorre urgentemente seguire il Corso HfcQGIS \ud83d\ude01 2 tra 11 e 25 seguire il Corso ti permetterebbe di rispondere bene quasi a tutte \ud83d\ude0a 3 tra 26 e 40 hai qualche lacuna che potresti colmare seguendo il Corso HfcQGIS \ud83d\ude0e 4 tra 41 e 50 conosci bene il Field Calc ! \ud83d\ude0d Contatto : \u2709 pigrecoinfinito@gmail.com","title":"Risultati"},{"location":"mettiti_alla_prova/#licenza","text":"In questa sezione Provaci tu e tutti gli esercizi svolti, la licenza \u00e8 CC-BY-NC-SA 4.0","title":"Licenza"},{"location":"ods/","text":"OpenDataSicilia \u21b5 OpenDataSicilia \u00e8 una iniziativa civica che si propone di far conoscere e diffondere le prassi dell' open data e la cultura dell' open government e nel territorio e aprire una discussione pubblica partecipata. \u00c8 un gruppo di cittadini con diverse storie, competenze, professioni, accomunate dalla volont\u00e0 di contribuire a migliorare la qualit\u00e0 della vita delle persone, con spirito di collaborazione e concretezza. La genesi di questo sito \u21b5 La forza delle comunit\u00e0 sono le persone , le loro idee , le intuizioni , l' energia che hanno dentro e la capacit\u00e0 di fare insieme tesoro di tutto questo. Questa guida nasce da questa frase \"buttata\" in una chat: guardando il video che Tot\u00f2 ha fatto sul suo mega lavoro HfcQGIS mi \u00e8 sembrato un p\u00f2 scoraggiato, vorrei provare a trasformarlo per lui e dargli molta pi\u00f9 visibilit\u00e0. Capita spesso, con tutte le buone intenzioni, di scrivere frasi come questa, ma nel 99% dei casi si perdono, senza che ci sia alcuna evoluzione. OpenDataSicilia \u00e8 un'\" infrastrattura di persone \" dove una bella intenzione - come quella di sopra di Giovan Battista Vitrano - si pu\u00f2 trasformare in un passaparola e poi in un progetto; specie quando alle spalle c'\u00e8 una \" mega lavoro \" da valorizzare come quello di Salvatore Fiandaca. I criceti che hanno fatto girare la ruota. Andrea Borruso Coordinatore Salvatore Fiandaca Autore e curatore di HfcQGIS Giovan Battista Vitrano Webmaster Anagrafica \u21b5 OpenDataSicilia fa scruscio (\"rumore\" in siciliano) qui: Twitter Gruppo Telegram Gruppo Facebook Mailing List opendatasicilia.it","title":"OpenDataSicilia"},{"location":"ods/#opendatasicilia","text":"OpenDataSicilia \u00e8 una iniziativa civica che si propone di far conoscere e diffondere le prassi dell' open data e la cultura dell' open government e nel territorio e aprire una discussione pubblica partecipata. \u00c8 un gruppo di cittadini con diverse storie, competenze, professioni, accomunate dalla volont\u00e0 di contribuire a migliorare la qualit\u00e0 della vita delle persone, con spirito di collaborazione e concretezza.","title":"OpenDataSicilia"},{"location":"ods/#la-genesi-di-questo-sito","text":"La forza delle comunit\u00e0 sono le persone , le loro idee , le intuizioni , l' energia che hanno dentro e la capacit\u00e0 di fare insieme tesoro di tutto questo. Questa guida nasce da questa frase \"buttata\" in una chat: guardando il video che Tot\u00f2 ha fatto sul suo mega lavoro HfcQGIS mi \u00e8 sembrato un p\u00f2 scoraggiato, vorrei provare a trasformarlo per lui e dargli molta pi\u00f9 visibilit\u00e0. Capita spesso, con tutte le buone intenzioni, di scrivere frasi come questa, ma nel 99% dei casi si perdono, senza che ci sia alcuna evoluzione. OpenDataSicilia \u00e8 un'\" infrastrattura di persone \" dove una bella intenzione - come quella di sopra di Giovan Battista Vitrano - si pu\u00f2 trasformare in un passaparola e poi in un progetto; specie quando alle spalle c'\u00e8 una \" mega lavoro \" da valorizzare come quello di Salvatore Fiandaca.","title":"La genesi di questo sito"},{"location":"ods/#anagrafica","text":"OpenDataSicilia fa scruscio (\"rumore\" in siciliano) qui: Twitter Gruppo Telegram Gruppo Facebook Mailing List opendatasicilia.it","title":"Anagrafica"},{"location":"parlano_di_noi/","tags":["news","parlano"],"text":"Parlano di noi \u21b5 21/05/2022 Andrea Borruso su Twitter 11/03/2022 OpenDataSicilia by VisiData-GIS 12/10/2021 Zenodo by FOSS4G-IT 2021 06/10/2021 Facebook GeoBreack 32 by GTER 20/09/2021 FOSS4G-IT 2021 GFOSS.it by FOSS4G-IT 2021 06/06/2021 Facebook GTer by GTER 23/06/2021 Facebook GeoBreack 28 by GTER 16/12/2020 YouTube Presentazione #HfcQGIS in Francia dal minuto 5:07 (Grazie Pier Serafini) 16/12/2020 Twitter 01/08/2020 Lista QGIS-it-user Marco S. 24/06/2020 Facebook EstateGIS2020 06/07/2019 Twitter Skampus 29/04/2019 Facebook GTer 29/04/2019 Twitter Master GIS Droni 29/04/2019 Facebook Master in GIScience e droni per la gestione del territorio 20/03/2019 Facebook Risposta ad un post 22/02/2019 Twitter QGIS M\u00e9xico 22/02/2019 - Twitter GeObserver 14/012/2018 - Twitter Gter 01/11/2018 - Facebook Master in GIScience e droni per la gestione del territorio 01/09/2018 - Facebook openoikos 25/07/2018 - Facebook Lezioni GIS 23/07/2018 - Facebook QGIS Costa Rica 23/07/2018 - Facebook QGIS Italia mag/giu/lug/2018 - GitHub GitHub","title":"Parlano di noi"},{"location":"parlano_di_noi/#parlano-di-noi","text":"21/05/2022 Andrea Borruso su Twitter 11/03/2022 OpenDataSicilia by VisiData-GIS 12/10/2021 Zenodo by FOSS4G-IT 2021 06/10/2021 Facebook GeoBreack 32 by GTER 20/09/2021 FOSS4G-IT 2021 GFOSS.it by FOSS4G-IT 2021 06/06/2021 Facebook GTer by GTER 23/06/2021 Facebook GeoBreack 28 by GTER 16/12/2020 YouTube Presentazione #HfcQGIS in Francia dal minuto 5:07 (Grazie Pier Serafini) 16/12/2020 Twitter 01/08/2020 Lista QGIS-it-user Marco S. 24/06/2020 Facebook EstateGIS2020 06/07/2019 Twitter Skampus 29/04/2019 Facebook GTer 29/04/2019 Twitter Master GIS Droni 29/04/2019 Facebook Master in GIScience e droni per la gestione del territorio 20/03/2019 Facebook Risposta ad un post 22/02/2019 Twitter QGIS M\u00e9xico 22/02/2019 - Twitter GeObserver 14/012/2018 - Twitter Gter 01/11/2018 - Facebook Master in GIScience e droni per la gestione del territorio 01/09/2018 - Facebook openoikos 25/07/2018 - Facebook Lezioni GIS 23/07/2018 - Facebook QGIS Costa Rica 23/07/2018 - Facebook QGIS Italia mag/giu/lug/2018 - GitHub GitHub","title":"Parlano di noi"},{"location":"privacy/","text":"Informativa privacy estesa \u21b5 In linea con la legislazione Europea, \u00e8 fondamentale che ogni utente del sito web comprenda cosa sono i cookie e per quale motivo vengono utilizzati, in modo che gli utenti stessi possano decidere consapevolmente se accettarne l\u2019utilizzo o no sui loro dispositivi. Un cookie \u00e8 un piccolo file di testo contenente un numero di identificazione univoco che viene trasferito dal sito web sul disco rigido del vostro computer attraverso un codice anonimo in grado di identificare il computer ma non l\u2019utente e di monitorare passivamente le vostre attivit\u00e0 sul sito. I cookie possono essere classificati in due categorie, in base alle loro funzionalit\u00e0: Cookie tecnici (di cui fanno parte i cookie sulle prestazioni e i cookie funzionali) Cookie profilanti (di cui fanno parte i cookie legati alle pubblicit\u00e0) Il sito utilizza solo il primo tipo di cookie, di tipo tecnico, per i quali non \u00e8 richiesto alcun consenso. Nel dettaglio vengono utlizzati le seguenti tipologie di cookie: Cookie strettamente necessari Questi cookie sono essenziali al fine di permettere la navigazione del sito web e l\u2019utilizzo delle sue funzionalit\u00e0, come ad esempio l\u2019accesso ad alcune aree protette. Senza questi cookie, alcune funzionalit\u00e0 richieste come ad esempio il login al sito o l\u2019inserimento degli articoli da parte dei collaboratori non potrebbero essere fornite. Cookie sulle prestazioni Questi cookie raccolgono informazioni su come gli utenti utilizzano il sito web, ad esempio quali pagine vengono visitate pi\u00f9 spesso e se gli utenti ricevono messaggi di errore da queste pagine. Questi cookie non raccolgono informazioni che identificano un visitatore specifico. Tutte le informazioni raccolte da questi cookie sono aggregate e quindi anonime. Vengono utilizzate unicamente per migliorare il funzionamento del sito web. Cookie di analisi di traffico anonimizzati Questo sito web utilizza inoltre i cookie di Google Analytics , un servizio di analisi web fornito da Google. Le informazioni generate dal cookie sull\u2019utilizzo del sito web da parte vostra (compreso il vostro indirizzo IP) verranno trasmesse e depositate presso i server di Google che utilizzer\u00e0 queste informazioni allo scopo di tracciare ed esaminare il vostro utilizzo del sito web, compilare report sulle attivit\u00e0 svolte sul sito web e fornire altri servizi relativi alle attivit\u00e0 e all\u2019utilizzo di Internet. I dati generati da Google Analytics sono conservati da Google cos\u00ec come indicato nella Informativa reperibile al seguente link. L\u2019utente pu\u00f2 disabilitare in modo selettivo l\u2019azione di Google Analytics installando sul proprio browser la componente di opt-out fornito da Google. Per disabilitare l\u2019azione di Google Analytics, si rinvia al link di seguito indicato: https://tools.google.com/dlpage/gaoptout Cookie funzionali Questi cookie consentono al sito web di ricordare le scelte che avete effettuato (come il vostro username, la vostra lingua o l\u2019area geografica in cui vivete) al fine di ottimizzare e fornire funzionalit\u00e0 pi\u00f9 avanzate. Questi cookie possono inoltre essere utilizzati per fornire funzionalit\u00e0 da voi richieste come ad esempio la visualizzazione di un video o la possibilit\u00e0 di commentare sul sito. Queste informazioni raccolte dai cookie possono essere anonime e non devono tracciare la navigazione e le attivit\u00e0 dell\u2019utente su altri siti web. Vi preghiamo di considerare che alcune funzionalit\u00e0 del sito web potrebbero essere ridotte o non disponibili disabilitando i cookie. Nel dettaglio, gli utenti possono controllare, eliminare o impedire il caricamento di cookie agendo sui loro browser cos\u00ec come sotto indicato. Cookie di terze parti \u21b5 Google Analytics Il Sito impiega Google Analytics. Si tratta di un servizio di analisi web fornito da Google Inc. (\u201cGoogle\u201d) che utilizza cookie depositati sul computer dell\u2019utente per consentire analisi statistiche in forma aggregata in ordine all\u2019utilizzo del sito web visitato. I dati generati da Google Analytics sono conservati da Google cos\u00ec come indicato nella Informativa reperibile al seguente link \u2013 https://developers.google.com/analytics/devguides/collection/analyticsjs/cookie-usage Per consultare l\u2019informativa privacy della societ\u00e0 Google Inc., titolare autonomo del trattamento dei dati relativi al servizio Google Analytics, si rinvia al sito Internet. Google Fonts (What does using the Google Fonts API mean for the privacy of my users?) Questo sito web utilizza API di Google Fonts, l\u2019uso di Google Fonts non \u00e8 autenticato. Nessun cookie viene inviato dai visitatori del sito web all\u2019API di Google Fonts. Le richieste all\u2019API di Google Fonts vengono eseguite su domini specifici delle risorse, come fonts.googleapis.com o fonts.gstatic.com , in modo che le richieste per i caratteri siano separate e non contengano credenziali inviate a google.com mentre utilizzando altri servizi Google autenticati, come Gmail. Le richieste per le risorse CSS vengono memorizzate nella cache per 1 giorno. Per ulteriori informazioni sulle informazioni raccolte da Google e su come vengono utilizzate e protette, consulta le Norme sulla privacy di Google Widget Social Network \u21b5 I widget dei social network sono quei particolari \u201cpulsanti\u201d o \u201cblocchi\u201d presenti sul sito che raffigurano le icone di social network (esempio, Facebook e Twitter) e consentono agli utenti che stanno navigando di interagire con un \u201cclick\u201d direttamente con le piattaforme social. Si riportano i link ove l\u2019utente pu\u00f2 prendere visione dell\u2019informativa privacy relativa alla gestione dei dati da parte dei social cui i pulsanti e le widget rinviano. Nessuna informazione viene condivisa dal sito in cui il widget \u00e8 incorporato. Per maggiori informazioni, anche sulla disattivazione di tali cookie, si consiglia di consultare i seguenti link: Twitter Facebook LinkedIn Google Plus AddThis Pubblicit\u00e0 \u21b5 Sono presenti annunci di pubblicit\u00e0 etica di Read the Docs che rispetta la privacy degli utenti. La pubblicit\u00e0 etica \u00e8 la fonte princiaple del progetto Read the Docs . Come disabilitare i cookie mediante configurazione del browser \u21b5 Fermo restando quanto sopra indicato in ordine ai cookie strettamente necessari alla navigazione, l\u2019utente pu\u00f2 eliminare gli altri cookie attraverso la funzionalit\u00e0 a tal fine messa a disposizione dal Titolare tramite la presente informativa oppure direttamente tramite il proprio browser. Ciascun browser presenta procedure diverse per la gestione delle impostazioni. L\u2019utente pu\u00f2 ottenere istruzioni specifiche attraverso i link sottostanti. Google Chrome Mozilla Firefox Internet Explorer Safari Safari IOs Opera Google Chrome Eseguire il Browser Chrome Fare click sul men\u00f9 presente nella barra degli strumenti del browser a fianco della finestra di inserimento url per la navigazione Selezionare Impostazioni Fare clic su Mostra Impostazioni Avanzate Nella sezione \u201cPrivacy\u201d fare clic su bottone \u201cImpostazioni contenuti\u201c Nella sezione \u201cCookie\u201d \u00e8 possibile modificare le seguenti impostazioni relative ai cookie: Consentire il salvataggio dei dati in locale Modificare i dati locali solo fino alla chiusura del browser Impedire ai siti di impostare i cookie Bloccare i cookie di terze parti e i dati dei siti Gestire le eccezioni per alcuni siti internet Eliminazione di uno o tutti i cookie Mozilla Firefox - Eseguire il Browser Mozilla Firefox - Fare click sul men\u00f9 presente nella barra degli strumenti del browser a fianco della finestra di inserimento url per la navigazione - Selezionare Opzioni - Seleziona il pannello Privacy - Fare clic su Mostra Impostazioni Avanzate - Nella sezione \u201cPrivacy\u201d fare clic su bottone \u201cImpostazioni contenuti\u201c - Nella sezione \u201cTracciamento\u201d \u00e8 possibile modificare le seguenti impostazioni relative ai cookie: - Richiedi ai siti di non effettuare alcun tracciamento - Comunica ai siti la disponibilit\u00e0 ad essere tracciato - Non comunicare alcuna preferenza relativa al tracciamento dei dati personali - Dalla sezione \u201cCronologia\u201d \u00e8 possibile: - Abilitando \u201cUtilizza impostazioni personalizzate\u201d selezionare di accettare i cookie di terze parti (sempre, dai siti pi\u00f9 visitato o mai) e di conservarli per un periodo determinato (fino alla loro scadenza, alla chiusura di Firefox o di chiedere ogni volta) - Rimuovere i singoli cookie immagazzinati Internet Explorer Eseguire il Browser Internet Explorer Fare click sul pulsante Strumenti e scegliere Opzioni Internet Fare click sulla scheda Privacy e nella sezione Impostazioni modificare il dispositivo di scorrimento in funzione dell\u2019azione desiderata per i cookie: Bloccare tutti i cookie Consentire tutti i cookie Selezione dei siti da cui ottenere cookie: spostare il cursore in una posizione intermedia in modo da non bloccare o consentire tutti i cookie, premere quindi su Siti, nella casella Indirizzo Sito Web inserire un sito internet e quindi premere su Blocca o Consenti Safari Eseguire il Browser Safari Fare click su Safari, selezionare Preferenze e premere su Privacy Nella sezione Blocca Cookie specificare come Safari deve accettare i cookie dai siti internet. Per visionare quali siti hanno immagazzinato i cookie cliccare su Dettagli Safari IOs (Dispositivi Mobile) Eseguire il Browser Safari iOS Tocca su Impostazioni e poi Safari Tocca su Blocca Cookie e scegli tra le varie opzioni: \u201cMai\u201d, \u201cDi terze parti e inserzionisti\u201d o \u201cSempre\u201d Per cancellare tutti i cookie immagazzinati da Safari, tocca su Impostazioni, poi su Safari e infine suCancella Cookie e dati Opera Eseguire il Browser Opera Fare click sul Preferenze poi su Avanzate e infine su Cookie Selezionare una delle seguenti opzioni: Accetta tutti i cookie Accetta i cookie solo dal sito che si visita: i cookie di terze parti e che vengono inviati da un dominio diverso da quello che si sta visitando verranno rifiutati Non accettare mai i cookie: tutti i cookie non verranno mai salvati Come indicato, l\u2019Utente potr\u00e0 negare il consenso all\u2019installazione dei cookie per il mezzo del browser di navigazione in uso seguendo le istruzioni ivi fornite o accedendo al sito http://www.youronlinechoices.com/it/le-tue-scelte/. Per ulteriori informazioni su come cancellare e controllare i cookie archiviati sul computer, si prega di consultare http://www.allaboutcookies.org/manage-cookies/index. Non possiamo tuttavia garantire la correttezza e l\u2019aggiornamento delle informazioni ivi contenute.","title":"Informativa privacy estesa"},{"location":"privacy/#informativa-privacy-estesa","text":"In linea con la legislazione Europea, \u00e8 fondamentale che ogni utente del sito web comprenda cosa sono i cookie e per quale motivo vengono utilizzati, in modo che gli utenti stessi possano decidere consapevolmente se accettarne l\u2019utilizzo o no sui loro dispositivi. Un cookie \u00e8 un piccolo file di testo contenente un numero di identificazione univoco che viene trasferito dal sito web sul disco rigido del vostro computer attraverso un codice anonimo in grado di identificare il computer ma non l\u2019utente e di monitorare passivamente le vostre attivit\u00e0 sul sito. I cookie possono essere classificati in due categorie, in base alle loro funzionalit\u00e0: Cookie tecnici (di cui fanno parte i cookie sulle prestazioni e i cookie funzionali) Cookie profilanti (di cui fanno parte i cookie legati alle pubblicit\u00e0) Il sito utilizza solo il primo tipo di cookie, di tipo tecnico, per i quali non \u00e8 richiesto alcun consenso. Nel dettaglio vengono utlizzati le seguenti tipologie di cookie: Cookie strettamente necessari Questi cookie sono essenziali al fine di permettere la navigazione del sito web e l\u2019utilizzo delle sue funzionalit\u00e0, come ad esempio l\u2019accesso ad alcune aree protette. Senza questi cookie, alcune funzionalit\u00e0 richieste come ad esempio il login al sito o l\u2019inserimento degli articoli da parte dei collaboratori non potrebbero essere fornite. Cookie sulle prestazioni Questi cookie raccolgono informazioni su come gli utenti utilizzano il sito web, ad esempio quali pagine vengono visitate pi\u00f9 spesso e se gli utenti ricevono messaggi di errore da queste pagine. Questi cookie non raccolgono informazioni che identificano un visitatore specifico. Tutte le informazioni raccolte da questi cookie sono aggregate e quindi anonime. Vengono utilizzate unicamente per migliorare il funzionamento del sito web. Cookie di analisi di traffico anonimizzati Questo sito web utilizza inoltre i cookie di Google Analytics , un servizio di analisi web fornito da Google. Le informazioni generate dal cookie sull\u2019utilizzo del sito web da parte vostra (compreso il vostro indirizzo IP) verranno trasmesse e depositate presso i server di Google che utilizzer\u00e0 queste informazioni allo scopo di tracciare ed esaminare il vostro utilizzo del sito web, compilare report sulle attivit\u00e0 svolte sul sito web e fornire altri servizi relativi alle attivit\u00e0 e all\u2019utilizzo di Internet. I dati generati da Google Analytics sono conservati da Google cos\u00ec come indicato nella Informativa reperibile al seguente link. L\u2019utente pu\u00f2 disabilitare in modo selettivo l\u2019azione di Google Analytics installando sul proprio browser la componente di opt-out fornito da Google. Per disabilitare l\u2019azione di Google Analytics, si rinvia al link di seguito indicato: https://tools.google.com/dlpage/gaoptout Cookie funzionali Questi cookie consentono al sito web di ricordare le scelte che avete effettuato (come il vostro username, la vostra lingua o l\u2019area geografica in cui vivete) al fine di ottimizzare e fornire funzionalit\u00e0 pi\u00f9 avanzate. Questi cookie possono inoltre essere utilizzati per fornire funzionalit\u00e0 da voi richieste come ad esempio la visualizzazione di un video o la possibilit\u00e0 di commentare sul sito. Queste informazioni raccolte dai cookie possono essere anonime e non devono tracciare la navigazione e le attivit\u00e0 dell\u2019utente su altri siti web. Vi preghiamo di considerare che alcune funzionalit\u00e0 del sito web potrebbero essere ridotte o non disponibili disabilitando i cookie. Nel dettaglio, gli utenti possono controllare, eliminare o impedire il caricamento di cookie agendo sui loro browser cos\u00ec come sotto indicato.","title":"Informativa privacy estesa"},{"location":"privacy/#cookie-di-terze-parti","text":"Google Analytics Il Sito impiega Google Analytics. Si tratta di un servizio di analisi web fornito da Google Inc. (\u201cGoogle\u201d) che utilizza cookie depositati sul computer dell\u2019utente per consentire analisi statistiche in forma aggregata in ordine all\u2019utilizzo del sito web visitato. I dati generati da Google Analytics sono conservati da Google cos\u00ec come indicato nella Informativa reperibile al seguente link \u2013 https://developers.google.com/analytics/devguides/collection/analyticsjs/cookie-usage Per consultare l\u2019informativa privacy della societ\u00e0 Google Inc., titolare autonomo del trattamento dei dati relativi al servizio Google Analytics, si rinvia al sito Internet. Google Fonts (What does using the Google Fonts API mean for the privacy of my users?) Questo sito web utilizza API di Google Fonts, l\u2019uso di Google Fonts non \u00e8 autenticato. Nessun cookie viene inviato dai visitatori del sito web all\u2019API di Google Fonts. Le richieste all\u2019API di Google Fonts vengono eseguite su domini specifici delle risorse, come fonts.googleapis.com o fonts.gstatic.com , in modo che le richieste per i caratteri siano separate e non contengano credenziali inviate a google.com mentre utilizzando altri servizi Google autenticati, come Gmail. Le richieste per le risorse CSS vengono memorizzate nella cache per 1 giorno. Per ulteriori informazioni sulle informazioni raccolte da Google e su come vengono utilizzate e protette, consulta le Norme sulla privacy di Google","title":"Cookie di terze parti"},{"location":"privacy/#widget-social-network","text":"I widget dei social network sono quei particolari \u201cpulsanti\u201d o \u201cblocchi\u201d presenti sul sito che raffigurano le icone di social network (esempio, Facebook e Twitter) e consentono agli utenti che stanno navigando di interagire con un \u201cclick\u201d direttamente con le piattaforme social. Si riportano i link ove l\u2019utente pu\u00f2 prendere visione dell\u2019informativa privacy relativa alla gestione dei dati da parte dei social cui i pulsanti e le widget rinviano. Nessuna informazione viene condivisa dal sito in cui il widget \u00e8 incorporato. Per maggiori informazioni, anche sulla disattivazione di tali cookie, si consiglia di consultare i seguenti link: Twitter Facebook LinkedIn Google Plus AddThis","title":"Widget Social Network"},{"location":"privacy/#pubblicita","text":"Sono presenti annunci di pubblicit\u00e0 etica di Read the Docs che rispetta la privacy degli utenti. La pubblicit\u00e0 etica \u00e8 la fonte princiaple del progetto Read the Docs .","title":"Pubblicit\u00e0"},{"location":"privacy/#come-disabilitare-i-cookie-mediante-configurazione-del-browser","text":"Fermo restando quanto sopra indicato in ordine ai cookie strettamente necessari alla navigazione, l\u2019utente pu\u00f2 eliminare gli altri cookie attraverso la funzionalit\u00e0 a tal fine messa a disposizione dal Titolare tramite la presente informativa oppure direttamente tramite il proprio browser. Ciascun browser presenta procedure diverse per la gestione delle impostazioni. L\u2019utente pu\u00f2 ottenere istruzioni specifiche attraverso i link sottostanti. Google Chrome Mozilla Firefox Internet Explorer Safari Safari IOs Opera Google Chrome Eseguire il Browser Chrome Fare click sul men\u00f9 presente nella barra degli strumenti del browser a fianco della finestra di inserimento url per la navigazione Selezionare Impostazioni Fare clic su Mostra Impostazioni Avanzate Nella sezione \u201cPrivacy\u201d fare clic su bottone \u201cImpostazioni contenuti\u201c Nella sezione \u201cCookie\u201d \u00e8 possibile modificare le seguenti impostazioni relative ai cookie: Consentire il salvataggio dei dati in locale Modificare i dati locali solo fino alla chiusura del browser Impedire ai siti di impostare i cookie Bloccare i cookie di terze parti e i dati dei siti Gestire le eccezioni per alcuni siti internet Eliminazione di uno o tutti i cookie Mozilla Firefox - Eseguire il Browser Mozilla Firefox - Fare click sul men\u00f9 presente nella barra degli strumenti del browser a fianco della finestra di inserimento url per la navigazione - Selezionare Opzioni - Seleziona il pannello Privacy - Fare clic su Mostra Impostazioni Avanzate - Nella sezione \u201cPrivacy\u201d fare clic su bottone \u201cImpostazioni contenuti\u201c - Nella sezione \u201cTracciamento\u201d \u00e8 possibile modificare le seguenti impostazioni relative ai cookie: - Richiedi ai siti di non effettuare alcun tracciamento - Comunica ai siti la disponibilit\u00e0 ad essere tracciato - Non comunicare alcuna preferenza relativa al tracciamento dei dati personali - Dalla sezione \u201cCronologia\u201d \u00e8 possibile: - Abilitando \u201cUtilizza impostazioni personalizzate\u201d selezionare di accettare i cookie di terze parti (sempre, dai siti pi\u00f9 visitato o mai) e di conservarli per un periodo determinato (fino alla loro scadenza, alla chiusura di Firefox o di chiedere ogni volta) - Rimuovere i singoli cookie immagazzinati Internet Explorer Eseguire il Browser Internet Explorer Fare click sul pulsante Strumenti e scegliere Opzioni Internet Fare click sulla scheda Privacy e nella sezione Impostazioni modificare il dispositivo di scorrimento in funzione dell\u2019azione desiderata per i cookie: Bloccare tutti i cookie Consentire tutti i cookie Selezione dei siti da cui ottenere cookie: spostare il cursore in una posizione intermedia in modo da non bloccare o consentire tutti i cookie, premere quindi su Siti, nella casella Indirizzo Sito Web inserire un sito internet e quindi premere su Blocca o Consenti Safari Eseguire il Browser Safari Fare click su Safari, selezionare Preferenze e premere su Privacy Nella sezione Blocca Cookie specificare come Safari deve accettare i cookie dai siti internet. Per visionare quali siti hanno immagazzinato i cookie cliccare su Dettagli Safari IOs (Dispositivi Mobile) Eseguire il Browser Safari iOS Tocca su Impostazioni e poi Safari Tocca su Blocca Cookie e scegli tra le varie opzioni: \u201cMai\u201d, \u201cDi terze parti e inserzionisti\u201d o \u201cSempre\u201d Per cancellare tutti i cookie immagazzinati da Safari, tocca su Impostazioni, poi su Safari e infine suCancella Cookie e dati Opera Eseguire il Browser Opera Fare click sul Preferenze poi su Avanzate e infine su Cookie Selezionare una delle seguenti opzioni: Accetta tutti i cookie Accetta i cookie solo dal sito che si visita: i cookie di terze parti e che vengono inviati da un dominio diverso da quello che si sta visitando verranno rifiutati Non accettare mai i cookie: tutti i cookie non verranno mai salvati Come indicato, l\u2019Utente potr\u00e0 negare il consenso all\u2019installazione dei cookie per il mezzo del browser di navigazione in uso seguendo le istruzioni ivi fornite o accedendo al sito http://www.youronlinechoices.com/it/le-tue-scelte/. Per ulteriori informazioni su come cancellare e controllare i cookie archiviati sul computer, si prega di consultare http://www.allaboutcookies.org/manage-cookies/index. Non possiamo tuttavia garantire la correttezza e l\u2019aggiornamento delle informazioni ivi contenute.","title":"Come disabilitare i cookie mediante configurazione del browser"},{"location":"pull-request/","tags":["pull-request","novit\u00e0"],"text":"Pull Request \u21b5 In questa pagina l'elenco delle richieste di funzionalit\u00e0 legate al field calculator di QGIS, inoltrate da Salvatore Fiandaca nel repository ufficiale di QGIS . Realizzata \u21b5 >=QGIS 3.12 Permette di salvare le espressioni utente personalizzate nel profilo utente. Introdotta a partire da QGIS 3.12 Bucaresti https://github.com/qgis/QGIS/pull/33437 Pull request : https://issues.qgis.org/issues/20658 QEP : https://github.com/qgis/QGIS-Enhancement-Proposals/issues/135 raccolta fondi : https://pigrecoinfinito.com/2019/12/14/field-calc-di-qgis-save-expressions-crowdfunding/ Blog post : https://pigrecoinfinito.com/2019/12/31/qgis-espressioni-utente/ Realizzata \u21b5 >=QGIS 3.24 Permette di visualizzare gli attributi di un layer diverso da quello corrente. \u00c8 molto utile quando di creano espressioni che richiamano altri layer, per esempio usando get_feature , get_feature_by_id , aggregate e le funzioni di overlay_* . https://github.com/qgis/QGIS/issues/37544 Feature request : https://github.com/qgis/QGIS/issues/37544 Pull request : https://github.com/qgis/QGIS/pull/46505 Blog post : https://pigrecoinfinito.com/2021/12/16/campi-e-valori-anche-per-il-gruppo-layer-mappa-del-field-calc-di-qgis/ Finanziata da ARPA Piemonte Da realizzata \u21b5 Implementa il Natural sorting come parametro opzionale della funzione array_sort https://github.com/qgis/QGIS/issues/46850","title":"Pull Request"},{"location":"pull-request/#pull-request","text":"In questa pagina l'elenco delle richieste di funzionalit\u00e0 legate al field calculator di QGIS, inoltrate da Salvatore Fiandaca nel repository ufficiale di QGIS .","title":"Pull Request"},{"location":"pull-request/#realizzata","text":">=QGIS 3.12 Permette di salvare le espressioni utente personalizzate nel profilo utente. Introdotta a partire da QGIS 3.12 Bucaresti https://github.com/qgis/QGIS/pull/33437 Pull request : https://issues.qgis.org/issues/20658 QEP : https://github.com/qgis/QGIS-Enhancement-Proposals/issues/135 raccolta fondi : https://pigrecoinfinito.com/2019/12/14/field-calc-di-qgis-save-expressions-crowdfunding/ Blog post : https://pigrecoinfinito.com/2019/12/31/qgis-espressioni-utente/","title":"Realizzata"},{"location":"pull-request/#realizzata_1","text":">=QGIS 3.24 Permette di visualizzare gli attributi di un layer diverso da quello corrente. \u00c8 molto utile quando di creano espressioni che richiamano altri layer, per esempio usando get_feature , get_feature_by_id , aggregate e le funzioni di overlay_* . https://github.com/qgis/QGIS/issues/37544 Feature request : https://github.com/qgis/QGIS/issues/37544 Pull request : https://github.com/qgis/QGIS/pull/46505 Blog post : https://pigrecoinfinito.com/2021/12/16/campi-e-valori-anche-per-il-gruppo-layer-mappa-del-field-calc-di-qgis/ Finanziata da ARPA Piemonte","title":"Realizzata"},{"location":"pull-request/#da-realizzata","text":"Implementa il Natural sorting come parametro opzionale della funzione array_sort https://github.com/qgis/QGIS/issues/46850","title":"Da realizzata"},{"location":"release/","tags":["versione","release"],"text":"Release \u21b5 In questa sezione le varie versioni nel tempo. data release descrizione logo settembre 2021 #HfcQGIS v2 Realizzato con MkDocs e tema Material for MkDocs luglio 2018 #HfcQGIS v1 Realizzato con RTD e tema Sphinx Theme","title":"Release"},{"location":"release/#release","text":"In questa sezione le varie versioni nel tempo. data release descrizione logo settembre 2021 #HfcQGIS v2 Realizzato con MkDocs e tema Material for MkDocs luglio 2018 #HfcQGIS v1 Realizzato con RTD e tema Sphinx Theme","title":"Release"},{"location":"risorse/","tags":["risorse","software","plugin"],"text":"Principali risorse usate per realizzare il sito \u21b5 Software \u21b5 Visual Studio Code Notepad ++ PicPick GIMP (GNU Image Manipulation Program) Inkscape Static site generator \u21b5 MkDocs Material for MkDocs Plugin \u21b5 mkdocs-macros PyMdown Extensions MkDocs RSS plugin GDPR compliance with the jQuery EU Cookie Law plugin PrognRoll SimpleLightbox","title":"Risorse"},{"location":"risorse/#principali-risorse-usate-per-realizzare-il-sito","text":"","title":"Principali risorse usate per realizzare il sito"},{"location":"risorse/#software","text":"Visual Studio Code Notepad ++ PicPick GIMP (GNU Image Manipulation Program) Inkscape","title":"Software"},{"location":"risorse/#static-site-generator","text":"MkDocs Material for MkDocs","title":"Static site generator"},{"location":"risorse/#plugin","text":"mkdocs-macros PyMdown Extensions MkDocs RSS plugin GDPR compliance with the jQuery EU Cookie Law plugin PrognRoll SimpleLightbox","title":"Plugin"},{"location":"sitografia_field_calc/","tags":["blog","post","pigrecoinfinito"],"text":"Sitografia sul Field Calc \u21b5 Questa sezione raccoglie alcuni post a tema sul Field Calc e le espressioni in generale. nro descrizione link 1 l'importanza del join tabellare fatto al volo https://pigrecoinfinito.com/2020/09/21/qgis-join-tabellare-al-volo/ 2 calcolo distanza tra punti e linee https://pigrecoinfinito.com/2016/10/28/qgis-calcolare-distanza-tra-punti-e-linea-usando-solo-il-calcolatore-di-campi/ 3 esempio su come aggiornare una geometria https://pigrecoinfinito.com/2016/04/05/qgis-calcolatore-di-campi/ 4 un esempio di uso delle regex https://pigrecoinfinito.com/2021/02/01/qgis-e-le-regex-un-caso-semplice/ 5 Tweet https://twitter.com/totofiandaca/status/1393927693855510533 6 QGISe la selezione con aggregazione https://medium.com/@salvatorefiandaca/qgis-e-la-selezione-con-aggregazione-dcb1c709d676 7 QGIS e le funzioni di aggregazione https://medium.com/@salvatorefiandaca/qgis-3-0-funzioni-di-aggregazione-9c8c389985c5 8 Tweet SpatialAnalysis Challenge https://twitter.com/totofiandaca/status/1430108211068219416 9 QGIS: generare un atlante basato su campi https://medium.com/tantotanto/qgis-generare-un-atlante-basato-su-campi-4eeff34b3900 10 Espressioni usate per il catasto https://github.com/pigreco/workshop-estate-gis-2021 11 Espressioni utilizzate per analisi COVID19 https://github.com/pigreco/workshop-estate-gis-2020 12 Espressioni per creare sezioni trasversali https://pigrecoinfinito.com/2020/01/10/qgis-creare-sezioni-trasversali-di-un-fiume-espressioni/ 13 Espressioni utente https://pigrecoinfinito.com/2019/12/31/qgis-espressioni-utente/ 14 Espressioni per pulizia dati https://pigrecoinfinito.com/2019/02/18/qgis-le-espressioni-regolari-per-la-pulizia-dei-dati/ 15 Espressioni per interpolare dati https://pigrecoinfinito.com/2021/06/15/interpolare-i-valori-m-dei-vertici-di-una-linea/ 16 Espressioni nel compositore di stampe https://pigrecoinfinito.com/2021/03/03/qgis-intestazione-e-pie-di-pagina-negli-atlas/ 17 Espressioni e Array https://pigrecoinfinito.com/2020/05/20/elenco-ordinato-di-comuni-attraversati-da-un-itinerario-domodossola-aosta/ 18 Espressioni e Varaibili https://pigrecoinfinito.com/2020/04/14/qgis-grafici-geoplot-usando-solo-il-geometry-generator/ 19 Espressioni e Array su Tabella Attributi https://pigrecoinfinito.com/2020/01/23/qgis-tabella-attributi-ordinare-usando-gli-array/ 20 Espressioni e condizioni https://pigrecoinfinito.com/2020/03/02/qgis-etichettatura-bustrofedica/ 21 QGIS e il formato HStore https://pigrecoinfinito.com/2021/10/12/qgis-e-il-formato-hstore/ 22 QGIS E LO SPATIAL JOIN CONDIZIONATO https://pigrecoinfinito.com/2021/11/01/qgis-e-lo-spatial-join-condizionato/","title":"Sitografia"},{"location":"sitografia_field_calc/#sitografia-sul-field-calc","text":"Questa sezione raccoglie alcuni post a tema sul Field Calc e le espressioni in generale. nro descrizione link 1 l'importanza del join tabellare fatto al volo https://pigrecoinfinito.com/2020/09/21/qgis-join-tabellare-al-volo/ 2 calcolo distanza tra punti e linee https://pigrecoinfinito.com/2016/10/28/qgis-calcolare-distanza-tra-punti-e-linea-usando-solo-il-calcolatore-di-campi/ 3 esempio su come aggiornare una geometria https://pigrecoinfinito.com/2016/04/05/qgis-calcolatore-di-campi/ 4 un esempio di uso delle regex https://pigrecoinfinito.com/2021/02/01/qgis-e-le-regex-un-caso-semplice/ 5 Tweet https://twitter.com/totofiandaca/status/1393927693855510533 6 QGISe la selezione con aggregazione https://medium.com/@salvatorefiandaca/qgis-e-la-selezione-con-aggregazione-dcb1c709d676 7 QGIS e le funzioni di aggregazione https://medium.com/@salvatorefiandaca/qgis-3-0-funzioni-di-aggregazione-9c8c389985c5 8 Tweet SpatialAnalysis Challenge https://twitter.com/totofiandaca/status/1430108211068219416 9 QGIS: generare un atlante basato su campi https://medium.com/tantotanto/qgis-generare-un-atlante-basato-su-campi-4eeff34b3900 10 Espressioni usate per il catasto https://github.com/pigreco/workshop-estate-gis-2021 11 Espressioni utilizzate per analisi COVID19 https://github.com/pigreco/workshop-estate-gis-2020 12 Espressioni per creare sezioni trasversali https://pigrecoinfinito.com/2020/01/10/qgis-creare-sezioni-trasversali-di-un-fiume-espressioni/ 13 Espressioni utente https://pigrecoinfinito.com/2019/12/31/qgis-espressioni-utente/ 14 Espressioni per pulizia dati https://pigrecoinfinito.com/2019/02/18/qgis-le-espressioni-regolari-per-la-pulizia-dei-dati/ 15 Espressioni per interpolare dati https://pigrecoinfinito.com/2021/06/15/interpolare-i-valori-m-dei-vertici-di-una-linea/ 16 Espressioni nel compositore di stampe https://pigrecoinfinito.com/2021/03/03/qgis-intestazione-e-pie-di-pagina-negli-atlas/ 17 Espressioni e Array https://pigrecoinfinito.com/2020/05/20/elenco-ordinato-di-comuni-attraversati-da-un-itinerario-domodossola-aosta/ 18 Espressioni e Varaibili https://pigrecoinfinito.com/2020/04/14/qgis-grafici-geoplot-usando-solo-il-geometry-generator/ 19 Espressioni e Array su Tabella Attributi https://pigrecoinfinito.com/2020/01/23/qgis-tabella-attributi-ordinare-usando-gli-array/ 20 Espressioni e condizioni https://pigrecoinfinito.com/2020/03/02/qgis-etichettatura-bustrofedica/ 21 QGIS e il formato HStore https://pigrecoinfinito.com/2021/10/12/qgis-e-il-formato-hstore/ 22 QGIS E LO SPATIAL JOIN CONDIZIONATO https://pigrecoinfinito.com/2021/11/01/qgis-e-lo-spatial-join-condizionato/","title":"Sitografia sul Field Calc"},{"location":"supporter/","tags":["supporter"],"text":"Supporter \u21b5 Questa pagina raccoglie i nominativi delle persone che hanno contribuito alla guida in termini finanziari o di conoscenza : Contributi finanziari \u21b5 nro contributo luogo messaggio Versione 1 Enrico Bertonati Italia Come sempre ottimo lavoro Doc!!! Saluti; HfcQGIS Old 2 Carlo Tinalli Italia Un piccolo contributo, in quanto ritengo che la rete non sia una fonte da cui attingere tutto gratis.; HfcQGIS Old 3 Andrea Bortoluzzi Italia W Qgis e w Tot\u00f2!; HfcQGIS Old 4 Federico Gianoli Italia Grazie per quello che fai per la comunit\u00e0 di QGIS. Il mio \u00e8, purtroppo, solo un gesto simbolico per dimostrarti che apprezzo moltissimo il tuo lavoro ed i tuoi sforzi per la comunit\u00e0.; HfcQGIS Old 5 Giacomo Amerio Italia -- HfcQGIS Old 6 Luca Bellami Messico un contributo davvero piccolo per l'enorme lavoro che fai per la comunit\u00e1! un abbraccio Luca HfcQGIS Old 7 Roberto Montagnetti Inghilterra Un piccolo modesto supporto alle attivit\u00e0 di Pigrecoinfinito HfcQGIS Old 8 Giovanni Gullo Italia \"Complimenti Tot\u00f2. Un saluto, Giovanni Gullo\" HfcQGIS Old 9 Federico Gianoli Italia Per il tuo progetto HFC, fonte di ispirazione (e un po' di invidia). Grazie HfcQGIS v2 Contributi in conoscenza \u21b5 tramite esercizi, pull request e funzioni personalizzate nro contributo Luogo sito sezione Versione 1 Stefano Campus Italia PR update funzione concat() HfcQGIS Old 2 Ludovico Frate Italia lezionigis.it es: 11 - Calcolo della core area (area interna al poligono al netto di un'area di buffer interna ) HfcQGIS Old 3 Martina Savarese Italia es: 17 - Contare i punti nel poligono per categorie HfcQGIS Old 4 Giulio Fattori Italia Gruppo Custom HfcQGIS Old 5 Matteo Ghetta Italia Faunalia add_col_z HfcQGIS Old 6 Valerio Pinna Italia es: 35 , es: 41 , es: 42 HfcQGIS Old","title":"Supporter"},{"location":"supporter/#supporter","text":"Questa pagina raccoglie i nominativi delle persone che hanno contribuito alla guida in termini finanziari o di conoscenza :","title":"Supporter"},{"location":"supporter/#contributi-finanziari","text":"nro contributo luogo messaggio Versione 1 Enrico Bertonati Italia Come sempre ottimo lavoro Doc!!! Saluti; HfcQGIS Old 2 Carlo Tinalli Italia Un piccolo contributo, in quanto ritengo che la rete non sia una fonte da cui attingere tutto gratis.; HfcQGIS Old 3 Andrea Bortoluzzi Italia W Qgis e w Tot\u00f2!; HfcQGIS Old 4 Federico Gianoli Italia Grazie per quello che fai per la comunit\u00e0 di QGIS. Il mio \u00e8, purtroppo, solo un gesto simbolico per dimostrarti che apprezzo moltissimo il tuo lavoro ed i tuoi sforzi per la comunit\u00e0.; HfcQGIS Old 5 Giacomo Amerio Italia -- HfcQGIS Old 6 Luca Bellami Messico un contributo davvero piccolo per l'enorme lavoro che fai per la comunit\u00e1! un abbraccio Luca HfcQGIS Old 7 Roberto Montagnetti Inghilterra Un piccolo modesto supporto alle attivit\u00e0 di Pigrecoinfinito HfcQGIS Old 8 Giovanni Gullo Italia \"Complimenti Tot\u00f2. Un saluto, Giovanni Gullo\" HfcQGIS Old 9 Federico Gianoli Italia Per il tuo progetto HFC, fonte di ispirazione (e un po' di invidia). Grazie HfcQGIS v2","title":"Contributi finanziari"},{"location":"supporter/#contributi-in-conoscenza","text":"tramite esercizi, pull request e funzioni personalizzate nro contributo Luogo sito sezione Versione 1 Stefano Campus Italia PR update funzione concat() HfcQGIS Old 2 Ludovico Frate Italia lezionigis.it es: 11 - Calcolo della core area (area interna al poligono al netto di un'area di buffer interna ) HfcQGIS Old 3 Martina Savarese Italia es: 17 - Contare i punti nel poligono per categorie HfcQGIS Old 4 Giulio Fattori Italia Gruppo Custom HfcQGIS Old 5 Matteo Ghetta Italia Faunalia add_col_z HfcQGIS Old 6 Valerio Pinna Italia es: 35 , es: 41 , es: 42 HfcQGIS Old","title":"Contributi in conoscenza"},{"location":"tags/","text":"\ud83c\udff7\ufe0f Tags \u21b5 Abstract Elenco di tag utilizzati per la ricerca adiacenza \u21b5 Aggregare elementi adiacenti aggiornare \u21b5 Aggiornare geometria aggregare \u21b5 ID univoco per gruppi consecutivi Aggrega con SR differenti Aggregare elementi adiacenti Aggrega valori di una tabella Calcolo area poligoni nel reticolo Conta i punti nel poligono Conteggio valori Elenco comuni Elenco ordinato di Comuni Linea minima distanza tra due punti Nascondi etichette Selezione Selezione ultimo record per data Somma lunghezze nel poligono Spatial join Crea Tema unico contorno per poligoni adiacenti area \u21b5 Campo area Calcolo area poligoni nel reticolo Core area Livello acqua Numerazione poligoni in base a relazione spaziale Selezione Selezionare primi n valori array \u21b5 ID univoco per gruppi consecutivi Creare campo somma cumulativa Aggrega valori di una tabella Array Natural sorting Assegnare categoria prevalente Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Conta punti nel poligono e per data Conteggio valori Conteggio caratteri diversi Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni Etichette formattate diversi stili Finestra temporale Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Layer pi\u00f9 vicino Lunghezze segmenti di un poligono Nome del campo con massimo valore Media e stdev tra campi Numerazione poligoni in base a relazione spaziale Prende attributo da layer sovrapposto Segmento minimo facciata strada Selezionare vertici duplicati Seleziona primo record per ogni duplicato Selezione ultimo record per data Tracciare un grafico Trova valore atlante \u21b5 Atlante con righe tabella in verticale attributi \u21b5 Creare campo somma cumulativa Campo area Campo quota z Campi coordinate Aggiornare geometria Prelevare attributi da layer pi\u00f9 vicini Calcolo incrementi giornalieri Campo coord in lat lon Confrontare campi tabella attributi Elimina duplicati con condizione Estrarre un campo da un attributo HStore Nome del campo con massimo valore Media e stdev tra campi Nascondi etichette Seleziona primo record per ogni duplicato Selezionare record orfani in una relazione padre-figlio Trova valore blob \u21b5 Gpkg blob immagini blog \u21b5 Sitografia calamita \u21b5 Spostare i punti dentro i poligoni in base agli attributi campi \u21b5 Campo virtuale Campo coord in lat lon Nome del campo con massimo valore Media e stdev tra campi Concetti tabella attributi caratteri \u21b5 Conteggio caratteri diversi Legenda Etichettare con apici Ricercare caratteri speciali categoria \u21b5 Assegnare categoria prevalente centroidi \u21b5 Centroidi linee curve Rotazione pattern lineare Segmento minimo facciata strada Tracciare un grafico Unica label changelog \u21b5 Changelog chiave-valore \u21b5 Atlante con righe tabella in verticale Prelevare attributi da layer pi\u00f9 vicini Estrarre un campo da un attributo HStore Etichettare con chiave-valore Nome del campo con massimo valore Media e stdev tra campi Trova valore classificare \u21b5 Prelevare attributi da layer pi\u00f9 vicini Conta punti nel poligono per categorie concetti \u21b5 Concetti Field Calc Editor delle funzioni Concetti tabella attributi condizioni \u21b5 Creare campo somma cumulativa Calcolo incrementi giornalieri Distanze progressive chilometriche Elimina duplicati con condizione Legenda Fill-down con QGIS Generalizzare isoipse Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Conta punti nel poligono per categorie Tematizzare confrontare \u21b5 Confrontare campi tabella attributi contare \u21b5 Conta i punti nel poligono Conta punti nel poligono e per data Conteggio valori Conteggio caratteri diversi Conta punti nel poligono per categorie Selezionare vertici duplicati contorni \u21b5 Crea Tema unico contorno per poligoni adiacenti coordinate \u21b5 Campo quota z Campi coordinate Campo coord in lat lon Decimali delle coordinate come apici corso \u21b5 Corso di formazione avanzato - IN LAVORAZIONE cronometro \u21b5 Crea Cronometro nella Map Canvas csv \u21b5 Provaci tu Aggrega valori di una tabella Centroidi linee curve Prelevare attributi da layer pi\u00f9 vicini Finestra temporale Tracciare un grafico cumulativa \u21b5 Creare campo somma cumulativa custom \u21b5 Editor delle funzioni data \u21b5 Conta punti nel poligono e per data Lavorare con le Ore decimali \u21b5 Decimali delle coordinate come apici decorazioni \u21b5 Crea Cronometro nella Map Canvas dinamico \u21b5 Campo virtuale domande \u21b5 gis-stackexchange duplicati \u21b5 Elimina duplicati con condizione Seleziona primo record per ogni duplicato epsg \u21b5 Conversione esercizi \u21b5 Provaci tu estrarre \u21b5 Estrarre un campo da un attributo HStore etichette \u21b5 Conversione Decimali delle coordinate come apici Etichettare con chiave-valore Etichettare con apici Etichettare itinerario con elenco ordinato Comuni Etichettare Etichette formattate diversi stili Finestra temporale Nascondi etichette Selezionare primi n valori Sposta etichette Unica label fieldCalc \u21b5 Concetti Field Calc Editor delle funzioni Calcolatore di Campi Calcolatore Campi in Processing Corso di formazione avanzato - IN LAVORAZIONE Campo virtuale fill-down \u21b5 Fill-down con QGIS filtro \u21b5 Drilldown form multiple form \u21b5 Drilldown form multiple formattare \u21b5 Distanze progressive chilometriche Etichettare Etichette formattate diversi stili formazione \u21b5 Corso di formazione avanzato - IN LAVORAZIONE geopackage \u21b5 Gpkg blob immagini gis-stackexchange \u21b5 gis-stackexchange gms \u21b5 Conversione grafico \u21b5 Tracciare un grafico gruppo \u21b5 Gruppo Espressioni Utente Aggrega Array Campi e valori Colore Condizioni Conversioni Corrispondenza fuzzy Custom Data ora Espressioni utente File e percorsi Form Generale Geometria Layer Mappa Layout Maps Matematica Operatori Raster Recente Record e attributi Relazioni Stringhe di testo gui \u21b5 Traduzione Interfaccia Field Calc hub-line \u21b5 Creare Hub lines id \u21b5 ID univoco per gruppi consecutivi immagini \u21b5 Gpkg blob immagini incidenza \u21b5 Finestra temporale incrementi \u21b5 Calcolo incrementi giornalieri interfaccia \u21b5 Traduzione Interfaccia Field Calc itinerari \u21b5 Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni layer \u21b5 Prelevare attributi da layer pi\u00f9 vicini linee \u21b5 Aggiungere punto a linea Centroidi linee curve Generalizzare isoipse Geometrie vicine con condizione Creare Hub lines Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Lunghezze segmenti di un poligono Rotazione pattern lineare Rotazione simbolo parallelo ad una linea Segmento minimo facciata strada Sposta etichette Spostare i punti dentro i poligoni in base agli attributi Tracciare un grafico Tracciare puntia distanza prefissata lungo una linea moduli \u21b5 Drilldown form multiple natural-sorting \u21b5 Array Natural sorting news \u21b5 Parlano di noi novit\u00e0 \u21b5 Changelog Pull Request QGIS 3.0 | 23/02/2018 QGIS 3.10 | 25/10/2019 QGIS 3.12 | 21/02/2020 QGIS 3.14 | 19/06/2020 QGIS 3.16 | 23/10/2020 QGIS 3.18 | 22/02/2021 QGIS 3.2 | 22/06/2018 QGIS 3.20 | 21/06/2021 QGIS 3.4 | 26/10/2018 QGIS 3.6 | 22/02/2019 QGIS 3.8 | 21/06/2019 operatori \u21b5 Operatori interfaccia ora \u21b5 Lavorare con le Ore ordinare \u21b5 Array Natural sorting Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni overlay \u21b5 Prelevare attributi da layer pi\u00f9 vicini Geometrie vicine con condizione Layer pi\u00f9 vicino Distanza minima tra due vettori Prende attributo da layer sovrapposto Rotazione simbolo parallelo ad una linea Segmento minimo facciata strada Seleziona poligoni con max area sovrapposta Selezionare punti pi\u00f9 vicini ad un punto selezionato parlano \u21b5 Parlano di noi pigrecoinfinito \u21b5 Sitografia plugin \u21b5 Risorse poligoni \u21b5 Calcolo area poligoni nel reticolo Conta i punti nel poligono Conta punti nel poligono e per data Core area Numerazione poligoni in base a relazione spaziale Prende attributo da layer sovrapposto Conta punti nel poligono per categorie Seleziona poligoni con max area sovrapposta Selezionare primi n valori Somma lunghezze nel poligono Spostare i punti dentro i poligoni in base agli attributi Unica label post \u21b5 Sitografia prevalenza \u21b5 Assegnare categoria prevalente processing \u21b5 Calcolatore Campi in Processing progressive \u21b5 Distanze progressive chilometriche propedeutico \u21b5 Concetti Field Calc Editor delle funzioni Calcolatore di Campi Calcolatore Campi in Processing Gruppo Espressioni Utente Interfaccia Field Calc Operatori interfaccia Concetti tabella attributi prossimit\u00e0 \u21b5 Prelevare attributi da layer pi\u00f9 vicini Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Prende attributo da layer sovrapposto Rotazione simbolo parallelo ad una linea Selezionare punti pi\u00f9 vicini ad un punto selezionato prova \u21b5 Provaci tu pull-request \u21b5 Pull Request punti \u21b5 Aggiungere punto a linea Prelevare attributi da layer pi\u00f9 vicini Conta i punti nel poligono Conta punti nel poligono e per data Etichettare Livello acqua Conta punti nel poligono per categorie Selezionare punti pi\u00f9 vicini ad un punto selezionato Spostare i punti dentro i poligoni in base agli attributi Tematizzare Tracciare un grafico Tracciare puntia distanza prefissata lungo una linea Unica label quota \u21b5 Campo quota z record \u21b5 Selezione ultimo record per data regex \u21b5 Array Natural sorting Campo coord in lat lon Conteggio caratteri diversi Decimali delle coordinate come apici Eliminare testo tra parentesi Legenda Lavorare con le Ore Ricercare caratteri speciali relazioni \u21b5 Drilldown form multiple Geometria pi\u00f9 vicina e filtro condizionato Numerazione poligoni in base a relazione spaziale Selezionare record orfani in una relazione padre-figlio Tracciare un grafico release \u21b5 Release reticolo \u21b5 Calcolo area poligoni nel reticolo ricerca \u21b5 Ricercare caratteri speciali rinomina \u21b5 Concetti tabella attributi risorse \u21b5 Risorse risposte \u21b5 gis-stackexchange selezionare \u21b5 Elimina duplicati con condizione Selezionare vertici duplicati Selezione Seleziona poligoni con max area sovrapposta Selezionare primi n valori Seleziona primo record per ogni duplicato Selezionare punti pi\u00f9 vicini ad un punto selezionato Selezionare record orfani in una relazione padre-figlio Selezione ultimo record per data Trova valore sessadecimale \u21b5 Conversione sessagesimale \u21b5 Conversione shortest-line \u21b5 Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Rotazione pattern lineare Segmento minimo facciata strada software \u21b5 Risorse sovrapposizione \u21b5 Prende attributo da layer sovrapposto spatial-join \u21b5 Numerazione poligoni in base a relazione spaziale Spatial join sr \u21b5 Aggrega con SR differenti stile \u21b5 Crea Tema unico contorno per poligoni adiacenti supporter \u21b5 Supporter tabella \u21b5 Campo quota z Campi coordinate Aggrega valori di una tabella Array Natural sorting Assegnare categoria prevalente Atlante con righe tabella in verticale Prelevare attributi da layer pi\u00f9 vicini Calcolo incrementi giornalieri Campo coord in lat lon Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Conteggio valori Conteggio caratteri diversi Elenco comuni Elenco ordinato di Comuni Elimina duplicati con condizione Estrarre un campo da un attributo HStore Fill-down con QGIS Seleziona primo record per ogni duplicato Selezionare record orfani in una relazione padre-figlio Trova valore Concetti tabella attributi tempo \u21b5 Crea Cronometro nella Map Canvas test \u21b5 Provaci tu testo \u21b5 Eliminare testo tra parentesi Etichette formattate diversi stili traduzione \u21b5 Traduzione transform \u21b5 Aggrega con SR differenti Somma lunghezze nel poligono univoco \u21b5 ID univoco per gruppi consecutivi valori \u21b5 Aggrega valori di una tabella Array Natural sorting Atlante con righe tabella in verticale Calcolo incrementi giornalieri Centroidi linee curve Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Elenco comuni Eliminare testo tra parentesi Legenda Estrarre un campo da un attributo HStore Etichettare con chiave-valore Etichettare itinerario con elenco ordinato Comuni versione \u21b5 Release Traduzione vertici \u21b5 Selezionare vertici duplicati vestizione \u21b5 Generalizzare isoipse Livello acqua Rotazione pattern lineare Tematizzare virtuale \u21b5 Campo virtuale wkt \u21b5 Centroidi linee curve Creare Hub lines x \u21b5 Campi coordinate Decimali delle coordinate come apici Etichettare Livello acqua Sposta etichette Unica label y \u21b5 Campi coordinate Decimali delle coordinate come apici Etichettare Livello acqua Sposta etichette Unica label z \u21b5 Campo quota z Etichettare","title":"\ud83c\udff7\ufe0f Tags"},{"location":"tags/#tags","text":"Abstract Elenco di tag utilizzati per la ricerca","title":"\ud83c\udff7\ufe0f Tags"},{"location":"tags/#adiacenza","text":"Aggregare elementi adiacenti","title":"adiacenza"},{"location":"tags/#aggiornare","text":"Aggiornare geometria","title":"aggiornare"},{"location":"tags/#aggregare","text":"ID univoco per gruppi consecutivi Aggrega con SR differenti Aggregare elementi adiacenti Aggrega valori di una tabella Calcolo area poligoni nel reticolo Conta i punti nel poligono Conteggio valori Elenco comuni Elenco ordinato di Comuni Linea minima distanza tra due punti Nascondi etichette Selezione Selezione ultimo record per data Somma lunghezze nel poligono Spatial join Crea Tema unico contorno per poligoni adiacenti","title":"aggregare"},{"location":"tags/#area","text":"Campo area Calcolo area poligoni nel reticolo Core area Livello acqua Numerazione poligoni in base a relazione spaziale Selezione Selezionare primi n valori","title":"area"},{"location":"tags/#array","text":"ID univoco per gruppi consecutivi Creare campo somma cumulativa Aggrega valori di una tabella Array Natural sorting Assegnare categoria prevalente Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Conta punti nel poligono e per data Conteggio valori Conteggio caratteri diversi Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni Etichette formattate diversi stili Finestra temporale Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Layer pi\u00f9 vicino Lunghezze segmenti di un poligono Nome del campo con massimo valore Media e stdev tra campi Numerazione poligoni in base a relazione spaziale Prende attributo da layer sovrapposto Segmento minimo facciata strada Selezionare vertici duplicati Seleziona primo record per ogni duplicato Selezione ultimo record per data Tracciare un grafico Trova valore","title":"array"},{"location":"tags/#atlante","text":"Atlante con righe tabella in verticale","title":"atlante"},{"location":"tags/#attributi","text":"Creare campo somma cumulativa Campo area Campo quota z Campi coordinate Aggiornare geometria Prelevare attributi da layer pi\u00f9 vicini Calcolo incrementi giornalieri Campo coord in lat lon Confrontare campi tabella attributi Elimina duplicati con condizione Estrarre un campo da un attributo HStore Nome del campo con massimo valore Media e stdev tra campi Nascondi etichette Seleziona primo record per ogni duplicato Selezionare record orfani in una relazione padre-figlio Trova valore","title":"attributi"},{"location":"tags/#blob","text":"Gpkg blob immagini","title":"blob"},{"location":"tags/#blog","text":"Sitografia","title":"blog"},{"location":"tags/#calamita","text":"Spostare i punti dentro i poligoni in base agli attributi","title":"calamita"},{"location":"tags/#campi","text":"Campo virtuale Campo coord in lat lon Nome del campo con massimo valore Media e stdev tra campi Concetti tabella attributi","title":"campi"},{"location":"tags/#caratteri","text":"Conteggio caratteri diversi Legenda Etichettare con apici Ricercare caratteri speciali","title":"caratteri"},{"location":"tags/#categoria","text":"Assegnare categoria prevalente","title":"categoria"},{"location":"tags/#centroidi","text":"Centroidi linee curve Rotazione pattern lineare Segmento minimo facciata strada Tracciare un grafico Unica label","title":"centroidi"},{"location":"tags/#changelog","text":"Changelog","title":"changelog"},{"location":"tags/#chiave-valore","text":"Atlante con righe tabella in verticale Prelevare attributi da layer pi\u00f9 vicini Estrarre un campo da un attributo HStore Etichettare con chiave-valore Nome del campo con massimo valore Media e stdev tra campi Trova valore","title":"chiave-valore"},{"location":"tags/#classificare","text":"Prelevare attributi da layer pi\u00f9 vicini Conta punti nel poligono per categorie","title":"classificare"},{"location":"tags/#concetti","text":"Concetti Field Calc Editor delle funzioni Concetti tabella attributi","title":"concetti"},{"location":"tags/#condizioni","text":"Creare campo somma cumulativa Calcolo incrementi giornalieri Distanze progressive chilometriche Elimina duplicati con condizione Legenda Fill-down con QGIS Generalizzare isoipse Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Conta punti nel poligono per categorie Tematizzare","title":"condizioni"},{"location":"tags/#confrontare","text":"Confrontare campi tabella attributi","title":"confrontare"},{"location":"tags/#contare","text":"Conta i punti nel poligono Conta punti nel poligono e per data Conteggio valori Conteggio caratteri diversi Conta punti nel poligono per categorie Selezionare vertici duplicati","title":"contare"},{"location":"tags/#contorni","text":"Crea Tema unico contorno per poligoni adiacenti","title":"contorni"},{"location":"tags/#coordinate","text":"Campo quota z Campi coordinate Campo coord in lat lon Decimali delle coordinate come apici","title":"coordinate"},{"location":"tags/#corso","text":"Corso di formazione avanzato - IN LAVORAZIONE","title":"corso"},{"location":"tags/#cronometro","text":"Crea Cronometro nella Map Canvas","title":"cronometro"},{"location":"tags/#csv","text":"Provaci tu Aggrega valori di una tabella Centroidi linee curve Prelevare attributi da layer pi\u00f9 vicini Finestra temporale Tracciare un grafico","title":"csv"},{"location":"tags/#cumulativa","text":"Creare campo somma cumulativa","title":"cumulativa"},{"location":"tags/#custom","text":"Editor delle funzioni","title":"custom"},{"location":"tags/#data","text":"Conta punti nel poligono e per data Lavorare con le Ore","title":"data"},{"location":"tags/#decimali","text":"Decimali delle coordinate come apici","title":"decimali"},{"location":"tags/#decorazioni","text":"Crea Cronometro nella Map Canvas","title":"decorazioni"},{"location":"tags/#dinamico","text":"Campo virtuale","title":"dinamico"},{"location":"tags/#domande","text":"gis-stackexchange","title":"domande"},{"location":"tags/#duplicati","text":"Elimina duplicati con condizione Seleziona primo record per ogni duplicato","title":"duplicati"},{"location":"tags/#epsg","text":"Conversione","title":"epsg"},{"location":"tags/#esercizi","text":"Provaci tu","title":"esercizi"},{"location":"tags/#estrarre","text":"Estrarre un campo da un attributo HStore","title":"estrarre"},{"location":"tags/#etichette","text":"Conversione Decimali delle coordinate come apici Etichettare con chiave-valore Etichettare con apici Etichettare itinerario con elenco ordinato Comuni Etichettare Etichette formattate diversi stili Finestra temporale Nascondi etichette Selezionare primi n valori Sposta etichette Unica label","title":"etichette"},{"location":"tags/#fieldcalc","text":"Concetti Field Calc Editor delle funzioni Calcolatore di Campi Calcolatore Campi in Processing Corso di formazione avanzato - IN LAVORAZIONE Campo virtuale","title":"fieldCalc"},{"location":"tags/#fill-down","text":"Fill-down con QGIS","title":"fill-down"},{"location":"tags/#filtro","text":"Drilldown form multiple","title":"filtro"},{"location":"tags/#form","text":"Drilldown form multiple","title":"form"},{"location":"tags/#formattare","text":"Distanze progressive chilometriche Etichettare Etichette formattate diversi stili","title":"formattare"},{"location":"tags/#formazione","text":"Corso di formazione avanzato - IN LAVORAZIONE","title":"formazione"},{"location":"tags/#geopackage","text":"Gpkg blob immagini","title":"geopackage"},{"location":"tags/#gis-stackexchange","text":"gis-stackexchange","title":"gis-stackexchange"},{"location":"tags/#gms","text":"Conversione","title":"gms"},{"location":"tags/#grafico","text":"Tracciare un grafico","title":"grafico"},{"location":"tags/#gruppo","text":"Gruppo Espressioni Utente Aggrega Array Campi e valori Colore Condizioni Conversioni Corrispondenza fuzzy Custom Data ora Espressioni utente File e percorsi Form Generale Geometria Layer Mappa Layout Maps Matematica Operatori Raster Recente Record e attributi Relazioni Stringhe di testo","title":"gruppo"},{"location":"tags/#gui","text":"Traduzione Interfaccia Field Calc","title":"gui"},{"location":"tags/#hub-line","text":"Creare Hub lines","title":"hub-line"},{"location":"tags/#id","text":"ID univoco per gruppi consecutivi","title":"id"},{"location":"tags/#immagini","text":"Gpkg blob immagini","title":"immagini"},{"location":"tags/#incidenza","text":"Finestra temporale","title":"incidenza"},{"location":"tags/#incrementi","text":"Calcolo incrementi giornalieri","title":"incrementi"},{"location":"tags/#interfaccia","text":"Traduzione Interfaccia Field Calc","title":"interfaccia"},{"location":"tags/#itinerari","text":"Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni","title":"itinerari"},{"location":"tags/#layer","text":"Prelevare attributi da layer pi\u00f9 vicini","title":"layer"},{"location":"tags/#linee","text":"Aggiungere punto a linea Centroidi linee curve Generalizzare isoipse Geometrie vicine con condizione Creare Hub lines Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Lunghezze segmenti di un poligono Rotazione pattern lineare Rotazione simbolo parallelo ad una linea Segmento minimo facciata strada Sposta etichette Spostare i punti dentro i poligoni in base agli attributi Tracciare un grafico Tracciare puntia distanza prefissata lungo una linea","title":"linee"},{"location":"tags/#moduli","text":"Drilldown form multiple","title":"moduli"},{"location":"tags/#natural-sorting","text":"Array Natural sorting","title":"natural-sorting"},{"location":"tags/#news","text":"Parlano di noi","title":"news"},{"location":"tags/#novita","text":"Changelog Pull Request QGIS 3.0 | 23/02/2018 QGIS 3.10 | 25/10/2019 QGIS 3.12 | 21/02/2020 QGIS 3.14 | 19/06/2020 QGIS 3.16 | 23/10/2020 QGIS 3.18 | 22/02/2021 QGIS 3.2 | 22/06/2018 QGIS 3.20 | 21/06/2021 QGIS 3.4 | 26/10/2018 QGIS 3.6 | 22/02/2019 QGIS 3.8 | 21/06/2019","title":"novit\u00e0"},{"location":"tags/#operatori","text":"Operatori interfaccia","title":"operatori"},{"location":"tags/#ora","text":"Lavorare con le Ore","title":"ora"},{"location":"tags/#ordinare","text":"Array Natural sorting Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni","title":"ordinare"},{"location":"tags/#overlay","text":"Prelevare attributi da layer pi\u00f9 vicini Geometrie vicine con condizione Layer pi\u00f9 vicino Distanza minima tra due vettori Prende attributo da layer sovrapposto Rotazione simbolo parallelo ad una linea Segmento minimo facciata strada Seleziona poligoni con max area sovrapposta Selezionare punti pi\u00f9 vicini ad un punto selezionato","title":"overlay"},{"location":"tags/#parlano","text":"Parlano di noi","title":"parlano"},{"location":"tags/#pigrecoinfinito","text":"Sitografia","title":"pigrecoinfinito"},{"location":"tags/#plugin","text":"Risorse","title":"plugin"},{"location":"tags/#poligoni","text":"Calcolo area poligoni nel reticolo Conta i punti nel poligono Conta punti nel poligono e per data Core area Numerazione poligoni in base a relazione spaziale Prende attributo da layer sovrapposto Conta punti nel poligono per categorie Seleziona poligoni con max area sovrapposta Selezionare primi n valori Somma lunghezze nel poligono Spostare i punti dentro i poligoni in base agli attributi Unica label","title":"poligoni"},{"location":"tags/#post","text":"Sitografia","title":"post"},{"location":"tags/#prevalenza","text":"Assegnare categoria prevalente","title":"prevalenza"},{"location":"tags/#processing","text":"Calcolatore Campi in Processing","title":"processing"},{"location":"tags/#progressive","text":"Distanze progressive chilometriche","title":"progressive"},{"location":"tags/#propedeutico","text":"Concetti Field Calc Editor delle funzioni Calcolatore di Campi Calcolatore Campi in Processing Gruppo Espressioni Utente Interfaccia Field Calc Operatori interfaccia Concetti tabella attributi","title":"propedeutico"},{"location":"tags/#prossimita","text":"Prelevare attributi da layer pi\u00f9 vicini Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Prende attributo da layer sovrapposto Rotazione simbolo parallelo ad una linea Selezionare punti pi\u00f9 vicini ad un punto selezionato","title":"prossimit\u00e0"},{"location":"tags/#prova","text":"Provaci tu","title":"prova"},{"location":"tags/#pull-request","text":"Pull Request","title":"pull-request"},{"location":"tags/#punti","text":"Aggiungere punto a linea Prelevare attributi da layer pi\u00f9 vicini Conta i punti nel poligono Conta punti nel poligono e per data Etichettare Livello acqua Conta punti nel poligono per categorie Selezionare punti pi\u00f9 vicini ad un punto selezionato Spostare i punti dentro i poligoni in base agli attributi Tematizzare Tracciare un grafico Tracciare puntia distanza prefissata lungo una linea Unica label","title":"punti"},{"location":"tags/#quota","text":"Campo quota z","title":"quota"},{"location":"tags/#record","text":"Selezione ultimo record per data","title":"record"},{"location":"tags/#regex","text":"Array Natural sorting Campo coord in lat lon Conteggio caratteri diversi Decimali delle coordinate come apici Eliminare testo tra parentesi Legenda Lavorare con le Ore Ricercare caratteri speciali","title":"regex"},{"location":"tags/#relazioni","text":"Drilldown form multiple Geometria pi\u00f9 vicina e filtro condizionato Numerazione poligoni in base a relazione spaziale Selezionare record orfani in una relazione padre-figlio Tracciare un grafico","title":"relazioni"},{"location":"tags/#release","text":"Release","title":"release"},{"location":"tags/#reticolo","text":"Calcolo area poligoni nel reticolo","title":"reticolo"},{"location":"tags/#ricerca","text":"Ricercare caratteri speciali","title":"ricerca"},{"location":"tags/#rinomina","text":"Concetti tabella attributi","title":"rinomina"},{"location":"tags/#risorse","text":"Risorse","title":"risorse"},{"location":"tags/#risposte","text":"gis-stackexchange","title":"risposte"},{"location":"tags/#selezionare","text":"Elimina duplicati con condizione Selezionare vertici duplicati Selezione Seleziona poligoni con max area sovrapposta Selezionare primi n valori Seleziona primo record per ogni duplicato Selezionare punti pi\u00f9 vicini ad un punto selezionato Selezionare record orfani in una relazione padre-figlio Selezione ultimo record per data Trova valore","title":"selezionare"},{"location":"tags/#sessadecimale","text":"Conversione","title":"sessadecimale"},{"location":"tags/#sessagesimale","text":"Conversione","title":"sessagesimale"},{"location":"tags/#shortest-line","text":"Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Rotazione pattern lineare Segmento minimo facciata strada","title":"shortest-line"},{"location":"tags/#software","text":"Risorse","title":"software"},{"location":"tags/#sovrapposizione","text":"Prende attributo da layer sovrapposto","title":"sovrapposizione"},{"location":"tags/#spatial-join","text":"Numerazione poligoni in base a relazione spaziale Spatial join","title":"spatial-join"},{"location":"tags/#sr","text":"Aggrega con SR differenti","title":"sr"},{"location":"tags/#stile","text":"Crea Tema unico contorno per poligoni adiacenti","title":"stile"},{"location":"tags/#supporter","text":"Supporter","title":"supporter"},{"location":"tags/#tabella","text":"Campo quota z Campi coordinate Aggrega valori di una tabella Array Natural sorting Assegnare categoria prevalente Atlante con righe tabella in verticale Prelevare attributi da layer pi\u00f9 vicini Calcolo incrementi giornalieri Campo coord in lat lon Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Conteggio valori Conteggio caratteri diversi Elenco comuni Elenco ordinato di Comuni Elimina duplicati con condizione Estrarre un campo da un attributo HStore Fill-down con QGIS Seleziona primo record per ogni duplicato Selezionare record orfani in una relazione padre-figlio Trova valore Concetti tabella attributi","title":"tabella"},{"location":"tags/#tempo","text":"Crea Cronometro nella Map Canvas","title":"tempo"},{"location":"tags/#test","text":"Provaci tu","title":"test"},{"location":"tags/#testo","text":"Eliminare testo tra parentesi Etichette formattate diversi stili","title":"testo"},{"location":"tags/#traduzione","text":"Traduzione","title":"traduzione"},{"location":"tags/#transform","text":"Aggrega con SR differenti Somma lunghezze nel poligono","title":"transform"},{"location":"tags/#univoco","text":"ID univoco per gruppi consecutivi","title":"univoco"},{"location":"tags/#valori","text":"Aggrega valori di una tabella Array Natural sorting Atlante con righe tabella in verticale Calcolo incrementi giornalieri Centroidi linee curve Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Elenco comuni Eliminare testo tra parentesi Legenda Estrarre un campo da un attributo HStore Etichettare con chiave-valore Etichettare itinerario con elenco ordinato Comuni","title":"valori"},{"location":"tags/#versione","text":"Release Traduzione","title":"versione"},{"location":"tags/#vertici","text":"Selezionare vertici duplicati","title":"vertici"},{"location":"tags/#vestizione","text":"Generalizzare isoipse Livello acqua Rotazione pattern lineare Tematizzare","title":"vestizione"},{"location":"tags/#virtuale","text":"Campo virtuale","title":"virtuale"},{"location":"tags/#wkt","text":"Centroidi linee curve Creare Hub lines","title":"wkt"},{"location":"tags/#x","text":"Campi coordinate Decimali delle coordinate come apici Etichettare Livello acqua Sposta etichette Unica label","title":"x"},{"location":"tags/#y","text":"Campi coordinate Decimali delle coordinate come apici Etichettare Livello acqua Sposta etichette Unica label","title":"y"},{"location":"tags/#z","text":"Campo quota z Etichettare","title":"z"},{"location":"traduzione/","tags":["traduzione","gui","interfaccia","versione"],"text":"Traduzione \u21b5 La descrizione delle funzioni in italiano \u00e8 stata realizzata dal gruppo di traduttori diretti da Stefano Campus Marco Braida, Stefano Campus, Roberta Castelli, Francesco D'Amore, Eleonora D'Elia, Simone Falceri, Giulio Fattori, Matteo Ghetta, Federico Gianoli, Marco Grisolia, Italang, Luca76, Pipep, Valerio Pinna, Alberto Vallortigara, Salvatore Fiandaca (reporter)*, Giuseppe Mattiozzi (documentation) QGIS LTR \u21b5 QGIS corrente \u21b5 QGIS dev \u21b5 * PR Gruppo Telegram Traduttori \u21b5 https://t.me/qgis_it_traduzione","title":"Traduzione"},{"location":"traduzione/#traduzione","text":"La descrizione delle funzioni in italiano \u00e8 stata realizzata dal gruppo di traduttori diretti da Stefano Campus Marco Braida, Stefano Campus, Roberta Castelli, Francesco D'Amore, Eleonora D'Elia, Simone Falceri, Giulio Fattori, Matteo Ghetta, Federico Gianoli, Marco Grisolia, Italang, Luca76, Pipep, Valerio Pinna, Alberto Vallortigara, Salvatore Fiandaca (reporter)*, Giuseppe Mattiozzi (documentation)","title":"Traduzione "},{"location":"traduzione/#qgis-ltr","text":"","title":"QGIS LTR"},{"location":"traduzione/#qgis-corrente","text":"","title":"QGIS corrente"},{"location":"traduzione/#qgis-dev","text":"* PR","title":"QGIS dev"},{"location":"traduzione/#gruppo-telegram-traduttori","text":"https://t.me/qgis_it_traduzione","title":"Gruppo Telegram Traduttori"},{"location":"calcolatore_campi/concetti/","tags":["concetti","propedeutico","fieldCalc"],"text":"Concetti fondamentali sul calcolatore di campi di QGIS \u21b5 Intro In questa sezioni sono raccolti i concetti fondamentali sul Field Calc espressi tramite un elenco puntato. La conoscenza di questi concetti permette di velocizzare il lavoro e capire il comportamento del Field Calc. il calcolatore di campi \u00e8 attivabile solo per layer vettoriale 1 e tabelle editabili 2 ; la creazione di un nuovo campo \u00e8 relativo al layer selezionato nella TOC (Pannello Layer); il calcolatore popola un campo per volta (la modifica multipla \u00e8 un caso particolare); l'output del calcolatore popola, in generale, tutte le celle (della colonna) della tabella attributi o solo quelle selezionate (caso particolare); nella tabella attributi tutte le operazioni agiscono riga per riga (questo \u00e8 uno dei motivi della lentezza di alcuni processi); \u00e8 possibile richiamare altri layer tramite le funzione get_feature , get_feature_by_id e aggregate e overlay *_; il risultato delle funzioni di aggregazione verr\u00e0 ripetuto in tutte le righe (questo \u00e8 uno dei motivi della lentezza di alcuni processi); \u00e8 possibile aggiornare la geometry >= QGIS 2.14; $area , $perimeter ecc.. il $ davanti ad una funzione significa che riguarda la geometry corrente; i nomi dei layer vanno scritti tra apici semplici ('nome_layer') mentre i nomi dei campi con doppi apici (\"nome_campo\") ma funziona anche senza apici, ma per evitare problemi \u00e8 consigliato i doppi apici; i valori numerici vanno scritti senza apici es: 10, mentre i valori alfanumerici vanno scritti tra apici semplici es: 'Sicilia'; l'anteprima del calcolatore (pto 17 - vedi screenshot) \u00e8 utile ma non sempre corretta o completa; provate la funzione to_datetime o usare funzioni che restituiscono un output lungo; con il doppio clic \u00e8 possibile aggiungere funzioni o valori nelle espressioni nell'area di editing; \u00e8 possibile aggiungere funzioni personalizzate tramite codice Python nel gruppo Custom ; \u00e8 possibile aggiungere altri gruppi di funzioni tramite plugin es:refFunction \u2192 gruppo Reference; \u00e8 possibile editare/salvare/importare/esportare e condividere espressioni utente; >= QGIS 3.12; \u00e8 possibile cambiare l'attributo visualizzabile in Elemento dalle propriet\u00e0 Suggerimenti del layer; \u00e8 possibile aumentare la dimenzione del testo all'interno dell'editor tramite la rotellina del mouse ( Ctrl+rotellina ) \u00e8 possibile personalizzare i colori e i font utilizzati nell'area di scrittura espressioni da Impostazioni|Opzioni|IDE; Campi e valori sono visibili sia per il layer corrente che per tutti i layer vettoriali (nel Gruppo Layer Mappa) Video 1 Video 2 Video 3 in contrapposizione ai layer raster \u21a9 non tutti i layer in QGIS sono editabili, come per esempio layer CSV \u21a9","title":"Concetti Field Calc"},{"location":"calcolatore_campi/concetti/#concetti-fondamentali-sul-calcolatore-di-campi-di-qgis","text":"Intro In questa sezioni sono raccolti i concetti fondamentali sul Field Calc espressi tramite un elenco puntato. La conoscenza di questi concetti permette di velocizzare il lavoro e capire il comportamento del Field Calc. il calcolatore di campi \u00e8 attivabile solo per layer vettoriale 1 e tabelle editabili 2 ; la creazione di un nuovo campo \u00e8 relativo al layer selezionato nella TOC (Pannello Layer); il calcolatore popola un campo per volta (la modifica multipla \u00e8 un caso particolare); l'output del calcolatore popola, in generale, tutte le celle (della colonna) della tabella attributi o solo quelle selezionate (caso particolare); nella tabella attributi tutte le operazioni agiscono riga per riga (questo \u00e8 uno dei motivi della lentezza di alcuni processi); \u00e8 possibile richiamare altri layer tramite le funzione get_feature , get_feature_by_id e aggregate e overlay *_; il risultato delle funzioni di aggregazione verr\u00e0 ripetuto in tutte le righe (questo \u00e8 uno dei motivi della lentezza di alcuni processi); \u00e8 possibile aggiornare la geometry >= QGIS 2.14; $area , $perimeter ecc.. il $ davanti ad una funzione significa che riguarda la geometry corrente; i nomi dei layer vanno scritti tra apici semplici ('nome_layer') mentre i nomi dei campi con doppi apici (\"nome_campo\") ma funziona anche senza apici, ma per evitare problemi \u00e8 consigliato i doppi apici; i valori numerici vanno scritti senza apici es: 10, mentre i valori alfanumerici vanno scritti tra apici semplici es: 'Sicilia'; l'anteprima del calcolatore (pto 17 - vedi screenshot) \u00e8 utile ma non sempre corretta o completa; provate la funzione to_datetime o usare funzioni che restituiscono un output lungo; con il doppio clic \u00e8 possibile aggiungere funzioni o valori nelle espressioni nell'area di editing; \u00e8 possibile aggiungere funzioni personalizzate tramite codice Python nel gruppo Custom ; \u00e8 possibile aggiungere altri gruppi di funzioni tramite plugin es:refFunction \u2192 gruppo Reference; \u00e8 possibile editare/salvare/importare/esportare e condividere espressioni utente; >= QGIS 3.12; \u00e8 possibile cambiare l'attributo visualizzabile in Elemento dalle propriet\u00e0 Suggerimenti del layer; \u00e8 possibile aumentare la dimenzione del testo all'interno dell'editor tramite la rotellina del mouse ( Ctrl+rotellina ) \u00e8 possibile personalizzare i colori e i font utilizzati nell'area di scrittura espressioni da Impostazioni|Opzioni|IDE; Campi e valori sono visibili sia per il layer corrente che per tutti i layer vettoriali (nel Gruppo Layer Mappa) Video 1 Video 2 Video 3 in contrapposizione ai layer raster \u21a9 non tutti i layer in QGIS sono editabili, come per esempio layer CSV \u21a9","title":"Concetti fondamentali sul calcolatore di campi di QGIS"},{"location":"calcolatore_campi/editor_delle_funzioni/","tags":["concetti","propedeutico","fieldCalc","custom"],"text":"Editor delle funzioni \u21b5 Con la scheda Editor delle funzioni , puoi scrivere le tue funzioni in linguaggio Python . Ci\u00f2 fornisce un modo pratico e comodo per soddisfare esigenze particolari che non sarebbero coperte dalle funzioni predefinite. La scheda \u00e8 raggiungibile dall'interfaccia del Calcolatore di Campi o da qualsiasi interfaccia che permetta l'accesso al Costruttore stringhe espressione : Creare una nuova funzione \u21b5 premere il pulsante per aggiungere nuovo file; immettere un nome da utilizzare nel modulo che si apre e premere OK; un nuovo elemento con il nome fornito viene aggiunto nel pannello di sinistra della scheda Editor funzioni; questo \u00e8 un file Python sul file modello QGIS e memorizzato nella /python/expressions cartella sotto la directory del profilo utente attivo; il pannello di destra mostra il contenuto del file: un modello di script Python. aggiorna il codice e il suo aiuto in base alle tue esigenze; premere il pulsante Salva e carica funzioni . La funzione che hai scritto viene aggiunta all'albero delle funzioni nella scheda Espressione , per impostazione predefinita nel gruppo Custom NB: Le funzioni Python personalizzate sono memorizzate nella directory del profilo utente, il che significa che ad ogni avvio di QGIS, caricher\u00e0 automaticamente tutte le funzioni definite con il profilo utente corrente. Tieni presente che le nuove funzioni vengono salvate solo nella cartella C:\\Users\\nomeUtente\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\expressions e non nel file di progetto. Se condividi un progetto che utilizza una delle tue funzioni personalizzate dovrai condividere anche il file *.py . Eliminare una funzione personalizzata \u21b5 abilita la scheda Editor delle funzioni ; selezionare la funzione nell'elenco; premere l'icona , la funzione verr\u00e0 rimossa dall'elenco e il file corrispondente viene eliminato dalla cartella del profilo utente. per maggiori info, vai alla guida QGIS Esempi \u21b5 Nella sezione Funzioni Custom ci sono oltre 15 esempi di funzioni personalizzate, grazie a Giulio Fattori","title":"Editor delle funzioni"},{"location":"calcolatore_campi/editor_delle_funzioni/#editor-delle-funzioni","text":"Con la scheda Editor delle funzioni , puoi scrivere le tue funzioni in linguaggio Python . Ci\u00f2 fornisce un modo pratico e comodo per soddisfare esigenze particolari che non sarebbero coperte dalle funzioni predefinite. La scheda \u00e8 raggiungibile dall'interfaccia del Calcolatore di Campi o da qualsiasi interfaccia che permetta l'accesso al Costruttore stringhe espressione :","title":"Editor delle funzioni"},{"location":"calcolatore_campi/editor_delle_funzioni/#creare-una-nuova-funzione","text":"premere il pulsante per aggiungere nuovo file; immettere un nome da utilizzare nel modulo che si apre e premere OK; un nuovo elemento con il nome fornito viene aggiunto nel pannello di sinistra della scheda Editor funzioni; questo \u00e8 un file Python sul file modello QGIS e memorizzato nella /python/expressions cartella sotto la directory del profilo utente attivo; il pannello di destra mostra il contenuto del file: un modello di script Python. aggiorna il codice e il suo aiuto in base alle tue esigenze; premere il pulsante Salva e carica funzioni . La funzione che hai scritto viene aggiunta all'albero delle funzioni nella scheda Espressione , per impostazione predefinita nel gruppo Custom NB: Le funzioni Python personalizzate sono memorizzate nella directory del profilo utente, il che significa che ad ogni avvio di QGIS, caricher\u00e0 automaticamente tutte le funzioni definite con il profilo utente corrente. Tieni presente che le nuove funzioni vengono salvate solo nella cartella C:\\Users\\nomeUtente\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\expressions e non nel file di progetto. Se condividi un progetto che utilizza una delle tue funzioni personalizzate dovrai condividere anche il file *.py .","title":"Creare una nuova funzione"},{"location":"calcolatore_campi/editor_delle_funzioni/#eliminare-una-funzione-personalizzata","text":"abilita la scheda Editor delle funzioni ; selezionare la funzione nell'elenco; premere l'icona , la funzione verr\u00e0 rimossa dall'elenco e il file corrispondente viene eliminato dalla cartella del profilo utente. per maggiori info, vai alla guida QGIS","title":"Eliminare una funzione personalizzata"},{"location":"calcolatore_campi/editor_delle_funzioni/#esempi","text":"Nella sezione Funzioni Custom ci sono oltre 15 esempi di funzioni personalizzate, grazie a Giulio Fattori","title":"Esempi"},{"location":"calcolatore_campi/field_calc/","tags":["fieldCalc","propedeutico"],"text":"Calcolatore di campi \u21b5 Intro Il pulsante nella tabella degli attributi consente di eseguire calcoli sulla base di valori di attributo esistenti o funzioni definite, ad esempio, per calcolare la lunghezza o l'area delle caratteristiche geometriche. I risultati possono essere scritti in un nuovo campo di attributo, un campo virtuale, oppure possono essere utilizzati per aggiornare i valori in un campo esistente. Perch\u00e9 usarlo \u21b5 Il Field Calc di QGIS ha oltre 400 funzioni (in evoluzione) e di queste oltre 140 1 sono funzioni geometriche. Tutta questa potenza di calcolo permette di risolvere molti problemi GIS come la vicinanza, sovrapposizione, aggregazioni, selezioni ecc... inoltre permette di scrivere/aggiornare i risultati di espressioni direttamente nella tabella degli attributi senza creare altri layer. Dove usarlo \u21b5 Il calcolatore di campi \u00e8 ora disponibile su qualsiasi livello che supporti la modifica 2 . Il Calcolatore in realt\u00e0 \u00e8 solo una interfaccia che ci permette di accedere alle funzioni e di creare semplici o complesse espressioni. Le espressioni di QGIS vengono utilizzate in molti contesti, per esempio: tabella degli attributi ; tematizzazione ; etichettatura ; sovrascrittura definita dai dati ; selezione ; compositore di stampe, atlas e report ; legenda ; strumenti di processing: ( Calcolatore campi ; Seleziona tramite espressione ; Estrai tramite espressione ; Geometria da espressione ; Ordina tramite espressione ); moduli inserimento dati e widget ; azioni; modellatore grafico; diagrammi; filtri; decorazioni; propriet\u00e0 layer: variabili; statistiche; suggerimenti mappa; plugin; ecc.. Campo virtuale \u21b5 Un campo virtuale \u00e8 un campo basato su un'espressione calcolata al volo, il che significa che il suo valore viene automaticamente aggiornato non appena il parametro sottostante cambia. L'espressione \u00e8 impostata una volta; non \u00e8 pi\u00f9 necessario calcolare nuovamente il campo se i valori sottostanti cambiano. Ad esempio, \u00e8 possibile utilizzare un campo virtuale se \u00e8 necessario calcolare i valori dell'area durante un processo di digitalizzazione (creazione, unione, divisione di feature) o calcolare una durata che deve essere aggiornata di volta in volta. Aggiorna geometria \u21b5 Attraverso il calcolatore di campi \u00e8 possibile aggiornare tutti gli attributi di un layer editabile, ma \u00e8 possibile anche aggiornare la geometria , per esempio diminuire il numero di vertici di una linea o di un poligono; spostare/traslare i punti ecc... Field Calc rapido \u21b5 La barra del calcolatore di campo rapido , nella parte superiore della tabella degli attributi, \u00e8 visibile solo se il livello \u00e8 modificabile: nella versione QGIS 3.24 \u21a9 sono layer vettoriali e semplici tabelle editabili \u21a9","title":"Calcolatore di Campi"},{"location":"calcolatore_campi/field_calc/#calcolatore-di-campi","text":"Intro Il pulsante nella tabella degli attributi consente di eseguire calcoli sulla base di valori di attributo esistenti o funzioni definite, ad esempio, per calcolare la lunghezza o l'area delle caratteristiche geometriche. I risultati possono essere scritti in un nuovo campo di attributo, un campo virtuale, oppure possono essere utilizzati per aggiornare i valori in un campo esistente.","title":"Calcolatore di campi"},{"location":"calcolatore_campi/field_calc/#perche-usarlo","text":"Il Field Calc di QGIS ha oltre 400 funzioni (in evoluzione) e di queste oltre 140 1 sono funzioni geometriche. Tutta questa potenza di calcolo permette di risolvere molti problemi GIS come la vicinanza, sovrapposizione, aggregazioni, selezioni ecc... inoltre permette di scrivere/aggiornare i risultati di espressioni direttamente nella tabella degli attributi senza creare altri layer.","title":"Perch\u00e9 usarlo"},{"location":"calcolatore_campi/field_calc/#dove-usarlo","text":"Il calcolatore di campi \u00e8 ora disponibile su qualsiasi livello che supporti la modifica 2 . Il Calcolatore in realt\u00e0 \u00e8 solo una interfaccia che ci permette di accedere alle funzioni e di creare semplici o complesse espressioni. Le espressioni di QGIS vengono utilizzate in molti contesti, per esempio: tabella degli attributi ; tematizzazione ; etichettatura ; sovrascrittura definita dai dati ; selezione ; compositore di stampe, atlas e report ; legenda ; strumenti di processing: ( Calcolatore campi ; Seleziona tramite espressione ; Estrai tramite espressione ; Geometria da espressione ; Ordina tramite espressione ); moduli inserimento dati e widget ; azioni; modellatore grafico; diagrammi; filtri; decorazioni; propriet\u00e0 layer: variabili; statistiche; suggerimenti mappa; plugin; ecc..","title":"Dove usarlo"},{"location":"calcolatore_campi/field_calc/#campo-virtuale","text":"Un campo virtuale \u00e8 un campo basato su un'espressione calcolata al volo, il che significa che il suo valore viene automaticamente aggiornato non appena il parametro sottostante cambia. L'espressione \u00e8 impostata una volta; non \u00e8 pi\u00f9 necessario calcolare nuovamente il campo se i valori sottostanti cambiano. Ad esempio, \u00e8 possibile utilizzare un campo virtuale se \u00e8 necessario calcolare i valori dell'area durante un processo di digitalizzazione (creazione, unione, divisione di feature) o calcolare una durata che deve essere aggiornata di volta in volta.","title":"Campo virtuale"},{"location":"calcolatore_campi/field_calc/#aggiorna-geometria","text":"Attraverso il calcolatore di campi \u00e8 possibile aggiornare tutti gli attributi di un layer editabile, ma \u00e8 possibile anche aggiornare la geometria , per esempio diminuire il numero di vertici di una linea o di un poligono; spostare/traslare i punti ecc...","title":"Aggiorna geometria"},{"location":"calcolatore_campi/field_calc/#field-calc-rapido","text":"La barra del calcolatore di campo rapido , nella parte superiore della tabella degli attributi, \u00e8 visibile solo se il livello \u00e8 modificabile: nella versione QGIS 3.24 \u21a9 sono layer vettoriali e semplici tabelle editabili \u21a9","title":"Field Calc rapido"},{"location":"calcolatore_campi/field_calc_processing/","tags":["fieldCalc","propedeutico","processing"],"text":"Calcolatore Campi in Processing \u21b5 Introduzione \u21b5 Questo algoritmo calcola un nuovo layer vettoriale con gli stessi elementi del layer in ingresso, ma sovrascrive un attributo esistente o aggiunge un attributo aggiuntivo. I valori di questo campo vengono calcolati da ciascun elemento utilizzando un espressione, in base alle propriet\u00e0 e agli attributi dell'elemento. Se Nome campo \u00e8 un campo esistente nel layer, tutte le altre impostazioni del campo vengono ignorate (OVVERO sovrascrive tutto, contenuto e tipo di dato). Perch\u00e9 \u21b5 L'algoritmo \u00e8 molto utile in quanto: permette di utilizzare il calcolatore anche nel modellatore grafico; permette di eseguire processi in serie; Utilizzo \u21b5 Immaginate di avere centinaia di layer e di dover aggiornare (sovrascrive!!!) i valori di un campo (o vari campi); questo algoritmo, tramite il processo in serie, fa al caso nostro.","title":"Calcolatore Campi in Processing"},{"location":"calcolatore_campi/field_calc_processing/#calcolatore-campi-in-processing","text":"","title":"Calcolatore Campi in Processing"},{"location":"calcolatore_campi/field_calc_processing/#introduzione","text":"Questo algoritmo calcola un nuovo layer vettoriale con gli stessi elementi del layer in ingresso, ma sovrascrive un attributo esistente o aggiunge un attributo aggiuntivo. I valori di questo campo vengono calcolati da ciascun elemento utilizzando un espressione, in base alle propriet\u00e0 e agli attributi dell'elemento. Se Nome campo \u00e8 un campo esistente nel layer, tutte le altre impostazioni del campo vengono ignorate (OVVERO sovrascrive tutto, contenuto e tipo di dato).","title":"Introduzione"},{"location":"calcolatore_campi/field_calc_processing/#perche","text":"L'algoritmo \u00e8 molto utile in quanto: permette di utilizzare il calcolatore anche nel modellatore grafico; permette di eseguire processi in serie;","title":"Perch\u00e9"},{"location":"calcolatore_campi/field_calc_processing/#utilizzo","text":"Immaginate di avere centinaia di layer e di dover aggiornare (sovrascrive!!!) i valori di un campo (o vari campi); questo algoritmo, tramite il processo in serie, fa al caso nostro.","title":"Utilizzo"},{"location":"calcolatore_campi/gruppo_espressioni_utente/","tags":["gruppo","propedeutico"],"text":"Espressioni utente \u21b5 Cosa sono \u21b5 \u00c8 un gruppo che contiene espressioni, realizzate dall'utente, memorizzate nel profilo utente. per definire/aprire un profilo : Impostazioni | Profilo Utente. Per salvare o modificare le espressioni utente, utilizzare le seguenti icone: Tutto ci\u00f2 che scriviamo nell'area dell'editor, che risultasse corretto sintatticamente, possiamo salvarlo per un futuro riutilizzo. Per richiamare una Espressione utente salvata, espandere il gruppo Espressioni utente , selezionare l'espressione e aggiungerla tramite doppio clic. Questa feature \u00e8 stata aggiunta al core di QGIS grazie a una mia raccolta fondi documentata qui Dove vengono salvate \u21b5 Come detto sopra, le espressioni sono salvate nel profilo utente, in particolare: C:\\Users\\nomeUtente\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\QGIS Con un editor di testo potete aprire il file QGIS3.ini e cercare expressions qui tutte le espressioni utente memorizzate. (NB: attenzione a non modificare il file!!!)","title":"Gruppo Espressioni Utente"},{"location":"calcolatore_campi/gruppo_espressioni_utente/#espressioni-utente","text":"","title":"Espressioni utente"},{"location":"calcolatore_campi/gruppo_espressioni_utente/#cosa-sono","text":"\u00c8 un gruppo che contiene espressioni, realizzate dall'utente, memorizzate nel profilo utente. per definire/aprire un profilo : Impostazioni | Profilo Utente. Per salvare o modificare le espressioni utente, utilizzare le seguenti icone: Tutto ci\u00f2 che scriviamo nell'area dell'editor, che risultasse corretto sintatticamente, possiamo salvarlo per un futuro riutilizzo. Per richiamare una Espressione utente salvata, espandere il gruppo Espressioni utente , selezionare l'espressione e aggiungerla tramite doppio clic. Questa feature \u00e8 stata aggiunta al core di QGIS grazie a una mia raccolta fondi documentata qui","title":"Cosa sono"},{"location":"calcolatore_campi/gruppo_espressioni_utente/#dove-vengono-salvate","text":"Come detto sopra, le espressioni sono salvate nel profilo utente, in particolare: C:\\Users\\nomeUtente\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\QGIS Con un editor di testo potete aprire il file QGIS3.ini e cercare expressions qui tutte le espressioni utente memorizzate. (NB: attenzione a non modificare il file!!!)","title":"Dove vengono salvate"},{"location":"calcolatore_campi/interfaccia/","tags":["gui","interfaccia","propedeutico"],"text":"Interfaccia calcolatore di campi \u21b5 Intro In questa sezioni descriveremo tutte le parti dell'interfaccia del Field Calc. se attivato aggiorna solo le geometrie selezionate (indica anche il numero delle feature selezionate); se attivato crea un nuovo campo; se attivato crea un campo virtuale; permette di digitare nome del campo (per shapefile NON pi\u00f9 di 10 caratteri); permette di selezionare il Tipo di campo in uscita; permette di digitare la Lunghezzacampo in uscita e relativa precisione in caso di numeri Reali; permette di accedere al tab Editor delle Funzioni personalizzate (occorre conoscere il linguaggio Python); icone che permettono di: cancellare l'editor delle espressioni; salvare le espressioni utente; modificare le espressioni utente salvate; cancellare le espressioni utente salvate; importa espressioni utente; esporta funzioni utente. operatori pi\u00f9 usati: = uguale; + somma; - differenza; / divisione; * moltiplicazione; ^ potenza; || unione stringhe (doppio pipe); () parentesi; '\\n' nuova riga; editore delle espressioni; se attivato aggiorna campo esistente (anche la geometria); elenco di tutti i campi aggiornabili relativi al layer selezionato; permette di cercare le funzioni, il bottone Mostra Guida permette di abilitare l'area dell'Help; area dei gruppi funzione; gruppo Campi e valori relativi al layer selezionato; permette di visualizzare i valori dei campi presenti nel gruppo Campi e valori; permette di selezionare l'Elemento per cui visualizzare l'Anteprima; tasto OK per applicare l'espressione; Help sulla funzione selezionata. Commenti espressione \u21b5 \u00c8 possibile aggiungere commenti alle espressioni nell'area dell'editor espressioni: 1. per riga intera /*commento*/ 2. per commentare una riga --commento Campi e valori nel Gruppo Layer Mappa \u21b5 A partire da >= QGIS 3.24 Interfaccia e finestre nascoste \u21b5 Nel caso risulti nascosta la sezione Gruppi funzioni (vale fino alla QGIS 3.4): Nel caso risulti nascosta la sezione help in linea: Per aumentare dimensione caratteri:","title":"Interfaccia Field Calc"},{"location":"calcolatore_campi/interfaccia/#interfaccia-calcolatore-di-campi","text":"Intro In questa sezioni descriveremo tutte le parti dell'interfaccia del Field Calc. se attivato aggiorna solo le geometrie selezionate (indica anche il numero delle feature selezionate); se attivato crea un nuovo campo; se attivato crea un campo virtuale; permette di digitare nome del campo (per shapefile NON pi\u00f9 di 10 caratteri); permette di selezionare il Tipo di campo in uscita; permette di digitare la Lunghezzacampo in uscita e relativa precisione in caso di numeri Reali; permette di accedere al tab Editor delle Funzioni personalizzate (occorre conoscere il linguaggio Python); icone che permettono di: cancellare l'editor delle espressioni; salvare le espressioni utente; modificare le espressioni utente salvate; cancellare le espressioni utente salvate; importa espressioni utente; esporta funzioni utente. operatori pi\u00f9 usati: = uguale; + somma; - differenza; / divisione; * moltiplicazione; ^ potenza; || unione stringhe (doppio pipe); () parentesi; '\\n' nuova riga; editore delle espressioni; se attivato aggiorna campo esistente (anche la geometria); elenco di tutti i campi aggiornabili relativi al layer selezionato; permette di cercare le funzioni, il bottone Mostra Guida permette di abilitare l'area dell'Help; area dei gruppi funzione; gruppo Campi e valori relativi al layer selezionato; permette di visualizzare i valori dei campi presenti nel gruppo Campi e valori; permette di selezionare l'Elemento per cui visualizzare l'Anteprima; tasto OK per applicare l'espressione; Help sulla funzione selezionata.","title":"Interfaccia calcolatore di campi"},{"location":"calcolatore_campi/interfaccia/#commenti-espressione","text":"\u00c8 possibile aggiungere commenti alle espressioni nell'area dell'editor espressioni: 1. per riga intera /*commento*/ 2. per commentare una riga --commento","title":"Commenti espressione"},{"location":"calcolatore_campi/interfaccia/#campi-e-valori-nel-gruppo-layer-mappa","text":"A partire da >= QGIS 3.24","title":"Campi e valori nel Gruppo Layer Mappa"},{"location":"calcolatore_campi/interfaccia/#interfaccia-e-finestre-nascoste","text":"Nel caso risulti nascosta la sezione Gruppi funzioni (vale fino alla QGIS 3.4): Nel caso risulti nascosta la sezione help in linea: Per aumentare dimensione caratteri:","title":"Interfaccia e finestre nascoste"},{"location":"calcolatore_campi/operatori/","tags":["operatori","propedeutico"],"text":"Operatori interfaccia \u21b5 Intro In questa sezione documenteremo gli operatori presenti nell'interfaccia del Field Calc. L'interfaccia del calcolatore rende immediatamente disponibili alcuni operatori: uguale \u21b5 - uguaglianza tra numeri 10 = 10; - uguaglianza tra lettere 'A' = 'A' ; - uguaglianza tra parole 'Ciao' = 'Ciao'; - ugualgianza tra stringhe 'Viva QGIS' = 'Viva QGIS'; - uguaglianza tra campi \"field1\" = \"field2\"; - uguaglianza tra espressioni $area = area($geometry); somma \u21b5 - somma di numeri 10 + 15.4 ; - somma di stringhe (unione) 'QGIS' + '3.0' ; - somma di campi \"fied1\" + \"field2\" - somma di espressioni $perimeter + 500; differenza \u21b5 - differenza tra numeri 250 -200; - differenza tra campi \"field1\"-\"field2\" - differenza tra espressioni length(\"field1\") - length(\"field2\"); divisione \u21b5 - divisione tra numeri 125/5; - divisione tra campi \"field1\"/\"field2\"; - divisione tra espressioni $area/$perimeter; moltiplicazione \u21b5 - moltiplicazione tra numeri 12*22; - moltiplicazione tra campi \"field1\"*\"field2\"; - moltiplicazione tra espressioni $perimeter*length($area); potenza \u21b5 - potenza tra numeri 10^2; - potenza tra campi \"field1\"^\"field2\"; - potenza tra espressioni $area^length($area); unione di stringhe \u21b5 - unione di numeri (che trasforma in stringhe) 12 || 24 \u2192 '1224'; - unione tra lettere 'A'||'b' \u2192 'Ab'; - unione tra parole 'Ciao' || 'Mondo' \u2192 'CiamoMondo' ; - unione tra stringhe 'Viva QGIS' || 'Viva Pigreco' \u2192 'Viva QGISViva Pigreco'; - unione tra campi \"field1\" = \"field2\"; - unione tra espressioni \\$area || area($geometry); - unione tra simboli 'A'||'=>'||'B' \u2192 'A=>B'; parentesi aperta \u21b5 - il calcolatore indica se una parentesi \u00e8 rimasta aperta; parentesi chiusa \u21b5 - il calcolatore indica se una parentesi \u00e8 rimasta chiusa; nuova riga \u21b5 - aggiunge una nuova riga: (12 || 24 ) ||'\\n' ||( '12' || '24' ) \u2192 stamper\u00e0 '1224' su 1224' in due righe; - molto utile per le etichette su due o pi\u00f9 righe; Un altro operatore nascosto \u00e8 '\\t' tabulazione: utile per esempio nelle legende, leggi qui","title":"Operatori interfaccia"},{"location":"calcolatore_campi/operatori/#operatori-interfaccia","text":"Intro In questa sezione documenteremo gli operatori presenti nell'interfaccia del Field Calc. L'interfaccia del calcolatore rende immediatamente disponibili alcuni operatori:","title":"Operatori interfaccia"},{"location":"calcolatore_campi/operatori/#uguale","text":"- uguaglianza tra numeri 10 = 10; - uguaglianza tra lettere 'A' = 'A' ; - uguaglianza tra parole 'Ciao' = 'Ciao'; - ugualgianza tra stringhe 'Viva QGIS' = 'Viva QGIS'; - uguaglianza tra campi \"field1\" = \"field2\"; - uguaglianza tra espressioni $area = area($geometry);","title":"uguale"},{"location":"calcolatore_campi/operatori/#somma","text":"- somma di numeri 10 + 15.4 ; - somma di stringhe (unione) 'QGIS' + '3.0' ; - somma di campi \"fied1\" + \"field2\" - somma di espressioni $perimeter + 500;","title":"somma"},{"location":"calcolatore_campi/operatori/#differenza","text":"- differenza tra numeri 250 -200; - differenza tra campi \"field1\"-\"field2\" - differenza tra espressioni length(\"field1\") - length(\"field2\");","title":"differenza"},{"location":"calcolatore_campi/operatori/#divisione","text":"- divisione tra numeri 125/5; - divisione tra campi \"field1\"/\"field2\"; - divisione tra espressioni $area/$perimeter;","title":"divisione"},{"location":"calcolatore_campi/operatori/#moltiplicazione","text":"- moltiplicazione tra numeri 12*22; - moltiplicazione tra campi \"field1\"*\"field2\"; - moltiplicazione tra espressioni $perimeter*length($area);","title":"moltiplicazione"},{"location":"calcolatore_campi/operatori/#potenza","text":"- potenza tra numeri 10^2; - potenza tra campi \"field1\"^\"field2\"; - potenza tra espressioni $area^length($area);","title":"potenza"},{"location":"calcolatore_campi/operatori/#unione-di-stringhe","text":"- unione di numeri (che trasforma in stringhe) 12 || 24 \u2192 '1224'; - unione tra lettere 'A'||'b' \u2192 'Ab'; - unione tra parole 'Ciao' || 'Mondo' \u2192 'CiamoMondo' ; - unione tra stringhe 'Viva QGIS' || 'Viva Pigreco' \u2192 'Viva QGISViva Pigreco'; - unione tra campi \"field1\" = \"field2\"; - unione tra espressioni \\$area || area($geometry); - unione tra simboli 'A'||'=>'||'B' \u2192 'A=>B';","title":"unione di stringhe"},{"location":"calcolatore_campi/operatori/#parentesi-aperta","text":"- il calcolatore indica se una parentesi \u00e8 rimasta aperta;","title":"parentesi aperta"},{"location":"calcolatore_campi/operatori/#parentesi-chiusa","text":"- il calcolatore indica se una parentesi \u00e8 rimasta chiusa;","title":"parentesi chiusa"},{"location":"calcolatore_campi/operatori/#nuova-riga","text":"- aggiunge una nuova riga: (12 || 24 ) ||'\\n' ||( '12' || '24' ) \u2192 stamper\u00e0 '1224' su 1224' in due righe; - molto utile per le etichette su due o pi\u00f9 righe; Un altro operatore nascosto \u00e8 '\\t' tabulazione: utile per esempio nelle legende, leggi qui","title":"nuova riga"},{"location":"corso_formazione/corso_di_formazione/","text":"Corso di formazione \u21b5 A chi \u00e8 rivolto \u21b5 Il corso \u00e8 rivolto agli utenti che conoscono l'uso generale di QGIS e desiderano approfondire l'uso della tabella attributi e del calcolatore di campi . Corso \u21b5 In presenza \u21b5 Il corso \u00e8 strutturato per durare almeno 16 ore - preferibilmente fulltime (due giorni da otto ore) Programma Corso Tabella attributi ; Concetti fondamentali sulla Tabella attributi che cosa \u00e8 la tabella attributi; campi e record, come definirli; Icone e funzioni tabella attributi; calcolatore di campi rapido; tabella attributi e tipo formato GIS cosa cambia: shapefile; geojson; geopackage; spatialite. Vista tabella e vista modulo, le relazioni; riorganizzazione campi tabella - processing; selezione per espressione; esercitazioni. Calcolatore di campi ; Concetti fondamentali sul Calcolatore di campi; Interfaccia; gruppo funzioni; guida in linea e #HfcQGIS; le funzioni geometriche; come creare delle espressioni complesse; come richiamare altri layer; come aggiungere attributi geometrici alla tabella; le funzioni di aggregazione; gli Array; le Maps; le variabili; aggiornare un campo esistente; campi virtuali, utilit\u00e0; filtro; cenni sull'editor delle funzioni python; esercitazione. Novit\u00e0 introdotte in QGIS 3.x Esercitazioni . Video-Corso \u21b5 Sul Field Calc QGIS 3.x - 30 video lezioni (23 ore) Per maggiori Info contattatemi. Blog post su Pigrecoinfinito Playlist Corso FULL su Youtube Docente \u21b5 Ing. Salvatore Fiandaca Membro attivo di QGIS Italia e gruppo utenti QGIS.it ; Co-Admin pagina Facebook ufficiale di QGIS Italia ; Co-Admin canale Twitter Ufficiale di QGIS.it ; Socio GFOSS.it ; Membro @qgis organization : https://github.com/qgis Contatti \u21b5 Mail : pigrecoinfinito@gmail.com Facebook : https://www.facebook.com/pigreco314 Twitter : https://twitter.com/totofiandaca Telegram : https://t.me/pigreco71 Sitografia \u21b5 blog : https://pigrecoinfinito.com/ canale youtube : http://www.youtube.com/c/Tot\u00f2Fiandaca HfcQGIS : https://hfcqgis.opendatasicilia.it/ Tansignari : https://tansignari.opendatasicilia.it/ data.world : https://data.world/pigrecoinfinito github : https://github.com/pigreco gitlab : https://gitlab.com/pigr3co Canale Telegram : https://t.me/pigrecoinfinito Certificato di partecipazione \u21b5 Alla fine del corso ( solo se in presenza ) verr\u00e0 rilasciato un certificato di partecipazione.","title":"Corso di formazione"},{"location":"corso_formazione/corso_di_formazione/#corso-di-formazione","text":"","title":"Corso di formazione"},{"location":"corso_formazione/corso_di_formazione/#a-chi-e-rivolto","text":"Il corso \u00e8 rivolto agli utenti che conoscono l'uso generale di QGIS e desiderano approfondire l'uso della tabella attributi e del calcolatore di campi .","title":"A chi \u00e8 rivolto"},{"location":"corso_formazione/corso_di_formazione/#corso","text":"","title":"Corso"},{"location":"corso_formazione/corso_di_formazione/#in-presenza","text":"Il corso \u00e8 strutturato per durare almeno 16 ore - preferibilmente fulltime (due giorni da otto ore) Programma Corso Tabella attributi ; Concetti fondamentali sulla Tabella attributi che cosa \u00e8 la tabella attributi; campi e record, come definirli; Icone e funzioni tabella attributi; calcolatore di campi rapido; tabella attributi e tipo formato GIS cosa cambia: shapefile; geojson; geopackage; spatialite. Vista tabella e vista modulo, le relazioni; riorganizzazione campi tabella - processing; selezione per espressione; esercitazioni. Calcolatore di campi ; Concetti fondamentali sul Calcolatore di campi; Interfaccia; gruppo funzioni; guida in linea e #HfcQGIS; le funzioni geometriche; come creare delle espressioni complesse; come richiamare altri layer; come aggiungere attributi geometrici alla tabella; le funzioni di aggregazione; gli Array; le Maps; le variabili; aggiornare un campo esistente; campi virtuali, utilit\u00e0; filtro; cenni sull'editor delle funzioni python; esercitazione. Novit\u00e0 introdotte in QGIS 3.x Esercitazioni .","title":"In presenza"},{"location":"corso_formazione/corso_di_formazione/#video-corso","text":"Sul Field Calc QGIS 3.x - 30 video lezioni (23 ore) Per maggiori Info contattatemi. Blog post su Pigrecoinfinito Playlist Corso FULL su Youtube","title":"Video-Corso"},{"location":"corso_formazione/corso_di_formazione/#docente","text":"Ing. Salvatore Fiandaca Membro attivo di QGIS Italia e gruppo utenti QGIS.it ; Co-Admin pagina Facebook ufficiale di QGIS Italia ; Co-Admin canale Twitter Ufficiale di QGIS.it ; Socio GFOSS.it ; Membro @qgis organization : https://github.com/qgis","title":"Docente"},{"location":"corso_formazione/corso_di_formazione/#contatti","text":"Mail : pigrecoinfinito@gmail.com Facebook : https://www.facebook.com/pigreco314 Twitter : https://twitter.com/totofiandaca Telegram : https://t.me/pigreco71","title":"Contatti"},{"location":"corso_formazione/corso_di_formazione/#sitografia","text":"blog : https://pigrecoinfinito.com/ canale youtube : http://www.youtube.com/c/Tot\u00f2Fiandaca HfcQGIS : https://hfcqgis.opendatasicilia.it/ Tansignari : https://tansignari.opendatasicilia.it/ data.world : https://data.world/pigrecoinfinito github : https://github.com/pigreco gitlab : https://gitlab.com/pigr3co Canale Telegram : https://t.me/pigrecoinfinito","title":"Sitografia"},{"location":"corso_formazione/corso_di_formazione/#certificato-di-partecipazione","text":"Alla fine del corso ( solo se in presenza ) verr\u00e0 rilasciato un certificato di partecipazione.","title":"Certificato di partecipazione"},{"location":"corso_formazione/corso_di_formazione_avanzato/","tags":["corso","formazione","fieldCalc"],"text":"Corso di formazione avanzato - IN LAVORAZIONE \u21b5 A chi \u00e8 rivolto \u21b5 Il corso \u00e8 rivolto agli utenti che conoscono l'uso generale di QGIS e/o hanno gi\u00e0 seguito il Corso FULL sul Field Calc e desiderano approfondire l'uso del calcolatore di campi e in particolare di alcuni gruppi funzione come meglio evidenziato nel programma. Corso \u21b5 in presenza \u21b5 Il corso \u00e8 strutturato per durare almeno XX - preferibilmente fulltime (YY giorni da otto ore) Programma Corso avanzato gruppo geometria ; gruppo aggrega ; gruppo array ; gruppo maps ; gruppo variabili ; gruppo espressioni utente ; richiamare altri layer; esercitazioni. Video-Corso \u21b5 Il corso \u00e8 REGISTRATO e prevede ... Per maggiori Info contattatemi. Blog post su Pigrecoinfinito Playlist Corso FULL su Youtube Docente \u21b5 Ing. Salvatore Fiandaca Membro attivo di QGIS Italia e gruppo utenti QGIS.it ; Co-Admin pagina Facebook ufficiale di QGIS Italia ; Co-Admin canale Twitter Ufficiale di QGIS.it ; Socio GFOSS.it ; Membro @qgis organization : https://github.com/qgis Contatti \u21b5 Mail : pigrecoinfinito@gmail.com Facebook : https://www.facebook.com/pigreco314 Twitter : https://twitter.com/totofiandaca Telegram : https://t.me/pigreco71 Sitografia \u21b5 blog : https://pigrecoinfinito.com/ canale youtube : http://www.youtube.com/c/Tot\u00f2Fiandaca HfcQGIS : https://hfcqgis.opendatasicilia.it/ Tansignari : http://tansignari.opendatasicilia.it/it/latest/# data.world : https://data.world/pigrecoinfinito github : https://github.com/pigreco gitlab : https://gitlab.com/pigr3co Canale Telegram : https://t.me/pigrecoinfinito","title":"Corso di formazione avanzato - IN LAVORAZIONE"},{"location":"corso_formazione/corso_di_formazione_avanzato/#corso-di-formazione-avanzato-in-lavorazione","text":"","title":"Corso di formazione avanzato - IN LAVORAZIONE"},{"location":"corso_formazione/corso_di_formazione_avanzato/#a-chi-e-rivolto","text":"Il corso \u00e8 rivolto agli utenti che conoscono l'uso generale di QGIS e/o hanno gi\u00e0 seguito il Corso FULL sul Field Calc e desiderano approfondire l'uso del calcolatore di campi e in particolare di alcuni gruppi funzione come meglio evidenziato nel programma.","title":"A chi \u00e8 rivolto"},{"location":"corso_formazione/corso_di_formazione_avanzato/#corso","text":"","title":"Corso"},{"location":"corso_formazione/corso_di_formazione_avanzato/#in-presenza","text":"Il corso \u00e8 strutturato per durare almeno XX - preferibilmente fulltime (YY giorni da otto ore) Programma Corso avanzato gruppo geometria ; gruppo aggrega ; gruppo array ; gruppo maps ; gruppo variabili ; gruppo espressioni utente ; richiamare altri layer; esercitazioni.","title":"in presenza"},{"location":"corso_formazione/corso_di_formazione_avanzato/#video-corso","text":"Il corso \u00e8 REGISTRATO e prevede ... Per maggiori Info contattatemi. Blog post su Pigrecoinfinito Playlist Corso FULL su Youtube","title":"Video-Corso"},{"location":"corso_formazione/corso_di_formazione_avanzato/#docente","text":"Ing. Salvatore Fiandaca Membro attivo di QGIS Italia e gruppo utenti QGIS.it ; Co-Admin pagina Facebook ufficiale di QGIS Italia ; Co-Admin canale Twitter Ufficiale di QGIS.it ; Socio GFOSS.it ; Membro @qgis organization : https://github.com/qgis","title":"Docente"},{"location":"corso_formazione/corso_di_formazione_avanzato/#contatti","text":"Mail : pigrecoinfinito@gmail.com Facebook : https://www.facebook.com/pigreco314 Twitter : https://twitter.com/totofiandaca Telegram : https://t.me/pigreco71","title":"Contatti"},{"location":"corso_formazione/corso_di_formazione_avanzato/#sitografia","text":"blog : https://pigrecoinfinito.com/ canale youtube : http://www.youtube.com/c/Tot\u00f2Fiandaca HfcQGIS : https://hfcqgis.opendatasicilia.it/ Tansignari : http://tansignari.opendatasicilia.it/it/latest/# data.world : https://data.world/pigrecoinfinito github : https://github.com/pigreco gitlab : https://gitlab.com/pigr3co Canale Telegram : https://t.me/pigrecoinfinito","title":"Sitografia"},{"location":"esempi/ID_univoco_gruppi_consecutivi/","tags":["aggregare","univoco","array","id"],"text":"ID univoco per gruppi consecutivi \u21b5 L'esempio \u00e8 preso da qui: stackexchange : https://gis.stackexchange.com/questions/418137/adding-unique-id-for-consecutive-groups-using-field-calculator-in-qgis ovvero, come creare un campo group1 che contenga ID univoco per gruppi consecutivi (vedi immagine e numeri in bianco) with_variable('cucu', aggregate( layer:=@layer_name, aggregate:='array_agg', expression:= (array_find(array_agg(\"ID\", \"PortCluster_ID\"),\"ID\"))-\"ID\"), with_variable('cucu2', (array_find(array_agg(\"ID\", \"PortCluster_ID\"),\"ID\"))-\"ID\", array_find(array_distinct(@cucu),@cucu2)+1)) risultato: In linguaggio umano: Primo passo, creare un campo temp1 e popolarlo con array_agg(\"ID\", \"PortCluster_ID\") , ovvero, aggrego tutti gli ID ragguppandoli per PortCluster_ID (per poterlo visualizzare devo usare anche la funzione array_to_string , quindi: array_to_string(array_agg(\"ID\", \"PortCluster_ID\")) ); secondo passo, creo un campo temp2 e lo popolo con l'indice che possiede il valore del campo ID dentro l'array calcolato nel campo temp1 usando l'espressione array_find(array_agg(\"ID\", \"PortCluster_ID\"),\"ID\")) ; terzo passo, faccio la differenza tra il campo temp2 e il campo ID ; quarto passo, creo un array del campo temp3 usando la funzione aggregate (variabile cucu ); quinto passo, creo un campo temp4 e lo popolo con l'indice che i valori del campo temp3 hanno nell'array creato nel quarto passo; infine, mettendo tutto assieme viene fuori l'espressione utilizzata che in un unico passaggio popola il campo group1 . prova tu \u21b5 dati di esempio Funzioni e variabili utilizzate: with_variable array_find array_distinct array_agg aggregate","title":"ID univoco per gruppi consecutivi"},{"location":"esempi/ID_univoco_gruppi_consecutivi/#id-univoco-per-gruppi-consecutivi","text":"L'esempio \u00e8 preso da qui: stackexchange : https://gis.stackexchange.com/questions/418137/adding-unique-id-for-consecutive-groups-using-field-calculator-in-qgis ovvero, come creare un campo group1 che contenga ID univoco per gruppi consecutivi (vedi immagine e numeri in bianco) with_variable('cucu', aggregate( layer:=@layer_name, aggregate:='array_agg', expression:= (array_find(array_agg(\"ID\", \"PortCluster_ID\"),\"ID\"))-\"ID\"), with_variable('cucu2', (array_find(array_agg(\"ID\", \"PortCluster_ID\"),\"ID\"))-\"ID\", array_find(array_distinct(@cucu),@cucu2)+1)) risultato: In linguaggio umano: Primo passo, creare un campo temp1 e popolarlo con array_agg(\"ID\", \"PortCluster_ID\") , ovvero, aggrego tutti gli ID ragguppandoli per PortCluster_ID (per poterlo visualizzare devo usare anche la funzione array_to_string , quindi: array_to_string(array_agg(\"ID\", \"PortCluster_ID\")) ); secondo passo, creo un campo temp2 e lo popolo con l'indice che possiede il valore del campo ID dentro l'array calcolato nel campo temp1 usando l'espressione array_find(array_agg(\"ID\", \"PortCluster_ID\"),\"ID\")) ; terzo passo, faccio la differenza tra il campo temp2 e il campo ID ; quarto passo, creo un array del campo temp3 usando la funzione aggregate (variabile cucu ); quinto passo, creo un campo temp4 e lo popolo con l'indice che i valori del campo temp3 hanno nell'array creato nel quarto passo; infine, mettendo tutto assieme viene fuori l'espressione utilizzata che in un unico passaggio popola il campo group1 .","title":"ID univoco per gruppi consecutivi"},{"location":"esempi/ID_univoco_gruppi_consecutivi/#prova-tu","text":"dati di esempio Funzioni e variabili utilizzate: with_variable array_find array_distinct array_agg aggregate","title":"prova tu"},{"location":"esempi/add_campo_sum_cumulativo/","tags":["cumulativa","attributi","condizioni","array"],"text":"Aggiungere campo somma cumulativa \u21b5 Siamo nella seguente ipotesi, una tabella ordinata per fid e un campo l che rappresenta delle lunghezze, come realizzare - usando il calcolatore di campi e le espressioni - un campo cum popolato con la somma cumulativa?? Ecco un esempio: +-----+----+-----+ | fid | l | cum | +-----+----+-----+ | 1 | 0 | 0 | | 2 | 10 | 10 | | 3 | 20 | 30 | | 4 | 30 | 60 | | 5 | 40 | 100 | | 6 | 50 | 150 | +-----+----+-----+ Le soluzioni trovate sono pi\u00f9 di una e dipende anche dalla versione di QGIS installata in quanto utilizza funzioni certamente presenti dalla 3.x in avanti. Prima soluzione \u21b5 Questa soluzione fa uso di funzioni presenti nel core di QGIS: Nella maggior parte dei casi il primo record di un layer ha $id =1 ; in alcuni casi, per esempio gli shapefile, il primo record ha $id = 0 , quindi la condizione di test di if dovrebbe essere modificata di conseguenza affinch\u00e9 l'espressione funzioni come previsto: if( $id = 1, attribute($currentfeature, 'l'), attribute($currentfeature, 'l') + attribute(get_feature_by_id(@layer_name, $id-1), 'cum')) Alternativamente si potrebbe usare, invece che la funzione $id , la variabile @row_number , in quanto quest'ultima dovrebbe iniziare sempre da 1 e quindi la seguente espressione dovrebbe funzionare in ogni caso : if( $id = 1, attribute($currentfeature, 'l'), attribute($currentfeature, 'l') + attribute(get_feature_by_id(@layer_name, @row_number-1), 'cum')) NB: La somma cumulativa avviene in ordine per feature id , quindi i record del layer devono essere gi\u00e0 intrinsecamente ordinati secondo l'ordine con cui si vuole che i valori vengano sommati. Seconda soluzione \u21b5 In questa soluzione valgono sempre gli Alert della prima, ma utilizzeremo altre funzioni come gli Array: if( $id = 1, array_agg( \"l\")[0], eval( replace( array_to_string( array_slice( array_agg( \"l\"),0,$id-1)), ',','+')) ) Terza soluzione \u21b5 In questa soluzione valgono sempre gli Alert della prima, ma utilizzeremo le funzioni del gruppo Array , in particolare la funzione array_sum presente in QGIS a partire dalla 3.18 if( $id = 1, array_agg( \"l\")[0], array_sum( array_slice( array_agg( \"l\"),0,$id-1)) ) Nello screenshot di sotto, i campi: cum : \u00e8 relativo al primo esempio; cum_2 : \u00e8 relativo al secondo esempio; cum_3 : \u00e8 relativo al terzo esempio. Note finali \u21b5 Il tutto \u00e8 nato da qui","title":"Creare campo somma cumulativa"},{"location":"esempi/add_campo_sum_cumulativo/#aggiungere-campo-somma-cumulativa","text":"Siamo nella seguente ipotesi, una tabella ordinata per fid e un campo l che rappresenta delle lunghezze, come realizzare - usando il calcolatore di campi e le espressioni - un campo cum popolato con la somma cumulativa?? Ecco un esempio: +-----+----+-----+ | fid | l | cum | +-----+----+-----+ | 1 | 0 | 0 | | 2 | 10 | 10 | | 3 | 20 | 30 | | 4 | 30 | 60 | | 5 | 40 | 100 | | 6 | 50 | 150 | +-----+----+-----+ Le soluzioni trovate sono pi\u00f9 di una e dipende anche dalla versione di QGIS installata in quanto utilizza funzioni certamente presenti dalla 3.x in avanti.","title":"Aggiungere campo somma cumulativa"},{"location":"esempi/add_campo_sum_cumulativo/#prima-soluzione","text":"Questa soluzione fa uso di funzioni presenti nel core di QGIS: Nella maggior parte dei casi il primo record di un layer ha $id =1 ; in alcuni casi, per esempio gli shapefile, il primo record ha $id = 0 , quindi la condizione di test di if dovrebbe essere modificata di conseguenza affinch\u00e9 l'espressione funzioni come previsto: if( $id = 1, attribute($currentfeature, 'l'), attribute($currentfeature, 'l') + attribute(get_feature_by_id(@layer_name, $id-1), 'cum')) Alternativamente si potrebbe usare, invece che la funzione $id , la variabile @row_number , in quanto quest'ultima dovrebbe iniziare sempre da 1 e quindi la seguente espressione dovrebbe funzionare in ogni caso : if( $id = 1, attribute($currentfeature, 'l'), attribute($currentfeature, 'l') + attribute(get_feature_by_id(@layer_name, @row_number-1), 'cum')) NB: La somma cumulativa avviene in ordine per feature id , quindi i record del layer devono essere gi\u00e0 intrinsecamente ordinati secondo l'ordine con cui si vuole che i valori vengano sommati.","title":"Prima soluzione"},{"location":"esempi/add_campo_sum_cumulativo/#seconda-soluzione","text":"In questa soluzione valgono sempre gli Alert della prima, ma utilizzeremo altre funzioni come gli Array: if( $id = 1, array_agg( \"l\")[0], eval( replace( array_to_string( array_slice( array_agg( \"l\"),0,$id-1)), ',','+')) )","title":"Seconda soluzione"},{"location":"esempi/add_campo_sum_cumulativo/#terza-soluzione","text":"In questa soluzione valgono sempre gli Alert della prima, ma utilizzeremo le funzioni del gruppo Array , in particolare la funzione array_sum presente in QGIS a partire dalla 3.18 if( $id = 1, array_agg( \"l\")[0], array_sum( array_slice( array_agg( \"l\"),0,$id-1)) ) Nello screenshot di sotto, i campi: cum : \u00e8 relativo al primo esempio; cum_2 : \u00e8 relativo al secondo esempio; cum_3 : \u00e8 relativo al terzo esempio.","title":"Terza soluzione"},{"location":"esempi/add_campo_sum_cumulativo/#note-finali","text":"Il tutto \u00e8 nato da qui","title":"Note finali"},{"location":"esempi/add_campo_virtuale/","tags":["campi","virtuale","fieldCalc","dinamico"],"text":"Come aggiungere un campo virtuale \u21b5 Facciamo un esempio, geopackage con vettore lineare: selezionare il layer (presente nel Layer Panel ), tasto destro mouse 'Apri tabella attributi' oppure cliccare sull'icona oppure tasto funzione F6 attivare editing; aprire calcolatore di campi crea nuovo campo, crea campo virtuale; digittare nome campo lunghezza_dinamica ; tipo campo uscita Real e lunghezza uscita 10 e 2; nella casella ricerca digitiamo il nome della funzione: \\$length doppio clic sulla funzione \\$lenght per aggiungerla; OK per eseguire; verr\u00e0 aggiunta la colonna lunghezza_dimanica popolata con la funzione \\$lenght Osservazioni \u21b5 Un campo virtuale \u00e8 un campo che si aggiorna dimanicamente e non modifica la tabella attributi in quanto viene memorizzata nel progetto e non nel layer. video youtube il geopackage \u00e8 scaricabile qui","title":"Campo virtuale"},{"location":"esempi/add_campo_virtuale/#come-aggiungere-un-campo-virtuale","text":"Facciamo un esempio, geopackage con vettore lineare: selezionare il layer (presente nel Layer Panel ), tasto destro mouse 'Apri tabella attributi' oppure cliccare sull'icona oppure tasto funzione F6 attivare editing; aprire calcolatore di campi crea nuovo campo, crea campo virtuale; digittare nome campo lunghezza_dinamica ; tipo campo uscita Real e lunghezza uscita 10 e 2; nella casella ricerca digitiamo il nome della funzione: \\$length doppio clic sulla funzione \\$lenght per aggiungerla; OK per eseguire; verr\u00e0 aggiunta la colonna lunghezza_dimanica popolata con la funzione \\$lenght","title":"Come aggiungere un campo virtuale"},{"location":"esempi/add_campo_virtuale/#osservazioni","text":"Un campo virtuale \u00e8 un campo che si aggiorna dimanicamente e non modifica la tabella attributi in quanto viene memorizzata nel progetto e non nel layer. video youtube il geopackage \u00e8 scaricabile qui","title":"Osservazioni"},{"location":"esempi/add_col_area/","tags":["attributi","area"],"text":"Come aggiungere colonna con area [m\u00b2] \u21b5 Facciamo un esempio, geopackage con vettore poligonale: selezionare il layer (presente nel Layer Panel ), tasto destro mouse 'Apri tabella attributi' oppure cliccare sull'icona oppure tasto funzione F6 attivare editing; aprire calcolatore di campi crea nuovo campo; digittare nome campo area ; tipo campo uscita Real; lunghezza uscita 10 e 2; nella casella ricerca digitiamo il nome della funzione: area doppio clic sulla funzione \\$area per aggiungerla; OK per eseguire; verr\u00e0 aggiunta la colonna area e popolata con la funzione \\$area il geopackage \u00e8 scaricabile qui","title":"Campo area"},{"location":"esempi/add_col_area/#come-aggiungere-colonna-con-area-m2","text":"Facciamo un esempio, geopackage con vettore poligonale: selezionare il layer (presente nel Layer Panel ), tasto destro mouse 'Apri tabella attributi' oppure cliccare sull'icona oppure tasto funzione F6 attivare editing; aprire calcolatore di campi crea nuovo campo; digittare nome campo area ; tipo campo uscita Real; lunghezza uscita 10 e 2; nella casella ricerca digitiamo il nome della funzione: area doppio clic sulla funzione \\$area per aggiungerla; OK per eseguire; verr\u00e0 aggiunta la colonna area e popolata con la funzione \\$area il geopackage \u00e8 scaricabile qui","title":"Come aggiungere colonna con area [m\u00b2]"},{"location":"esempi/add_col_z/","tags":["attributi","z","quota","tabella","coordinate"],"text":"Come aggiungere la quota z alla tabella attributi \u21b5 Facciamo un esempio, geopackage con vettore MultiLinestringZ: selezionare il layer (presente nel Layer Panel ), tasto destro mouse 'Apri tabella attributi' oppure cliccare sull'icona oppure tasto funzione F6 attivare editing; aprire calcolatore di campi crea nuovo campo e digitare nome campo quota ; tipo campo uscita Real e lunghezza uscita 13 e 2; cercare la funzione z ; doppio clic sul risultato della ricerca per inserire la funzione; aggiungere la funzione start_point e poi $geometry come argomento delle z(start_point()) ; OK per eseguire; verr\u00e0 aggiunta la colonna quotaz e popolata; evidenziata la colonna con le quote z riassunto \u21b5 in caso di PointZ \u2192 z($geometry) in caso di (Multi)LinestringZ \u2192 z( start_point ( $geometry )) isoipse; in caso di PoligonZ z( point_n ($geometry,1)) il geopackage \u00e8 scaricabile qui","title":"Campo quota z"},{"location":"esempi/add_col_z/#come-aggiungere-la-quota-z-alla-tabella-attributi","text":"Facciamo un esempio, geopackage con vettore MultiLinestringZ: selezionare il layer (presente nel Layer Panel ), tasto destro mouse 'Apri tabella attributi' oppure cliccare sull'icona oppure tasto funzione F6 attivare editing; aprire calcolatore di campi crea nuovo campo e digitare nome campo quota ; tipo campo uscita Real e lunghezza uscita 13 e 2; cercare la funzione z ; doppio clic sul risultato della ricerca per inserire la funzione; aggiungere la funzione start_point e poi $geometry come argomento delle z(start_point()) ; OK per eseguire; verr\u00e0 aggiunta la colonna quotaz e popolata; evidenziata la colonna con le quote z","title":"Come aggiungere la quota z alla tabella attributi"},{"location":"esempi/add_col_z/#riassunto","text":"in caso di PointZ \u2192 z($geometry) in caso di (Multi)LinestringZ \u2192 z( start_point ( $geometry )) isoipse; in caso di PoligonZ z( point_n ($geometry,1)) il geopackage \u00e8 scaricabile qui","title":"riassunto"},{"location":"esempi/add_coord_xy/","tags":["attributi","x","y","tabella","coordinate"],"text":"Come aggiungere le coordinate x e y alla tabella attributi \u21b5 Facciamo un esempio, geopackage con vettore puntuale: selezionare il layer (presente nel Layer Panel ), tasto destro mouse 'Apri tabella attributi' oppure cliccare sull'icona oppure tasto funzione F6 attivare editing; aprire calcolatore di campi crea nuovo campo e digittare nome campo coord_x ; tipo campo uscita Real e lunghezza uscita 13 e 2; cercare la funzione $x ; doppio clic sul risultato della ricerca per inserire la funzione; OK per eseguire; verr\u00e0 aggiunta la colonna coord_x e popolata; ripere gli stessi passi per la coord_y e usare la funzione \\$y : ecco evidenziate le due colonne con le coordinate: il geopackage \u00e8 scaricabile qui","title":"Campi coordinate"},{"location":"esempi/add_coord_xy/#come-aggiungere-le-coordinate-x-e-y-alla-tabella-attributi","text":"Facciamo un esempio, geopackage con vettore puntuale: selezionare il layer (presente nel Layer Panel ), tasto destro mouse 'Apri tabella attributi' oppure cliccare sull'icona oppure tasto funzione F6 attivare editing; aprire calcolatore di campi crea nuovo campo e digittare nome campo coord_x ; tipo campo uscita Real e lunghezza uscita 13 e 2; cercare la funzione $x ; doppio clic sul risultato della ricerca per inserire la funzione; OK per eseguire; verr\u00e0 aggiunta la colonna coord_x e popolata; ripere gli stessi passi per la coord_y e usare la funzione \\$y : ecco evidenziate le due colonne con le coordinate: il geopackage \u00e8 scaricabile qui","title":"Come aggiungere le coordinate x e y alla tabella attributi"},{"location":"esempi/agg_geom/","tags":["attributi","aggiornare"],"text":"Aggiornare l'attributo geometry \u21b5 Il campo geometry \u00e8 un attributo come gli altri per\u00f2 non \u00e8 visibile nella tabella attributi, questo non \u00e8 un limite e quindi \u00e8 possibile aggiornarlo tramite il calcolatore di campi. l'aggiornamento non significa che da punto diventa linea o poligono, ma \u00e8 possibile aggiornale le coordinate dei punti, semplificare una geometria (in termini di numero di vertici). NB: se una geometria \u00e8 2D non possiamo aggiornarla a 3D. Geopackage \u00e8 qui","title":"Aggiornare geometria"},{"location":"esempi/agg_geom/#aggiornare-lattributo-geometry","text":"Il campo geometry \u00e8 un attributo come gli altri per\u00f2 non \u00e8 visibile nella tabella attributi, questo non \u00e8 un limite e quindi \u00e8 possibile aggiornarlo tramite il calcolatore di campi. l'aggiornamento non significa che da punto diventa linea o poligono, ma \u00e8 possibile aggiornale le coordinate dei punti, semplificare una geometria (in termini di numero di vertici). NB: se una geometria \u00e8 2D non possiamo aggiornarla a 3D. Geopackage \u00e8 qui","title":"Aggiornare l'attributo geometry"},{"location":"esempi/aggiungere_punto_a_linea/","tags":["linee","punti"],"text":"Come aggiungere un punto ad una linea \u21b5 Alcune volte pu\u00f2 essere utile aggiungere un nodo di disegno ad una linea, per esempio quando occorre spezzarla proprio in quel punto o in altri casi di sovrapposizione con altre linee. L' aggiornamento delle geometria \u00e8 possibile farla usando il calcolatore di campi. Supponiamo di avere due linee sovrapposte parzialmente ( linea A e linea B ) e di volere aggingere alla linea B un nodo di disegno in corrispondenza del punto A che \u00e8 il vertice finale della linea A : l'espressione da usare \u00e8: make_line( start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',1))), end_point($geometry))","title":"Aggiungere punto a linea"},{"location":"esempi/aggiungere_punto_a_linea/#come-aggiungere-un-punto-ad-una-linea","text":"Alcune volte pu\u00f2 essere utile aggiungere un nodo di disegno ad una linea, per esempio quando occorre spezzarla proprio in quel punto o in altri casi di sovrapposizione con altre linee. L' aggiornamento delle geometria \u00e8 possibile farla usando il calcolatore di campi. Supponiamo di avere due linee sovrapposte parzialmente ( linea A e linea B ) e di volere aggingere alla linea B un nodo di disegno in corrispondenza del punto A che \u00e8 il vertice finale della linea A : l'espressione da usare \u00e8: make_line( start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',1))), end_point($geometry))","title":"Come aggiungere un punto ad una linea"},{"location":"esempi/aggregare_con_sr_differenti/","tags":["aggregare","transform","sr"],"text":"Aggregare con SR differenti \u21b5 La funzione aggregate del gruppo aggrega lavora solo con vettori che hanno stesso SR (Sistema di Riferimento) altrimenti restituisce NULL , in questo esempio useremo la funzione transform per ovviare a questo apparente problema. Esempio: supponiamo di avere due layer: i centroid-comuni (EPSG 4326) e province ISTAT (EPSG 32632) della sola Sicilia; aggiungere un campo nro_com nel layer province e popolarlo con il numero dei comuni. avviare il calcolatore di campi e creare un nuovo campo 'nro_com' Integer (9) e popolarlo con la seguente espressione: aggregate( layer:='centroid_comuni_4326', aggregate:= 'count', expression:=\"fid\", filter:= intersects ($geometry, transform(geometry (@parent), 'EPSG:32632', 'EPSG:4326'))) oppure con questa espressione, il risultato \u00e8 lo stesso: aggregate( layer:='centroid_comuni_4326', aggregate:= 'count', expression:=\"fid\", filter:= intersects (transform($geometry, 'EPSG:4326', 'EPSG:32632'), geometry (@parent))) Nota bene La funzione $geometry , all'interno della funzione di aggregazione, \u00e8 la geometria corrente del layer:='centroid_comuni_4326' e quindi la geometry (@parent) rappresenta la geometria del layer poligonale. Osservazioni \u21b5 Nella funzione aggregate tutto ci\u00f2 che si trova entro le sue parentesi riguarda il relativo layer:= , quindi se utilizzassimo la funzione $geometry questa sarebbe relativa al layer:= , mentre per richiamare una geometria esterna (relativa al layer genitore, cio\u00e8 quello in cui abbiamo avviato il costruttore di espressioni) occorre utulizzare l'espressione geometry(@parent) . In questo esempio $geometry \u00e8 la geometria del layer:=centroid_comuni_4326 mentre l'altra geometria \u00e8 geometry(@parent) relativa al layer province .","title":"Aggrega con SR differenti"},{"location":"esempi/aggregare_con_sr_differenti/#aggregare-con-sr-differenti","text":"La funzione aggregate del gruppo aggrega lavora solo con vettori che hanno stesso SR (Sistema di Riferimento) altrimenti restituisce NULL , in questo esempio useremo la funzione transform per ovviare a questo apparente problema. Esempio: supponiamo di avere due layer: i centroid-comuni (EPSG 4326) e province ISTAT (EPSG 32632) della sola Sicilia; aggiungere un campo nro_com nel layer province e popolarlo con il numero dei comuni. avviare il calcolatore di campi e creare un nuovo campo 'nro_com' Integer (9) e popolarlo con la seguente espressione: aggregate( layer:='centroid_comuni_4326', aggregate:= 'count', expression:=\"fid\", filter:= intersects ($geometry, transform(geometry (@parent), 'EPSG:32632', 'EPSG:4326'))) oppure con questa espressione, il risultato \u00e8 lo stesso: aggregate( layer:='centroid_comuni_4326', aggregate:= 'count', expression:=\"fid\", filter:= intersects (transform($geometry, 'EPSG:4326', 'EPSG:32632'), geometry (@parent))) Nota bene La funzione $geometry , all'interno della funzione di aggregazione, \u00e8 la geometria corrente del layer:='centroid_comuni_4326' e quindi la geometry (@parent) rappresenta la geometria del layer poligonale.","title":"Aggregare con SR differenti"},{"location":"esempi/aggregare_con_sr_differenti/#osservazioni","text":"Nella funzione aggregate tutto ci\u00f2 che si trova entro le sue parentesi riguarda il relativo layer:= , quindi se utilizzassimo la funzione $geometry questa sarebbe relativa al layer:= , mentre per richiamare una geometria esterna (relativa al layer genitore, cio\u00e8 quello in cui abbiamo avviato il costruttore di espressioni) occorre utulizzare l'espressione geometry(@parent) . In questo esempio $geometry \u00e8 la geometria del layer:=centroid_comuni_4326 mentre l'altra geometria \u00e8 geometry(@parent) relativa al layer province .","title":"Osservazioni"},{"location":"esempi/aggregare_elementi_contigui/","tags":["aggregare","adiacenza"],"text":"Aggregare elementi adiacenti \u21b5 Qual \u00e8 la regione italiana che ha pi\u00f9 regioni confinanti?? Qual \u00e8 la regione italiana (tranne le isole) che ha meno regioni confinanti?? Qual \u00e8 la regione italiana che ha una sola regione confinante?? Per ogni regione quali sono le regioni confinante?? a questa e altre domande \u00e8 possibile rispondere utilizzando le funzioni di aggregazione del calcolatore di campi di QGIS. Numero di regioni: espressione da usare: aggregate( layer:= 'regioni_g', aggregate:='count', expression:=to_string(\"COD_REG\"), filter:=touches($geometry, geometry(@parent)) ) Regioni confinanti: aggregate( layer:= 'regioni_g', aggregate:='concatenate', expression:=to_string(\"DEN_REG\"), concatenator:=', ', filter:=touches($geometry, geometry(@parent)) ) funzione aggregate Prova tu Geopackage","title":"Aggregare elementi adiacenti"},{"location":"esempi/aggregare_elementi_contigui/#aggregare-elementi-adiacenti","text":"Qual \u00e8 la regione italiana che ha pi\u00f9 regioni confinanti?? Qual \u00e8 la regione italiana (tranne le isole) che ha meno regioni confinanti?? Qual \u00e8 la regione italiana che ha una sola regione confinante?? Per ogni regione quali sono le regioni confinante?? a questa e altre domande \u00e8 possibile rispondere utilizzando le funzioni di aggregazione del calcolatore di campi di QGIS. Numero di regioni: espressione da usare: aggregate( layer:= 'regioni_g', aggregate:='count', expression:=to_string(\"COD_REG\"), filter:=touches($geometry, geometry(@parent)) ) Regioni confinanti: aggregate( layer:= 'regioni_g', aggregate:='concatenate', expression:=to_string(\"DEN_REG\"), concatenator:=', ', filter:=touches($geometry, geometry(@parent)) ) funzione aggregate Prova tu Geopackage","title":"Aggregare elementi adiacenti"},{"location":"esempi/aggregare_valori_tabella/","tags":["aggregare","array","tabella","valori","csv"],"text":"Aggregare valori di una tabella \u21b5 Data la tabella (semplice file csv) ottenere l' output come in figura: per risolvere questi tipi di problemi occorre necessariamente usare l'algoritmo di Processing Aggrega e la seguente espressione (da mettere nel punto 5 - vedi screen): array_to_string(array_agg(col2||':'||col3, group_by:=col1)) Idea presa da qui: link: https://gis.stackexchange.com/questions/282924/aggregating-strings-in-qgis provaci tu, sotto la tabella \u21b5 col1 col2 col3 1 a c 1 b c 2 c c 2 d b 2 e z Funzioni e variabili utilizzate: array_agg array_to_string","title":"Aggrega valori di una tabella"},{"location":"esempi/aggregare_valori_tabella/#aggregare-valori-di-una-tabella","text":"Data la tabella (semplice file csv) ottenere l' output come in figura: per risolvere questi tipi di problemi occorre necessariamente usare l'algoritmo di Processing Aggrega e la seguente espressione (da mettere nel punto 5 - vedi screen): array_to_string(array_agg(col2||':'||col3, group_by:=col1)) Idea presa da qui: link: https://gis.stackexchange.com/questions/282924/aggregating-strings-in-qgis","title":"Aggregare valori di una tabella"},{"location":"esempi/aggregare_valori_tabella/#provaci-tu-sotto-la-tabella","text":"col1 col2 col3 1 a c 1 b c 2 c c 2 d b 2 e z Funzioni e variabili utilizzate: array_agg array_to_string","title":"provaci tu, sotto la tabella"},{"location":"esempi/array_natural_sorting/","tags":["ordinare","array","tabella","valori","regex","natural-sorting"],"text":"Ordinare numericamente un array alfanumerico \u21b5 (problema noto come Natural Sorting ) Data una lista di numeri civici, una per ogni via di una citt\u00e0, una lista del tipo: nome lista lista_ordinata strada A 5/A-5-4-8-3-6-9-7-1-10-7/B-2-7/A 1,2,3,4,5,5/A,6,7,7/A,7/B,8,9,10 strada B 10-1-2/A-2-3 1,2,2/A,3,10 l'obiettivo di questo esempio \u00e8 di ordinare ( Natural sorting ) i valori della colonna lista in modo da ottenere la colonna lista_ordinata . In pratica, ordinare i civici come se fossero solo numerici e nel caso ci fossero 5/A o 7/B , questi devono posizionarsi correttamente dentro l'ordine numerico (quindi un ordinamento umano). NB1: - \u00e8 il separatore dei civici, / \u00e8 il separatore tra numero e lettera; NB2: nel numero civico, il primo valore \u00e8 un numero seguito da / e da caratteri; Una prima soluzione \u00e8 la seguente: array_to_string ( array_foreach ( array_sort ( with_variable ( 'lista' , string_to_array ( '5/A-5-4-8-3-14-6-9-7-1-10-7/B-2-7/A' , '-' ), array_foreach ( generate_series ( 0 , array_length ( @lista ) - 1 ), lpad ( regexp_substr ( ( @lista [ @element ]), '( \\\\ d+)' ), 3 , '0' ) -- per muneri < 999 || '|' || if ( regexp_substr (( @lista [ @element ]), '([a-zA-Z/]+)' ) != '' , regexp_substr (( @lista [ @element ]), '([a-zA-Z/]+)' ), ' ' ) -- uno spazio || '|' || @lista [ @element ]))), regexp_replace ( @element , '^.+ \\\\ |(.+)$' , ' \\\\ 1' )) ) osservazione \u21b5 Il natural sorting \u00e8 un problema noto (c'\u00e8 molta letteratura) e la soluzione non \u00e8 univoca, dipende dall'algoritmo utilizzato, per maggiori info vedi i riferimenti. Riferimenti \u21b5 domanda posta su SE: https://gis.stackexchange.com/questions/421166/sorting-alphanumeric-array-numerically-using-qgis-field-calculator Natural sorting : https://blog.codinghorror.com/sorting-for-humans-natural-sort-order/ Funzioni e variabili utilizzate: with_variable array_sort array_foreach array_to_string string_to_array generate_series regexp_substr regexp_replace lpad","title":"Array Natural sorting"},{"location":"esempi/array_natural_sorting/#ordinare-numericamente-un-array-alfanumerico","text":"(problema noto come Natural Sorting ) Data una lista di numeri civici, una per ogni via di una citt\u00e0, una lista del tipo: nome lista lista_ordinata strada A 5/A-5-4-8-3-6-9-7-1-10-7/B-2-7/A 1,2,3,4,5,5/A,6,7,7/A,7/B,8,9,10 strada B 10-1-2/A-2-3 1,2,2/A,3,10 l'obiettivo di questo esempio \u00e8 di ordinare ( Natural sorting ) i valori della colonna lista in modo da ottenere la colonna lista_ordinata . In pratica, ordinare i civici come se fossero solo numerici e nel caso ci fossero 5/A o 7/B , questi devono posizionarsi correttamente dentro l'ordine numerico (quindi un ordinamento umano). NB1: - \u00e8 il separatore dei civici, / \u00e8 il separatore tra numero e lettera; NB2: nel numero civico, il primo valore \u00e8 un numero seguito da / e da caratteri; Una prima soluzione \u00e8 la seguente: array_to_string ( array_foreach ( array_sort ( with_variable ( 'lista' , string_to_array ( '5/A-5-4-8-3-14-6-9-7-1-10-7/B-2-7/A' , '-' ), array_foreach ( generate_series ( 0 , array_length ( @lista ) - 1 ), lpad ( regexp_substr ( ( @lista [ @element ]), '( \\\\ d+)' ), 3 , '0' ) -- per muneri < 999 || '|' || if ( regexp_substr (( @lista [ @element ]), '([a-zA-Z/]+)' ) != '' , regexp_substr (( @lista [ @element ]), '([a-zA-Z/]+)' ), ' ' ) -- uno spazio || '|' || @lista [ @element ]))), regexp_replace ( @element , '^.+ \\\\ |(.+)$' , ' \\\\ 1' )) )","title":"Ordinare numericamente un array alfanumerico"},{"location":"esempi/array_natural_sorting/#osservazione","text":"Il natural sorting \u00e8 un problema noto (c'\u00e8 molta letteratura) e la soluzione non \u00e8 univoca, dipende dall'algoritmo utilizzato, per maggiori info vedi i riferimenti.","title":"osservazione"},{"location":"esempi/array_natural_sorting/#riferimenti","text":"domanda posta su SE: https://gis.stackexchange.com/questions/421166/sorting-alphanumeric-array-numerically-using-qgis-field-calculator Natural sorting : https://blog.codinghorror.com/sorting-for-humans-natural-sort-order/ Funzioni e variabili utilizzate: with_variable array_sort array_foreach array_to_string string_to_array generate_series regexp_substr regexp_replace lpad","title":"Riferimenti"},{"location":"esempi/assegnare_cat_prevalente/","tags":["categoria","array","tabella","prevalenza"],"text":"Assegnare categoria prevalente \u21b5 Dati due shapefile poligonali, fabbricati e circorscrizioni . I fabbricati hanno un attributo (categoria) che li categorizza come A,B,C,D. Come attribuire alle circoscrizioni la categoria prevalente dei fabbricati? cio\u00e8, se ci fossero, in una circoscrizione, pi\u00f9 fabbricati con categorie B, rispetto agli altri, allora assegnare la categoria B, oppure A se, la maggioranza dei fabbricati, fosse la categoria A. Avviare il calcolatore di campi relativamente al layer circoscrizioni e creiare un campo testuale: popolare con la seguente espressione: array_majority( string_to_array( aggregate( layer:='fabbricati_pa', aggregate:='concatenate', expression:=\"categoria\", filter:=intersects( $geometry, geometry(@parent)), concatenator:=',') ) ) PS: occorre installare il plugin ArrayPlus per poter usare la funzione array_majority nelle versioni <= QGIS 3.16; La funzione array_majority \u00e8 disponibile nativamente a partire da QGIS 3.18 Prova tu Geopackage Funzioni e variabili utilizzate: array_majority string_to_array aggregate","title":"Assegnare categoria prevalente"},{"location":"esempi/assegnare_cat_prevalente/#assegnare-categoria-prevalente","text":"Dati due shapefile poligonali, fabbricati e circorscrizioni . I fabbricati hanno un attributo (categoria) che li categorizza come A,B,C,D. Come attribuire alle circoscrizioni la categoria prevalente dei fabbricati? cio\u00e8, se ci fossero, in una circoscrizione, pi\u00f9 fabbricati con categorie B, rispetto agli altri, allora assegnare la categoria B, oppure A se, la maggioranza dei fabbricati, fosse la categoria A. Avviare il calcolatore di campi relativamente al layer circoscrizioni e creiare un campo testuale: popolare con la seguente espressione: array_majority( string_to_array( aggregate( layer:='fabbricati_pa', aggregate:='concatenate', expression:=\"categoria\", filter:=intersects( $geometry, geometry(@parent)), concatenator:=',') ) ) PS: occorre installare il plugin ArrayPlus per poter usare la funzione array_majority nelle versioni <= QGIS 3.16; La funzione array_majority \u00e8 disponibile nativamente a partire da QGIS 3.18 Prova tu Geopackage Funzioni e variabili utilizzate: array_majority string_to_array aggregate","title":"Assegnare categoria prevalente"},{"location":"esempi/atlas_righe_verticale/","tags":["atlante","tabella","valori","chiave-valore"],"text":"Atlas con righe tabella attributi in verticale \u21b5 Alcune volte nasce l'esigenza di stampare la tabella attributi di un atlante in verticale e non nel classico modo in orizzontale: Espressione da usare: replace ( replace ( replace ( map_to_hstore ( attributes ()) , '\"' , '' ), '=>' , ' = ' ), ',' , ' \\n ' ) dove l'espressione che crea una struttura a mappa \u00e8: map_to_hstore( attributes()) \u2192 '\"cod_reg\"=>\"1\",\"cod_rip\"=>\"1\",\"den_reg\"=>\"Piemonte\",\"fid\"=>\"\u2026' le funzioni replace() servono a modificare l'output, cio\u00e8 a togliere i doppi apici, la freccia e aggiungere il vai a capo. NB: I campi sono ordinati alfabeticamente! Funzioni e variabili utilizzate: replace map_to_hstore attributes","title":"Atlante con righe tabella in verticale"},{"location":"esempi/atlas_righe_verticale/#atlas-con-righe-tabella-attributi-in-verticale","text":"Alcune volte nasce l'esigenza di stampare la tabella attributi di un atlante in verticale e non nel classico modo in orizzontale: Espressione da usare: replace ( replace ( replace ( map_to_hstore ( attributes ()) , '\"' , '' ), '=>' , ' = ' ), ',' , ' \\n ' ) dove l'espressione che crea una struttura a mappa \u00e8: map_to_hstore( attributes()) \u2192 '\"cod_reg\"=>\"1\",\"cod_rip\"=>\"1\",\"den_reg\"=>\"Piemonte\",\"fid\"=>\"\u2026' le funzioni replace() servono a modificare l'output, cio\u00e8 a togliere i doppi apici, la freccia e aggiungere il vai a capo. NB: I campi sono ordinati alfabeticamente! Funzioni e variabili utilizzate: replace map_to_hstore attributes","title":"Atlas con righe tabella attributi in verticale"},{"location":"esempi/attributi_da_layer_vicini/","tags":["prossimit\u00e0","attributi","tabella","layer","overlay","punti"],"text":"Prelevare attributi da layer pi\u00f9 vicini \u21b5 Livello di linea (MultiLineString) e 4 livelli di punti (MultiPoint). Il mio livello di linea ha 2 campi di attributi start_pt e end_pt , ho bisogno che vengano compilati con un attributo identificativo (dati stringa popolati con valori come A01, B01, B02, C01, ecc. quindi non \u00e8 il $id valore normale) da una qualsiasi delle potenziali caratteristiche dei 4 livelli punti che pu\u00f2 essere agganciato alla feature di linea. esempio sotto: Espressioni utilizzate per QGIS >= 3.18: campo start_pt : overlay_nearest(layer:= with_variable('in_layer',array('cat_A','cat_B','cat_C','cat_D'), with_variable('in_dist', array_foreach(@in_layer,distance(overlay_nearest(@element,$geometry)[0], start_point($geometry))), array_get(@in_layer, array_find(@in_dist, array_min(@in_dist))))) ,expression:= id )[0] campo end_pt : overlay_nearest(layer:= with_variable('in_layer',array('cat_A','cat_B','cat_C','cat_D'), with_variable('in_dist', array_foreach(@in_layer,distance(overlay_nearest(@element,$geometry)[0], end_point($geometry))), array_get(@in_layer, array_find(@in_dist, array_min(@in_dist))))) ,expression:= id )[0] l'unica differenza tra le due espressioni di sopra \u00e8 nelle funzioni: start_point e and_point . nel linguaggio umano: l'espressione crea due varibili, la prima contiene i nomi dei 4 layer, la seconda crea un array di distanze tra i 4 layer e il layer lineare; infine, tra i vari valori distanza scelgo quello pi\u00f9 piccolo, una volta rispetto a star_point e una volta per l' end_point . EDIT: Le espressioni di sopra risolvono il caso in esame, ma non risolvono il caso in cui una linea abbia, come punti estremi, punti dello stesso layer puntuale: in questo caso le espressioni non riescono a distinguere lo start_point dall'end_point e restituirebbe sempre lo stesso valore; per risolvere il problema si propone la seguente espressione: -- select id with_variable('feature', -- search for the nearest points overlay_nearest(layer:= -- search for the closest layer with_variable('in_layer',array('cat_A','cat_B','cat_C','cat_D'), -- point layer list with_variable('in_dist', array_foreach(@in_layer, distance(overlay_nearest(@element,$geometry)[0], end_point($geometry))), -- change start or end_point array_get(@in_layer, array_find(@in_dist, array_sort(@in_dist)[0])))) -- search for the closest layer ,expression:= id, limit:=2, max_distance:=0.1 ) -- search for the nearest points , if(array_length( @feature)>1, @feature[1], -- 0: start_point; 1: end_point @feature[0]) -- ) -- select id quesito su stackexchange: https://gis.stackexchange.com/questions/417080/populate-lines-attribute-fields-with-attributes-from-point-features-snapped-to osservazioni: i 4 livelli punti si chiamano 'cat_A','cat_B','cat_C','cat_D'; il livello linea si chiama line. Provaci tu \u21b5 il GeoPackage \u00e8 qui Funzioni e variabili utilizzate: @with_variable array_get array_foreach array_find array_min overlay_nearest distance array start_point end_point $geometry","title":"Prelevare attributi da layer pi\u00f9 vicini"},{"location":"esempi/attributi_da_layer_vicini/#prelevare-attributi-da-layer-piu-vicini","text":"Livello di linea (MultiLineString) e 4 livelli di punti (MultiPoint). Il mio livello di linea ha 2 campi di attributi start_pt e end_pt , ho bisogno che vengano compilati con un attributo identificativo (dati stringa popolati con valori come A01, B01, B02, C01, ecc. quindi non \u00e8 il $id valore normale) da una qualsiasi delle potenziali caratteristiche dei 4 livelli punti che pu\u00f2 essere agganciato alla feature di linea. esempio sotto: Espressioni utilizzate per QGIS >= 3.18: campo start_pt : overlay_nearest(layer:= with_variable('in_layer',array('cat_A','cat_B','cat_C','cat_D'), with_variable('in_dist', array_foreach(@in_layer,distance(overlay_nearest(@element,$geometry)[0], start_point($geometry))), array_get(@in_layer, array_find(@in_dist, array_min(@in_dist))))) ,expression:= id )[0] campo end_pt : overlay_nearest(layer:= with_variable('in_layer',array('cat_A','cat_B','cat_C','cat_D'), with_variable('in_dist', array_foreach(@in_layer,distance(overlay_nearest(@element,$geometry)[0], end_point($geometry))), array_get(@in_layer, array_find(@in_dist, array_min(@in_dist))))) ,expression:= id )[0] l'unica differenza tra le due espressioni di sopra \u00e8 nelle funzioni: start_point e and_point . nel linguaggio umano: l'espressione crea due varibili, la prima contiene i nomi dei 4 layer, la seconda crea un array di distanze tra i 4 layer e il layer lineare; infine, tra i vari valori distanza scelgo quello pi\u00f9 piccolo, una volta rispetto a star_point e una volta per l' end_point . EDIT: Le espressioni di sopra risolvono il caso in esame, ma non risolvono il caso in cui una linea abbia, come punti estremi, punti dello stesso layer puntuale: in questo caso le espressioni non riescono a distinguere lo start_point dall'end_point e restituirebbe sempre lo stesso valore; per risolvere il problema si propone la seguente espressione: -- select id with_variable('feature', -- search for the nearest points overlay_nearest(layer:= -- search for the closest layer with_variable('in_layer',array('cat_A','cat_B','cat_C','cat_D'), -- point layer list with_variable('in_dist', array_foreach(@in_layer, distance(overlay_nearest(@element,$geometry)[0], end_point($geometry))), -- change start or end_point array_get(@in_layer, array_find(@in_dist, array_sort(@in_dist)[0])))) -- search for the closest layer ,expression:= id, limit:=2, max_distance:=0.1 ) -- search for the nearest points , if(array_length( @feature)>1, @feature[1], -- 0: start_point; 1: end_point @feature[0]) -- ) -- select id quesito su stackexchange: https://gis.stackexchange.com/questions/417080/populate-lines-attribute-fields-with-attributes-from-point-features-snapped-to osservazioni: i 4 livelli punti si chiamano 'cat_A','cat_B','cat_C','cat_D'; il livello linea si chiama line.","title":"Prelevare attributi da layer pi\u00f9 vicini"},{"location":"esempi/attributi_da_layer_vicini/#provaci-tu","text":"il GeoPackage \u00e8 qui Funzioni e variabili utilizzate: @with_variable array_get array_foreach array_find array_min overlay_nearest distance array start_point end_point $geometry","title":"Provaci tu"},{"location":"esempi/calcolo_area_poligoni_reticolo/","tags":["area","poligoni","reticolo","aggregare"],"text":"Calcolo area poligoni all'interno di un reticoli \u21b5 Calcolare l\u2019area delle porzioni di poligoni che ricadono dentro ad una cella di un reticolo. Esempio : lo strato \u00e8 un dusaf (Destinazione d\u2019Uso dei Suoli Agricoli e forestali ndr), la domanda a cui rispondere \u00e8: quanta superficie di quegli usi del suolo ricadono nella singola maglia del reticolo? Aggiungere un campo sup (tipo Real) nella tabella attributi del layer reticolo e popolarlo \u2013 usando il calcolatore di campi di QGIS \u2013 con la seguente espressione: aggregate( layer:='dusaf_5', aggregate:='sum', expression:=area(intersection(geometry(@parent),$geometry )), filter:=intersects( $geometry,geometry(@parent))) La funzione di aggregazione calcola l\u2019area della porzione di dusaf che interseca ogni rettangolo del reticolo e poi somma per ogni rettangolo. Funzione il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: aggregate","title":"Calcolo area poligoni nel reticolo"},{"location":"esempi/calcolo_area_poligoni_reticolo/#calcolo-area-poligoni-allinterno-di-un-reticoli","text":"Calcolare l\u2019area delle porzioni di poligoni che ricadono dentro ad una cella di un reticolo. Esempio : lo strato \u00e8 un dusaf (Destinazione d\u2019Uso dei Suoli Agricoli e forestali ndr), la domanda a cui rispondere \u00e8: quanta superficie di quegli usi del suolo ricadono nella singola maglia del reticolo? Aggiungere un campo sup (tipo Real) nella tabella attributi del layer reticolo e popolarlo \u2013 usando il calcolatore di campi di QGIS \u2013 con la seguente espressione: aggregate( layer:='dusaf_5', aggregate:='sum', expression:=area(intersection(geometry(@parent),$geometry )), filter:=intersects( $geometry,geometry(@parent))) La funzione di aggregazione calcola l\u2019area della porzione di dusaf che interseca ogni rettangolo del reticolo e poi somma per ogni rettangolo. Funzione il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: aggregate","title":"Calcolo area poligoni all'interno di un reticoli"},{"location":"esempi/calcolo_incrementi_giornalieri/","tags":["incrementi","attributi","tabella","valori","condizioni"],"text":"Calcolo incrementi giornalieri di un attributo \u21b5 Supponiamo di avere un campo ( tot_att_pos ) popolato con valori aggregati giornalieri, per esempio il numero totale di contagiati da CoronaVirus , ecco un tabella di esempio: data tot_att_pos delta 2020-03-09 7985 1598 2020-03-08 6387 1326 2020-03-07 5061 1145 2020-03-06 3916 620 2020-03-05 3296 590 2020-03-04 2706 443 2020-03-03 2263 428 2020-03-02 1835 258 2020-03-01 1577 528 2020-02-29 1049 228 2020-02-28 821 233 2020-02-27 588 203 2020-02-26 385 74 2020-02-25 311 90 2020-02-24 221 221 come calcolare la colonna delta , popolata con gli incrementi giornalieri? Per esempio, negli ultimi due giorni il campo tot_att_pos \u00e8 passato da 6387 a 7985 , il delta \u00e8 1598 . L'espressione usata per popolare il campo delta \u00e8 la seguente: with_variable( 'my_exp', array_find( array_agg( expression:= \"data\" , order_by:= \"data\"),\"data\" ), if( @my_exp = 0, -- condizione (array_agg( expression:= \"tot_att_pos\" , order_by:= \"data\" )[0]), -- se vero (\"tot_att_pos\" - (array_agg( expression:= \"tot_att_pos\" , order_by:= \"data\" )[@my_exp-1])) -- altrimenti ) ) In termini umani significa: Se il primo elemento dell'array \u00e8 0 associa il primo elemento dell'array dell'attributo tot_att_pos ordinato per data, altrimenti fai la differenza tra il valore corrente e il valore precedente. questo ci permette di creare questi due grafici: Funzioni e variabili utilizzate: with_variable if array_find array_agg","title":"Calcolo incrementi giornalieri"},{"location":"esempi/calcolo_incrementi_giornalieri/#calcolo-incrementi-giornalieri-di-un-attributo","text":"Supponiamo di avere un campo ( tot_att_pos ) popolato con valori aggregati giornalieri, per esempio il numero totale di contagiati da CoronaVirus , ecco un tabella di esempio: data tot_att_pos delta 2020-03-09 7985 1598 2020-03-08 6387 1326 2020-03-07 5061 1145 2020-03-06 3916 620 2020-03-05 3296 590 2020-03-04 2706 443 2020-03-03 2263 428 2020-03-02 1835 258 2020-03-01 1577 528 2020-02-29 1049 228 2020-02-28 821 233 2020-02-27 588 203 2020-02-26 385 74 2020-02-25 311 90 2020-02-24 221 221 come calcolare la colonna delta , popolata con gli incrementi giornalieri? Per esempio, negli ultimi due giorni il campo tot_att_pos \u00e8 passato da 6387 a 7985 , il delta \u00e8 1598 . L'espressione usata per popolare il campo delta \u00e8 la seguente: with_variable( 'my_exp', array_find( array_agg( expression:= \"data\" , order_by:= \"data\"),\"data\" ), if( @my_exp = 0, -- condizione (array_agg( expression:= \"tot_att_pos\" , order_by:= \"data\" )[0]), -- se vero (\"tot_att_pos\" - (array_agg( expression:= \"tot_att_pos\" , order_by:= \"data\" )[@my_exp-1])) -- altrimenti ) ) In termini umani significa: Se il primo elemento dell'array \u00e8 0 associa il primo elemento dell'array dell'attributo tot_att_pos ordinato per data, altrimenti fai la differenza tra il valore corrente e il valore precedente. questo ci permette di creare questi due grafici: Funzioni e variabili utilizzate: with_variable if array_find array_agg","title":"Calcolo incrementi giornalieri di un attributo"},{"location":"esempi/campo_coord_in_lat_lon/","tags":["campi","attributi","tabella","coordinate","regex"],"text":"Da un campo di coordinate a due campi \u21b5 Alcune volte abbiamo a che fare con un campo che contiene entrambe le coordinate separate da una virgola 44.8636937,10.0077403 , come questa di sotto: DATA NOME GPS 01/02/20 cucu 44.852747416606434,10.028176383697463 02/02/20 ciao 44.044566892850995,12.055562011167229 03/02/20 arrivederci 41.83774391119999,13.131616192302847 04/02/20 pluto 41.08389804418973,16.013252812971114 05/02/20 paperino 38.336008270894254,16.06188803019758 Una tabella cosi fatta non \u00e8 immediatamente utilizzabile in un GIS, occorre separare le due coordinate in due campi distinti, come sotto: DATA NOME GPS latitude longitude 01/02/20 cucu 44.852747416606434,10.028176383697463 44.852747416606434 10.028176383697463 02/02/20 ciao 44.044566892850995,12.055562011167229 44.044566892850995 12.055562011167229 03/02/20 arrivederci 41.83774391119999,13.131616192302847 41.83774391119999 13.131616192302847 04/02/20 pluto 41.08389804418973,16.013252812971114 41.08389804418973 16.013252812971114 05/02/20 paperino 38.336008270894254,16.06188803019758 38.336008270894254 16.06188803019758 vediamo come farlo usando il calcolatore di campi: aggiungere un nuovo campo latitude , tipo Real con lunghezza 10 e precisione 7; utilizzare la seguente espressione: regexp_matches( \"GPS\" , '(.+),(.+)')[0] ; aggiungere un nuovo campo longitude , tipo Real con lunghezza 10 e precisione 7; utilizzare la seguente espressione: regexp_matches( \"GPS\" , '(.+),(.+)')[1] ; Infine, per tracciare i punti, utilizzare l'algoritmo Create points layer from table ed utilizzare i due campi longitude e latitude . Funzioni e variabili utilizzate: regexp_match","title":"Campo coord in lat lon"},{"location":"esempi/campo_coord_in_lat_lon/#da-un-campo-di-coordinate-a-due-campi","text":"Alcune volte abbiamo a che fare con un campo che contiene entrambe le coordinate separate da una virgola 44.8636937,10.0077403 , come questa di sotto: DATA NOME GPS 01/02/20 cucu 44.852747416606434,10.028176383697463 02/02/20 ciao 44.044566892850995,12.055562011167229 03/02/20 arrivederci 41.83774391119999,13.131616192302847 04/02/20 pluto 41.08389804418973,16.013252812971114 05/02/20 paperino 38.336008270894254,16.06188803019758 Una tabella cosi fatta non \u00e8 immediatamente utilizzabile in un GIS, occorre separare le due coordinate in due campi distinti, come sotto: DATA NOME GPS latitude longitude 01/02/20 cucu 44.852747416606434,10.028176383697463 44.852747416606434 10.028176383697463 02/02/20 ciao 44.044566892850995,12.055562011167229 44.044566892850995 12.055562011167229 03/02/20 arrivederci 41.83774391119999,13.131616192302847 41.83774391119999 13.131616192302847 04/02/20 pluto 41.08389804418973,16.013252812971114 41.08389804418973 16.013252812971114 05/02/20 paperino 38.336008270894254,16.06188803019758 38.336008270894254 16.06188803019758 vediamo come farlo usando il calcolatore di campi: aggiungere un nuovo campo latitude , tipo Real con lunghezza 10 e precisione 7; utilizzare la seguente espressione: regexp_matches( \"GPS\" , '(.+),(.+)')[0] ; aggiungere un nuovo campo longitude , tipo Real con lunghezza 10 e precisione 7; utilizzare la seguente espressione: regexp_matches( \"GPS\" , '(.+),(.+)')[1] ; Infine, per tracciare i punti, utilizzare l'algoritmo Create points layer from table ed utilizzare i due campi longitude e latitude . Funzioni e variabili utilizzate: regexp_match","title":"Da un campo di coordinate a due campi"},{"location":"esempi/centroid_linee/","tags":["linee","centroidi","wkt","valori","csv"],"text":"Ottenere i centroidi lungo le linee \u21b5 Come ottenere i centroidi di linee curve lungo le linee stesse? avviare il calcolatore di campi e creare un nuovo campo coord_WKT testuale e popolarlo con la seguente espressione: geom_to_wkt( line_interpolate_point( $geometry, $length/2) ) ecco la tabella attributi: Esportare lo strato in formato CSV: Importialo il nuovo strato CSV come testo delimitato: Ecco il risultato finale, i centroidi sono lungo le linee: il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: $geometry $length line_interpolate_point geom_to_wkt","title":"Centroidi linee curve"},{"location":"esempi/centroid_linee/#ottenere-i-centroidi-lungo-le-linee","text":"Come ottenere i centroidi di linee curve lungo le linee stesse? avviare il calcolatore di campi e creare un nuovo campo coord_WKT testuale e popolarlo con la seguente espressione: geom_to_wkt( line_interpolate_point( $geometry, $length/2) ) ecco la tabella attributi: Esportare lo strato in formato CSV: Importialo il nuovo strato CSV come testo delimitato: Ecco il risultato finale, i centroidi sono lungo le linee: il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: $geometry $length line_interpolate_point geom_to_wkt","title":"Ottenere i centroidi lungo le linee"},{"location":"esempi/classificazione_specie/","tags":["classificare","array","tabella","valori","chiave-valore","csv"],"text":"Classificare specie \u21b5 Una colonna taxa contiene una serie di specie separate da #. Come creare una nuova colonna che restituisce una somma di valori, in base alla specie, definiti in un'altra tabella. Sotto un esempio: di seguito alcuni esempi di valori per specie: taxon value Calluna_vulgaris 1 Baeomyces_rufus 1 Porpidia_crustulata 2 Rhizocarpon_reductum 2 Micarea_erratica 2 Hypnum_jutlandicum 0.333 Erica_tetralix 2 Carex_pilulifera 1.5 esempio di cosa ottenere: se la colonna taxa contenesse Calluna_vulgaris#Porpidia_crustulata#Micarea_erratica la nuova colonna devobbe contenere 5 (1+2+2). Prima soluzione \u21b5 array_sum( array_foreach( string_to_array(\"taxa\",'#'), to_real(attribute(get_feature('taxon','taxon',@element),'value')))) questa soluzione fa uso di un layer taxon che contiene l'elenco delle specie e i relativi valori. Seconda soluzione \u21b5 array_sum( array_foreach( string_to_array(\"taxa\",'#'), map_get( map( 'Calluna_vulgaris',1, 'Baeomyces_rufus',1, 'Porpidia_crustulata',2, 'Rhizocarpon_reductum',2, 'Micarea_erratica',2, 'Hypnum_jutlandicum',0.333, 'Erica_tetralix',2, 'Carex_pilulifera',1.5), @element))) questa soluzione fa uso di un dizionario (mappe valori) che contiene l'elenco e i valori delle specie. output \u21b5 Prova tu \u21b5 Geopackage \u00e8 qui idea presa da qui Funzioni e variabili utilizzate: array_sum array_foreach get_feature attribute map_get map string_to_array to_real","title":"Prelevare attributi da layer pi\u00f9 vicini"},{"location":"esempi/classificazione_specie/#classificare-specie","text":"Una colonna taxa contiene una serie di specie separate da #. Come creare una nuova colonna che restituisce una somma di valori, in base alla specie, definiti in un'altra tabella. Sotto un esempio: di seguito alcuni esempi di valori per specie: taxon value Calluna_vulgaris 1 Baeomyces_rufus 1 Porpidia_crustulata 2 Rhizocarpon_reductum 2 Micarea_erratica 2 Hypnum_jutlandicum 0.333 Erica_tetralix 2 Carex_pilulifera 1.5 esempio di cosa ottenere: se la colonna taxa contenesse Calluna_vulgaris#Porpidia_crustulata#Micarea_erratica la nuova colonna devobbe contenere 5 (1+2+2).","title":"Classificare specie"},{"location":"esempi/classificazione_specie/#prima-soluzione","text":"array_sum( array_foreach( string_to_array(\"taxa\",'#'), to_real(attribute(get_feature('taxon','taxon',@element),'value')))) questa soluzione fa uso di un layer taxon che contiene l'elenco delle specie e i relativi valori.","title":"Prima soluzione"},{"location":"esempi/classificazione_specie/#seconda-soluzione","text":"array_sum( array_foreach( string_to_array(\"taxa\",'#'), map_get( map( 'Calluna_vulgaris',1, 'Baeomyces_rufus',1, 'Porpidia_crustulata',2, 'Rhizocarpon_reductum',2, 'Micarea_erratica',2, 'Hypnum_jutlandicum',0.333, 'Erica_tetralix',2, 'Carex_pilulifera',1.5), @element))) questa soluzione fa uso di un dizionario (mappe valori) che contiene l'elenco e i valori delle specie.","title":"Seconda soluzione"},{"location":"esempi/classificazione_specie/#output","text":"","title":"output"},{"location":"esempi/classificazione_specie/#prova-tu","text":"Geopackage \u00e8 qui idea presa da qui Funzioni e variabili utilizzate: array_sum array_foreach get_feature attribute map_get map string_to_array to_real","title":"Prova tu"},{"location":"esempi/confrontare_campi_tabella/","tags":["attributi","array","tabella","valori","confrontare"],"text":"Confrontare due campi tabella attributi \u21b5 Ho una tabella con due campi che raccolgono una lista di numeri di fogli catastali, come confrontarle e estrarre solo i numeri fogli uguali? Espressioni di QGIS \u21b5 Importo la tabella in QGIS come testo delimitato, creo una colonna testo output e la popolo con la seguente espressione: array_to_string( array_majority( array_cat( string_to_array(replace(\"fogli1\",'-',',')), string_to_array(replace(\"fogli2\",'-',',')) ))) Tradotto in linguaggio umano: Trasforma i valori dei due campi in array ( string_to_array(replace(\"fogli1\",'|',',')) ) e poi concatenali ( array_cat ), cio\u00e8 crea unico array , successivamente estrai l'array dei valori che maggiormente sono presenti ( array_majority ), infine converti l'array in stringa. provaci tu \u21b5 qui file di esempio Funzioni e variabili utilizzate: array_to_string array_majority array_cat string_to_array","title":"Confrontare campi tabella attributi"},{"location":"esempi/confrontare_campi_tabella/#confrontare-due-campi-tabella-attributi","text":"Ho una tabella con due campi che raccolgono una lista di numeri di fogli catastali, come confrontarle e estrarre solo i numeri fogli uguali?","title":"Confrontare due campi tabella attributi"},{"location":"esempi/confrontare_campi_tabella/#espressioni-di-qgis","text":"Importo la tabella in QGIS come testo delimitato, creo una colonna testo output e la popolo con la seguente espressione: array_to_string( array_majority( array_cat( string_to_array(replace(\"fogli1\",'-',',')), string_to_array(replace(\"fogli2\",'-',',')) ))) Tradotto in linguaggio umano: Trasforma i valori dei due campi in array ( string_to_array(replace(\"fogli1\",'|',',')) ) e poi concatenali ( array_cat ), cio\u00e8 crea unico array , successivamente estrai l'array dei valori che maggiormente sono presenti ( array_majority ), infine converti l'array in stringa.","title":"Espressioni di QGIS"},{"location":"esempi/confrontare_campi_tabella/#provaci-tu","text":"qui file di esempio Funzioni e variabili utilizzate: array_to_string array_majority array_cat string_to_array","title":"provaci tu"},{"location":"esempi/conta_punti_in_poligono/","tags":["contare","punti","poligoni","aggregare"],"text":"Conta i punti nel poligono \u21b5 Contare i features di un layer puntuale che ricadono dentro poligoni, e \u2018appendere\u2019 i valori nella tabella attributi del layer poligonale. Esiste una geo-algoritmo in processing (Conta i punti nel poligono) che fa questo lavoro in modo brillante ma crea un altro strato. Un modo rapido per evitare la creazione di un nuovo layer \u00e8 quello di utilizzare il calcolatore di campi: creare un nuovo campo ' nro ' nel layer poligonale; popolarlo utilizzando la seguente espressione: aggregate( layer:='punti', aggregate:='count', expression:=$id, filter:=intersects( $geometry, geometry(@parent)) ) risultato: NB: i due layer devono avere stesso SR, altrimenti restituir\u00e0 sempre zero. Geopackage \u00e8 qui QUI VIDEO Funzioni e variabili utilizzate: aggregate","title":"Conta i punti nel poligono"},{"location":"esempi/conta_punti_in_poligono/#conta-i-punti-nel-poligono","text":"Contare i features di un layer puntuale che ricadono dentro poligoni, e \u2018appendere\u2019 i valori nella tabella attributi del layer poligonale. Esiste una geo-algoritmo in processing (Conta i punti nel poligono) che fa questo lavoro in modo brillante ma crea un altro strato. Un modo rapido per evitare la creazione di un nuovo layer \u00e8 quello di utilizzare il calcolatore di campi: creare un nuovo campo ' nro ' nel layer poligonale; popolarlo utilizzando la seguente espressione: aggregate( layer:='punti', aggregate:='count', expression:=$id, filter:=intersects( $geometry, geometry(@parent)) ) risultato: NB: i due layer devono avere stesso SR, altrimenti restituir\u00e0 sempre zero. Geopackage \u00e8 qui QUI VIDEO Funzioni e variabili utilizzate: aggregate","title":"Conta  i punti nel poligono"},{"location":"esempi/conta_punti_nel_poligono_per_data/","tags":["contare","punti","poligoni","data","array"],"text":"Conta punti nel poligono e per data \u21b5 Immaginiamo di avere dei poligoni in cui ricadono dei punti: contare i punti per ogni poligono e per ogni data. creare un nuovo campo nel layer poligonale e popolarlo con la seguente espressione: array_to_string ( with_variable ( 'arraydate' , aggregate ( layer := 'nomeLayerPunti' , -- layer punti con attributo date aggregate := 'array_agg' , expression := \"date\" , -- campo data order_by := \"date\" , filter := intersects ( $ geometry , geometry ( @parent ))), array_foreach ( array_distinct ( @arraydate ), @element || ': ' || array_count ( @arraydate , @element )) )) prova tu \u21b5 idea presa da qui SE: https://gis.stackexchange.com/questions/422320/counting-points-in-polygon-by-time-in-qgis Funzioni e variabili utilizzate: @parent @with_variable aggregate array_to_string array_count array_foreach array_distinct $geometry intersects","title":"Conta punti nel poligono e per data"},{"location":"esempi/conta_punti_nel_poligono_per_data/#conta-punti-nel-poligono-e-per-data","text":"Immaginiamo di avere dei poligoni in cui ricadono dei punti: contare i punti per ogni poligono e per ogni data. creare un nuovo campo nel layer poligonale e popolarlo con la seguente espressione: array_to_string ( with_variable ( 'arraydate' , aggregate ( layer := 'nomeLayerPunti' , -- layer punti con attributo date aggregate := 'array_agg' , expression := \"date\" , -- campo data order_by := \"date\" , filter := intersects ( $ geometry , geometry ( @parent ))), array_foreach ( array_distinct ( @arraydate ), @element || ': ' || array_count ( @arraydate , @element )) ))","title":"Conta punti nel poligono e per data"},{"location":"esempi/conta_punti_nel_poligono_per_data/#prova-tu","text":"idea presa da qui SE: https://gis.stackexchange.com/questions/422320/counting-points-in-polygon-by-time-in-qgis Funzioni e variabili utilizzate: @parent @with_variable aggregate array_to_string array_count array_foreach array_distinct $geometry intersects","title":"prova tu"},{"location":"esempi/conteggio/","tags":["contare","array","tabella","aggregare"],"text":"Conteggio valori in un campo \u21b5 Supponiamo di voler contare il numero di valori all'interno di un campo cio\u00e8 ottenere il numero di volte che, un valore, si ripete. Per risolvere il problema utilizzeremo il gruppo di funzioni Aggrega e in particolare la funzione Count creare un campo numerico conteggio ; popolarlo con l'espressione: count(expression:=\"nome\",group_by:=\"nome\") \"nome\" \u00e8 il campo che contiene i valori da contare e raggruppare; Osservazione : la tabella attributi non puo' essere modificata, quindi se un valore \u00e8 presente 10 volte avremmo - in corrispondenza ad ognuno - il valore 10 ripetuto 10 volte. il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: Count","title":"Conteggio valori"},{"location":"esempi/conteggio/#conteggio-valori-in-un-campo","text":"Supponiamo di voler contare il numero di valori all'interno di un campo cio\u00e8 ottenere il numero di volte che, un valore, si ripete. Per risolvere il problema utilizzeremo il gruppo di funzioni Aggrega e in particolare la funzione Count creare un campo numerico conteggio ; popolarlo con l'espressione: count(expression:=\"nome\",group_by:=\"nome\") \"nome\" \u00e8 il campo che contiene i valori da contare e raggruppare; Osservazione : la tabella attributi non puo' essere modificata, quindi se un valore \u00e8 presente 10 volte avremmo - in corrispondenza ad ognuno - il valore 10 ripetuto 10 volte. il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: Count","title":"Conteggio valori in un campo"},{"location":"esempi/conteggio_caratteri_diversi/","tags":["contare","caratteri","tabella","array","regex"],"text":"Conteggio caratteri diversi \u21b5 Problema : come posso classificare in automatico i codici (tipo 133114 ecc.) per identificare il numero dei cambiamenti, cio\u00e8 il numero di caratteri diversi? Per esempio, nella stringa 133114 ci sono \"1\" tre volte, \"3\" due volte, \"4\" una volta, dunque ci sono tre caratteri diversi. Nella stringa 222222 c'\u00e8 un solo carattere (\"2\") ecc. Quesito preso dalla ML QGIS-user-it Tabella di esempio: ID field output 1 133114 3 2 222222 1 3 ABBACD 4 Una soluzione passa per l'uso degli array : array_length( array_distinct( string_to_array( regexp_replace(regexp_replace( 133114,'(.)','\\\\1,'),',$','')))) \u2192 3 nel caso in esame utilizzando il campo field array_length( array_distinct( string_to_array( regexp_replace(regexp_replace( \"field\",'(.)','\\\\1,'),',$','')))) oppure per evitare il doppio regex_replace (Grazie Andrea Giudiceandrea ) array_length( array_distinct( string_to_array( substr(regexp_replace( \"field\",'(.)',',\\\\1'),2)))) oppure possiamo evitare anche la funzione substr array_length( array_distinct( string_to_array( regexp_replace( \"field\",'(.)\\\\B','\\\\1,')))) Funzioni e variabili utilizzate: array_length array_distinct string_to_array substr regexp_replace","title":"Conteggio caratteri diversi"},{"location":"esempi/conteggio_caratteri_diversi/#conteggio-caratteri-diversi","text":"Problema : come posso classificare in automatico i codici (tipo 133114 ecc.) per identificare il numero dei cambiamenti, cio\u00e8 il numero di caratteri diversi? Per esempio, nella stringa 133114 ci sono \"1\" tre volte, \"3\" due volte, \"4\" una volta, dunque ci sono tre caratteri diversi. Nella stringa 222222 c'\u00e8 un solo carattere (\"2\") ecc. Quesito preso dalla ML QGIS-user-it Tabella di esempio: ID field output 1 133114 3 2 222222 1 3 ABBACD 4 Una soluzione passa per l'uso degli array : array_length( array_distinct( string_to_array( regexp_replace(regexp_replace( 133114,'(.)','\\\\1,'),',$','')))) \u2192 3 nel caso in esame utilizzando il campo field array_length( array_distinct( string_to_array( regexp_replace(regexp_replace( \"field\",'(.)','\\\\1,'),',$','')))) oppure per evitare il doppio regex_replace (Grazie Andrea Giudiceandrea ) array_length( array_distinct( string_to_array( substr(regexp_replace( \"field\",'(.)',',\\\\1'),2)))) oppure possiamo evitare anche la funzione substr array_length( array_distinct( string_to_array( regexp_replace( \"field\",'(.)\\\\B','\\\\1,')))) Funzioni e variabili utilizzate: array_length array_distinct string_to_array substr regexp_replace","title":"Conteggio caratteri diversi"},{"location":"esempi/conversione/","tags":["etichette","epsg","sessadecimale","sessagesimale","gms"],"text":"Etichettare punti EPSG 4326 sessadecimali in sessagesimali GMS \u21b5 La conversione tra i due sistemi \u00e8 abbastanza semplice e quindi vado direttamente alla espressione da usare nel calcolatore di campi: 'lon :' || floor($x) || '\u00b0 ' || floor( ($x - floor($x))*60) ||''' '|| format_number( to_real((($x - floor($x))*60) -floor((($x - floor($x))*60 )))*60 ,2)||'\" E' || '_' || 'lat :' || floor($y) || '\u00b0 ' || floor( ($y - floor($y))*60) ||''' '|| format_number( to_real((($y - floor($y))*60) -floor((($y - floor($y))*60 )))*60 ,2) ||'\" N' Geopackage \u00e8 qui Nota bene \u21b5 Dalla versione QGIS 3.4 \u00e8 possibile usare le funzioni to_dm o to_dms Funzioni e variabili utilizzate: floor format_number to_real \\$x \\$y","title":"Conversione"},{"location":"esempi/conversione/#etichettare-punti-epsg-4326-sessadecimali-in-sessagesimali-gms","text":"La conversione tra i due sistemi \u00e8 abbastanza semplice e quindi vado direttamente alla espressione da usare nel calcolatore di campi: 'lon :' || floor($x) || '\u00b0 ' || floor( ($x - floor($x))*60) ||''' '|| format_number( to_real((($x - floor($x))*60) -floor((($x - floor($x))*60 )))*60 ,2)||'\" E' || '_' || 'lat :' || floor($y) || '\u00b0 ' || floor( ($y - floor($y))*60) ||''' '|| format_number( to_real((($y - floor($y))*60) -floor((($y - floor($y))*60 )))*60 ,2) ||'\" N' Geopackage \u00e8 qui","title":"Etichettare punti EPSG 4326 sessadecimali in sessagesimali GMS"},{"location":"esempi/conversione/#nota-bene","text":"Dalla versione QGIS 3.4 \u00e8 possibile usare le funzioni to_dm o to_dms Funzioni e variabili utilizzate: floor format_number to_real \\$x \\$y","title":"Nota bene"},{"location":"esempi/core_area/","tags":["area","poligoni"],"text":"Calcolo della core area (area interna al poligono al netto di un'area di buffer interna ) \u21b5 La core area \u00e8 l'area interna di un poligono al netto di una superfcie determinata da un buffer interno. E' un indice importante utilizzato in ecologia. In questo esempio si vuole calcolare la core area (in ettari) di un poligono di bosco, considerando una distanza dal margine di 20 metri. Caricare il layer bosco, selezionarlo e aprire il Calcolatore dei Campi. Aggiungere un nuovo campo denominato \"core_area\": 1. Tipo campo in uscita: Numero decimale 2. Lunghezza campo in uscita: 10 3. Precisione: 2 Nella finestra delle espressioni digitare: area(buffer($geometry, -20))/10000 Il risultato sar\u00e0 17.08 ha Vediamo l'espressione utilizzata: buffer($geometry,-20) : Crea un buffer del poligono utilizzando la funzione $geometry , con una profondit\u00e0 negativa di 20 metri (buffer interno) area : Calcola l' area della geometria appena definita, in ettari (/10000) Il GeoPackage, con il vettore bosco, \u00e8 disponibile qui Funzioni e variabili utilizzate: area buffer","title":"Core area"},{"location":"esempi/core_area/#calcolo-della-core-area-area-interna-al-poligono-al-netto-di-unarea-di-buffer-interna","text":"La core area \u00e8 l'area interna di un poligono al netto di una superfcie determinata da un buffer interno. E' un indice importante utilizzato in ecologia. In questo esempio si vuole calcolare la core area (in ettari) di un poligono di bosco, considerando una distanza dal margine di 20 metri. Caricare il layer bosco, selezionarlo e aprire il Calcolatore dei Campi. Aggiungere un nuovo campo denominato \"core_area\": 1. Tipo campo in uscita: Numero decimale 2. Lunghezza campo in uscita: 10 3. Precisione: 2 Nella finestra delle espressioni digitare: area(buffer($geometry, -20))/10000 Il risultato sar\u00e0 17.08 ha Vediamo l'espressione utilizzata: buffer($geometry,-20) : Crea un buffer del poligono utilizzando la funzione $geometry , con una profondit\u00e0 negativa di 20 metri (buffer interno) area : Calcola l' area della geometria appena definita, in ettari (/10000) Il GeoPackage, con il vettore bosco, \u00e8 disponibile qui Funzioni e variabili utilizzate: area buffer","title":"Calcolo della core area (area interna al poligono al netto di un'area di buffer interna )"},{"location":"esempi/cronometro/","tags":["decorazioni","cronometro","tempo"],"text":"Cronometro \u21b5 Come visualizzare un cronometro che misuri il tempo trascorso in una sessione di lavoro con QGIS. Il cronometro verr\u00e0 posizionato in alto nella map canvas tramite l'uso delle decorazioni e in particolare Etichetta Titolo... Le Decorazioni sono raggiungibili dal Menu Visualizza | Decorazioni | Etichetta Titolo... verr\u00e0 aperta una finestra per configurare Etichetta Titolo e dove editare l'espressione: Espressione \u21b5 senza Macro \u21b5 with_variable('durata', age( now(), make_datetime(2022,04,07,09,05,42) -- i valori vanno inseriti manualmente ), lpad(floor(hour(@durata)),2,0) ||'h:'|| lpad(to_int(minute(@durata)-floor(hour(@durata))*60),2,0)) con Macro \u21b5 with_variable('durata', age( now(), @starting_time -- variabile che contine il datetime di apertura progetto ), lpad(floor(hour(@durata)),2,0) ||'h:'|| lpad(to_int(minute(@durata)-floor(hour(@durata))*60),2,0)) Macro \u21b5 La macro \u00e8 stata realizzata da Valerio Pinna e Giulio Fattori che ringraziamo per il prezioso aiuto. from datetime import datetime from qgis.core import QgsProject , QgsExpression , QgsExpressionContextUtils def openProject (): project = QgsProject . instance () QgsExpressionContextUtils . setProjectVariable ( project , 'starting_time' , str ( datetime . now ())) QgsExpressionContextUtils . projectScope ( project ) . variable ( 'starting_time' ) def saveProject (): pass def closeProject (): pass https://docs.qgis.org/testing/en/docs/user_manual/introduction/qgis_configuration.html#id71 NB: per utilizzare la macro nel Progetto: Impostazioni | Opzioni | Generale \u2192 Abilita Macro | Sempre Progetto | Propriet\u00e0 | Macro Funzioni e variabili utilizzate: with_variable age now() make_datetime lpad floor to_int minute hour","title":"Crea Cronometro nella Map Canvas"},{"location":"esempi/cronometro/#cronometro","text":"Come visualizzare un cronometro che misuri il tempo trascorso in una sessione di lavoro con QGIS. Il cronometro verr\u00e0 posizionato in alto nella map canvas tramite l'uso delle decorazioni e in particolare Etichetta Titolo... Le Decorazioni sono raggiungibili dal Menu Visualizza | Decorazioni | Etichetta Titolo... verr\u00e0 aperta una finestra per configurare Etichetta Titolo e dove editare l'espressione:","title":"Cronometro"},{"location":"esempi/cronometro/#espressione","text":"","title":"Espressione"},{"location":"esempi/cronometro/#senza-macro","text":"with_variable('durata', age( now(), make_datetime(2022,04,07,09,05,42) -- i valori vanno inseriti manualmente ), lpad(floor(hour(@durata)),2,0) ||'h:'|| lpad(to_int(minute(@durata)-floor(hour(@durata))*60),2,0))","title":"senza Macro"},{"location":"esempi/cronometro/#con-macro","text":"with_variable('durata', age( now(), @starting_time -- variabile che contine il datetime di apertura progetto ), lpad(floor(hour(@durata)),2,0) ||'h:'|| lpad(to_int(minute(@durata)-floor(hour(@durata))*60),2,0))","title":"con Macro"},{"location":"esempi/cronometro/#macro","text":"La macro \u00e8 stata realizzata da Valerio Pinna e Giulio Fattori che ringraziamo per il prezioso aiuto. from datetime import datetime from qgis.core import QgsProject , QgsExpression , QgsExpressionContextUtils def openProject (): project = QgsProject . instance () QgsExpressionContextUtils . setProjectVariable ( project , 'starting_time' , str ( datetime . now ())) QgsExpressionContextUtils . projectScope ( project ) . variable ( 'starting_time' ) def saveProject (): pass def closeProject (): pass https://docs.qgis.org/testing/en/docs/user_manual/introduction/qgis_configuration.html#id71 NB: per utilizzare la macro nel Progetto: Impostazioni | Opzioni | Generale \u2192 Abilita Macro | Sempre Progetto | Propriet\u00e0 | Macro Funzioni e variabili utilizzate: with_variable age now() make_datetime lpad floor to_int minute hour","title":"Macro"},{"location":"esempi/decimali_come_apice/","tags":["decimali","etichette","coordinate","x","y","regex"],"text":"Decimali come apice per le etichette delle coordinate \u21b5 Etichettare punti con le coordinate x e y mettendo i decimali come apice: Espressione da usare: 'x = ' || with_variable ( 'caratteri_normali' , array ( '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ), with_variable ( 'numeri_apice' , array ( '\u2070' , '\u00b9' , '\u00b2' , '\u00b3' , '\u2074' , '\u2075' , '\u2076' , '\u2077' , '\u2078' , '\u2079' ), format_number ( regexp_replace ( $ x , '^(.+) \\\\ .(.+)' , ' \\\\ 1' ), 0 ) || ' ' || replace ( left ( regexp_replace ( $ x , '^(.+) \\\\ .(.+)' , ' \\\\ 2' ), 3 ), @caratteri_normali , @numeri_apice ))) || ' m' || ' \\n ' || -- va a capo 'y = ' || with_variable ( 'caratteri_normali' , array ( '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ), with_variable ( 'numeri_apice' , array ( '\u2070' , '\u00b9' , '\u00b2' , '\u00b3' , '\u2074' , '\u2075' , '\u2076' , '\u2077' , '\u2078' , '\u2079' ), format_number ( regexp_replace ( $ y , '^(.+) \\\\ .(.+)' , ' \\\\ 1' ), 0 ) || ' ' || replace ( left ( regexp_replace ( $ y , '^(.+) \\\\ .(.+)' , ' \\\\ 2' ), 3 ), @caratteri_normali , @numeri_apice ))) || ' m' le funzioni replace() sostituisce i numeri normali con quelli ad apice . Funzioni e variabili utilizzate: with_variable regexp_replace left array $x $y replace","title":"Decimali delle coordinate come apici"},{"location":"esempi/decimali_come_apice/#decimali-come-apice-per-le-etichette-delle-coordinate","text":"Etichettare punti con le coordinate x e y mettendo i decimali come apice: Espressione da usare: 'x = ' || with_variable ( 'caratteri_normali' , array ( '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ), with_variable ( 'numeri_apice' , array ( '\u2070' , '\u00b9' , '\u00b2' , '\u00b3' , '\u2074' , '\u2075' , '\u2076' , '\u2077' , '\u2078' , '\u2079' ), format_number ( regexp_replace ( $ x , '^(.+) \\\\ .(.+)' , ' \\\\ 1' ), 0 ) || ' ' || replace ( left ( regexp_replace ( $ x , '^(.+) \\\\ .(.+)' , ' \\\\ 2' ), 3 ), @caratteri_normali , @numeri_apice ))) || ' m' || ' \\n ' || -- va a capo 'y = ' || with_variable ( 'caratteri_normali' , array ( '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ), with_variable ( 'numeri_apice' , array ( '\u2070' , '\u00b9' , '\u00b2' , '\u00b3' , '\u2074' , '\u2075' , '\u2076' , '\u2077' , '\u2078' , '\u2079' ), format_number ( regexp_replace ( $ y , '^(.+) \\\\ .(.+)' , ' \\\\ 1' ), 0 ) || ' ' || replace ( left ( regexp_replace ( $ y , '^(.+) \\\\ .(.+)' , ' \\\\ 2' ), 3 ), @caratteri_normali , @numeri_apice ))) || ' m' le funzioni replace() sostituisce i numeri normali con quelli ad apice . Funzioni e variabili utilizzate: with_variable regexp_replace left array $x $y replace","title":"Decimali come apice per le etichette delle coordinate"},{"location":"esempi/distanze_progressive_chilometriche/","tags":["formattare","progressive","condizioni"],"text":"Formattare le distanze chilometriche progressive \u21b5 Vettore lineare (strade) e vettore puntuale con distanze progressive, la tabella degli attributi ha un campo distance che rappresenta le distanze progressive espresse in metri, in questo esempio popoleremo - usando il calcolatore di campi di QGIS - un nuovo campo (prog_km) con le distanze chilometriche progressive in stile autostrade. espressione \u21b5 CASE WHEN \"prog\" <10 THEN '0+00' ||\"prog\" WHEN \"prog\" <100 THEN '0+0' ||\"prog\" WHEN \"prog\" <1000 THEN '0+' ||\"prog\" WHEN \"prog\" <10000 THEN left( \"prog\",1)||'+'|| right( \"prog\" ,3) WHEN \"prog\" <100000 THEN left( \"prog\",2)||'+'|| right( \"prog\" ,3) WHEN \"prog\" <1000000 THEN left( \"prog\",3)||'+'|| right( \"prog\" ,3) ELSE 'valore oltre 1000 km' END Prova tu \u21b5 dati e progetto Funzioni e variabili utilizzate: CASE","title":"Distanze progressive chilometriche"},{"location":"esempi/distanze_progressive_chilometriche/#formattare-le-distanze-chilometriche-progressive","text":"Vettore lineare (strade) e vettore puntuale con distanze progressive, la tabella degli attributi ha un campo distance che rappresenta le distanze progressive espresse in metri, in questo esempio popoleremo - usando il calcolatore di campi di QGIS - un nuovo campo (prog_km) con le distanze chilometriche progressive in stile autostrade.","title":"Formattare le distanze chilometriche progressive"},{"location":"esempi/distanze_progressive_chilometriche/#espressione","text":"CASE WHEN \"prog\" <10 THEN '0+00' ||\"prog\" WHEN \"prog\" <100 THEN '0+0' ||\"prog\" WHEN \"prog\" <1000 THEN '0+' ||\"prog\" WHEN \"prog\" <10000 THEN left( \"prog\",1)||'+'|| right( \"prog\" ,3) WHEN \"prog\" <100000 THEN left( \"prog\",2)||'+'|| right( \"prog\" ,3) WHEN \"prog\" <1000000 THEN left( \"prog\",3)||'+'|| right( \"prog\" ,3) ELSE 'valore oltre 1000 km' END","title":"espressione"},{"location":"esempi/distanze_progressive_chilometriche/#prova-tu","text":"dati e progetto Funzioni e variabili utilizzate: CASE","title":"Prova tu"},{"location":"esempi/drilldown_form_multiple/","tags":["moduli","filtro","form","relazioni"],"text":"Creare moduli con filtro dinamico (anche multi-selezione) \u21b5 Una delle novit\u00e0 introdotte nella QGIS 3.2 \u00e8 la Form drill-down (a cascata) WIDGET Value Relation (Relazione valore) che permette di creare delle Form con filtro dinamico, in questo esercizio vedremo come realizzare una Form semplice e una multiselezione. Form semplice selezione 1:1 \u21b5 espressione da usare: \"cod_prov\" = current_value('provincia') Form avanzato n:m \u21b5 espressione da usare: eval( ' \"cod_prov\" in' || replace(current_value('provincia'),array('{','}', '\"'),array('(',')', '\\''))) Espressione di Pedro Ven\u00e2ncio con suggerimento di Alexandre Neto - Lista QGIS dev Form avanzato con spatial join 1:m \u21b5 espressione da scrivere in Espressione filtro nel primo campo della form: aggregate( layer:='province_siciliane', aggregate:='concatenate', expression:= \"DEN_PCM\", filter:= intersects(@current_geometry, geometry(@parent) ) ) o pi\u00f9 semplicemente (e anche pi\u00f9 performante) intersects( @current_geometry ,$geometry) Nel caso volessimo filtrare la feature pi\u00f9 vicina (quindi non necessariamnete intersecante): minimum(distance(@current_geometry ,$geometry)) = distance(@current_geometry ,$geometry) espressione da scrivere in Espressione filtro nel secondo campo della form: eval( ' \"cod_prov\" in' || replace(current_value('provincia'),array('{','}', '\"'),array('(',')', '\\''))) Espressione di Pedro Ven\u00e2ncio con suggerimento di Alexandre Neto - Lista QGIS dev funzione aggregate Prova tu \u21b5 Geopackage con dati e progetto Nel GeoPackage sono state memorizzate i tre stili usati per il form!!! Riferimenti \u21b5 Lista QGIS dev Issue: https://github.com/qgis/QGIS/issues/33046 Funzioni e variabili utilizzate: aggregate eval array","title":"Drilldown form multiple"},{"location":"esempi/drilldown_form_multiple/#creare-moduli-con-filtro-dinamico-anche-multi-selezione","text":"Una delle novit\u00e0 introdotte nella QGIS 3.2 \u00e8 la Form drill-down (a cascata) WIDGET Value Relation (Relazione valore) che permette di creare delle Form con filtro dinamico, in questo esercizio vedremo come realizzare una Form semplice e una multiselezione.","title":"Creare moduli con filtro dinamico (anche multi-selezione)"},{"location":"esempi/drilldown_form_multiple/#form-semplice-selezione-11","text":"espressione da usare: \"cod_prov\" = current_value('provincia')","title":"Form semplice selezione 1:1"},{"location":"esempi/drilldown_form_multiple/#form-avanzato-nm","text":"espressione da usare: eval( ' \"cod_prov\" in' || replace(current_value('provincia'),array('{','}', '\"'),array('(',')', '\\''))) Espressione di Pedro Ven\u00e2ncio con suggerimento di Alexandre Neto - Lista QGIS dev","title":"Form avanzato n:m"},{"location":"esempi/drilldown_form_multiple/#form-avanzato-con-spatial-join-1m","text":"espressione da scrivere in Espressione filtro nel primo campo della form: aggregate( layer:='province_siciliane', aggregate:='concatenate', expression:= \"DEN_PCM\", filter:= intersects(@current_geometry, geometry(@parent) ) ) o pi\u00f9 semplicemente (e anche pi\u00f9 performante) intersects( @current_geometry ,$geometry) Nel caso volessimo filtrare la feature pi\u00f9 vicina (quindi non necessariamnete intersecante): minimum(distance(@current_geometry ,$geometry)) = distance(@current_geometry ,$geometry) espressione da scrivere in Espressione filtro nel secondo campo della form: eval( ' \"cod_prov\" in' || replace(current_value('provincia'),array('{','}', '\"'),array('(',')', '\\''))) Espressione di Pedro Ven\u00e2ncio con suggerimento di Alexandre Neto - Lista QGIS dev funzione aggregate","title":"Form avanzato con spatial join 1:m"},{"location":"esempi/drilldown_form_multiple/#prova-tu","text":"Geopackage con dati e progetto Nel GeoPackage sono state memorizzate i tre stili usati per il form!!!","title":"Prova tu"},{"location":"esempi/drilldown_form_multiple/#riferimenti","text":"Lista QGIS dev Issue: https://github.com/qgis/QGIS/issues/33046 Funzioni e variabili utilizzate: aggregate eval array","title":"Riferimenti"},{"location":"esempi/elenco_comuni_attraversati_fiume/","tags":["aggregare","tabella","valori"],"text":"elenco comuni \u21b5 Come ottenere l'elenco dei Comuni attraversati da un fiume. Esempio: Dato il vettore dei Comuni toscani e il vettore dei fiumi (Arno e Ombrone) aggiungere un campo (al vettore fiumi) con tutti i nomi dei comuni attraversati dai due fiumi avviare il calcolatore di campi e creare un nuovo campo 'comuni' testo (255) e popolarlo con la seguente espressione: aggregate( layer:='comuni_rt', aggregate:='concatenate', expression:= \"nome\", filter:= crosses($geometry, geometry(@parent) ), concatenator:='-') Step: seleziono il layer _fiumi_rt, clicco sull'icona del calcolatore di campi: nome del campo in uscita: comuni tipo di campo in uscita: testo; lunghezza campo: 255 scrivo espressione di sopra; ecco la tabella attributi: prova tu \u21b5 dati e progetto QGIS 3.4 Funzioni e variabili utilizzate: aggregate","title":"Elenco comuni"},{"location":"esempi/elenco_comuni_attraversati_fiume/#elenco-comuni","text":"Come ottenere l'elenco dei Comuni attraversati da un fiume. Esempio: Dato il vettore dei Comuni toscani e il vettore dei fiumi (Arno e Ombrone) aggiungere un campo (al vettore fiumi) con tutti i nomi dei comuni attraversati dai due fiumi avviare il calcolatore di campi e creare un nuovo campo 'comuni' testo (255) e popolarlo con la seguente espressione: aggregate( layer:='comuni_rt', aggregate:='concatenate', expression:= \"nome\", filter:= crosses($geometry, geometry(@parent) ), concatenator:='-') Step: seleziono il layer _fiumi_rt, clicco sull'icona del calcolatore di campi: nome del campo in uscita: comuni tipo di campo in uscita: testo; lunghezza campo: 255 scrivo espressione di sopra; ecco la tabella attributi:","title":"elenco comuni"},{"location":"esempi/elenco_comuni_attraversati_fiume/#prova-tu","text":"dati e progetto QGIS 3.4 Funzioni e variabili utilizzate: aggregate","title":"prova tu"},{"location":"esempi/elenco_ordinato_comuni_attraversati/","tags":["aggregare","array","tabella","itinerari","ordinare"],"text":"Elenco ordinato di Comuni attraversati da un itinerario \u21b5 Come ottenere l'elenco ordinato dei Comuni attraversati da un itinerario. Esempio: A partire da un itinerario ciclabile, determinare i Comuni attraversati da questa linea, in ordine di intersezione, partendo da un origine seguendo il percorso per arrivare alla destinazione, avendo quindi una lista ordinata. avviare il calcolatore di campi (dopo aver selezionato il layer poligonale) e creare un nuovo campo sort_D-A numerico e popolarlo con la seguente espressione: with_variable('toto', reverse( geometry(get_feature('percorso','fid',1))), array_find( array_filter( array_sort( array_agg( line_locate_point(@toto, line_interpolate_point( intersection($geometry,@toto ), length(intersection($geometry,@toto))*0.1 )) ) ), @element >0), line_locate_point(@toto, line_interpolate_point( intersection($geometry,@toto ), length(intersection($geometry,@toto)) *0.1 )) ) ) L'espressione popoler\u00e0 solo le celle in cui esiste l'intersezione tra percorso e poligono comunale, le altre celle rimarranno NULL . Il valore rappresenter\u00e0, a partire da 0 , l'ordine dei Comuni (0,1,2,3....50...). Logica dell'espressione: Per ogni intersezione, tra linea percorso e poligoni comunali, calolo un punto lungo la linea posto ad una distanza pari al 10% dell'intera intersezione e la uso per determinare la lunghezza totale a partire dall'origine dell'intero percorso. Lunghezze maggiori indicano poligoni comunali attraversati dopo rispetto a quelli con lunghezza minore. Step: seleziono il layer itinerario_cicloturistico_domosossola_aosta ambiti_amministrativi_comuni presente nella TOC, clicco sull'icona del calcolatore di campi: nome del campo in uscita: sort_D-A tipo di campo in uscita: integer ; scrivo espressione di sopra; ecco la tabella attributi: Poligoni comunali Maggiori dettagli nel blog post su Pigrecoinfinito: prova tu \u21b5 dati e progetto QGIS 3.12 Funzioni e variabili utilizzate: with_variable array_find array_filter array_agg line_locate_point line_interpolate_point intersection length \\$geometry","title":"Elenco ordinato di Comuni"},{"location":"esempi/elenco_ordinato_comuni_attraversati/#elenco-ordinato-di-comuni-attraversati-da-un-itinerario","text":"Come ottenere l'elenco ordinato dei Comuni attraversati da un itinerario. Esempio: A partire da un itinerario ciclabile, determinare i Comuni attraversati da questa linea, in ordine di intersezione, partendo da un origine seguendo il percorso per arrivare alla destinazione, avendo quindi una lista ordinata. avviare il calcolatore di campi (dopo aver selezionato il layer poligonale) e creare un nuovo campo sort_D-A numerico e popolarlo con la seguente espressione: with_variable('toto', reverse( geometry(get_feature('percorso','fid',1))), array_find( array_filter( array_sort( array_agg( line_locate_point(@toto, line_interpolate_point( intersection($geometry,@toto ), length(intersection($geometry,@toto))*0.1 )) ) ), @element >0), line_locate_point(@toto, line_interpolate_point( intersection($geometry,@toto ), length(intersection($geometry,@toto)) *0.1 )) ) ) L'espressione popoler\u00e0 solo le celle in cui esiste l'intersezione tra percorso e poligono comunale, le altre celle rimarranno NULL . Il valore rappresenter\u00e0, a partire da 0 , l'ordine dei Comuni (0,1,2,3....50...). Logica dell'espressione: Per ogni intersezione, tra linea percorso e poligoni comunali, calolo un punto lungo la linea posto ad una distanza pari al 10% dell'intera intersezione e la uso per determinare la lunghezza totale a partire dall'origine dell'intero percorso. Lunghezze maggiori indicano poligoni comunali attraversati dopo rispetto a quelli con lunghezza minore. Step: seleziono il layer itinerario_cicloturistico_domosossola_aosta ambiti_amministrativi_comuni presente nella TOC, clicco sull'icona del calcolatore di campi: nome del campo in uscita: sort_D-A tipo di campo in uscita: integer ; scrivo espressione di sopra; ecco la tabella attributi: Poligoni comunali Maggiori dettagli nel blog post su Pigrecoinfinito:","title":"Elenco ordinato di Comuni attraversati da un itinerario"},{"location":"esempi/elenco_ordinato_comuni_attraversati/#prova-tu","text":"dati e progetto QGIS 3.12 Funzioni e variabili utilizzate: with_variable array_find array_filter array_agg line_locate_point line_interpolate_point intersection length \\$geometry","title":"prova tu"},{"location":"esempi/eliminare_duplicati_condizione/","tags":["duplicati","condizioni","tabella","attributi","selezionare"],"text":"Rimuovere elementi duplicati in base a una condizione su un'altra colonna di attributi \u21b5 gis.stackexchange : https://gis.stackexchange.com/questions/419159/removing-duplicate-features-based-on-a-condition-on-another-attribute-column-in Rimuovere elementi duplicati in base a una condizione su un\u2019altra colonna di attributi in QGIS. Esempio, tabella degli attributi di uno shapefile poligonale: Selezione per espressione \u21b5 Column_A != minimum (Column_A, group_by:=Column_B) In linguaggio umano: Seleziona tutte le righe per cui la Column_A \u00e8 diversa != dal valore minimo minumum calcolato nel campo Column_A dopo aver raggruppato usando i valori della Column_B . Si utilizza il != in quanto occorre rimuovere i dati duplicati. Geoprocessing \u21b5 Utilizzando l'algoritmo aggrega : espressione utilizzata: with_variable( 'cucu', array_agg( \"Column_A\" , \"Column_B\" ), array_agg( \"Column_C\" , \"Column_B\" ) [array_find(@cucu,array_min(@cucu))] ) per maggiori info, leggi qui: https://pigrecoinfinito.com/2021/12/18/rimozione-di-elementi-duplicati-in-base-a-una-condizione-su-unaltra-colonna-di-attributi-in-qgis/ il file di esempio \u00e8 scaricabile qui Funzioni e variabili utilizzate: minimum uguale array_agg array_find with_variable","title":"Elimina duplicati con condizione"},{"location":"esempi/eliminare_duplicati_condizione/#rimuovere-elementi-duplicati-in-base-a-una-condizione-su-unaltra-colonna-di-attributi","text":"gis.stackexchange : https://gis.stackexchange.com/questions/419159/removing-duplicate-features-based-on-a-condition-on-another-attribute-column-in Rimuovere elementi duplicati in base a una condizione su un\u2019altra colonna di attributi in QGIS. Esempio, tabella degli attributi di uno shapefile poligonale:","title":"Rimuovere elementi duplicati in base a una condizione su un'altra colonna di attributi"},{"location":"esempi/eliminare_duplicati_condizione/#selezione-per-espressione","text":"Column_A != minimum (Column_A, group_by:=Column_B) In linguaggio umano: Seleziona tutte le righe per cui la Column_A \u00e8 diversa != dal valore minimo minumum calcolato nel campo Column_A dopo aver raggruppato usando i valori della Column_B . Si utilizza il != in quanto occorre rimuovere i dati duplicati.","title":"Selezione per espressione"},{"location":"esempi/eliminare_duplicati_condizione/#geoprocessing","text":"Utilizzando l'algoritmo aggrega : espressione utilizzata: with_variable( 'cucu', array_agg( \"Column_A\" , \"Column_B\" ), array_agg( \"Column_C\" , \"Column_B\" ) [array_find(@cucu,array_min(@cucu))] ) per maggiori info, leggi qui: https://pigrecoinfinito.com/2021/12/18/rimozione-di-elementi-duplicati-in-base-a-una-condizione-su-unaltra-colonna-di-attributi-in-qgis/ il file di esempio \u00e8 scaricabile qui Funzioni e variabili utilizzate: minimum uguale array_agg array_find with_variable","title":"Geoprocessing"},{"location":"esempi/eliminare_testo_tra_parentesi/","tags":["testo","regex","valori"],"text":"Eliminare testo tra parentesi \u21b5 Supponiamo di avere una tabella degli attributi con un campo che contiene del testo, come l'esempio di sotto: prima dopo ciao a tutti (si fa per dire), sono Tot\u00f2 ciao a tutti, sono Tot\u00f2 come state oggi? (come prima, non ci fare caso) test come state oggi? test serata bella serata bella facile usare le regex, vero? () facile usare le regex vero? per ottenere il campo dopo , basta utilizzare la seguente espressione regexp_replace( \"nome\", '\\\\(.*\\\\)','') oppure aggiornare il campo prima con la stessa espressione. Funzioni e variabili utilizzate: regexp_replace","title":"Eliminare testo tra parentesi"},{"location":"esempi/eliminare_testo_tra_parentesi/#eliminare-testo-tra-parentesi","text":"Supponiamo di avere una tabella degli attributi con un campo che contiene del testo, come l'esempio di sotto: prima dopo ciao a tutti (si fa per dire), sono Tot\u00f2 ciao a tutti, sono Tot\u00f2 come state oggi? (come prima, non ci fare caso) test come state oggi? test serata bella serata bella facile usare le regex, vero? () facile usare le regex vero? per ottenere il campo dopo , basta utilizzare la seguente espressione regexp_replace( \"nome\", '\\\\(.*\\\\)','') oppure aggiornare il campo prima con la stessa espressione. Funzioni e variabili utilizzate: regexp_replace","title":"Eliminare testo tra parentesi"},{"location":"esempi/espressione_regolare/","tags":["regex","caratteri","condizioni","valori"],"text":"Espressione regolare: inserire automaticamente un carattere speciale \u21b5 Ho delle label composte da 4-5 parole e vorrei mandare a capo ogni 2 parole circa. Se uso lo spazio ovviamente mi impila le 4-5 parole e non \u00e8 quello che vorrei ottenere. E' possibile inserire automaticamente un carattere speciale dopo ogni due parole? Utilizzerei poi quel carattere per mandare a capo il testo nel compositore di stampa di QGIS 2.18. Inserire il carattere speciale a mano \u00e8 impensabile...sono pi\u00f9 di 1000 feature.. CASE WHEN length (\"TRIM_STR_C\" ) >34 THEN regexp_replace( \"TRIM_STR_C\" , '(\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+)(\\\\s+)(.*)','\\\\1$\\\\3') else regexp_replace( \"TRIM_STR_C\" , '(\\\\S+\\\\s+\\\\S+)(\\\\s+)(.*)','\\\\1$\\\\3') END Questa espressione condizionale controlla prima la lunghezza della stringa (label) e se >34 applica la prima regexp_replace altrimenti la seconda; la regexp_replace : (\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+)(\\\\s+)(.*) acchiappa il terzo spazio presente in tutta la frase e per sostituirgli un carattere spaciale: \\\\1$\\\\3 dove \\\\1 \u00e8 la prima parte prima del terzo spazio mentre \\\\3 \u00e8 la terza parte contando anche lo spazio; (\\\\S+\\\\s+\\\\S+)(\\\\s+)(.*) acchiappa il secondo spazio presente in tutta la frase e per sostituirgli un carattere spaciale: \\\\1$\\\\3 dove \\\\1 \u00e8 la prima parte prima del terzo spazio mentre \\\\3 \u00e8 la terza parte contando anche lo spazio; thread ML Gfoss Altra possibile soluzione, molto pi\u00f9 elegante \u00e8 la seguente (grazie Andrea Borruso ): ^((\\\\S+\\\\s*?){3})(\\\\s+)(.*?)$ e per la sostituzione \\\\1#\\\\4 ovvero, il numero tra parentesi graffe indica la parola oltre la quale inserire il carattere speciale: regexp_replace('Via Mario Miglioranza detto Pinto','^((\\\\S+\\\\s*?){3})(\\\\s+)(.*?)$','\\\\1#\\\\4') \u2192 Via Mario Miglioranza#detto Pinto Funzioni e variabili utilizzate: CASE regexp_replace","title":"Legenda"},{"location":"esempi/espressione_regolare/#espressione-regolare-inserire-automaticamente-un-carattere-speciale","text":"Ho delle label composte da 4-5 parole e vorrei mandare a capo ogni 2 parole circa. Se uso lo spazio ovviamente mi impila le 4-5 parole e non \u00e8 quello che vorrei ottenere. E' possibile inserire automaticamente un carattere speciale dopo ogni due parole? Utilizzerei poi quel carattere per mandare a capo il testo nel compositore di stampa di QGIS 2.18. Inserire il carattere speciale a mano \u00e8 impensabile...sono pi\u00f9 di 1000 feature.. CASE WHEN length (\"TRIM_STR_C\" ) >34 THEN regexp_replace( \"TRIM_STR_C\" , '(\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+)(\\\\s+)(.*)','\\\\1$\\\\3') else regexp_replace( \"TRIM_STR_C\" , '(\\\\S+\\\\s+\\\\S+)(\\\\s+)(.*)','\\\\1$\\\\3') END Questa espressione condizionale controlla prima la lunghezza della stringa (label) e se >34 applica la prima regexp_replace altrimenti la seconda; la regexp_replace : (\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+)(\\\\s+)(.*) acchiappa il terzo spazio presente in tutta la frase e per sostituirgli un carattere spaciale: \\\\1$\\\\3 dove \\\\1 \u00e8 la prima parte prima del terzo spazio mentre \\\\3 \u00e8 la terza parte contando anche lo spazio; (\\\\S+\\\\s+\\\\S+)(\\\\s+)(.*) acchiappa il secondo spazio presente in tutta la frase e per sostituirgli un carattere spaciale: \\\\1$\\\\3 dove \\\\1 \u00e8 la prima parte prima del terzo spazio mentre \\\\3 \u00e8 la terza parte contando anche lo spazio; thread ML Gfoss Altra possibile soluzione, molto pi\u00f9 elegante \u00e8 la seguente (grazie Andrea Borruso ): ^((\\\\S+\\\\s*?){3})(\\\\s+)(.*?)$ e per la sostituzione \\\\1#\\\\4 ovvero, il numero tra parentesi graffe indica la parola oltre la quale inserire il carattere speciale: regexp_replace('Via Mario Miglioranza detto Pinto','^((\\\\S+\\\\s*?){3})(\\\\s+)(.*?)$','\\\\1#\\\\4') \u2192 Via Mario Miglioranza#detto Pinto Funzioni e variabili utilizzate: CASE regexp_replace","title":"Espressione regolare: inserire automaticamente un carattere speciale"},{"location":"esempi/estrarre_campo_hstore/","tags":["estrarre","attributi","tabella","valori","chiave-valore"],"text":"Estrarre un campo da un attributo HStore \u21b5 Il formato HStore \u00e8 molto usato nel database OpenStreetMap, leggi qui . In questo esempio estrarremo dall'attributo other_tags il valore della chiave population , il dataset \u00e8 qui espressione utilizzata: to_int( map_get( hstore_to_map(\"other_tags\"),'population') ) provaci tu \u21b5 download isole","title":"Estrarre un campo da un attributo HStore"},{"location":"esempi/estrarre_campo_hstore/#estrarre-un-campo-da-un-attributo-hstore","text":"Il formato HStore \u00e8 molto usato nel database OpenStreetMap, leggi qui . In questo esempio estrarremo dall'attributo other_tags il valore della chiave population , il dataset \u00e8 qui espressione utilizzata: to_int( map_get( hstore_to_map(\"other_tags\"),'population') )","title":"Estrarre un campo da un attributo HStore"},{"location":"esempi/estrarre_campo_hstore/#provaci-tu","text":"download isole","title":"provaci tu"},{"location":"esempi/etichettare_chiave_valore/","tags":["etichette","chiave-valore","valori"],"text":"Etichettare usando struttura a mappa chiave-valore \u21b5 Alcune volte nasce la necessit\u00e0 di etichettare le feature facendo vedere sia il nome del campo che il corrispondente valore (classico caso chiave:valore ). Shapefile regioni ISTAT, creare l'etichetta in modo da visualizzare, per ogni regione, tutti i campi e relativi valori, vedi screenshot: Espressione da usare: replace ( replace ( map_to_hstore ( attributes ()) , '\"' , '' ) , '=>' , ' = ' ) dove l'espressione che crea una struttura a mappa \u00e8: map_to_hstore( attributes()) \u2192 '\"cod_reg\"=>\"1\",\"cod_rip\"=>\"1\",\"den_reg\"=>\"Piemonte\",\"fid\"=>\"\u2026' le funzioni replace() servono a modificare l'output, cio\u00e8 a togliere i doppi apici e la freccia. NB: I campi sono ordinati alfabeticamente! Funzioni e variabili utilizzate: replace map_to_hstore attributes","title":"Etichettare con chiave-valore"},{"location":"esempi/etichettare_chiave_valore/#etichettare-usando-struttura-a-mappa-chiave-valore","text":"Alcune volte nasce la necessit\u00e0 di etichettare le feature facendo vedere sia il nome del campo che il corrispondente valore (classico caso chiave:valore ). Shapefile regioni ISTAT, creare l'etichetta in modo da visualizzare, per ogni regione, tutti i campi e relativi valori, vedi screenshot: Espressione da usare: replace ( replace ( map_to_hstore ( attributes ()) , '\"' , '' ) , '=>' , ' = ' ) dove l'espressione che crea una struttura a mappa \u00e8: map_to_hstore( attributes()) \u2192 '\"cod_reg\"=>\"1\",\"cod_rip\"=>\"1\",\"den_reg\"=>\"Piemonte\",\"fid\"=>\"\u2026' le funzioni replace() servono a modificare l'output, cio\u00e8 a togliere i doppi apici e la freccia. NB: I campi sono ordinati alfabeticamente! Funzioni e variabili utilizzate: replace map_to_hstore attributes","title":"Etichettare usando struttura a mappa chiave-valore"},{"location":"esempi/etichettare_con_apici/","tags":["etichette","caratteri"],"text":"Aggiungere caratteri speciali alle etichette \u21b5 Come aggiungere nelle etichette gli apici come km\u00b2 e similari? La funzione char restituisce il carattere associato ad un codice unicode, quindi \u00e8 possibile usare i codici unicode per qualsiasi altro carattere speciale per esempio: descrizione espressione risultato apice 2 char(178) \u00b2 apice 3 char(179) \u00b3 gradi char(176) \u00b0 circa char(8776) \u2248 diametro char(8709) \u2205 euro char(8364) \u20ac alfa char(945) \u03b1 beta char(946) \u03b2 epsilon char(949) \u03b5 teta char(952) \u03b8 diverso char(8800) \u2260 osservazione: \u21b5 per trovare il codice di un carattere basta utilizzare la funzione ascii('\u2b50') \u2192 11088 blog post : https://pigrecoinfinito.com/2021/10/11/qgis-e-le-unita-di-misura-nel-si/ Funzioni e variabili utilizzate: char","title":"Etichettare con apici"},{"location":"esempi/etichettare_con_apici/#aggiungere-caratteri-speciali-alle-etichette","text":"Come aggiungere nelle etichette gli apici come km\u00b2 e similari? La funzione char restituisce il carattere associato ad un codice unicode, quindi \u00e8 possibile usare i codici unicode per qualsiasi altro carattere speciale per esempio: descrizione espressione risultato apice 2 char(178) \u00b2 apice 3 char(179) \u00b3 gradi char(176) \u00b0 circa char(8776) \u2248 diametro char(8709) \u2205 euro char(8364) \u20ac alfa char(945) \u03b1 beta char(946) \u03b2 epsilon char(949) \u03b5 teta char(952) \u03b8 diverso char(8800) \u2260","title":"Aggiungere caratteri speciali alle etichette"},{"location":"esempi/etichettare_con_apici/#osservazione","text":"per trovare il codice di un carattere basta utilizzare la funzione ascii('\u2b50') \u2192 11088 blog post : https://pigrecoinfinito.com/2021/10/11/qgis-e-le-unita-di-misura-nel-si/ Funzioni e variabili utilizzate: char","title":"osservazione:"},{"location":"esempi/etichettare_itinerario_elenco_comuni_attraversati/","tags":["etichette","itinerari","array","valori","ordinare"],"text":"Etichettare un itinerario con l\u2019elenco ordinato dei Comuni attraversati \u21b5 Qualche giorno fa in queste pagine \u00e9 stato pubblicato un esempio su come creare, tramite calcolatore di campi, un elenco ordinato di Comuni attraversati da un itinerario ( esempio 39 ). Nell\u2019esempio citato l\u2019espressione utilizzata permetteva di creare un nuovo campo con numerazione progressiva all\u2019interno del layer poligonale contenente i limiti comunali. In questo esempio vedremo invece come sia possibile, sempre utilizzando iI calcolatore di campi, intervenire direttamente sul layer lineare rappresentante l\u2019itinerario e creare una etichetta (o un nuovo campo testuale della tabella attributi) contenente un elenco ordinato e numerato dei comuni attraversati. L\u2019espressione da utilizzare \u00e9 la seguente: array_to_string( array_foreach( generate_series(1, num_geometries( collect_geometries( aggregate( layer:= 'poligoni', aggregate:='array_agg', expression:= start_point(intersection($geometry, geometry(@parent))), filter:=intersects($geometry, geometry(@parent))) ) ) ) , concat (@element,'. ', array_get( aggregate( layer:= 'poligoni', aggregate:='array_agg', expression:= \"nome\", filter:=intersects($geometry, geometry(@parent)), order_by:= line_locate_point(geometry(@parent),start_point(intersection($geometry,geometry(@parent))))) ,@element-1) ) ) , ', ') Vediamo le diverse parti che compongono l\u2019espressione e la sua logica. Il calcolo dei Comuni attraversati dall\u2019itinerario viene fatto utilizzando la seguente espressione: start_point(intersection($geometry, geometry(@parent))) la quale, dopo aver spezzato l\u2019itinerario in segmenti corrispondenti ai territori comunali attraversati, crea una nuova geometria puntuale calcolando il punto iniziale di ciascun segmento, corrispondente, in questo esempio, al primo ingresso dell\u2019itinerario all\u2019interno di un Comune. Aggiungendovi la funzione line_locate_point , la quale calcola la distanza tra il punto iniziale di una linea (per noi l\u2019itinerario) e un dato punto (i diversi punti equivalenti agli ingressi nei territori comunali), \u00e9 possibile ordinare la geometria puntuale secondo l\u2019ordine di ingresso del percorso nei diversi Comuni. L\u2019espressione si compone di due parti principali le quali creano, rispettivamente, la serie numerica e l\u2019elenco ordinato di nomi che comporranno l\u2019etichetta. La serie numerica viene creata ricorrendo alla funzione generate_series , con primo valore 1 e per valore ultimo il numero di punti che compongono la geometria puntuale generata dall\u2019espressione: start_point(intersection($geometry, geometry(@parent))) calcolato tramite funzione num_geometries . Nella seconda parte dell\u2019espressione, l\u2019elenco di nomi viene creato tramite funzione aggregate ed ordinato usando la suddescritta funzione line_locate_point . Utilizzando poi la funzione array_get , a ciascun nome dell\u2019elenco viene convertito in valore numerico corrispondente alla sua posizione nell\u2019elenco, cosi da poterlo associare alla serie di numeri precedentemente creata. In entrambe, ricorrendo all\u2019argomento filter della funzione aggregate, \u00e9 possibile limitare il calcolo ai soli poligoni comunali intersecati dall\u2019itinerario: filter:=intersects($geometry, geometry(@parent))) La concatenazione dei due elementi (numero e nome) viene fatta tramite funzione array_foreach , applicando a ciascun elemento della prima serie numerale l\u2019espressione concat() . Il risultato di questa operazione \u00e9 ancora un\u2019array di dati, la quale viene convertita in stringa tramite array_to_string . Procedura 1. Seleziona il layer contenente l\u2019itinerario; 2. Nel Pannelo Stile Layer seleziona la scheda Etichette; 3. In Valore clicca sul simbolo a destra per aprire la finestra di dialogo delle espressioni; 4. Copia l\u2019espressione nel riquadro; 5. Conferma premendo OK . Realizzato da Valerio Pinna (grazie mille!) prova tu \u21b5 dati e progetto QGIS 3.12 Funzioni e variabili utilizzate: @parent aggregate array_to_string array_get array_foreach generate_series num_geometries collect_geometries intersection start_point concat \\$geometry","title":"Etichettare itinerario con elenco ordinato Comuni"},{"location":"esempi/etichettare_itinerario_elenco_comuni_attraversati/#etichettare-un-itinerario-con-lelenco-ordinato-dei-comuni-attraversati","text":"Qualche giorno fa in queste pagine \u00e9 stato pubblicato un esempio su come creare, tramite calcolatore di campi, un elenco ordinato di Comuni attraversati da un itinerario ( esempio 39 ). Nell\u2019esempio citato l\u2019espressione utilizzata permetteva di creare un nuovo campo con numerazione progressiva all\u2019interno del layer poligonale contenente i limiti comunali. In questo esempio vedremo invece come sia possibile, sempre utilizzando iI calcolatore di campi, intervenire direttamente sul layer lineare rappresentante l\u2019itinerario e creare una etichetta (o un nuovo campo testuale della tabella attributi) contenente un elenco ordinato e numerato dei comuni attraversati. L\u2019espressione da utilizzare \u00e9 la seguente: array_to_string( array_foreach( generate_series(1, num_geometries( collect_geometries( aggregate( layer:= 'poligoni', aggregate:='array_agg', expression:= start_point(intersection($geometry, geometry(@parent))), filter:=intersects($geometry, geometry(@parent))) ) ) ) , concat (@element,'. ', array_get( aggregate( layer:= 'poligoni', aggregate:='array_agg', expression:= \"nome\", filter:=intersects($geometry, geometry(@parent)), order_by:= line_locate_point(geometry(@parent),start_point(intersection($geometry,geometry(@parent))))) ,@element-1) ) ) , ', ') Vediamo le diverse parti che compongono l\u2019espressione e la sua logica. Il calcolo dei Comuni attraversati dall\u2019itinerario viene fatto utilizzando la seguente espressione: start_point(intersection($geometry, geometry(@parent))) la quale, dopo aver spezzato l\u2019itinerario in segmenti corrispondenti ai territori comunali attraversati, crea una nuova geometria puntuale calcolando il punto iniziale di ciascun segmento, corrispondente, in questo esempio, al primo ingresso dell\u2019itinerario all\u2019interno di un Comune. Aggiungendovi la funzione line_locate_point , la quale calcola la distanza tra il punto iniziale di una linea (per noi l\u2019itinerario) e un dato punto (i diversi punti equivalenti agli ingressi nei territori comunali), \u00e9 possibile ordinare la geometria puntuale secondo l\u2019ordine di ingresso del percorso nei diversi Comuni. L\u2019espressione si compone di due parti principali le quali creano, rispettivamente, la serie numerica e l\u2019elenco ordinato di nomi che comporranno l\u2019etichetta. La serie numerica viene creata ricorrendo alla funzione generate_series , con primo valore 1 e per valore ultimo il numero di punti che compongono la geometria puntuale generata dall\u2019espressione: start_point(intersection($geometry, geometry(@parent))) calcolato tramite funzione num_geometries . Nella seconda parte dell\u2019espressione, l\u2019elenco di nomi viene creato tramite funzione aggregate ed ordinato usando la suddescritta funzione line_locate_point . Utilizzando poi la funzione array_get , a ciascun nome dell\u2019elenco viene convertito in valore numerico corrispondente alla sua posizione nell\u2019elenco, cosi da poterlo associare alla serie di numeri precedentemente creata. In entrambe, ricorrendo all\u2019argomento filter della funzione aggregate, \u00e9 possibile limitare il calcolo ai soli poligoni comunali intersecati dall\u2019itinerario: filter:=intersects($geometry, geometry(@parent))) La concatenazione dei due elementi (numero e nome) viene fatta tramite funzione array_foreach , applicando a ciascun elemento della prima serie numerale l\u2019espressione concat() . Il risultato di questa operazione \u00e9 ancora un\u2019array di dati, la quale viene convertita in stringa tramite array_to_string . Procedura 1. Seleziona il layer contenente l\u2019itinerario; 2. Nel Pannelo Stile Layer seleziona la scheda Etichette; 3. In Valore clicca sul simbolo a destra per aprire la finestra di dialogo delle espressioni; 4. Copia l\u2019espressione nel riquadro; 5. Conferma premendo OK . Realizzato da Valerio Pinna (grazie mille!)","title":"Etichettare un itinerario con l\u2019elenco ordinato dei Comuni attraversati"},{"location":"esempi/etichettare_itinerario_elenco_comuni_attraversati/#prova-tu","text":"dati e progetto QGIS 3.12 Funzioni e variabili utilizzate: @parent aggregate array_to_string array_get array_foreach generate_series num_geometries collect_geometries intersection start_point concat \\$geometry","title":"prova tu"},{"location":"esempi/etichette/","tags":["etichette","formattare","x","y","z","punti"],"text":"Etichettare usando attibuto geometry \u21b5 L'attributo geometry \u00e8 l'unico campo non visibile nella tabella attributi, ma c'\u00e8!!! La geometry \u00e8 espressa in un modo non comprensibile dall'uomo e quindi si evita di farla vedere, questo attibuto porta con se altri attibuti impliciti alla geometria stessa come: nel caso di geometry (MULTI)POINT(ZM): le coordinate x,y,z,m; nel caso di geometry (MULTI)LINESTRING(ZM): lunghezza della linea e coordinate dei nodi/vertici; nel caso di geometry (MULTI)POLYGON(ZM): area, perimetro e coordinate dei vertici; le caratteristiche sono sempre richiamabili (se presenti, cio\u00e8 se ha la Z o m) e quindi non occorre esplicitarle, anzi se esplicitate creano un dataset ridontate. Un modo per richiamarle \u00e8 attraverso l'etichettatura: caso (MULTI)POINT(ZM): espressione da scrivere nel calcolatore di campi 'x= ' || to_int($x) || '\\n' || 'y= ' || to_int($y) || '\\n' || 'z= ' || z($geometry) || '\\n' || 'm= ' || m($geometry) caso (MULTI)LINESTRING(ZM): espressione da scrivere nel calcolatore di campi to_int($length) ||'/'|| z(start_point($geometry)) caso (MULTI)POLYGON(ZM): espressione da scrivere nel calcolatore di campi 'Area= ' || format_number( $area,1) || ' mq' Geopackage \u00e8 qui Funzioni e variabili utilizzate: to_int format_number \\$x \\$y z m \\$length start_point \\$geometry","title":"Etichettare"},{"location":"esempi/etichette/#etichettare-usando-attibuto-geometry","text":"L'attributo geometry \u00e8 l'unico campo non visibile nella tabella attributi, ma c'\u00e8!!! La geometry \u00e8 espressa in un modo non comprensibile dall'uomo e quindi si evita di farla vedere, questo attibuto porta con se altri attibuti impliciti alla geometria stessa come: nel caso di geometry (MULTI)POINT(ZM): le coordinate x,y,z,m; nel caso di geometry (MULTI)LINESTRING(ZM): lunghezza della linea e coordinate dei nodi/vertici; nel caso di geometry (MULTI)POLYGON(ZM): area, perimetro e coordinate dei vertici; le caratteristiche sono sempre richiamabili (se presenti, cio\u00e8 se ha la Z o m) e quindi non occorre esplicitarle, anzi se esplicitate creano un dataset ridontate. Un modo per richiamarle \u00e8 attraverso l'etichettatura: caso (MULTI)POINT(ZM): espressione da scrivere nel calcolatore di campi 'x= ' || to_int($x) || '\\n' || 'y= ' || to_int($y) || '\\n' || 'z= ' || z($geometry) || '\\n' || 'm= ' || m($geometry) caso (MULTI)LINESTRING(ZM): espressione da scrivere nel calcolatore di campi to_int($length) ||'/'|| z(start_point($geometry)) caso (MULTI)POLYGON(ZM): espressione da scrivere nel calcolatore di campi 'Area= ' || format_number( $area,1) || ' mq' Geopackage \u00e8 qui Funzioni e variabili utilizzate: to_int format_number \\$x \\$y z m \\$length start_point \\$geometry","title":"Etichettare usando attibuto geometry"},{"location":"esempi/etichette_formattate_diversi_stili/","tags":["etichette","formattare","testo","array"],"text":"Etichette formattate con diversi stili all'interno del testo \u21b5 Una richiesta che spesso si ritrova nei canali social della Comunit\u00e1 QGIS \u00e9 quella di poter creare delle etichette al cui interno solo una parte del testo \u00e9 formattata con uno stile diverso dal resto della stringa. In QGIS , infatti, \u00e9 possibile utilizzare gli strumenti offerti dal sistema per formattare in grassetto o corsivo l\u2019intera etichetta ma non \u00e9 possibile, di default, applicare lo stile ad una sola parte del testo. Una soluzione a questo problema \u00e9 offerta dal Calcolatore di campi , dimostrando ancora una volta la potenza di questo strumento. Esistono in rete diversi siti che offrono la possibilit\u00e1 di formattare automaticamente un testo e di espostarlo con un semplice copia-incolla. Qui verranno utilizzati Boldtext (LINK 1) per il grassetto e Lingojam (LINK 2) per il corsivo e per alcuni altri esempi di stili per per creare stringhe alfabetiche formattate da utilizzare nella nostra espressione. L\u2019espressione da utilizzare nell\u2019etichetta in corrispondenza della casella Valore \u00e9 la seguente: with_variable( 'caratteri_normali', array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9'), with_variable( 'corsivo', array('\ud835\ude22','\ud835\ude23','\ud835\ude24','\ud835\ude25','\ud835\ude26','\ud835\ude27','\ud835\ude28','\ud835\ude29','\ud835\ude2a','\ud835\ude2b','\ud835\ude2c','\ud835\ude2d','\ud835\ude2e','\ud835\ude2f','\ud835\ude30','\ud835\ude31','\ud835\ude32','\ud835\ude33','\ud835\ude34','\ud835\ude35','\ud835\ude36','\ud835\ude37','\ud835\ude38','\ud835\ude39','\ud835\ude3a','\ud835\ude3b','\ud835\ude08','\ud835\ude09','\ud835\ude0a','\ud835\ude0b','\ud835\ude0c','\ud835\ude0d','\ud835\ude0e','\ud835\ude0f','\ud835\ude10','\ud835\ude11','\ud835\ude12','\ud835\ude13','\ud835\ude14','\ud835\ude15','\ud835\ude16','\ud835\ude17','\ud835\ude18','\ud835\ude19','\ud835\ude1a','\ud835\ude1b','\ud835\ude1c','\ud835\ude1d','\ud835\ude1e','\ud835\ude1f','\ud835\ude20','\ud835\ude21','0','1','2','3','4','5','6','7','8','9'), with_variable( 'grassetto', array('\ud835\uddee','\ud835\uddef','\ud835\uddf0','\ud835\uddf1','\ud835\uddf2','\ud835\uddf3','\ud835\uddf4','\ud835\uddf5','\ud835\uddf6','\ud835\uddf7','\ud835\uddf8','\ud835\uddf9','\ud835\uddfa','\ud835\uddfb','\ud835\uddfc','\ud835\uddfd','\ud835\uddfe','\ud835\uddff','\ud835\ude00','\ud835\ude01','\ud835\ude02','\ud835\ude03','\ud835\ude04','\ud835\ude05','\ud835\ude06','\ud835\ude07','\ud835\uddd4','\ud835\uddd5','\ud835\uddd6','\ud835\uddd7','\ud835\uddd8','\ud835\uddd9','\ud835\uddda','\ud835\udddb','\ud835\udddc','\ud835\udddd','\ud835\uddde','\ud835\udddf','\ud835\udde0','\ud835\udde1','\ud835\udde2','\ud835\udde3','\ud835\udde4','\ud835\udde5','\ud835\udde6','\ud835\udde7','\ud835\udde8','\ud835\udde9','\ud835\uddea','\ud835\uddeb','\ud835\uddec','\ud835\udded','\ud835\udfec','\ud835\udfed','\ud835\udfee','\ud835\udfef','\ud835\udff0','\ud835\udff1','\ud835\udff2','\ud835\udff3','\ud835\udff4','\ud835\udff5'), with_variable('scrittura_a_mano', array('\ud835\udcb6','\ud835\udcb7','\ud835\udcb8','\ud835\udcb9','\ud835\udc52','\ud835\udcbb','\ud835\udc54','\ud835\udcbd','\ud835\udcbe','\ud835\udcbf','\ud835\udcc0','\ud835\udcc1','\ud835\udcc2','\ud835\udcc3','\ud835\udc5c','\ud835\udcc5','\ud835\udcc6','\ud835\udcc7','\ud835\udcc8','\ud835\udcc9','\ud835\udcca','\ud835\udccb','\ud835\udccc','\ud835\udccd','\ud835\udcce','\ud835\udccf','\ud835\udc9c','\ud835\udc35','\ud835\udc9e','\ud835\udc9f','\ud835\udc38','\ud835\udc39','\ud835\udca2','\ud835\udc3b','\ud835\udc3c','\ud835\udca5','\ud835\udca6','\ud835\udc3f','\ud835\udc40','\ud835\udca9','\ud835\udcaa','\ud835\udcab','\ud835\udcac','\ud835\udc45','\ud835\udcae','\ud835\udcaf','\ud835\udcb0','\ud835\udcb1','\ud835\udcb2','\ud835\udcb3','\ud835\udcb4','\ud835\udcb5','\ud835\udfe2','\ud835\udfe3','\ud835\udfe4','\ud835\udfe5','\ud835\udfe6','5','\ud835\udfe8','\ud835\udfe9','\ud835\udfea','\ud835\udfeb'), with_variable('stiloso', array('\ud835\udd52','\ud835\udd53','\ud835\udd54','\ud835\udd55','\ud835\udd56','\ud835\udd57','\ud835\udd58','\ud835\udd59','\ud835\udd5a','\ud835\udd5b','\ud835\udd5c','\ud835\udd5d','\ud835\udd5e','\ud835\udd5f','\ud835\udd60','\ud835\udd61','\ud835\udd62','\ud835\udd63','\ud835\udd64','\ud835\udd65','\ud835\udd66','\ud835\udd67','\ud835\udd68','\ud835\udd69','\ud835\udd6a','\ud835\udd6b','\ud835\udd38','\ud835\udd39','\u2102','\ud835\udd3b','\ud835\udd3c','\ud835\udd3d','\ud835\udd3e','\u210d','\ud835\udd40','\ud835\udd41','\ud835\udd42','\ud835\udd43','\ud835\udd44','\u2115','\ud835\udd46','\u2119','\u211a','\u211d','\ud835\udd4a','\ud835\udd4b','\ud835\udd4c','\ud835\udd4d','\ud835\udd4e','\ud835\udd4f','\ud835\udd50','\u2124','\ud835\udfd8','\ud835\udfd9','\ud835\udfda','\ud835\udfdb','\ud835\udfdc','\ud835\udfdd','\ud835\udfde','\ud835\udfdf','\ud835\udfe0','\ud835\udfe1'), replace(\"Name\", @caratteri_normali, @grassetto) || '\\n' || replace(\"Name\", @caratteri_normali, @corsivo) || '\\n' || replace(\"Name\", @caratteri_normali, @scrittura_a_mano) || '\\n' || replace(\"Name\", @caratteri_normali, @stiloso) ))))) Vediamo come opera \u21b5 Per ogni stile che si vuole utilizzare \u00e9 necessario creare una variabile usando la funzione with_variable contenente un\u2019 array composta da tutti i caratteri (maiuscolo, minuscolo e numeri). La prima variabile creata contiene i caratteri normali, non formattati, mentre le altre variabili nell\u2019espressione contengono serie di caratteri formattati nei diversi stili. Per creare queste array si deve semplicemente copiare e incollare il contenuto della prima array coi caratteri normali in uno dei siti suddescritti e una volta creato il testo formattato copiarlo nella nuova array. Una volta preparato il gruppo di variabili con gli stili a propria scelta, passiamo alla seconda parte dell\u2019espressione. replace(\"Name\", @caratteri_normali, @grassetto) Utilizzando la funzione replace , semplicemente chiediamo al sistema di restituirci la stringa qui rappresentata da \"den_reg\" sostituendo ai caratteri normali (@caratteri_normali) i caratteri corrispondenti contenuti nella seconda variabile (@grassetto). Per applicare un diverso stile si deve semplicemente sostituire seconda variabile con lo stile scelto. Utilizzando la funzione concat o il simbolo di concatenazione || si possono costruire anche etichette complesse con diversi stili di formattazione all\u2019interno della stessa stringa. Un esempio di questo \u00e9 presentato poco pi\u00fa avanti dove vedremo una soluzione alternativa allo stesso problema. Soluzione con variabili di progetto Per rendere gli stili disponibili a tutti i layer del progetto \u00e9 possibile utilizzare le variabili personalizzate di progetto, cos\u00ed da richiamare i diversi stili velocemente all\u2019interno dell\u2019espressione. Step 1 All\u2019interno delle propriet\u00e1 del progetto, nella scheda Variabili, creare una nuova variabile per ciascuno degli stili, contenente l\u2019intera serie di caratteri separati dalla virgola. Step 2 L\u2019espressione in questo caso sar\u00e1 semplificata, semplicemente richiamando la stringa contenuta nella variabile di progetto e convertendola in array con la funzione string_to_array . with_variable('caratteri_normali', string_to_array(@stile_normale) , with_variable('grassetto', string_to_array(@stile_grassetto) , with_variable('corsivo', string_to_array(@stile_corsivo) , replace(\"DEN_REG\", @caratteri_normali, @grassetto ) || ' non \u00e9 in ' || replace('corsivo', @caratteri_normali, @corsivo ) ))) L\u2019idea di questo esempio e stata suggerita da una risposta su GIS.Stackexchange (LINK 3) data dall\u2019utente bugmenot123 che ringrazio per la geniale soluzione proposta. Grazie a Salvatore Fiandaca per avermi proposto di scrivere questo esempio e per il suo suggerimento per proporre anche la soluzione con variabili di progetto. Link utili: https://boldtext.io/ https://lingojam.com/ItalicTextGenerator https://gis.stackexchange.com/questions/357234/styling-substring-of-label-with-different-style-without-creating-two-separate-la?fbclid=IwAR3n94vGBAe9MMoayzLTkGjdlimq7Dkbefm0lAzuSPSbS_kLpxq88w6Eixk Realizzato da Valerio Pinna (grazie mille!) Prova tu \u21b5 Geopackage \u00e8 qui Funzioni e variabili utilizzate: with_variable array string_to_array replace","title":"Etichette formattate diversi stili"},{"location":"esempi/etichette_formattate_diversi_stili/#etichette-formattate-con-diversi-stili-allinterno-del-testo","text":"Una richiesta che spesso si ritrova nei canali social della Comunit\u00e1 QGIS \u00e9 quella di poter creare delle etichette al cui interno solo una parte del testo \u00e9 formattata con uno stile diverso dal resto della stringa. In QGIS , infatti, \u00e9 possibile utilizzare gli strumenti offerti dal sistema per formattare in grassetto o corsivo l\u2019intera etichetta ma non \u00e9 possibile, di default, applicare lo stile ad una sola parte del testo. Una soluzione a questo problema \u00e9 offerta dal Calcolatore di campi , dimostrando ancora una volta la potenza di questo strumento. Esistono in rete diversi siti che offrono la possibilit\u00e1 di formattare automaticamente un testo e di espostarlo con un semplice copia-incolla. Qui verranno utilizzati Boldtext (LINK 1) per il grassetto e Lingojam (LINK 2) per il corsivo e per alcuni altri esempi di stili per per creare stringhe alfabetiche formattate da utilizzare nella nostra espressione. L\u2019espressione da utilizzare nell\u2019etichetta in corrispondenza della casella Valore \u00e9 la seguente: with_variable( 'caratteri_normali', array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9'), with_variable( 'corsivo', array('\ud835\ude22','\ud835\ude23','\ud835\ude24','\ud835\ude25','\ud835\ude26','\ud835\ude27','\ud835\ude28','\ud835\ude29','\ud835\ude2a','\ud835\ude2b','\ud835\ude2c','\ud835\ude2d','\ud835\ude2e','\ud835\ude2f','\ud835\ude30','\ud835\ude31','\ud835\ude32','\ud835\ude33','\ud835\ude34','\ud835\ude35','\ud835\ude36','\ud835\ude37','\ud835\ude38','\ud835\ude39','\ud835\ude3a','\ud835\ude3b','\ud835\ude08','\ud835\ude09','\ud835\ude0a','\ud835\ude0b','\ud835\ude0c','\ud835\ude0d','\ud835\ude0e','\ud835\ude0f','\ud835\ude10','\ud835\ude11','\ud835\ude12','\ud835\ude13','\ud835\ude14','\ud835\ude15','\ud835\ude16','\ud835\ude17','\ud835\ude18','\ud835\ude19','\ud835\ude1a','\ud835\ude1b','\ud835\ude1c','\ud835\ude1d','\ud835\ude1e','\ud835\ude1f','\ud835\ude20','\ud835\ude21','0','1','2','3','4','5','6','7','8','9'), with_variable( 'grassetto', array('\ud835\uddee','\ud835\uddef','\ud835\uddf0','\ud835\uddf1','\ud835\uddf2','\ud835\uddf3','\ud835\uddf4','\ud835\uddf5','\ud835\uddf6','\ud835\uddf7','\ud835\uddf8','\ud835\uddf9','\ud835\uddfa','\ud835\uddfb','\ud835\uddfc','\ud835\uddfd','\ud835\uddfe','\ud835\uddff','\ud835\ude00','\ud835\ude01','\ud835\ude02','\ud835\ude03','\ud835\ude04','\ud835\ude05','\ud835\ude06','\ud835\ude07','\ud835\uddd4','\ud835\uddd5','\ud835\uddd6','\ud835\uddd7','\ud835\uddd8','\ud835\uddd9','\ud835\uddda','\ud835\udddb','\ud835\udddc','\ud835\udddd','\ud835\uddde','\ud835\udddf','\ud835\udde0','\ud835\udde1','\ud835\udde2','\ud835\udde3','\ud835\udde4','\ud835\udde5','\ud835\udde6','\ud835\udde7','\ud835\udde8','\ud835\udde9','\ud835\uddea','\ud835\uddeb','\ud835\uddec','\ud835\udded','\ud835\udfec','\ud835\udfed','\ud835\udfee','\ud835\udfef','\ud835\udff0','\ud835\udff1','\ud835\udff2','\ud835\udff3','\ud835\udff4','\ud835\udff5'), with_variable('scrittura_a_mano', array('\ud835\udcb6','\ud835\udcb7','\ud835\udcb8','\ud835\udcb9','\ud835\udc52','\ud835\udcbb','\ud835\udc54','\ud835\udcbd','\ud835\udcbe','\ud835\udcbf','\ud835\udcc0','\ud835\udcc1','\ud835\udcc2','\ud835\udcc3','\ud835\udc5c','\ud835\udcc5','\ud835\udcc6','\ud835\udcc7','\ud835\udcc8','\ud835\udcc9','\ud835\udcca','\ud835\udccb','\ud835\udccc','\ud835\udccd','\ud835\udcce','\ud835\udccf','\ud835\udc9c','\ud835\udc35','\ud835\udc9e','\ud835\udc9f','\ud835\udc38','\ud835\udc39','\ud835\udca2','\ud835\udc3b','\ud835\udc3c','\ud835\udca5','\ud835\udca6','\ud835\udc3f','\ud835\udc40','\ud835\udca9','\ud835\udcaa','\ud835\udcab','\ud835\udcac','\ud835\udc45','\ud835\udcae','\ud835\udcaf','\ud835\udcb0','\ud835\udcb1','\ud835\udcb2','\ud835\udcb3','\ud835\udcb4','\ud835\udcb5','\ud835\udfe2','\ud835\udfe3','\ud835\udfe4','\ud835\udfe5','\ud835\udfe6','5','\ud835\udfe8','\ud835\udfe9','\ud835\udfea','\ud835\udfeb'), with_variable('stiloso', array('\ud835\udd52','\ud835\udd53','\ud835\udd54','\ud835\udd55','\ud835\udd56','\ud835\udd57','\ud835\udd58','\ud835\udd59','\ud835\udd5a','\ud835\udd5b','\ud835\udd5c','\ud835\udd5d','\ud835\udd5e','\ud835\udd5f','\ud835\udd60','\ud835\udd61','\ud835\udd62','\ud835\udd63','\ud835\udd64','\ud835\udd65','\ud835\udd66','\ud835\udd67','\ud835\udd68','\ud835\udd69','\ud835\udd6a','\ud835\udd6b','\ud835\udd38','\ud835\udd39','\u2102','\ud835\udd3b','\ud835\udd3c','\ud835\udd3d','\ud835\udd3e','\u210d','\ud835\udd40','\ud835\udd41','\ud835\udd42','\ud835\udd43','\ud835\udd44','\u2115','\ud835\udd46','\u2119','\u211a','\u211d','\ud835\udd4a','\ud835\udd4b','\ud835\udd4c','\ud835\udd4d','\ud835\udd4e','\ud835\udd4f','\ud835\udd50','\u2124','\ud835\udfd8','\ud835\udfd9','\ud835\udfda','\ud835\udfdb','\ud835\udfdc','\ud835\udfdd','\ud835\udfde','\ud835\udfdf','\ud835\udfe0','\ud835\udfe1'), replace(\"Name\", @caratteri_normali, @grassetto) || '\\n' || replace(\"Name\", @caratteri_normali, @corsivo) || '\\n' || replace(\"Name\", @caratteri_normali, @scrittura_a_mano) || '\\n' || replace(\"Name\", @caratteri_normali, @stiloso) )))))","title":"Etichette formattate con diversi stili all'interno del testo"},{"location":"esempi/etichette_formattate_diversi_stili/#vediamo-come-opera","text":"Per ogni stile che si vuole utilizzare \u00e9 necessario creare una variabile usando la funzione with_variable contenente un\u2019 array composta da tutti i caratteri (maiuscolo, minuscolo e numeri). La prima variabile creata contiene i caratteri normali, non formattati, mentre le altre variabili nell\u2019espressione contengono serie di caratteri formattati nei diversi stili. Per creare queste array si deve semplicemente copiare e incollare il contenuto della prima array coi caratteri normali in uno dei siti suddescritti e una volta creato il testo formattato copiarlo nella nuova array. Una volta preparato il gruppo di variabili con gli stili a propria scelta, passiamo alla seconda parte dell\u2019espressione. replace(\"Name\", @caratteri_normali, @grassetto) Utilizzando la funzione replace , semplicemente chiediamo al sistema di restituirci la stringa qui rappresentata da \"den_reg\" sostituendo ai caratteri normali (@caratteri_normali) i caratteri corrispondenti contenuti nella seconda variabile (@grassetto). Per applicare un diverso stile si deve semplicemente sostituire seconda variabile con lo stile scelto. Utilizzando la funzione concat o il simbolo di concatenazione || si possono costruire anche etichette complesse con diversi stili di formattazione all\u2019interno della stessa stringa. Un esempio di questo \u00e9 presentato poco pi\u00fa avanti dove vedremo una soluzione alternativa allo stesso problema. Soluzione con variabili di progetto Per rendere gli stili disponibili a tutti i layer del progetto \u00e9 possibile utilizzare le variabili personalizzate di progetto, cos\u00ed da richiamare i diversi stili velocemente all\u2019interno dell\u2019espressione. Step 1 All\u2019interno delle propriet\u00e1 del progetto, nella scheda Variabili, creare una nuova variabile per ciascuno degli stili, contenente l\u2019intera serie di caratteri separati dalla virgola. Step 2 L\u2019espressione in questo caso sar\u00e1 semplificata, semplicemente richiamando la stringa contenuta nella variabile di progetto e convertendola in array con la funzione string_to_array . with_variable('caratteri_normali', string_to_array(@stile_normale) , with_variable('grassetto', string_to_array(@stile_grassetto) , with_variable('corsivo', string_to_array(@stile_corsivo) , replace(\"DEN_REG\", @caratteri_normali, @grassetto ) || ' non \u00e9 in ' || replace('corsivo', @caratteri_normali, @corsivo ) ))) L\u2019idea di questo esempio e stata suggerita da una risposta su GIS.Stackexchange (LINK 3) data dall\u2019utente bugmenot123 che ringrazio per la geniale soluzione proposta. Grazie a Salvatore Fiandaca per avermi proposto di scrivere questo esempio e per il suo suggerimento per proporre anche la soluzione con variabili di progetto. Link utili: https://boldtext.io/ https://lingojam.com/ItalicTextGenerator https://gis.stackexchange.com/questions/357234/styling-substring-of-label-with-different-style-without-creating-two-separate-la?fbclid=IwAR3n94vGBAe9MMoayzLTkGjdlimq7Dkbefm0lAzuSPSbS_kLpxq88w6Eixk Realizzato da Valerio Pinna (grazie mille!)","title":"Vediamo come opera"},{"location":"esempi/etichette_formattate_diversi_stili/#prova-tu","text":"Geopackage \u00e8 qui Funzioni e variabili utilizzate: with_variable array string_to_array replace","title":"Prova tu"},{"location":"esempi/fill-down/","tags":["tabella","fill-down","condizioni"],"text":"fill-down con le espressioni di QGIS \u21b5 Il fill-down \u00e8 un filtro molto usato da chi lavora con i dati e risolve il segunete problema: \" Se un dato record di una tabella ha un valore mancante per un dato campo, riempilo con il valore corrispondente da un record precedente, se presente \". Molti tool lo hanno implementato come Visidata , Miller , OpenRifine , GeoPandas ecc...; vediamo come ottenere questa funzione usando solo le espressioni di QGIS. Tabella di esempio: data nuts2 zona zona_fill 2020-11-09T17:00:00 ITF1 2020-11-10T17:00:00 ITF1 arancione arancione 2020-11-11T17:00:00 ITF1 arancione 2020-11-12T17:00:00 ITF1 arancione 2020-11-20T17:00:00 ITF1 arancione 2020-11-21T17:00:00 ITF1 arancione 2020-11-22T17:00:00 ITF1 rossa rossa 2020-11-23T17:00:00 ITF1 rossa 2020-11-24T17:00:00 ITF1 rossa 2020-12-04T17:00:00 ITF1 rossa 2020-11-09T17:00:00 ITF5 rossa 2020-11-10T17:00:00 ITF5 arancione arancione 2020-11-11T17:00:00 ITF5 arancione 2020-11-12T17:00:00 ITF5 arancione 2020-11-13T17:00:00 ITF5 arancione 2020-11-14T17:00:00 ITF5 arancione 2020-11-24T17:00:00 ITF5 arancione arancione 2020-11-25T17:00:00 ITF5 arancione 2020-11-26T17:00:00 ITF5 arancione come ottenere la colonna zona_fill a partire dalla colonna zona : in pratica occorre popolare le celle con il primo valore non nullo partendo dall'alto e procedendo verso il basso. Ecco una soluzione: crare il campo zona_fill come testo, lunghezza 20; con il calcolatore di campi, aggiornale il campo appena creato con l'espressione: if( \"zona\" is NULL, attribute( get_feature_by_id(@layer, $id -1), 'zona_fill') , \"zona\") PS: potremmo direttamente aggiornare il campo zona senza necessariamente creare un nuovo campo, usando questa espressione: if( \"zona\" is NULL, attribute( get_feature_by_id(@layer, $id -1), 'zona') , \"zona\") Nel linguaggio umano significa : partendo dalla prima riga ( $id=1 ) della tabella, se il campo zona \u00e8 non vuoto allora popolalo con il valore corrispondente se invece \u00e8 vuoto ( NULL ) prendi il valore corrispondente alla riga precedente ( $id -1 ). Il quesito \u00e8 stato posto in lista QGIS-user internazionale e la soluzione \u00e8 di Andrea Giudiceandrea (grazie mille) Nella sezione Funzioni , Gruppo Custom \u00e8 presente la funzione personalizzata fill-down creata da Giulio Fattori. Funzioni e variabili utilizzate: @layer if attribute $id get_feature_by_id","title":"Fill-down con QGIS"},{"location":"esempi/fill-down/#fill-down-con-le-espressioni-di-qgis","text":"Il fill-down \u00e8 un filtro molto usato da chi lavora con i dati e risolve il segunete problema: \" Se un dato record di una tabella ha un valore mancante per un dato campo, riempilo con il valore corrispondente da un record precedente, se presente \". Molti tool lo hanno implementato come Visidata , Miller , OpenRifine , GeoPandas ecc...; vediamo come ottenere questa funzione usando solo le espressioni di QGIS. Tabella di esempio: data nuts2 zona zona_fill 2020-11-09T17:00:00 ITF1 2020-11-10T17:00:00 ITF1 arancione arancione 2020-11-11T17:00:00 ITF1 arancione 2020-11-12T17:00:00 ITF1 arancione 2020-11-20T17:00:00 ITF1 arancione 2020-11-21T17:00:00 ITF1 arancione 2020-11-22T17:00:00 ITF1 rossa rossa 2020-11-23T17:00:00 ITF1 rossa 2020-11-24T17:00:00 ITF1 rossa 2020-12-04T17:00:00 ITF1 rossa 2020-11-09T17:00:00 ITF5 rossa 2020-11-10T17:00:00 ITF5 arancione arancione 2020-11-11T17:00:00 ITF5 arancione 2020-11-12T17:00:00 ITF5 arancione 2020-11-13T17:00:00 ITF5 arancione 2020-11-14T17:00:00 ITF5 arancione 2020-11-24T17:00:00 ITF5 arancione arancione 2020-11-25T17:00:00 ITF5 arancione 2020-11-26T17:00:00 ITF5 arancione come ottenere la colonna zona_fill a partire dalla colonna zona : in pratica occorre popolare le celle con il primo valore non nullo partendo dall'alto e procedendo verso il basso. Ecco una soluzione: crare il campo zona_fill come testo, lunghezza 20; con il calcolatore di campi, aggiornale il campo appena creato con l'espressione: if( \"zona\" is NULL, attribute( get_feature_by_id(@layer, $id -1), 'zona_fill') , \"zona\") PS: potremmo direttamente aggiornare il campo zona senza necessariamente creare un nuovo campo, usando questa espressione: if( \"zona\" is NULL, attribute( get_feature_by_id(@layer, $id -1), 'zona') , \"zona\") Nel linguaggio umano significa : partendo dalla prima riga ( $id=1 ) della tabella, se il campo zona \u00e8 non vuoto allora popolalo con il valore corrispondente se invece \u00e8 vuoto ( NULL ) prendi il valore corrispondente alla riga precedente ( $id -1 ). Il quesito \u00e8 stato posto in lista QGIS-user internazionale e la soluzione \u00e8 di Andrea Giudiceandrea (grazie mille) Nella sezione Funzioni , Gruppo Custom \u00e8 presente la funzione personalizzata fill-down creata da Giulio Fattori. Funzioni e variabili utilizzate: @layer if attribute $id get_feature_by_id","title":"fill-down con le espressioni di QGIS"},{"location":"esempi/finestra_temporale/","tags":["etichette","incidenza","array","csv"],"text":"Calcolo incidenza cumulativa settimanale \u21b5 Questo calcolo \u00e8 interessante in quanto permette di calcolare l\u2019 incidenza cumulativa settimanale , ovvero, fissata una data, calcolare la somma di un attributo relativo ai 6 giorni precedenti (finestra temporale). /*incidenza cumulativa settimanale*/ with_variable('pos', array_find(array_agg( expression:=\"campodata\"),\"campodata\"), with_variable('dat', array_length(array_agg(\"campodata\")), array_length( array_slice( array_agg(\"campo1\",group_by:=\"campo2\"), -@dat+@pos-6, -@dat+@pos))) NB: la funzione array_sum \u00e8 presente nel core di QGIS a partire da QGIS 3.18 Z\u00fcrich, in alternativa \u00e8 presente nel plugin ArrayPlus Ecco un esempio usando i dati sul COVID-19 \u21b5 dataset: https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv blog post su pigrecoinfinito: https://pigrecoinfinito.com/2021/03/16/qgis-e-il-calcolo-incidenza-cumulativa-settimanale-dei-contagi-regionale-dl-13-marzo-2021-n-30/ Fissata una data, calcolare la somma dei nuovi_positivi dei 6 giorni precedenti e poi normalizzarli rispetto la popolazione (campo j_OBS_VALUE messo in join). /*incidenza cumulativa settimanale*/ (with_variable('pos', array_find(array_agg( expression:=\"data\"),\"data\"), with_variable('dat', array_length(array_agg(\"data\")), array_sum( array_slice( array_agg(\"nuovi_positivi\",\"denominazione_regione\"), -@dat+@pos-6, -@dat+@pos))) ) / \"j_OBS_VALUE\") * 100000 Funzioni e variabili utilizzate: with_variable array_find array_filter array_agg array_length array_sum array_slice","title":"Finestra temporale"},{"location":"esempi/finestra_temporale/#calcolo-incidenza-cumulativa-settimanale","text":"Questo calcolo \u00e8 interessante in quanto permette di calcolare l\u2019 incidenza cumulativa settimanale , ovvero, fissata una data, calcolare la somma di un attributo relativo ai 6 giorni precedenti (finestra temporale). /*incidenza cumulativa settimanale*/ with_variable('pos', array_find(array_agg( expression:=\"campodata\"),\"campodata\"), with_variable('dat', array_length(array_agg(\"campodata\")), array_length( array_slice( array_agg(\"campo1\",group_by:=\"campo2\"), -@dat+@pos-6, -@dat+@pos))) NB: la funzione array_sum \u00e8 presente nel core di QGIS a partire da QGIS 3.18 Z\u00fcrich, in alternativa \u00e8 presente nel plugin ArrayPlus","title":"Calcolo incidenza cumulativa settimanale"},{"location":"esempi/finestra_temporale/#ecco-un-esempio-usando-i-dati-sul-covid-19","text":"dataset: https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-andamento-nazionale/dpc-covid19-ita-andamento-nazionale.csv blog post su pigrecoinfinito: https://pigrecoinfinito.com/2021/03/16/qgis-e-il-calcolo-incidenza-cumulativa-settimanale-dei-contagi-regionale-dl-13-marzo-2021-n-30/ Fissata una data, calcolare la somma dei nuovi_positivi dei 6 giorni precedenti e poi normalizzarli rispetto la popolazione (campo j_OBS_VALUE messo in join). /*incidenza cumulativa settimanale*/ (with_variable('pos', array_find(array_agg( expression:=\"data\"),\"data\"), with_variable('dat', array_length(array_agg(\"data\")), array_sum( array_slice( array_agg(\"nuovi_positivi\",\"denominazione_regione\"), -@dat+@pos-6, -@dat+@pos))) ) / \"j_OBS_VALUE\") * 100000 Funzioni e variabili utilizzate: with_variable array_find array_filter array_agg array_length array_sum array_slice","title":"Ecco un esempio usando i dati sul COVID-19"},{"location":"esempi/generalizzare_linee/","tags":["linee","vestizione","condizioni"],"text":"Vestizione generalizzata delle linee di contorno \u21b5 Quando si creano linee di contorno a partire da un modello digitale del terreno spesso la geometria lineare risultante si presenta ricca di asperit\u00e1. Esistono diversi algoritmi o plugin che permettono di generalizzare e semplificare le linee al fine di renderle pi\u00fa adatte ad un loro uso su mappe stampate o schermate. In questo esempio l'operazione di semplificazione e smussamento della vestizione delle linee verr\u00e1 fatto ricorrendo alle espressioni e al generatore di geometrie , cosi da non intervenire direttamente sulla geometria e mantenere il dataset originario del vettore. espressione da usare: CASE WHEN $length > 25 THEN smooth(simplify($geometry,10),21,0.2) END spiegazioni \u21b5 Vediamo le diverse parti che compongono l'espressione: $length > 25 : seleziona e visualizza solamente le linee di lunghezza maggiore di 25 m. Questo consente di eliminare piccoli oggetti areali. simplify($geometry,10) : semplifica una geometria rimuovendo alcuni dei nodi usando una soglia basata sulla distanza. Il valore 10 corrisponde alla tolleranza, ossia la deviazione massima dai segmenti rettilinei per i punti da rimuovere smooth(simplify($geometry,10),21,0.2) : smussa la geometria semplificata dall'espressione precedente. 21 corrisponde al numero di iterazioni di smussatura, mentre 0.2 \u00e9 il valore di offset che controlla che controlla quanto la geometria smussata seguir\u00e1 strettamente la geometria originale. Seleziona il layer contenente le curve di livello. Nel Pannelo Stile Layer seleziona la scheda Simbologia In Tipo simbolo del vettore seleziona Generatore Geometria In Tipo di geometria seleziona LineString/MultiLineString Copia l\u2019espressione nel riquadro La simbologia del layer si aggiorner\u00e1 automaticamente. In questo modo \u00e9 possibile cambiare alcuni dei valori inseriti e verificare in tempo reale il risultato. Una volta trovata la combinazione migliore di valori che restituisce la simbologia che si preferisce, \u00e9 possibile utilizzare la stessa espessione nel Calcolatore di campi per aggiornare la Geometria: Seleziona il layer contenente le curve di livello. Apri il Calcolatore di campi Spunta l'opzione Aggiorna un campo esistente Nel men\u00fa a tendina seleziona geometry . Copia l\u2019espressione nel riquadro Clicca ok Prova tu \u21b5 Il geopackage \u00e8 scaricabile qui -- Realizzato da Valerio Pinna Funzioni e variabili utilizzate: CASE \\$length simplify smooth \\$geometry","title":"Generalizzare isoipse"},{"location":"esempi/generalizzare_linee/#vestizione-generalizzata-delle-linee-di-contorno","text":"Quando si creano linee di contorno a partire da un modello digitale del terreno spesso la geometria lineare risultante si presenta ricca di asperit\u00e1. Esistono diversi algoritmi o plugin che permettono di generalizzare e semplificare le linee al fine di renderle pi\u00fa adatte ad un loro uso su mappe stampate o schermate. In questo esempio l'operazione di semplificazione e smussamento della vestizione delle linee verr\u00e1 fatto ricorrendo alle espressioni e al generatore di geometrie , cosi da non intervenire direttamente sulla geometria e mantenere il dataset originario del vettore. espressione da usare: CASE WHEN $length > 25 THEN smooth(simplify($geometry,10),21,0.2) END","title":"Vestizione generalizzata delle linee di contorno"},{"location":"esempi/generalizzare_linee/#spiegazioni","text":"Vediamo le diverse parti che compongono l'espressione: $length > 25 : seleziona e visualizza solamente le linee di lunghezza maggiore di 25 m. Questo consente di eliminare piccoli oggetti areali. simplify($geometry,10) : semplifica una geometria rimuovendo alcuni dei nodi usando una soglia basata sulla distanza. Il valore 10 corrisponde alla tolleranza, ossia la deviazione massima dai segmenti rettilinei per i punti da rimuovere smooth(simplify($geometry,10),21,0.2) : smussa la geometria semplificata dall'espressione precedente. 21 corrisponde al numero di iterazioni di smussatura, mentre 0.2 \u00e9 il valore di offset che controlla che controlla quanto la geometria smussata seguir\u00e1 strettamente la geometria originale. Seleziona il layer contenente le curve di livello. Nel Pannelo Stile Layer seleziona la scheda Simbologia In Tipo simbolo del vettore seleziona Generatore Geometria In Tipo di geometria seleziona LineString/MultiLineString Copia l\u2019espressione nel riquadro La simbologia del layer si aggiorner\u00e1 automaticamente. In questo modo \u00e9 possibile cambiare alcuni dei valori inseriti e verificare in tempo reale il risultato. Una volta trovata la combinazione migliore di valori che restituisce la simbologia che si preferisce, \u00e9 possibile utilizzare la stessa espessione nel Calcolatore di campi per aggiornare la Geometria: Seleziona il layer contenente le curve di livello. Apri il Calcolatore di campi Spunta l'opzione Aggiorna un campo esistente Nel men\u00fa a tendina seleziona geometry . Copia l\u2019espressione nel riquadro Clicca ok","title":"spiegazioni"},{"location":"esempi/generalizzare_linee/#prova-tu","text":"Il geopackage \u00e8 scaricabile qui -- Realizzato da Valerio Pinna Funzioni e variabili utilizzate: CASE \\$length simplify smooth \\$geometry","title":"Prova tu"},{"location":"esempi/geometria_vicina_filtro/","tags":["prossimit\u00e0","condizioni","array","relazioni"],"text":"Geometria pi\u00f9 vicina e filtro condizionato \u21b5 Tre layer: 1. Layer di punti che rappresenta delle utenze ( layer1 ). 2. Layer di punti derivante da un rilevamento topografico ( layer2 ). 3. Layer di poligoni rappresentante degli edifici ( layer3 ). Popolare un nuovo campo del layer1 con il valore dell'attributo presente nel layer2 relativo alla geometria pi\u00f9 vicina a condizione che i punti ricadono nello steso poligono, layer3 . Esempio: soluzione di Andrea Giudiceandrea attribute( array_filter( overlay_nearest( 'layer2', $currentfeature, limit:=-1 ), attribute( @element, 'IDp' ) = \"IDp\" )[0], 'IDl2' ) Soluzione pigreco relation_aggregate( relation:='rel', aggregate:='array_agg', expression:=\"IDl2\") [ with_variable('fufu', array_foreach( relation_aggregate( relation:='rel', aggregate:='array_agg', expression:=$geometry), distance($geometry,@element)), array_find(@fufu,array_min(@fufu))) ] Soluzione pigreco in SQL SELECT l1 . \"IDAG\" AS la1 , id , shortestline ( l1 . \"geom\" , l2 . \"geom\" ) as geom FROM \"layer1\" l1 , \"layer2\" l2 WHERE l1 . \"IDAG\" = l2 . \"IDAG\" group by l1 . \"IDAG\" having min ( st_distance ( l1 . \"geom\" , l2 . \"geom\" )) prova tu \u21b5 dati e progetto QGIS 3.12 Funzioni e variabili utilizzate: with_variable array_find array_filter array_agg line_locate_point line_interpolate_point intersection length $geometry","title":"Geometria pi\u00f9 vicina e filtro condizionato"},{"location":"esempi/geometria_vicina_filtro/#geometria-piu-vicina-e-filtro-condizionato","text":"Tre layer: 1. Layer di punti che rappresenta delle utenze ( layer1 ). 2. Layer di punti derivante da un rilevamento topografico ( layer2 ). 3. Layer di poligoni rappresentante degli edifici ( layer3 ). Popolare un nuovo campo del layer1 con il valore dell'attributo presente nel layer2 relativo alla geometria pi\u00f9 vicina a condizione che i punti ricadono nello steso poligono, layer3 . Esempio: soluzione di Andrea Giudiceandrea attribute( array_filter( overlay_nearest( 'layer2', $currentfeature, limit:=-1 ), attribute( @element, 'IDp' ) = \"IDp\" )[0], 'IDl2' ) Soluzione pigreco relation_aggregate( relation:='rel', aggregate:='array_agg', expression:=\"IDl2\") [ with_variable('fufu', array_foreach( relation_aggregate( relation:='rel', aggregate:='array_agg', expression:=$geometry), distance($geometry,@element)), array_find(@fufu,array_min(@fufu))) ] Soluzione pigreco in SQL SELECT l1 . \"IDAG\" AS la1 , id , shortestline ( l1 . \"geom\" , l2 . \"geom\" ) as geom FROM \"layer1\" l1 , \"layer2\" l2 WHERE l1 . \"IDAG\" = l2 . \"IDAG\" group by l1 . \"IDAG\" having min ( st_distance ( l1 . \"geom\" , l2 . \"geom\" ))","title":"Geometria pi\u00f9 vicina e filtro condizionato"},{"location":"esempi/geometria_vicina_filtro/#prova-tu","text":"dati e progetto QGIS 3.12 Funzioni e variabili utilizzate: with_variable array_find array_filter array_agg line_locate_point line_interpolate_point intersection length $geometry","title":"prova tu"},{"location":"esempi/geometria_vicina_filtro_condizionato/","tags":["prossimit\u00e0","condizioni","array","overlay","linee"],"text":"Geometria pi\u00f9 vicina con filtro condizionato \u21b5 Due layer di punti: layer1 con attributo id1 e layer2 con id2 . A partire dal layer1 , ottenere per ogni punto del layer1 tutti i punti del layer2 dove id2 ha un valore diverso da id1 (collegarli con un segmento). Esempio: Come si evince dallo screenshot, i punti in rosso devono collegarsi con i punti blu che hanno id differente. Il punto 6 \u00e8 rimasto isolato perch\u00e9 non ci sono punti vicini e con id diverso da 6. Espressione utilizzata ( >=QGIS 3.16 ): collect_geometries( make_line( $geometry, geometry(get_feature('layer2','id2', attribute( array_filter( overlay_nearest('layer2',$currentfeature,limit:=-1), attribute( @element, 'id2' ) != \"id1\" )[0], 'id2' )))) ) Altra espressione pi\u00f9 performante su grandi dataset ( >=QGIS 3.22.1 ) make_line ( eval( 'overlay_nearest( \\'layer2\\', $geometry, filter:=id2<>'||\"id1\"||')')[0], $geometry ) idea presa da qui: stackexchange prova tu \u21b5 GitHub dati Funzioni e variabili utilizzate: array_filter overlay_nearest attribute make_line collect_geometries $geometry geometry","title":"Geometrie vicine con condizione"},{"location":"esempi/geometria_vicina_filtro_condizionato/#geometria-piu-vicina-con-filtro-condizionato","text":"Due layer di punti: layer1 con attributo id1 e layer2 con id2 . A partire dal layer1 , ottenere per ogni punto del layer1 tutti i punti del layer2 dove id2 ha un valore diverso da id1 (collegarli con un segmento). Esempio: Come si evince dallo screenshot, i punti in rosso devono collegarsi con i punti blu che hanno id differente. Il punto 6 \u00e8 rimasto isolato perch\u00e9 non ci sono punti vicini e con id diverso da 6. Espressione utilizzata ( >=QGIS 3.16 ): collect_geometries( make_line( $geometry, geometry(get_feature('layer2','id2', attribute( array_filter( overlay_nearest('layer2',$currentfeature,limit:=-1), attribute( @element, 'id2' ) != \"id1\" )[0], 'id2' )))) ) Altra espressione pi\u00f9 performante su grandi dataset ( >=QGIS 3.22.1 ) make_line ( eval( 'overlay_nearest( \\'layer2\\', $geometry, filter:=id2<>'||\"id1\"||')')[0], $geometry ) idea presa da qui: stackexchange","title":"Geometria pi\u00f9 vicina con filtro condizionato"},{"location":"esempi/geometria_vicina_filtro_condizionato/#prova-tu","text":"GitHub dati Funzioni e variabili utilizzate: array_filter overlay_nearest attribute make_line collect_geometries $geometry geometry","title":"prova tu"},{"location":"esempi/gpkg_blob_immagini/","tags":["immagini","blob","geopackage"],"text":"IN LAVORAZIONE Come memorizzare e riutilizzare immagini memorizzate in un GeoPackage \u21b5 Per memorizzare immagini all'interno di un GeoPackage e in particolare in un layer vettoriale, per esempio un layer puntuale, possiamo utilizzare un campo di tipo BLOB. Successivamente, per visualizzarle possiamo utilizzando le espressioni di QGIS, in particolare la funzione to_base64 . Immaginiamo di avere realizzato un rilievo della pubblica illuminazione, ogni punto del layer vettoriale rappresenta un palo della luce; assieme ad altri dati memorizzo anche la foto all'interno del geopackage, in un campo definito BLOB: 'base64:' || to_base64(\"campoBLOB\") La stringa 'base64:' iniziale \u00e8 necessaria per indicare che ci\u00f2 che segue \u00e8 una stringa base64 che codifica un'immagine, come 'http:' o 'https:' per indicare che si tratta di un URL. Funzioni e variabili utilizzate: to_base64","title":"Gpkg blob immagini"},{"location":"esempi/gpkg_blob_immagini/#come-memorizzare-e-riutilizzare-immagini-memorizzate-in-un-geopackage","text":"Per memorizzare immagini all'interno di un GeoPackage e in particolare in un layer vettoriale, per esempio un layer puntuale, possiamo utilizzare un campo di tipo BLOB. Successivamente, per visualizzarle possiamo utilizzando le espressioni di QGIS, in particolare la funzione to_base64 . Immaginiamo di avere realizzato un rilievo della pubblica illuminazione, ogni punto del layer vettoriale rappresenta un palo della luce; assieme ad altri dati memorizzo anche la foto all'interno del geopackage, in un campo definito BLOB: 'base64:' || to_base64(\"campoBLOB\") La stringa 'base64:' iniziale \u00e8 necessaria per indicare che ci\u00f2 che segue \u00e8 una stringa base64 che codifica un'immagine, come 'http:' o 'https:' per indicare che si tratta di un URL. Funzioni e variabili utilizzate: to_base64","title":"Come memorizzare e riutilizzare immagini memorizzate in un GeoPackage"},{"location":"esempi/hub_lines/","tags":["linee","hub-line","wkt"],"text":"Unisci con linee Hub lines \u21b5 Come creare hub lines usando il calcolatore di campi di QGIS #QGISUserConf2019 A Coru\u00f1a Tabella di partenza: A Coru\u00f1a da usare come hub City Nation Latitude Longitude Carballo Spain 43.2128129 -8.6915927 Barcelona Spain 41.3850639 2.1734035 Krasnodar Russia 45.0392674 38.9872209 Luserna San Giovanni Italy 44.8170347 7.2445882 Cascais Portugal 38.6967571 -9.4207438 A Coru\u00f1a Spain 43.3623436 -8.4115401 Gij\u00f3n Spain 43.5322015 -5.6611195 A Coru\u00f1a Spain 43.3623436 -8.4115401 Gr\u00fct (Gossau ZH) Swizerland 47.31 8.78436 Berlin Germany 52.5200066 13.404954 A Coru\u00f1a Spain 43.3623436 -8.4115401 Valencia Spain 39.4699075 -0.3762881 Madrid Spain 40.4167754 -3.7037902 Oviedo Spain 43.3619145 -5.8493887 Creare un campo WKT testuale di 50 caratteri e popolare il campo con la seguente espressione: 'LINESTRING (-8.4115401 43.3623436 ,' || \"Longitude\" || ' ' || \"Latitude\" || ')' otterremo la tabella: successivamente importata in QGIS come testo delimitato e geometria di tipo WKT Prova tu \u21b5 dati Funzioni e variabili utilizzate: doppio-pipe","title":"Creare Hub lines"},{"location":"esempi/hub_lines/#unisci-con-linee-hub-lines","text":"Come creare hub lines usando il calcolatore di campi di QGIS #QGISUserConf2019 A Coru\u00f1a Tabella di partenza: A Coru\u00f1a da usare come hub City Nation Latitude Longitude Carballo Spain 43.2128129 -8.6915927 Barcelona Spain 41.3850639 2.1734035 Krasnodar Russia 45.0392674 38.9872209 Luserna San Giovanni Italy 44.8170347 7.2445882 Cascais Portugal 38.6967571 -9.4207438 A Coru\u00f1a Spain 43.3623436 -8.4115401 Gij\u00f3n Spain 43.5322015 -5.6611195 A Coru\u00f1a Spain 43.3623436 -8.4115401 Gr\u00fct (Gossau ZH) Swizerland 47.31 8.78436 Berlin Germany 52.5200066 13.404954 A Coru\u00f1a Spain 43.3623436 -8.4115401 Valencia Spain 39.4699075 -0.3762881 Madrid Spain 40.4167754 -3.7037902 Oviedo Spain 43.3619145 -5.8493887 Creare un campo WKT testuale di 50 caratteri e popolare il campo con la seguente espressione: 'LINESTRING (-8.4115401 43.3623436 ,' || \"Longitude\" || ' ' || \"Latitude\" || ')' otterremo la tabella: successivamente importata in QGIS come testo delimitato e geometria di tipo WKT","title":"Unisci con linee Hub lines"},{"location":"esempi/hub_lines/#prova-tu","text":"dati Funzioni e variabili utilizzate: doppio-pipe","title":"Prova tu"},{"location":"esempi/lavorare_con_le_ore/","tags":["data","ora","regex"],"text":"Lavorare con il formato ora \u21b5 Supponiamo di avere un file CSV con questi dati, che dovrebbero rappresentare un oraio, ma non sono correttamente definiti come formato Ora ; come convertirlo correttamente? time 0d 00:45:38 0d 00:05:00 0d 00:09:59 0d 00:14:58 0d 00:19:57 0d 00:24:56 Il problema \u00e8 legato alla presenza di 0d , sotto due possibili modi per trasformarlo correttamente in Ora : in questo esempio tolgo i primi tre caratteri, ovvero 0d : to_time(regexp_replace(\"time\",'^...',''),'HH:mm:ss','en') \u2192 <ora: 00:05:00> in questo secondo esempio, nascondo la prima parte della stringa con \\'0d\\' , cove lo \\ ha la funzione di escape del ' to_time(\"time\",'\\'0d\\' HH:mm:ss','en') \u2192 <ora: 00:05:00> Funzioni utilizzate: to_time regexp_replace","title":"Lavorare con le Ore"},{"location":"esempi/lavorare_con_le_ore/#lavorare-con-il-formato-ora","text":"Supponiamo di avere un file CSV con questi dati, che dovrebbero rappresentare un oraio, ma non sono correttamente definiti come formato Ora ; come convertirlo correttamente? time 0d 00:45:38 0d 00:05:00 0d 00:09:59 0d 00:14:58 0d 00:19:57 0d 00:24:56 Il problema \u00e8 legato alla presenza di 0d , sotto due possibili modi per trasformarlo correttamente in Ora : in questo esempio tolgo i primi tre caratteri, ovvero 0d : to_time(regexp_replace(\"time\",'^...',''),'HH:mm:ss','en') \u2192 <ora: 00:05:00> in questo secondo esempio, nascondo la prima parte della stringa con \\'0d\\' , cove lo \\ ha la funzione di escape del ' to_time(\"time\",'\\'0d\\' HH:mm:ss','en') \u2192 <ora: 00:05:00> Funzioni utilizzate: to_time regexp_replace","title":"Lavorare con il formato ora"},{"location":"esempi/layer_vicino/","tags":["prossimit\u00e0","linee","array","overlay","shortest-line"],"text":"Layer pi\u00f9 vicino \u21b5 Dati enne layer vettoriali (es:punto, linea e poligono) e un vettore punto di confronto. Come stabilire a quale layer \u00e8 pi\u00f9 vicino un punto tracciato a caso? Espressione usata nel generatore di geometria del layer punti di confronto: shortest_line( overlay_nearest(layer:= with_variable('in_layer',array('punti','line','poligono'), -- three layers with_variable('in_dist', array_foreach(@in_layer,distance(overlay_nearest(@element,$geometry)[0], $geometry)), array_get(@in_layer, array_find(@in_dist, array_min(@in_dist))))) ,expression:= $geometry )[0], $geometry) link: https://gist.github.com/pigreco/f1705597c3515c21d81c64df1b46db09#gistcomment-3673986 Funzioni e variabili utilizzate: @with_variable array_get array_foreach array_find array_min overlay_nearest distance array shortest_line $geometry","title":"Layer pi\u00f9 vicino"},{"location":"esempi/layer_vicino/#layer-piu-vicino","text":"Dati enne layer vettoriali (es:punto, linea e poligono) e un vettore punto di confronto. Come stabilire a quale layer \u00e8 pi\u00f9 vicino un punto tracciato a caso? Espressione usata nel generatore di geometria del layer punti di confronto: shortest_line( overlay_nearest(layer:= with_variable('in_layer',array('punti','line','poligono'), -- three layers with_variable('in_dist', array_foreach(@in_layer,distance(overlay_nearest(@element,$geometry)[0], $geometry)), array_get(@in_layer, array_find(@in_dist, array_min(@in_dist))))) ,expression:= $geometry )[0], $geometry) link: https://gist.github.com/pigreco/f1705597c3515c21d81c64df1b46db09#gistcomment-3673986 Funzioni e variabili utilizzate: @with_variable array_get array_foreach array_find array_min overlay_nearest distance array shortest_line $geometry","title":"Layer pi\u00f9 vicino"},{"location":"esempi/linea_min_distanza/","tags":["prossimit\u00e0","linee","aggregare","shortest-line"],"text":"Tracciare segmento di minima distanza usando il generatore di geometria \u21b5 Dati due layer puntuali (ma potrebbero essere di qualsiasi tipologia), tracciare il segmento di minima distanza tra gli oggetti dei due layer usando il generatore di geometrie Carico due layer puntuali: puntiA e puntiB Tematizzo il layer puntiA usando il generatore di geometrie espressione da usare -- crea un segmento di minima distanza tra il layer puntiA e puntiB shortest_line($geometry, -- geometria puntoA aggregate( layer:='puntiB', aggregate:= 'collect', -- crea multiPoint expression:=$geometry) -- geometria puntoB ) 3. carico poligonoC e lineaD , altri due layer 4. utilizzo stessa espresione di sopra, cambio solamente il nome del layer ( poligonoC o lineaD al posto di puntiB ) ecco il risultato: poi, con un po' di magia \u00e8 possibile aggiungere l'etichetta con il valore della lunghezza (ma questa \u00e8 altra storia!!!) Prova tu \u21b5 Geopackage \u00e8 qui NB: occorre >= QGIS 3.8, nel gpkg trovare anche il progetto QGIS!!! Funzioni e variabili utilizzate: aggregate shortest_line \\$geometry","title":"Linea minima distanza tra due punti"},{"location":"esempi/linea_min_distanza/#tracciare-segmento-di-minima-distanza-usando-il-generatore-di-geometria","text":"Dati due layer puntuali (ma potrebbero essere di qualsiasi tipologia), tracciare il segmento di minima distanza tra gli oggetti dei due layer usando il generatore di geometrie Carico due layer puntuali: puntiA e puntiB Tematizzo il layer puntiA usando il generatore di geometrie espressione da usare -- crea un segmento di minima distanza tra il layer puntiA e puntiB shortest_line($geometry, -- geometria puntoA aggregate( layer:='puntiB', aggregate:= 'collect', -- crea multiPoint expression:=$geometry) -- geometria puntoB ) 3. carico poligonoC e lineaD , altri due layer 4. utilizzo stessa espresione di sopra, cambio solamente il nome del layer ( poligonoC o lineaD al posto di puntiB ) ecco il risultato: poi, con un po' di magia \u00e8 possibile aggiungere l'etichetta con il valore della lunghezza (ma questa \u00e8 altra storia!!!)","title":"Tracciare segmento di minima distanza usando il generatore di geometria"},{"location":"esempi/linea_min_distanza/#prova-tu","text":"Geopackage \u00e8 qui NB: occorre >= QGIS 3.8, nel gpkg trovare anche il progetto QGIS!!! Funzioni e variabili utilizzate: aggregate shortest_line \\$geometry","title":"Prova tu"},{"location":"esempi/linea_min_distanza2/","tags":["prossimit\u00e0","linee","overlay","shortest-line"],"text":"Calcolo distanza minima tra due vettori \u21b5 Dati due layer (es_uno puntuale e l'altro lineare), calcolare la lunghezza del segmento di minima distanza tra gli elementi dei due layer usando il calcolatore di campi: Carico i due layer: alberi e fiumi Traccio la linea di minima distanza solo per visualizzarla a schermo tramite il generatore di geometrie, usando l'espressione: shortest_line( $geometry, overlay_nearest( layer:='fiumi', expression:=$geometry)[0] ) per calcolare la lunghezza e aggiungerla come campo nella tabella attributi del layer alberi : aprire tabella attributi; aprire field calc; aggiungere un nuovo campo numerico; popolarlo con l'espressione: length( shortest_line( $geometry, overlay_nearest( layer:='fiumi', expression:=$geometry)[0] ) ) Osservazione: la funzione overlay_nearest \u00e8 presente in QGIS a partire dalla 3.16 Hannover Funzioni e variabili utilizzate: aggregate shortest_line overlay_nearest \\$geometry","title":"Distanza minima tra due vettori"},{"location":"esempi/linea_min_distanza2/#calcolo-distanza-minima-tra-due-vettori","text":"Dati due layer (es_uno puntuale e l'altro lineare), calcolare la lunghezza del segmento di minima distanza tra gli elementi dei due layer usando il calcolatore di campi: Carico i due layer: alberi e fiumi Traccio la linea di minima distanza solo per visualizzarla a schermo tramite il generatore di geometrie, usando l'espressione: shortest_line( $geometry, overlay_nearest( layer:='fiumi', expression:=$geometry)[0] ) per calcolare la lunghezza e aggiungerla come campo nella tabella attributi del layer alberi : aprire tabella attributi; aprire field calc; aggiungere un nuovo campo numerico; popolarlo con l'espressione: length( shortest_line( $geometry, overlay_nearest( layer:='fiumi', expression:=$geometry)[0] ) ) Osservazione: la funzione overlay_nearest \u00e8 presente in QGIS a partire dalla 3.16 Hannover Funzioni e variabili utilizzate: aggregate shortest_line overlay_nearest \\$geometry","title":"Calcolo distanza minima tra due vettori"},{"location":"esempi/lista_esempi/","text":"Abstract Questa sezione raccoglie degli esempi pratici e svolti step by step, con molti screenshot per rendere facile la comprensione di alcune funzioni di base come Area, lunghezza, Buffer ecc... | La sezione \u00e8 in continua evoluzione e sono benvenuti contributi esterni Attualmente ci sono 80 esempi svolti! (in evoluzione) ... e 50 esempi da svolgere: mettiti alla prova Elenco esempi \u21b5 (Livello di difficolt\u00e0: 1 -> Facile -- 5 -> Difficile) nro Esempio Descrizione Autore Livello funzioni utilizzate 1 aggiungi campo aggiungere colonna area per calcolo superficie Salvatore Fiandaca 2 $area 2 campi coordinate aggiungere colonne coordinate x e y Salvatore Fiandaca 2 $x , $y 3 campo virtuale aggiungere campo virtuale Salvatore Fiandaca 2 $length 4 campo quota z aggingere colonna quota con valori z Salvatore Fiandaca 2 z , start_point , $geometry 5 etichettare etichettare usando il campo geometry Salvatore Fiandaca 2 to_int , format_number , $x , $y , z, m, $length , start_point , $geometry 6 aggiornare geometria aggiornare il campo geometry Salvatore Fiandaca 2 simplify , $geometry 7 conversione etichettare punti da sessadecimali a sessagesimali Salvatore Fiandaca 2 floor, format_number , to_real, $x , $y 8 tematizzare Tematizzare utilizzando la sovrascrittura definita dai dati Salvatore Fiandaca 2 CASE , length 9 legenda Legenda con testo lungo, inserimento carattere speciale Salvatore Fiandaca 2 CASE , regexp_replace 10 selezione Seleziona usando le funzioni di aggregazione Salvatore Fiandaca 2 $area , minimum , = 11 core area Calcola la core area di un poligono Ludovico Frate 2 area, buffer 12 sposta etichette Sposta etichetta e genera segmento Salvatore Fiandaca 3 x, y, $geometry 13 conteggio valori Conteggio valori in un campo Salvatore Fiandaca 2 count 14 centroidi linee curve Centroide lungo le linee curve Salvatore Fiandaca 2 $geometry , $length , line_interpolate_point , geom_to_wkt 15 conta i punti nel poligono Conta i punti nel poligono Salvatore Fiandaca 2 aggregate 16 somma lunghezze nel poligono Somma le lunghezze delle linee dentro il poligono Salvatore Fiandaca 2 parent, aggregate , length, geometry, intersection, intersects , transform , $geometry 17 conta punti nel poligono per categorie Contare i punti nel poligono per categorie Martina Savarese 2 parent, aggregate , AND, geometry 18 nascondi etichette Nasconde etichette non desiderate Salvatore Fiandaca 2 parent, not, aggregate , intersects , point_on_surface, $geometry 19 calcolo area poligoni nel reticolo Calcolare l\u2019area delle porzioni di poligoni che ricadono dentro ad una cella di un reticolo Salvatore Fiandaca 2 parent, aggregate , geometry, intersection, intersects , $geometry 20 spatial join Trasferire un attributo usando le relazioni spaziali Salvatore Fiandaca 2 parent, aggregate , geometry, to_string, intersects , $geometry 21 unica label Unica label per pi\u00f9 poligoni Salvatore Fiandaca 2 x, y, make_point , centroid, collect, $geometry 22 elenco comuni Come ottenere l'elenco dei Comuni attraversati da un fiume Salvatore Fiandaca 2 aggregate , crosses, $geometry , geometry, parent 23 rotazione pattern lineare Come ruotare un pattern lineare in funzione della feature Salvatore Fiandaca 2 angle_at_vertex , shortest_line , centroid, oriented_bbox, boundary, $geometry 24 numerazione poligoni in base a relazione spaziale Numerazione poligoni in base a relazioni spaziali Salvatore Fiandaca 3 @element, array_agg , array_sort , string_to_array , array_get, array_find , array_reverse, $area , count, array_foreach , upper, to_int , $geometry 25 assegnare categoria prevalente Assegnare categoria prevalente Salvatore Fiandaca 2 array_majority , string_to_array , aggregate , intersects , $geometry , geometry, parent 26 creare Hub lines Creare Hub lines Salvatore Fiandaca 2 doppio pipe 27 aggrega con SR differenti Aggrega con SR differenti Salvatore Fiandaca 3 aggregate , count, intersects , transform , $geometry , geometry, parent 28 distanze progressive chilometriche Formatta le distanze progressive chilometriche tipo Autostrade Salvatore Fiandaca 2 CASE 29 aggregare elementi adiacenti Aggrega elementi adiacenti Salvatore Fiandaca 3 aggregate , count, to_string, touches, $geometry , geometry, parent 30 linea minima distanza tra due punti Traccia una linea di minima distanza usando il generatore di geometrie Salvatore Fiandaca 2 aggregate , shortest_line , $geometry 31 creare campo somma cumulativa Espressione per popolare campo con somma cumulativa Salvatore Fiandaca 2 if, $id, array_agg , eval, replace, array_to_string , array_slice , array_sum 32 aggiungere punto a linea Aggiunge un nodo di disegno ad una linea Salvatore Fiandaca 2 make_line, start_point , $geometry , end_point, geometry, get_feature_by_id 33 drilldown form multiple Creare Form con filtro dinamico drillDown (cascade) Salvatore Fiandaca 3 aggregate , eval, array 34 selezionare primi n valori Come selezionare i primi n poligoni pi\u00f9 grandi Salvatore Fiandaca 2 doppio-pipe, uguale, array_contains , array_slice , array_sort , array_agg , $area , $geometry 35 generalizzare isoipse Generalizzare le linee di contorno Valerio Pinna 3 CASE , $length , simplify, smooth, $geometry 36 campo coord in lat lon Generare due campi lon lat a partire da un unico campo Salvatore Fiandaca 2 regexp_match 37 calcolo incrementi giornalieri Calcola gli incrementi giornalieri di un attributo Salvatore Fiandaca 4 with_variable, if, array_find , array_agg 38 tracciare un grafico Come tracciare un grafico per ogni feature usando il generatore di geometrie Salvatore Fiandaca 4 with_variable, relation_ aggregate , array_to_string , array_get, array_foreach , generate_series, translate, make_line, make_point , centroid, end_point, round, $geometry 39 elenco ordinato di Comuni Come ottenere l'elenco ordinato dei Comuni attraversati da un itinerario Salvatore Fiandaca 3 with_variable, array_find , array_filter , array_agg , line_locate_point, line_interpolate_point , intersection, length, $geometry 40 etichettare con chiave-valore Etichettare facendo vedere sia il nome del campo che il corrispondente valore Salvatore Fiandaca 2 replace, map_to_hstore , attributes 41 etichettare itinerario con elenco ordinato Comuni Etichettare itinerario con elenco ordinato di Comuni attraversti Valerio Pinna 4 parent, aggregate , array_to_string , array_get, array_foreach , generate_series, num_geometries , collect_geometries, intersection, start_point , concat, $geometry 42 etichette formattate diversi stili Etichette formattate con diversi stili Valerio Pinna 2 with_variable, array, string_to_array , replace 43 selezionare vertici duplicati Selezionare vertici duplicati Salvatore Fiandaca 3 if, $id, get_feature_by_id, array_agg , array_sort , string_to_array , array_last, array_find , array_reverse, geom_to_wkt , count, array_length , $geometry 44 conteggio caratteri diversi Conta i caratteri diversi in un testo Salvatore Fiandaca 2 array_length , array_distinct , string_to_array , substr, regexp_replace 45 distanza minima tra due vettori Lunghezza della linea di minima distanza tra due vettori Salvatore Fiandaca 2 aggregate , shortest_line , overlay_nearest , $geometry 46 lunghezze segmenti di un poligono Lunghezze dei segmenti di un poligono Salvatore Fiandaca 3 segments_to_lines , num_geometries , length, round, geometry_n, segments_to_lines , array_to_string , generate_series, array_foreach , $geometry 47 fill-down con QGIS riempire le celle sottostanti con il primo valore non nullo Salvatore Fiandaca 3 @layer, if, attribute, $id, get_feature_by_id 48 finestra temporale Fissata una data, calcolare la somma di un attributo relativo ai 6 giorni precedenti Salvatore Fiandaca 4 with_variable, array_find , array_filter , array_agg , array_length , array_sum , array_slice 49 rotazione simbolo parallelo ad una linea Lunghezze dei segmenti di un poligono Salvatore Fiandaca 3 with_variable, overlay_nearest , line_interpolate_angle, closest_point, $geometry 50 livello acqua Effetto riempimento recipiente d'acqua Salvatore Fiandaca 4 difference, make_rectangle_3points, point_n, bounds, make_point , x, y, bounds_height, intersection, area, second, now, area, format_number , $geometry 51 layer vicino Come determinare il layer pi\u00f9 vicino ad un altro Salvatore Fiandaca 4 with_variable, array_get, array_foreach , array_find , array_min , overlay_nearest , distance, array, shortest_line , $geometry 52 eliminare testo tra parentesi Eliminare il testo tra parentesi tonde Salvatore Fiandaca 3 regexp_replace 53 segmento minimo facciata-strada Determinare il segmento minimo tra centroide facciata edifici e strada pi\u00f9 vicina Salvatore Fiandaca 4 with_variable, generate_series, array_foreach , array_find , num_geometries , collect_geometries, geometry_n, segments_to_lines , overlay_nearest , distance, centroid, shortest_line , $geometry 54 selezionare punti pi\u00f9 vicini Selezionare 'n' punti pi\u00f9 vicini a partire da un punto selezionato Salvatore Fiandaca 4 with_variable, array_find , array_agg , array_foreach , aggregate , geom_to_wkt , make_circle, distance, overlay_nearest , intersects , is_selected, $geometry 55 Nome del campo con massimo valore Determina il nome del campo che contiene il valore massimo su un record Salvatore Fiandaca 4 with_variable, hstore_to_map , array_max , array_find , attributes, map_delete, map_avals , map_akeys 56 Ricerca caratteri speciali Ricerca e selezione di record con campi che contengono caratteri speciali Salvatore Fiandaca 3 regexp_substr, <> 57 confrontare campi tabella Ricercare valori uguali in due campi diversi Salvatore Fiandaca 3 array_to_string , array_majority , array_cat , string_to_array 58 estrarre campo da un hstore Aggiungere un campo a partire da un altro campo in formato hstore (tipico di OSM) Salvatore Fiandaca 3 hstore_to_map , map_get, to_int 59 geometrie vicine ma con condizione tracciare un segmento tra punti vicini che soddisfano la condizione id1 <> id2 Salvatore Fiandaca 4 overlay_nearest , array_filter , attribute, make_line, collect_geometries, $geometry , geometry 60 atlante con righe tabella in verticale riga tabella attributi in verticale nel layout di stampa di un atlante Salvatore Fiandaca 3 replace, map_to_hstore , attributes 61 decimali coordinate come apici decimali coordinate messe come apici Salvatore Fiandaca 3 with_variable, regexp_replace, left, array, $x , $y , replace 62 media e stdev tra campi calcola la media e la deviazione standard campionaria lungo lo stesso record Salvatore Fiandaca 3 with_variable, array_foreach , array_mean, attributes, map_delete, map_avals , map_akeys 63 classificazione specie classificare delle specie, fare delle somme in funzione delle specie Salvatore Fiandaca 3 array_sum , array_foreach , get_feature, attribute, map_get, map, string_to_array , to_real 64 prelevare attributi da layer pi\u00f9 vicini Prelevare attributi da diversi layer con criterio di vicinanza Salvatore Fiandaca 4 with_variable, array_get, array_foreach , array_find , array_min , overlay_nearest , distance, array, shortest_line , $geometry , start_point , end_point 65 aggrega valori di una tabella Aggregare i valori di una tabella e creare un nuovo layer Salvatore Fiandaca 3 array_agg , array_to_string 66 etichettare usando gli apici Etichettare usando gli apici, km\u00b2 o m\u00b3 Salvatore Fiandaca 1 char 67 ID univoco per gruppi consecutivi ID univoco per gruppi consecutivi Salvatore Fiandaca 4 with_variable, array_find , array_distinct , array_agg , aggregate 68 eliminare righe duplicate con condizione Eliminare righe duplicate con condizioni su pi\u00f9 attributi Salvatore Fiandaca 3 minimum , array_agg , array_find , with_variable 69 selezione ultimo record per data Selezionare l'ultimo record usando un campo in formato data Salvatore Fiandaca 3 maximun , array_agg , array_max 70 trova valore Trova valore in tutta la tabella attributi Salvatore Fiandaca 3 array_find , map_avals , attributes 71 Array Natural sorting Ordinare numericamente una lista alfanumerica Salvatore Fiandaca 4 with_variable, array_sort , array_foreach , array_to_string , string_to_array , generate_series,regexp_substr, regexp_replace, lpad 72 Conta punti nel poligono e per data Conta punti nel poligono e per data Salvatore Fiandaca 4 parent, with_variable, aggregate , array_to_string , array_count , array_foreach , array_distinct , $geometry , intersects 73 Lavorare con le ore Convertire nel corretto formato Ora Salvatore Fiandaca 2 to_time regexp_replace 74 Spostare i punti dentro i poligoni in base agli attributi Spostare i punti dentro i poligoni in base agli attributi Salvatore Fiandaca 4 with_variable , get_feature , closest_point , bounds_height , centroid , attribute , $currentfeature 75 Seleziona primo record per ogni duplicato Seleziona primo record per ogni duplicato Salvatore Fiandaca 3 @with_variable , array_agg , if , count 76 Cronometro Creare un cronometro nella Map Canvas Salvatore Fiandaca 3 with_variable , age , now() , make_datetime , lpad , floor , to_int , minute , hour 77 Selezionare record orfani in una relazione padre-figlio Selezionare record orfani in una relazione padre-figlio Salvatore Fiandaca 3 @parent , NOT , aggregate , count 78 Tema con unico contorno per poligoni adiacenti Crea unico contorno per poligoni adiancenti Salvatore Fiandaca 3 collect , buffer , difference , $geometry , intersection 79 Prende attributo da un layer sovrapposto Come prendere attributi da layer sovrapposti Salvatore Fiandaca 3 array_to_string , overlay_intersects 80 seleziona poligoni con max area sovrapposta Come prendere attributi da layer sovrapposti Salvatore Fiandaca 3 maximum , intersection , area , overlay_intersects , $geometry 81 tracciare punti a distanza prefissata lungo una linea Come tracciare puntia distanza prefissata lungo una linea Salvatore Fiandaca 3 overlay_nearest , collect_geometries , line_interpolate_point , \\$geometry , array_foreach , array Tags \u21b5 Elenco tag per la ricerca Partecipa \u21b5 Se hai un esempio svolto e vuoi condividerlo puoi farlo, vedi sezione Lavora con Noi : per maggiori info scrivi all'autore Licenza \u21b5 In questa sezione Esempi svolti e tutti gli esercizi svolti, la licenza \u00e8 CC-BY-NC-SA 4.0","title":"Lista esempi"},{"location":"esempi/lista_esempi/#elenco-esempi","text":"(Livello di difficolt\u00e0: 1 -> Facile -- 5 -> Difficile) nro Esempio Descrizione Autore Livello funzioni utilizzate 1 aggiungi campo aggiungere colonna area per calcolo superficie Salvatore Fiandaca 2 $area 2 campi coordinate aggiungere colonne coordinate x e y Salvatore Fiandaca 2 $x , $y 3 campo virtuale aggiungere campo virtuale Salvatore Fiandaca 2 $length 4 campo quota z aggingere colonna quota con valori z Salvatore Fiandaca 2 z , start_point , $geometry 5 etichettare etichettare usando il campo geometry Salvatore Fiandaca 2 to_int , format_number , $x , $y , z, m, $length , start_point , $geometry 6 aggiornare geometria aggiornare il campo geometry Salvatore Fiandaca 2 simplify , $geometry 7 conversione etichettare punti da sessadecimali a sessagesimali Salvatore Fiandaca 2 floor, format_number , to_real, $x , $y 8 tematizzare Tematizzare utilizzando la sovrascrittura definita dai dati Salvatore Fiandaca 2 CASE , length 9 legenda Legenda con testo lungo, inserimento carattere speciale Salvatore Fiandaca 2 CASE , regexp_replace 10 selezione Seleziona usando le funzioni di aggregazione Salvatore Fiandaca 2 $area , minimum , = 11 core area Calcola la core area di un poligono Ludovico Frate 2 area, buffer 12 sposta etichette Sposta etichetta e genera segmento Salvatore Fiandaca 3 x, y, $geometry 13 conteggio valori Conteggio valori in un campo Salvatore Fiandaca 2 count 14 centroidi linee curve Centroide lungo le linee curve Salvatore Fiandaca 2 $geometry , $length , line_interpolate_point , geom_to_wkt 15 conta i punti nel poligono Conta i punti nel poligono Salvatore Fiandaca 2 aggregate 16 somma lunghezze nel poligono Somma le lunghezze delle linee dentro il poligono Salvatore Fiandaca 2 parent, aggregate , length, geometry, intersection, intersects , transform , $geometry 17 conta punti nel poligono per categorie Contare i punti nel poligono per categorie Martina Savarese 2 parent, aggregate , AND, geometry 18 nascondi etichette Nasconde etichette non desiderate Salvatore Fiandaca 2 parent, not, aggregate , intersects , point_on_surface, $geometry 19 calcolo area poligoni nel reticolo Calcolare l\u2019area delle porzioni di poligoni che ricadono dentro ad una cella di un reticolo Salvatore Fiandaca 2 parent, aggregate , geometry, intersection, intersects , $geometry 20 spatial join Trasferire un attributo usando le relazioni spaziali Salvatore Fiandaca 2 parent, aggregate , geometry, to_string, intersects , $geometry 21 unica label Unica label per pi\u00f9 poligoni Salvatore Fiandaca 2 x, y, make_point , centroid, collect, $geometry 22 elenco comuni Come ottenere l'elenco dei Comuni attraversati da un fiume Salvatore Fiandaca 2 aggregate , crosses, $geometry , geometry, parent 23 rotazione pattern lineare Come ruotare un pattern lineare in funzione della feature Salvatore Fiandaca 2 angle_at_vertex , shortest_line , centroid, oriented_bbox, boundary, $geometry 24 numerazione poligoni in base a relazione spaziale Numerazione poligoni in base a relazioni spaziali Salvatore Fiandaca 3 @element, array_agg , array_sort , string_to_array , array_get, array_find , array_reverse, $area , count, array_foreach , upper, to_int , $geometry 25 assegnare categoria prevalente Assegnare categoria prevalente Salvatore Fiandaca 2 array_majority , string_to_array , aggregate , intersects , $geometry , geometry, parent 26 creare Hub lines Creare Hub lines Salvatore Fiandaca 2 doppio pipe 27 aggrega con SR differenti Aggrega con SR differenti Salvatore Fiandaca 3 aggregate , count, intersects , transform , $geometry , geometry, parent 28 distanze progressive chilometriche Formatta le distanze progressive chilometriche tipo Autostrade Salvatore Fiandaca 2 CASE 29 aggregare elementi adiacenti Aggrega elementi adiacenti Salvatore Fiandaca 3 aggregate , count, to_string, touches, $geometry , geometry, parent 30 linea minima distanza tra due punti Traccia una linea di minima distanza usando il generatore di geometrie Salvatore Fiandaca 2 aggregate , shortest_line , $geometry 31 creare campo somma cumulativa Espressione per popolare campo con somma cumulativa Salvatore Fiandaca 2 if, $id, array_agg , eval, replace, array_to_string , array_slice , array_sum 32 aggiungere punto a linea Aggiunge un nodo di disegno ad una linea Salvatore Fiandaca 2 make_line, start_point , $geometry , end_point, geometry, get_feature_by_id 33 drilldown form multiple Creare Form con filtro dinamico drillDown (cascade) Salvatore Fiandaca 3 aggregate , eval, array 34 selezionare primi n valori Come selezionare i primi n poligoni pi\u00f9 grandi Salvatore Fiandaca 2 doppio-pipe, uguale, array_contains , array_slice , array_sort , array_agg , $area , $geometry 35 generalizzare isoipse Generalizzare le linee di contorno Valerio Pinna 3 CASE , $length , simplify, smooth, $geometry 36 campo coord in lat lon Generare due campi lon lat a partire da un unico campo Salvatore Fiandaca 2 regexp_match 37 calcolo incrementi giornalieri Calcola gli incrementi giornalieri di un attributo Salvatore Fiandaca 4 with_variable, if, array_find , array_agg 38 tracciare un grafico Come tracciare un grafico per ogni feature usando il generatore di geometrie Salvatore Fiandaca 4 with_variable, relation_ aggregate , array_to_string , array_get, array_foreach , generate_series, translate, make_line, make_point , centroid, end_point, round, $geometry 39 elenco ordinato di Comuni Come ottenere l'elenco ordinato dei Comuni attraversati da un itinerario Salvatore Fiandaca 3 with_variable, array_find , array_filter , array_agg , line_locate_point, line_interpolate_point , intersection, length, $geometry 40 etichettare con chiave-valore Etichettare facendo vedere sia il nome del campo che il corrispondente valore Salvatore Fiandaca 2 replace, map_to_hstore , attributes 41 etichettare itinerario con elenco ordinato Comuni Etichettare itinerario con elenco ordinato di Comuni attraversti Valerio Pinna 4 parent, aggregate , array_to_string , array_get, array_foreach , generate_series, num_geometries , collect_geometries, intersection, start_point , concat, $geometry 42 etichette formattate diversi stili Etichette formattate con diversi stili Valerio Pinna 2 with_variable, array, string_to_array , replace 43 selezionare vertici duplicati Selezionare vertici duplicati Salvatore Fiandaca 3 if, $id, get_feature_by_id, array_agg , array_sort , string_to_array , array_last, array_find , array_reverse, geom_to_wkt , count, array_length , $geometry 44 conteggio caratteri diversi Conta i caratteri diversi in un testo Salvatore Fiandaca 2 array_length , array_distinct , string_to_array , substr, regexp_replace 45 distanza minima tra due vettori Lunghezza della linea di minima distanza tra due vettori Salvatore Fiandaca 2 aggregate , shortest_line , overlay_nearest , $geometry 46 lunghezze segmenti di un poligono Lunghezze dei segmenti di un poligono Salvatore Fiandaca 3 segments_to_lines , num_geometries , length, round, geometry_n, segments_to_lines , array_to_string , generate_series, array_foreach , $geometry 47 fill-down con QGIS riempire le celle sottostanti con il primo valore non nullo Salvatore Fiandaca 3 @layer, if, attribute, $id, get_feature_by_id 48 finestra temporale Fissata una data, calcolare la somma di un attributo relativo ai 6 giorni precedenti Salvatore Fiandaca 4 with_variable, array_find , array_filter , array_agg , array_length , array_sum , array_slice 49 rotazione simbolo parallelo ad una linea Lunghezze dei segmenti di un poligono Salvatore Fiandaca 3 with_variable, overlay_nearest , line_interpolate_angle, closest_point, $geometry 50 livello acqua Effetto riempimento recipiente d'acqua Salvatore Fiandaca 4 difference, make_rectangle_3points, point_n, bounds, make_point , x, y, bounds_height, intersection, area, second, now, area, format_number , $geometry 51 layer vicino Come determinare il layer pi\u00f9 vicino ad un altro Salvatore Fiandaca 4 with_variable, array_get, array_foreach , array_find , array_min , overlay_nearest , distance, array, shortest_line , $geometry 52 eliminare testo tra parentesi Eliminare il testo tra parentesi tonde Salvatore Fiandaca 3 regexp_replace 53 segmento minimo facciata-strada Determinare il segmento minimo tra centroide facciata edifici e strada pi\u00f9 vicina Salvatore Fiandaca 4 with_variable, generate_series, array_foreach , array_find , num_geometries , collect_geometries, geometry_n, segments_to_lines , overlay_nearest , distance, centroid, shortest_line , $geometry 54 selezionare punti pi\u00f9 vicini Selezionare 'n' punti pi\u00f9 vicini a partire da un punto selezionato Salvatore Fiandaca 4 with_variable, array_find , array_agg , array_foreach , aggregate , geom_to_wkt , make_circle, distance, overlay_nearest , intersects , is_selected, $geometry 55 Nome del campo con massimo valore Determina il nome del campo che contiene il valore massimo su un record Salvatore Fiandaca 4 with_variable, hstore_to_map , array_max , array_find , attributes, map_delete, map_avals , map_akeys 56 Ricerca caratteri speciali Ricerca e selezione di record con campi che contengono caratteri speciali Salvatore Fiandaca 3 regexp_substr, <> 57 confrontare campi tabella Ricercare valori uguali in due campi diversi Salvatore Fiandaca 3 array_to_string , array_majority , array_cat , string_to_array 58 estrarre campo da un hstore Aggiungere un campo a partire da un altro campo in formato hstore (tipico di OSM) Salvatore Fiandaca 3 hstore_to_map , map_get, to_int 59 geometrie vicine ma con condizione tracciare un segmento tra punti vicini che soddisfano la condizione id1 <> id2 Salvatore Fiandaca 4 overlay_nearest , array_filter , attribute, make_line, collect_geometries, $geometry , geometry 60 atlante con righe tabella in verticale riga tabella attributi in verticale nel layout di stampa di un atlante Salvatore Fiandaca 3 replace, map_to_hstore , attributes 61 decimali coordinate come apici decimali coordinate messe come apici Salvatore Fiandaca 3 with_variable, regexp_replace, left, array, $x , $y , replace 62 media e stdev tra campi calcola la media e la deviazione standard campionaria lungo lo stesso record Salvatore Fiandaca 3 with_variable, array_foreach , array_mean, attributes, map_delete, map_avals , map_akeys 63 classificazione specie classificare delle specie, fare delle somme in funzione delle specie Salvatore Fiandaca 3 array_sum , array_foreach , get_feature, attribute, map_get, map, string_to_array , to_real 64 prelevare attributi da layer pi\u00f9 vicini Prelevare attributi da diversi layer con criterio di vicinanza Salvatore Fiandaca 4 with_variable, array_get, array_foreach , array_find , array_min , overlay_nearest , distance, array, shortest_line , $geometry , start_point , end_point 65 aggrega valori di una tabella Aggregare i valori di una tabella e creare un nuovo layer Salvatore Fiandaca 3 array_agg , array_to_string 66 etichettare usando gli apici Etichettare usando gli apici, km\u00b2 o m\u00b3 Salvatore Fiandaca 1 char 67 ID univoco per gruppi consecutivi ID univoco per gruppi consecutivi Salvatore Fiandaca 4 with_variable, array_find , array_distinct , array_agg , aggregate 68 eliminare righe duplicate con condizione Eliminare righe duplicate con condizioni su pi\u00f9 attributi Salvatore Fiandaca 3 minimum , array_agg , array_find , with_variable 69 selezione ultimo record per data Selezionare l'ultimo record usando un campo in formato data Salvatore Fiandaca 3 maximun , array_agg , array_max 70 trova valore Trova valore in tutta la tabella attributi Salvatore Fiandaca 3 array_find , map_avals , attributes 71 Array Natural sorting Ordinare numericamente una lista alfanumerica Salvatore Fiandaca 4 with_variable, array_sort , array_foreach , array_to_string , string_to_array , generate_series,regexp_substr, regexp_replace, lpad 72 Conta punti nel poligono e per data Conta punti nel poligono e per data Salvatore Fiandaca 4 parent, with_variable, aggregate , array_to_string , array_count , array_foreach , array_distinct , $geometry , intersects 73 Lavorare con le ore Convertire nel corretto formato Ora Salvatore Fiandaca 2 to_time regexp_replace 74 Spostare i punti dentro i poligoni in base agli attributi Spostare i punti dentro i poligoni in base agli attributi Salvatore Fiandaca 4 with_variable , get_feature , closest_point , bounds_height , centroid , attribute , $currentfeature 75 Seleziona primo record per ogni duplicato Seleziona primo record per ogni duplicato Salvatore Fiandaca 3 @with_variable , array_agg , if , count 76 Cronometro Creare un cronometro nella Map Canvas Salvatore Fiandaca 3 with_variable , age , now() , make_datetime , lpad , floor , to_int , minute , hour 77 Selezionare record orfani in una relazione padre-figlio Selezionare record orfani in una relazione padre-figlio Salvatore Fiandaca 3 @parent , NOT , aggregate , count 78 Tema con unico contorno per poligoni adiacenti Crea unico contorno per poligoni adiancenti Salvatore Fiandaca 3 collect , buffer , difference , $geometry , intersection 79 Prende attributo da un layer sovrapposto Come prendere attributi da layer sovrapposti Salvatore Fiandaca 3 array_to_string , overlay_intersects 80 seleziona poligoni con max area sovrapposta Come prendere attributi da layer sovrapposti Salvatore Fiandaca 3 maximum , intersection , area , overlay_intersects , $geometry 81 tracciare punti a distanza prefissata lungo una linea Come tracciare puntia distanza prefissata lungo una linea Salvatore Fiandaca 3 overlay_nearest , collect_geometries , line_interpolate_point , \\$geometry , array_foreach , array","title":"Elenco esempi"},{"location":"esempi/lista_esempi/#tags","text":"Elenco tag per la ricerca","title":"Tags"},{"location":"esempi/lista_esempi/#partecipa","text":"Se hai un esempio svolto e vuoi condividerlo puoi farlo, vedi sezione Lavora con Noi : per maggiori info scrivi all'autore","title":"Partecipa"},{"location":"esempi/lista_esempi/#licenza","text":"In questa sezione Esempi svolti e tutti gli esercizi svolti, la licenza \u00e8 CC-BY-NC-SA 4.0","title":"Licenza"},{"location":"esempi/livello_acqua/","tags":["vestizione","x","y","punti","area"],"text":"Effetto riempimento recipiente d'acqua \u21b5 In questo breve tutorial vedremo come realizzare una tematizzazione, tramite espressioni geometriche, che simuli il riempimento di un recipente di acqua, e lo applicheremo ai nostri poligoni. espressione utilizzata nel generatore di geometrie: difference( $geometry, -- bounding Box make_rectangle_3points( point_n(bounds($geometry),4), point_n(bounds($geometry),3), -- punto altezza rettangolo make_point(x(point_n(bounds($geometry),1)), (y(point_n(bounds($geometry),1))) + bounds_height($geometry)*(second(now()))/60),1)) espressione utilizzate per le etichette: format_number(( -- area intersezione area(intersection( $geometry, -- bounding Box make_rectangle_3points( point_n(bounds($geometry),2), point_n(bounds($geometry),1), -- punto altezza rettangolo make_point(x(point_n(bounds($geometry),1)), (y(point_n(bounds($geometry),1))) + bounds_height($geometry)*(second(now()))/60),1))) -- area feature corrente /area($geometry))*100,1)||' %' NB: per ottenere l'effetto dinamico occorre attivare, da propriet\u00e0 layer | Visualizzazione, Aggiorna layer a intervalli . qui video demo: https://youtu.be/uUEGSdWraPY Funzioni e variabili utilizzate: difference make_rectangle_3points point_n bounds make_point x y bounds_height intersection area second now format_number $geometry","title":"Livello acqua"},{"location":"esempi/livello_acqua/#effetto-riempimento-recipiente-dacqua","text":"In questo breve tutorial vedremo come realizzare una tematizzazione, tramite espressioni geometriche, che simuli il riempimento di un recipente di acqua, e lo applicheremo ai nostri poligoni. espressione utilizzata nel generatore di geometrie: difference( $geometry, -- bounding Box make_rectangle_3points( point_n(bounds($geometry),4), point_n(bounds($geometry),3), -- punto altezza rettangolo make_point(x(point_n(bounds($geometry),1)), (y(point_n(bounds($geometry),1))) + bounds_height($geometry)*(second(now()))/60),1)) espressione utilizzate per le etichette: format_number(( -- area intersezione area(intersection( $geometry, -- bounding Box make_rectangle_3points( point_n(bounds($geometry),2), point_n(bounds($geometry),1), -- punto altezza rettangolo make_point(x(point_n(bounds($geometry),1)), (y(point_n(bounds($geometry),1))) + bounds_height($geometry)*(second(now()))/60),1))) -- area feature corrente /area($geometry))*100,1)||' %' NB: per ottenere l'effetto dinamico occorre attivare, da propriet\u00e0 layer | Visualizzazione, Aggiorna layer a intervalli . qui video demo: https://youtu.be/uUEGSdWraPY Funzioni e variabili utilizzate: difference make_rectangle_3points point_n bounds make_point x y bounds_height intersection area second now format_number $geometry","title":"Effetto riempimento recipiente d'acqua"},{"location":"esempi/lunghezze_segmenti_poligono/","tags":["linee","array"],"text":"Lunghezze dei lati di un poligono \u21b5 Dato un layer poligonale, come ottenere una lista di valori delle lunghezze dei lati del poligono. Creare un campo testuale (nello screenshot \u00e8 test ) sufficientemente lungo e popolarlo con la seguente espressione: Espressione: array_to_string( array_foreach( array_foreach( generate_series(1, num_geometries( segments_to_lines($geometry))), geometry_n(segments_to_lines($geometry),@element)), round(length(@element),2)) ) Nel linguaggio umano significa: crea,per ogni poligono, un array e popolalo con la geometria dei singoli lati del poligono, infine calcola la loro lunghezza e mettili in una lista. Osservazioni: l'epsressione \u00e8 generica, si puo' usare con qualsiasi poligono; per poligoni con molti lati, i calcoli richiesti sono lunghi. Geometrie: Generare, per ogni poligono, un array con le geometrie dei lati del poligono: array_foreach( generate_series(1, num_geometries( segments_to_lines($geometry))), geometry_n(segments_to_lines($geometry),@element) ) questa espressione ci permette di fare una serie di interrogazioni come: qual \u00e8 il lato pi\u00f9 lungo e quanto vale la lunghezza; applicare tutte le funzioni geometriche relative alla geometria del lato, esempio: azimuth di un lato; centroide di un lato; coordinate di un vertice del lato n; ecc... IL tema (la quotatura) \u00e8 scaricabile da qui: https://plugins.qgis.org/styles/5/ Funzioni e variabili utilizzate: segments_to_lines num_geometries length round geometry_n segments_to_lines array_to_string generate_series array_foreach \\$geometry","title":"Lunghezze segmenti di un poligono"},{"location":"esempi/lunghezze_segmenti_poligono/#lunghezze-dei-lati-di-un-poligono","text":"Dato un layer poligonale, come ottenere una lista di valori delle lunghezze dei lati del poligono. Creare un campo testuale (nello screenshot \u00e8 test ) sufficientemente lungo e popolarlo con la seguente espressione: Espressione: array_to_string( array_foreach( array_foreach( generate_series(1, num_geometries( segments_to_lines($geometry))), geometry_n(segments_to_lines($geometry),@element)), round(length(@element),2)) ) Nel linguaggio umano significa: crea,per ogni poligono, un array e popolalo con la geometria dei singoli lati del poligono, infine calcola la loro lunghezza e mettili in una lista. Osservazioni: l'epsressione \u00e8 generica, si puo' usare con qualsiasi poligono; per poligoni con molti lati, i calcoli richiesti sono lunghi. Geometrie: Generare, per ogni poligono, un array con le geometrie dei lati del poligono: array_foreach( generate_series(1, num_geometries( segments_to_lines($geometry))), geometry_n(segments_to_lines($geometry),@element) ) questa espressione ci permette di fare una serie di interrogazioni come: qual \u00e8 il lato pi\u00f9 lungo e quanto vale la lunghezza; applicare tutte le funzioni geometriche relative alla geometria del lato, esempio: azimuth di un lato; centroide di un lato; coordinate di un vertice del lato n; ecc... IL tema (la quotatura) \u00e8 scaricabile da qui: https://plugins.qgis.org/styles/5/ Funzioni e variabili utilizzate: segments_to_lines num_geometries length round geometry_n segments_to_lines array_to_string generate_series array_foreach \\$geometry","title":"Lunghezze dei lati di un poligono"},{"location":"esempi/maxValoreCampoNome/","tags":["campi","attributi","chiave-valore","array"],"text":"Nome del campo con massimo valore \u21b5 Le funzioni di aggregazione di QGIS agiscono su un campo, ma se volessimo determinare il nome del campo che contenesse il valore massimo per ogni record, come faremmo? La funzione che permette di creare una mappa per ogni record \u00e8 attributes() e tramite questa risolveremo il seguente problema. Abbiamo uno shapefile dei comuni siciliani e la tabella degli attributi presenta, per ogni anno (dal 2012 al 2020), il valore della popolazione residente, sotto la tabella: determinare, per ogni comune, quale \u00e8 l'anno (quindi, il nome del campo) in cui la popolazione \u00e8 massima e scriverlo in un campo nuovo (annoMax). La tabella attributi ha 11 campi, ma la ricerca della popolazione massima va fatta solo negli ultimi 9 campi. Nel caso non dovessimo evitare alcuni campi, l'espressione da utilizzare \u00e8: with_variable ('sel', map_avals (attributes ()), map_akeys (attributes ())[array_find (@sel, array_max (@sel))] ) ma nell'esempio occorre evitare la ricerca del massimo nei campi PRO_COM e COMUNE , occorre, quindi, utilizzare la seguente espressione:\u00f9 with_variable('deleteField', map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'), with_variable('sel', map_avals( @deleteField), map_akeys( @deleteField)[array_find(@sel,array_max(@sel))]) ) oppure questa: with_variable ('sel', array_filter( map_avals (attributes ()), @element not in (\"PRO_COM\",\"COMUNE\")), map_akeys (attributes ())[array_find (@sel, array_max (@sel))]) Se volessimo aggiungere anche il campo con il valore massimo, basterebbe creare una mappa con chiave il campo (che contiene il valore massimo) e come valore, il valore massimo; per far questa mappa occorre utilizzare la seguente espressione: hstore_to_map( with_variable('deleteField', map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'), with_variable('sel', map_avals( @deleteField), map_akeys( @deleteField)[array_find(@sel,array_max(@sel))] ||'=>'|| map_get(@deleteField, map_akeys( @deleteField)[array_find(@sel,array_max(@sel))]) )) ) dalla mappa posso estrarre la chiave e il valore in due campi diversi: estraggo dalla mappa la chiave: map_akeys( -- estraggo la chiave, ovvero anno hstore_to_map( with_variable('deleteField', map_delete(map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'),'max_valore'), with_variable('sel', map_avals( @deleteField), map_akeys( @deleteField)[array_find(@sel,array_max(@sel))] ||'=>'|| map_get(@deleteField, map_akeys( @deleteField)[array_find(@sel,array_max(@sel))]) )) ) )[0] estraggo dalla mappa il valore: map_avals( -- estraggo il valore hstore_to_map( with_variable('deleteField', map_delete(map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'),'maxCampo2'), with_variable('sel', map_avals( @deleteField), map_akeys( @deleteField)[array_find(@sel,array_max(@sel))] ||'=>'|| map_get(@deleteField, map_akeys( @deleteField)[array_find(@sel,array_max(@sel))]) )) ) )[0] Idea presa da qui: link: https://gis.stackexchange.com/questions/411369/returning-column-name-of-the-max-value provaci tu, qui il geopackage \u21b5 scarica funzione Custom \u21b5 La funzione personalizzata scritta in Python fa la stessa cosa: MinMaxValueFieldName Funzioni e variabili utilizzate: @with_variable hstore_to_map array_max array_filter array_find attributes map_delete map_avals map_akeys","title":"Nome del campo con massimo valore"},{"location":"esempi/maxValoreCampoNome/#nome-del-campo-con-massimo-valore","text":"Le funzioni di aggregazione di QGIS agiscono su un campo, ma se volessimo determinare il nome del campo che contenesse il valore massimo per ogni record, come faremmo? La funzione che permette di creare una mappa per ogni record \u00e8 attributes() e tramite questa risolveremo il seguente problema. Abbiamo uno shapefile dei comuni siciliani e la tabella degli attributi presenta, per ogni anno (dal 2012 al 2020), il valore della popolazione residente, sotto la tabella: determinare, per ogni comune, quale \u00e8 l'anno (quindi, il nome del campo) in cui la popolazione \u00e8 massima e scriverlo in un campo nuovo (annoMax). La tabella attributi ha 11 campi, ma la ricerca della popolazione massima va fatta solo negli ultimi 9 campi. Nel caso non dovessimo evitare alcuni campi, l'espressione da utilizzare \u00e8: with_variable ('sel', map_avals (attributes ()), map_akeys (attributes ())[array_find (@sel, array_max (@sel))] ) ma nell'esempio occorre evitare la ricerca del massimo nei campi PRO_COM e COMUNE , occorre, quindi, utilizzare la seguente espressione:\u00f9 with_variable('deleteField', map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'), with_variable('sel', map_avals( @deleteField), map_akeys( @deleteField)[array_find(@sel,array_max(@sel))]) ) oppure questa: with_variable ('sel', array_filter( map_avals (attributes ()), @element not in (\"PRO_COM\",\"COMUNE\")), map_akeys (attributes ())[array_find (@sel, array_max (@sel))]) Se volessimo aggiungere anche il campo con il valore massimo, basterebbe creare una mappa con chiave il campo (che contiene il valore massimo) e come valore, il valore massimo; per far questa mappa occorre utilizzare la seguente espressione: hstore_to_map( with_variable('deleteField', map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'), with_variable('sel', map_avals( @deleteField), map_akeys( @deleteField)[array_find(@sel,array_max(@sel))] ||'=>'|| map_get(@deleteField, map_akeys( @deleteField)[array_find(@sel,array_max(@sel))]) )) ) dalla mappa posso estrarre la chiave e il valore in due campi diversi: estraggo dalla mappa la chiave: map_akeys( -- estraggo la chiave, ovvero anno hstore_to_map( with_variable('deleteField', map_delete(map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'),'max_valore'), with_variable('sel', map_avals( @deleteField), map_akeys( @deleteField)[array_find(@sel,array_max(@sel))] ||'=>'|| map_get(@deleteField, map_akeys( @deleteField)[array_find(@sel,array_max(@sel))]) )) ) )[0] estraggo dalla mappa il valore: map_avals( -- estraggo il valore hstore_to_map( with_variable('deleteField', map_delete(map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'),'maxCampo2'), with_variable('sel', map_avals( @deleteField), map_akeys( @deleteField)[array_find(@sel,array_max(@sel))] ||'=>'|| map_get(@deleteField, map_akeys( @deleteField)[array_find(@sel,array_max(@sel))]) )) ) )[0] Idea presa da qui: link: https://gis.stackexchange.com/questions/411369/returning-column-name-of-the-max-value","title":"Nome del campo con massimo valore"},{"location":"esempi/maxValoreCampoNome/#provaci-tu-qui-il-geopackage","text":"scarica","title":"provaci tu, qui il geopackage"},{"location":"esempi/maxValoreCampoNome/#funzione-custom","text":"La funzione personalizzata scritta in Python fa la stessa cosa: MinMaxValueFieldName Funzioni e variabili utilizzate: @with_variable hstore_to_map array_max array_filter array_find attributes map_delete map_avals map_akeys","title":"funzione Custom"},{"location":"esempi/media_stdev_tra_campi/","tags":["campi","attributi","chiave-valore","array"],"text":"Media e deviazione standard tra campi \u21b5 Le funzioni di aggregazione di QGIS agiscono su un campo, ma se volessimo determinare la media e la stdev dei valori di ogni record, come faremmo? La funzione che permette di creare una mappa per ogni record \u00e8 attributes() e tramite questa risolveremo il problema. Abbiamo uno shapefile dei comuni siciliani e la tabella degli attributi presenta, per ogni anno (dal 2012 al 2020), il valore della popolazione residente, sotto la tabella: determinare, per ogni comune, la media e la stdev (deviazione standard campionaria) La tabella attributi ha 11 campi, ma i valori della popolazione \u00e8 negli ultimi 9 campi. Nell'esempio occorre evitare i campi \"fid\" , PRO_COM e COMUNE , occorre, quindi, utilizzare la seguente espressione: media: with_variable('deleteField', map_delete(map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'),'fid'), -- media array_mean(map_avals((@deleteField)) )) deviazione standard: (occorre evitare anche il campo media ) with_variable('deleteField', map_delete(map_delete(map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'),'fid'),'media'), -- stdev campionaria with_variable('riga',map_avals(@deleteField), sqrt( array_sum( array_foreach( @riga, (@element-array_mean(@riga))^2)) / (array_length(@riga)-1)) ) ) provaci tu, qui il geopackage \u21b5 scarica Funzioni e variabili utilizzate: @with_variable array_foreach array_mean attributes map_delete map_avals map_akeys","title":"Media e stdev tra campi"},{"location":"esempi/media_stdev_tra_campi/#media-e-deviazione-standard-tra-campi","text":"Le funzioni di aggregazione di QGIS agiscono su un campo, ma se volessimo determinare la media e la stdev dei valori di ogni record, come faremmo? La funzione che permette di creare una mappa per ogni record \u00e8 attributes() e tramite questa risolveremo il problema. Abbiamo uno shapefile dei comuni siciliani e la tabella degli attributi presenta, per ogni anno (dal 2012 al 2020), il valore della popolazione residente, sotto la tabella: determinare, per ogni comune, la media e la stdev (deviazione standard campionaria) La tabella attributi ha 11 campi, ma i valori della popolazione \u00e8 negli ultimi 9 campi. Nell'esempio occorre evitare i campi \"fid\" , PRO_COM e COMUNE , occorre, quindi, utilizzare la seguente espressione: media: with_variable('deleteField', map_delete(map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'),'fid'), -- media array_mean(map_avals((@deleteField)) )) deviazione standard: (occorre evitare anche il campo media ) with_variable('deleteField', map_delete(map_delete(map_delete(map_delete( attributes(),'PRO_COM'),'COMUNE'),'fid'),'media'), -- stdev campionaria with_variable('riga',map_avals(@deleteField), sqrt( array_sum( array_foreach( @riga, (@element-array_mean(@riga))^2)) / (array_length(@riga)-1)) ) )","title":"Media e deviazione standard tra campi"},{"location":"esempi/media_stdev_tra_campi/#provaci-tu-qui-il-geopackage","text":"scarica Funzioni e variabili utilizzate: @with_variable array_foreach array_mean attributes map_delete map_avals map_akeys","title":"provaci tu, qui il geopackage"},{"location":"esempi/nascondi_etichette/","tags":["etichette","attributi","aggregare"],"text":"Nascondi etichette \u21b5 Appena attiviamo le etichette queste sono sempre al top e sempre visibili, vediamo in questo esempio come nascondere alcune etichette utilizzando le opzioni di visualizzazione delle etichette e le funzioni di aggregazione. Carico due layer poligonali: circoscrizioni e quartieri di Palermo Etichetto il layer quartieri: Le etichette sono visibili e in certi casi sono anche fastidiose; applico un filtro al layer circoscrizioni, in modo tale da visualizzare solo alcune circoscrizioni: \"CIR_ID\" > 5 risultato: Ora nascender\u00f2 le etichette, del layer quartieri, che sono sotto le circorscrizioni: espressione usata: not aggregate('circoscrizioni', 'count', 'PK_UID', intersects ($geometry, point_on_surface( geometry(@parent)))) il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: @parent not aggregate intersects point_on_surface \\$geometry","title":"Nascondi etichette"},{"location":"esempi/nascondi_etichette/#nascondi-etichette","text":"Appena attiviamo le etichette queste sono sempre al top e sempre visibili, vediamo in questo esempio come nascondere alcune etichette utilizzando le opzioni di visualizzazione delle etichette e le funzioni di aggregazione. Carico due layer poligonali: circoscrizioni e quartieri di Palermo Etichetto il layer quartieri: Le etichette sono visibili e in certi casi sono anche fastidiose; applico un filtro al layer circoscrizioni, in modo tale da visualizzare solo alcune circoscrizioni: \"CIR_ID\" > 5 risultato: Ora nascender\u00f2 le etichette, del layer quartieri, che sono sotto le circorscrizioni: espressione usata: not aggregate('circoscrizioni', 'count', 'PK_UID', intersects ($geometry, point_on_surface( geometry(@parent)))) il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: @parent not aggregate intersects point_on_surface \\$geometry","title":"Nascondi etichette"},{"location":"esempi/numerazione_poligoni_rel_spaziale/","tags":["relazioni","poligoni","area","array","spatial-join"],"text":"Numerazione dei poligoni in base alla relazione spaziale \u21b5 Etichettare le regioni italiane ISTAT in funzione della superficie, per esempio: la regione pi\u00f9 estesa deve avere come etichetta 1 e poi via via aumentare al decrescere dell' area. espressione da usare: array_find( array_reverse( array_sort(array_agg($Area)) ), $Area)+1 L'espressione significa: Crea un array (un vettore) e mettici dentro tutti i valori delle aree delle regioni, ordinali in senso crescente (dal pi\u00f9 piccolo al pi\u00f9 grande) e poi fai l'inverso, cio\u00e8, ordinali dal pi\u00f9 grande al pi\u00f9 piccolo; infine assegna l'indice della posizione del valore dell'area. PS : +1 serve solo a far iniziare il conteggio da 1 in quanto gli array iniziano da zero. Altro esempio: Etichettare in funzione della longitudine, cio\u00e8 mettere la label 1 nella regione pi\u00f9 a Ovest e cosi via per le altre: espressione da usare: array_find( array_sort(array_agg(x_min( $geometry))) ,x_min( $geometry))+1 Altro esempio: Etichettare, per ogni regione, le province in ordine alfabetico: espressione da usare: \"sigla\" || '-' || (array_find( array_sort( array_agg(expression:=\"sigla\" , group_by:=\"cod_reg\" )), \"sigla\" )+1) Altro esempio: Creata una griglia regolare formata da circa 4000 poligoni. Nominare tutti i poligoni partendo da destra verso sinistra e dall'alto verso il basso con lettere e numeri in sequenza. Quindi la prima maglia della griglia sar\u00e0 A1, A2, A3 ecc, la seconda B1 B2 B3 e cos\u00ec via. espressione da usare: array_get( with_variable( 'cucu', string_to_array('a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'), array_cat( array_foreach( @cucu ,upper(@element)), -- alfabeto a,b,c... array_foreach( @cucu ,upper(@element || @element)))), -- alfabeto raddoppiato aa,bb,cc... to_int((array_find( array_reverse( array_sort( array_agg( y_min($geometry)))), y_min($geometry)))/ count( expression:=y_min($geometry),group_by:=y_min($geometry)))) || -- aggiunge il numero finale AA1, ZZ10 (to_int((array_find( array_reverse( array_sort( array_agg( x_min($geometry)))), x_min($geometry)))/ count( expression:=y_min($geometry),group_by:=x_min($geometry)))+1 ) PS. L'espressione di sopra copre solo i casi a,b,c,....aa,bb,cc... per aggiungere anche aaa,bbb,ccc.... occorre aggiungere la stringa: array_foreach( @cucu ,upper(@element || @element|| @element)) ovvero tre volte la variabile @element . Prova tu \u21b5 Geopackage \u21b5 Funzioni e variabili utilizzate: @element array_agg array_sort string_to_array array_get array_find array_reverse \\$Area count array_foreach upper to_int \\$geometry","title":"Numerazione poligoni in base a relazione spaziale"},{"location":"esempi/numerazione_poligoni_rel_spaziale/#numerazione-dei-poligoni-in-base-alla-relazione-spaziale","text":"Etichettare le regioni italiane ISTAT in funzione della superficie, per esempio: la regione pi\u00f9 estesa deve avere come etichetta 1 e poi via via aumentare al decrescere dell' area. espressione da usare: array_find( array_reverse( array_sort(array_agg($Area)) ), $Area)+1 L'espressione significa: Crea un array (un vettore) e mettici dentro tutti i valori delle aree delle regioni, ordinali in senso crescente (dal pi\u00f9 piccolo al pi\u00f9 grande) e poi fai l'inverso, cio\u00e8, ordinali dal pi\u00f9 grande al pi\u00f9 piccolo; infine assegna l'indice della posizione del valore dell'area. PS : +1 serve solo a far iniziare il conteggio da 1 in quanto gli array iniziano da zero. Altro esempio: Etichettare in funzione della longitudine, cio\u00e8 mettere la label 1 nella regione pi\u00f9 a Ovest e cosi via per le altre: espressione da usare: array_find( array_sort(array_agg(x_min( $geometry))) ,x_min( $geometry))+1 Altro esempio: Etichettare, per ogni regione, le province in ordine alfabetico: espressione da usare: \"sigla\" || '-' || (array_find( array_sort( array_agg(expression:=\"sigla\" , group_by:=\"cod_reg\" )), \"sigla\" )+1) Altro esempio: Creata una griglia regolare formata da circa 4000 poligoni. Nominare tutti i poligoni partendo da destra verso sinistra e dall'alto verso il basso con lettere e numeri in sequenza. Quindi la prima maglia della griglia sar\u00e0 A1, A2, A3 ecc, la seconda B1 B2 B3 e cos\u00ec via. espressione da usare: array_get( with_variable( 'cucu', string_to_array('a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'), array_cat( array_foreach( @cucu ,upper(@element)), -- alfabeto a,b,c... array_foreach( @cucu ,upper(@element || @element)))), -- alfabeto raddoppiato aa,bb,cc... to_int((array_find( array_reverse( array_sort( array_agg( y_min($geometry)))), y_min($geometry)))/ count( expression:=y_min($geometry),group_by:=y_min($geometry)))) || -- aggiunge il numero finale AA1, ZZ10 (to_int((array_find( array_reverse( array_sort( array_agg( x_min($geometry)))), x_min($geometry)))/ count( expression:=y_min($geometry),group_by:=x_min($geometry)))+1 ) PS. L'espressione di sopra copre solo i casi a,b,c,....aa,bb,cc... per aggiungere anche aaa,bbb,ccc.... occorre aggiungere la stringa: array_foreach( @cucu ,upper(@element || @element|| @element)) ovvero tre volte la variabile @element .","title":"Numerazione dei poligoni in base alla relazione spaziale"},{"location":"esempi/numerazione_poligoni_rel_spaziale/#prova-tu","text":"","title":"Prova tu"},{"location":"esempi/numerazione_poligoni_rel_spaziale/#geopackage","text":"Funzioni e variabili utilizzate: @element array_agg array_sort string_to_array array_get array_find array_reverse \\$Area count array_foreach upper to_int \\$geometry","title":"Geopackage"},{"location":"esempi/prendi_attributo_da_elemento_sovrapposto/","tags":["prossimit\u00e0","sovrapposizione","poligoni","array","overlay"],"text":"Prendere un attributo da un altro layer sovrapposto \u21b5 Supponiamo di avere un layer di punti e che alcuni di essi sono sovrapposti ad un altro layer poligonale: come prendere un attributo del layer poligonale e aggiungerlo nel layer di punti. overlay_intersects('nomeLayerPoligonale',\"nomeAttributoLayer Poligonale\")[0] NB: le funzioni overlay_* restituiscono quasi sempre un array , quindi, per prendere il primo valore occorre usare la notazione Python [0] nel caso ci fossere pi\u00f9 punti che si intersecassero coi poligoni, utilizzare questa espressione: array_to_string( overlay_intersects('nomeLayerPoligonale',\"nomeAttributoLayer Poligonale\") ) che aggiunger\u00e0 la lista dei punti sovrapposti. OSSERVAZIONE : il ragionamento espresso sopra \u00e8 valido per tutte le funzioni overlay_* , dove * \u00e8 un predicato geometrico ( contains, crosses, disjoint, equals, intersects, nearest, touches e within ); quindi se volessimo prendere un attributo da punti pi\u00f9 vicini, basterebbe utilizzare le stesse espressioni di sopra, ma utilizzando l'espressione overlay_nearest . Esempio aggiunto per gentile richiesta di Giulio Fattori (grazie) dati e progetto \u21b5 scarica Geopackage Funzioni e variabili utilizzate: array_to_string overlay_intersects","title":"Prende attributo da layer sovrapposto"},{"location":"esempi/prendi_attributo_da_elemento_sovrapposto/#prendere-un-attributo-da-un-altro-layer-sovrapposto","text":"Supponiamo di avere un layer di punti e che alcuni di essi sono sovrapposti ad un altro layer poligonale: come prendere un attributo del layer poligonale e aggiungerlo nel layer di punti. overlay_intersects('nomeLayerPoligonale',\"nomeAttributoLayer Poligonale\")[0] NB: le funzioni overlay_* restituiscono quasi sempre un array , quindi, per prendere il primo valore occorre usare la notazione Python [0] nel caso ci fossere pi\u00f9 punti che si intersecassero coi poligoni, utilizzare questa espressione: array_to_string( overlay_intersects('nomeLayerPoligonale',\"nomeAttributoLayer Poligonale\") ) che aggiunger\u00e0 la lista dei punti sovrapposti. OSSERVAZIONE : il ragionamento espresso sopra \u00e8 valido per tutte le funzioni overlay_* , dove * \u00e8 un predicato geometrico ( contains, crosses, disjoint, equals, intersects, nearest, touches e within ); quindi se volessimo prendere un attributo da punti pi\u00f9 vicini, basterebbe utilizzare le stesse espressioni di sopra, ma utilizzando l'espressione overlay_nearest . Esempio aggiunto per gentile richiesta di Giulio Fattori (grazie)","title":"Prendere un attributo da un altro layer sovrapposto"},{"location":"esempi/prendi_attributo_da_elemento_sovrapposto/#dati-e-progetto","text":"scarica Geopackage Funzioni e variabili utilizzate: array_to_string overlay_intersects","title":"dati e progetto"},{"location":"esempi/punti_in_poligoni_categorie/","tags":["contare","punti","poligoni","condizioni","classificare"],"text":"Contare i punti nel poligono per categorie \u21b5 Contare solo alcuni degli elementi di un vettore puntuale che ricadono all'interno delle geometrie di un vettore poligonale, e \u2018appendere\u2019 i valori nella tabella attributi del layer poligonale. Possiamo utilizzare l'operatore AND per filtrare il conteggio dei punti del poligono in modo da includere in tale conteggio solo quei punti che hanno determinate caratteristiche. Utilizzare il calcolatore di campi: creiamo un nuovo campo virtuale (Tipo: integer) nel layer poligonale; popolarlo utilizzando un'espressione tipo: aggregate(layer:='punti', aggregate:='count', expression:=\"nome_campo\", filter:=(\"nome_campo\"='valore_campo' AND intersects( $geometry, geometry(@parent)))) Per fare un esempio concreto usiamo i dataset utilizzati nel manuale utente di QGIS scaricabili da qui caricando il vettore poligonale 'regions' e quello puntuale 'airports'. Poniamo ad esempio di voler conteggiare il numero di aeroporti sd uso civile ricadenti in ciascuna regione: possiamo utilizzare la funzione aggregate e imporre che siano soddisfatte due condizioni nell\u2019argomento del filtro tramite l\u2019operatore AND . risultato: Partendo da qui possiamo costruire un\u2019espressione pi\u00f9 complessa che ci restituisca il numero di aeroporti, per ciascun uso, presenti in ciascuna regione. risultato: Last but not least\u2026 Implicazioni dell\u2019uso della funzione aggregate con la variabile @parent per contare i punti nel poligono Ho usato questi dataset poich\u00e9 utilizzati anche nella documentazione per spiegare le relazioni 1:N. Solo che in questo caso non c\u2019\u00e8 stato neppure bisogno di impostare una relazione di progetto tra i vettori \u201cregions\u201d (1) e \u201cairports\u201d (N)! Realizzato da Martina Savarese Funzioni e variabili utilizzate: @parent aggregate AND geometry","title":"Conta punti nel poligono per categorie"},{"location":"esempi/punti_in_poligoni_categorie/#contare-i-punti-nel-poligono-per-categorie","text":"Contare solo alcuni degli elementi di un vettore puntuale che ricadono all'interno delle geometrie di un vettore poligonale, e \u2018appendere\u2019 i valori nella tabella attributi del layer poligonale. Possiamo utilizzare l'operatore AND per filtrare il conteggio dei punti del poligono in modo da includere in tale conteggio solo quei punti che hanno determinate caratteristiche. Utilizzare il calcolatore di campi: creiamo un nuovo campo virtuale (Tipo: integer) nel layer poligonale; popolarlo utilizzando un'espressione tipo: aggregate(layer:='punti', aggregate:='count', expression:=\"nome_campo\", filter:=(\"nome_campo\"='valore_campo' AND intersects( $geometry, geometry(@parent)))) Per fare un esempio concreto usiamo i dataset utilizzati nel manuale utente di QGIS scaricabili da qui caricando il vettore poligonale 'regions' e quello puntuale 'airports'. Poniamo ad esempio di voler conteggiare il numero di aeroporti sd uso civile ricadenti in ciascuna regione: possiamo utilizzare la funzione aggregate e imporre che siano soddisfatte due condizioni nell\u2019argomento del filtro tramite l\u2019operatore AND . risultato: Partendo da qui possiamo costruire un\u2019espressione pi\u00f9 complessa che ci restituisca il numero di aeroporti, per ciascun uso, presenti in ciascuna regione. risultato: Last but not least\u2026 Implicazioni dell\u2019uso della funzione aggregate con la variabile @parent per contare i punti nel poligono Ho usato questi dataset poich\u00e9 utilizzati anche nella documentazione per spiegare le relazioni 1:N. Solo che in questo caso non c\u2019\u00e8 stato neppure bisogno di impostare una relazione di progetto tra i vettori \u201cregions\u201d (1) e \u201cairports\u201d (N)! Realizzato da Martina Savarese Funzioni e variabili utilizzate: @parent aggregate AND geometry","title":"Contare  i punti nel poligono per categorie"},{"location":"esempi/ricerca_caratteri_speciali/","tags":["ricerca","caratteri","regex"],"text":"Ricerca caratteri speciali \u21b5 I caratteri speciali sono tutti quelli che non trovi sulla tastiera. Simboli, lettere accentate, icone che si dissociano dall\u2019alfabeto tradizionale. L'alfabeto tradiziona minuscolo,maiuscolo e numeri: a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z 0,1,2,3,4,5,6,7,8,9 Vediamo come selezionare i record in cui un campo contiene dei caratteri speciali. Una tecnica per selezionare i record che contengono almeno un carattere speciale \u00e8 quello di ricercare tutti i caratteri che NON fanno parte dell'insiene scritto sopra; oppure, di ricercare un insieme di caratteri specificati. Ecco un esempio: prima tecnica \u21b5 creare un pattern per escludere i caratteri da cercare [^A-Za-z0-9\\\\s] L'espressione da utilizzare \u00e8: regexp_substr(\"testo\",'[^A-Za-z0-9\\\\s]') <> '' dove: [^A-Za-z0-9\\\\s] significa, evita ( ^ ) l'insieme (cio\u00e8 dalla A alla Z maiuscolo e minuscolo e i numeri) \\\\s significa spazio seconda tecnica \u21b5 creare un pattern con i caratteri da cercare [\u00e0\u00e8\u00e9\u00ec\u00f2\u00f9\u00a3$%] , naturalmente l'elenco pu\u00f2 crescere. L'espressione da utilizzare \u00e8: regexp_substr(\"testo\",'[\u00e0\u00e8\u00e9\u00ec\u00f2\u00f9\u00a3$%]') <> '' risultato \u21b5 in entrambi i casi, e per questo esempio, la soluzione \u00e8 la stessa per fare test con i regex : https://regex101.com/ Grazie a Valerio Pinna Funzioni e variabili utilizzate: regexp_substr <>","title":"Ricercare caratteri speciali"},{"location":"esempi/ricerca_caratteri_speciali/#ricerca-caratteri-speciali","text":"I caratteri speciali sono tutti quelli che non trovi sulla tastiera. Simboli, lettere accentate, icone che si dissociano dall\u2019alfabeto tradizionale. L'alfabeto tradiziona minuscolo,maiuscolo e numeri: a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z 0,1,2,3,4,5,6,7,8,9 Vediamo come selezionare i record in cui un campo contiene dei caratteri speciali. Una tecnica per selezionare i record che contengono almeno un carattere speciale \u00e8 quello di ricercare tutti i caratteri che NON fanno parte dell'insiene scritto sopra; oppure, di ricercare un insieme di caratteri specificati. Ecco un esempio:","title":"Ricerca caratteri speciali"},{"location":"esempi/ricerca_caratteri_speciali/#prima-tecnica","text":"creare un pattern per escludere i caratteri da cercare [^A-Za-z0-9\\\\s] L'espressione da utilizzare \u00e8: regexp_substr(\"testo\",'[^A-Za-z0-9\\\\s]') <> '' dove: [^A-Za-z0-9\\\\s] significa, evita ( ^ ) l'insieme (cio\u00e8 dalla A alla Z maiuscolo e minuscolo e i numeri) \\\\s significa spazio","title":"prima tecnica"},{"location":"esempi/ricerca_caratteri_speciali/#seconda-tecnica","text":"creare un pattern con i caratteri da cercare [\u00e0\u00e8\u00e9\u00ec\u00f2\u00f9\u00a3$%] , naturalmente l'elenco pu\u00f2 crescere. L'espressione da utilizzare \u00e8: regexp_substr(\"testo\",'[\u00e0\u00e8\u00e9\u00ec\u00f2\u00f9\u00a3$%]') <> ''","title":"seconda tecnica"},{"location":"esempi/ricerca_caratteri_speciali/#risultato","text":"in entrambi i casi, e per questo esempio, la soluzione \u00e8 la stessa per fare test con i regex : https://regex101.com/ Grazie a Valerio Pinna Funzioni e variabili utilizzate: regexp_substr <>","title":"risultato"},{"location":"esempi/rotazione_pattern/","tags":["linee","vestizione","centroidi","shortest-line"],"text":"Rotazione di pattern lineare \u21b5 Campire degli edifici con pattern lineari e rotazione dipendente dalle feature in questo screenshot si nota che il pattern lineare ha una rotazione costante di 45\u00b0 per tutti gli edifici, per edifici con lato a 45\u00b0 (vedi frecia) il pattern risulta parallelo e quindi non bello a vedersi. Vediamo come calcolare un angolo diverso per ogni edificio in modo da limitare il parallelismo del pattern lineare: l'espressione da usare \u00e8: angle_at_vertex(shortest_line(centroid(oriented_bbox($geometry)), boundary(oriented_bbox($geometry))),0) nel linguaggio umano significa: \u21b5 calcola l'angolo del segmento (in blue) pi\u00f9 corto tra il centroide del bounding box orientato (tratteggio rosso) e il bounding box stesso. espressione: prova tu usando in file qml: file QML Funzioni e variabili utilizzate: angle_at_vertex shortest_line centroid oriented_bbox boundary \\$geometry","title":"Rotazione pattern lineare"},{"location":"esempi/rotazione_pattern/#rotazione-di-pattern-lineare","text":"Campire degli edifici con pattern lineari e rotazione dipendente dalle feature in questo screenshot si nota che il pattern lineare ha una rotazione costante di 45\u00b0 per tutti gli edifici, per edifici con lato a 45\u00b0 (vedi frecia) il pattern risulta parallelo e quindi non bello a vedersi. Vediamo come calcolare un angolo diverso per ogni edificio in modo da limitare il parallelismo del pattern lineare: l'espressione da usare \u00e8: angle_at_vertex(shortest_line(centroid(oriented_bbox($geometry)), boundary(oriented_bbox($geometry))),0)","title":"Rotazione di pattern lineare"},{"location":"esempi/rotazione_pattern/#nel-linguaggio-umano-significa","text":"calcola l'angolo del segmento (in blue) pi\u00f9 corto tra il centroide del bounding box orientato (tratteggio rosso) e il bounding box stesso. espressione: prova tu usando in file qml: file QML Funzioni e variabili utilizzate: angle_at_vertex shortest_line centroid oriented_bbox boundary \\$geometry","title":"nel linguaggio umano significa:"},{"location":"esempi/rotazione_simbolo_parallelo_linea/","tags":["linee","overlay","prossimit\u00e0"],"text":"Rotazione simbolo parallelamente alla linea pi\u00f9 vicina \u21b5 L'espressione di sotto calcola l'angolo della linea pi\u00f9 vicina e lo utilizza per far ruotare parallelamente un simbolo. with_variable ('geom', overlay_nearest('strade_palermo',$geometry)[0], line_interpolate_angle( @geom, line_locate_point(@geom,closest_point(@geom,$geometry)))) Funzioni e variabili utilizzate: with_variable overlay_nearest line_interpolate_angle closest_point \\$geometry","title":"Rotazione simbolo parallelo ad una linea"},{"location":"esempi/rotazione_simbolo_parallelo_linea/#rotazione-simbolo-parallelamente-alla-linea-piu-vicina","text":"L'espressione di sotto calcola l'angolo della linea pi\u00f9 vicina e lo utilizza per far ruotare parallelamente un simbolo. with_variable ('geom', overlay_nearest('strade_palermo',$geometry)[0], line_interpolate_angle( @geom, line_locate_point(@geom,closest_point(@geom,$geometry)))) Funzioni e variabili utilizzate: with_variable overlay_nearest line_interpolate_angle closest_point \\$geometry","title":"Rotazione simbolo parallelamente alla linea pi\u00f9 vicina"},{"location":"esempi/segmento_minimo_facciata_strada/","tags":["linee","shortest-line","array","overlay","centroidi"],"text":"Segmento minimo tra facciata e strada \u21b5 New SpatialAnalysis Challenge : Riesci a definire un flusso di lavoro per collegare il bordo di ogni edificio rivolto verso la strada al punto pi\u00f9 vicino sul segmento di strada? L'idea alla base della sfida \u00e8 trovare il bordo del poligono il cui punto centrale \u00e8 pi\u00f9 vicino a una strada e quindi collegarlo con il punto pi\u00f9 vicino sulla strada. tweet1 , tweet2 Prima soluzione \u21b5 with_variable('andy', array_foreach( array_foreach( generate_series(1,num_geometries(segments_to_lines($geometry))), centroid(geometry_n(segments_to_lines($geometry),@element))), distance(@element, overlay_nearest('roads',$geometry)[0])), /*shortest line*/ shortest_line( array_foreach( generate_series(1, num_geometries( segments_to_lines($geometry))), centroid(geometry_n(segments_to_lines($geometry),@element))) [array_find( @andy,array_min(@andy))], overlay_nearest('roads',$geometry)[0])) L'espressione pu\u00f2 essere usata come tema tramite il generatore di geometrie : oppure direttamente nell'algoritmo Geometria tramite espressione per ottenere un nuovo layer: altra soluzione con stesso risultato: with_variable('toto', collect_geometries( array_foreach( generate_series(1,num_geometries(segments_to_lines($geometry))), centroid(geometry_n(segments_to_lines($geometry),@element)))), /*shortest line*/ shortest_line(@toto,overlay_nearest('roads',$geometry)[0])) ma entrambe le soluzioni hanno un problema, la funzione overlay_nearest restituisce la strada pi\u00f9 vicina all'edificio e non al centroide della facciata, ecco un esempio estratto dal dataset: la freccia rossa indica il segmanto pi\u00f9 corto tracciato erroneamente in quanto la strada pi\u00f9 vicina risulterebbe quella indicata con (1). Seconda soluzione \u21b5 La soluzione corretta deve per forza passare per due step: estrarre i centroidi delle facciate; tracciare il segmento pi\u00f9 corto. I centroidi delle facciate degli edifici li estraggo con: collect_geometries ( array_foreach ( generate_series (1, num_geometries (segments_to_lines ($ geometry)))), centroid (geometry_n (segments_to_lines ($ geometry), @ element)))) il segmento pi\u00f9 corto lo traccio con: shortest_line( $geometry, overlay_nearest('roads',$geometry)[0]) ecco il risultato: Funzioni e variabili utilizzate: @with_variable generate_series array_foreach array_find num_geometries collect_geometries geometry_n segments_to_lines overlay_nearest distance centroid shortest_line $geometry dati \u21b5 https://t.co/u0xGe5YtCT?amp=1","title":"Segmento minimo facciata strada"},{"location":"esempi/segmento_minimo_facciata_strada/#segmento-minimo-tra-facciata-e-strada","text":"New SpatialAnalysis Challenge : Riesci a definire un flusso di lavoro per collegare il bordo di ogni edificio rivolto verso la strada al punto pi\u00f9 vicino sul segmento di strada? L'idea alla base della sfida \u00e8 trovare il bordo del poligono il cui punto centrale \u00e8 pi\u00f9 vicino a una strada e quindi collegarlo con il punto pi\u00f9 vicino sulla strada. tweet1 , tweet2","title":"Segmento minimo tra facciata e strada"},{"location":"esempi/segmento_minimo_facciata_strada/#prima-soluzione","text":"with_variable('andy', array_foreach( array_foreach( generate_series(1,num_geometries(segments_to_lines($geometry))), centroid(geometry_n(segments_to_lines($geometry),@element))), distance(@element, overlay_nearest('roads',$geometry)[0])), /*shortest line*/ shortest_line( array_foreach( generate_series(1, num_geometries( segments_to_lines($geometry))), centroid(geometry_n(segments_to_lines($geometry),@element))) [array_find( @andy,array_min(@andy))], overlay_nearest('roads',$geometry)[0])) L'espressione pu\u00f2 essere usata come tema tramite il generatore di geometrie : oppure direttamente nell'algoritmo Geometria tramite espressione per ottenere un nuovo layer: altra soluzione con stesso risultato: with_variable('toto', collect_geometries( array_foreach( generate_series(1,num_geometries(segments_to_lines($geometry))), centroid(geometry_n(segments_to_lines($geometry),@element)))), /*shortest line*/ shortest_line(@toto,overlay_nearest('roads',$geometry)[0])) ma entrambe le soluzioni hanno un problema, la funzione overlay_nearest restituisce la strada pi\u00f9 vicina all'edificio e non al centroide della facciata, ecco un esempio estratto dal dataset: la freccia rossa indica il segmanto pi\u00f9 corto tracciato erroneamente in quanto la strada pi\u00f9 vicina risulterebbe quella indicata con (1).","title":"Prima soluzione"},{"location":"esempi/segmento_minimo_facciata_strada/#seconda-soluzione","text":"La soluzione corretta deve per forza passare per due step: estrarre i centroidi delle facciate; tracciare il segmento pi\u00f9 corto. I centroidi delle facciate degli edifici li estraggo con: collect_geometries ( array_foreach ( generate_series (1, num_geometries (segments_to_lines ($ geometry)))), centroid (geometry_n (segments_to_lines ($ geometry), @ element)))) il segmento pi\u00f9 corto lo traccio con: shortest_line( $geometry, overlay_nearest('roads',$geometry)[0]) ecco il risultato: Funzioni e variabili utilizzate: @with_variable generate_series array_foreach array_find num_geometries collect_geometries geometry_n segments_to_lines overlay_nearest distance centroid shortest_line $geometry","title":"Seconda soluzione"},{"location":"esempi/segmento_minimo_facciata_strada/#dati","text":"https://t.co/u0xGe5YtCT?amp=1","title":"dati"},{"location":"esempi/select_duplicate_vertices/","tags":["selezionare","vertici","contare","array"],"text":"Selezionare vertici duplicati \u21b5 Ogni volta che estraiamo i vertici in una geometria (lineare o poligonale) otteniamo quasi sempre dei vertici duplicati, in questo esempio vedremo come selezionarli usando le espressioni. Per selezionare i vertici duplicati vedremo due soluzioni diverse: prima soluzione usando una funzione di aggregazione count count( expression:=geom_to_wkt( $geometry,2), group_by:=geom_to_wkt( $geometry,2) ) > 1 Ogni espressione viene valutata riga per riga nella tabella attributi, questa espressione sar\u00e0 vera solo in quelle righe dove il conteggio delle geometrie sono maggiori di uno e quindi duplicate: prima riga, conteggio con aggregazione, eistono pi\u00f9 geometrie uguali?? se si il count \u00e8 >1 e seleziona la riga. seconda soluzione usando gli array array_length( array_agg( expression:=$geometry, group_by:=geom_to_wkt($geometry,2)) ) > 1 Il concetto \u00e8 simile a quello precedente, ma usando gli array: quindi quando un array contiene pi\u00f9 di un elemento (geometria=vertice), la lunghezza dell'array sar\u00e0 > 1 e quindi duplicato. per entrambe stesso risultato: Selezionare solo uno dei due punti doppi \u21b5 espressione da utilizzare: seleziona primo punto if($id = array_first( -- primo punto array_agg( expression:= $id, filter:= array_length( array_agg( expression:=$geometry, group_by:=geom_to_wkt($geometry)))>1, group_by:=geom_to_wkt($geometry) ) ) , $id, '') selezionare ultimo punto if($id = array_last( -- ultimo punto array_agg( expression:= $id, filter:= array_length( array_agg( expression:=$geometry, group_by:=geom_to_wkt($geometry)))>1, group_by:=geom_to_wkt($geometry) ) ) , $id, '') nel caso di molti punti sovrapposti si potrebbe utilizzare la notazione degli array, cio\u00e8 le parentesi quadre: if($id = array_agg( expression:= $id, filter:= array_length( array_agg( expression:=$geometry, group_by:=geom_to_wkt($geometry)))>1, group_by:=geom_to_wkt($geometry) )[0] -- primo vertice doppio; [-1] per ultimo; [x] per xesimo posto , $id, '') NB1: La selezione potrebbe non essere visibile a schermo a causa della sovrapposizione dei punti, per ovviare alternare le funzioni array_first con array_last . NB2: I calcoli da fare sono molti e per dataset pesanti potrebbe impiegarci molto tempo (dipende anche dalle risorse hardware) In collaborazione con Valerio Pinna che ringrazio per la disponibilit\u00e0. Prova tu \u21b5 il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: if \\$id get_feature_by_id array_agg array_sort string_to_array array_last array_find array_reverse geom_to_wkt count array_length \\$geometry","title":"Selezionare vertici duplicati"},{"location":"esempi/select_duplicate_vertices/#selezionare-vertici-duplicati","text":"Ogni volta che estraiamo i vertici in una geometria (lineare o poligonale) otteniamo quasi sempre dei vertici duplicati, in questo esempio vedremo come selezionarli usando le espressioni. Per selezionare i vertici duplicati vedremo due soluzioni diverse: prima soluzione usando una funzione di aggregazione count count( expression:=geom_to_wkt( $geometry,2), group_by:=geom_to_wkt( $geometry,2) ) > 1 Ogni espressione viene valutata riga per riga nella tabella attributi, questa espressione sar\u00e0 vera solo in quelle righe dove il conteggio delle geometrie sono maggiori di uno e quindi duplicate: prima riga, conteggio con aggregazione, eistono pi\u00f9 geometrie uguali?? se si il count \u00e8 >1 e seleziona la riga. seconda soluzione usando gli array array_length( array_agg( expression:=$geometry, group_by:=geom_to_wkt($geometry,2)) ) > 1 Il concetto \u00e8 simile a quello precedente, ma usando gli array: quindi quando un array contiene pi\u00f9 di un elemento (geometria=vertice), la lunghezza dell'array sar\u00e0 > 1 e quindi duplicato. per entrambe stesso risultato:","title":"Selezionare vertici duplicati"},{"location":"esempi/select_duplicate_vertices/#selezionare-solo-uno-dei-due-punti-doppi","text":"espressione da utilizzare: seleziona primo punto if($id = array_first( -- primo punto array_agg( expression:= $id, filter:= array_length( array_agg( expression:=$geometry, group_by:=geom_to_wkt($geometry)))>1, group_by:=geom_to_wkt($geometry) ) ) , $id, '') selezionare ultimo punto if($id = array_last( -- ultimo punto array_agg( expression:= $id, filter:= array_length( array_agg( expression:=$geometry, group_by:=geom_to_wkt($geometry)))>1, group_by:=geom_to_wkt($geometry) ) ) , $id, '') nel caso di molti punti sovrapposti si potrebbe utilizzare la notazione degli array, cio\u00e8 le parentesi quadre: if($id = array_agg( expression:= $id, filter:= array_length( array_agg( expression:=$geometry, group_by:=geom_to_wkt($geometry)))>1, group_by:=geom_to_wkt($geometry) )[0] -- primo vertice doppio; [-1] per ultimo; [x] per xesimo posto , $id, '') NB1: La selezione potrebbe non essere visibile a schermo a causa della sovrapposizione dei punti, per ovviare alternare le funzioni array_first con array_last . NB2: I calcoli da fare sono molti e per dataset pesanti potrebbe impiegarci molto tempo (dipende anche dalle risorse hardware) In collaborazione con Valerio Pinna che ringrazio per la disponibilit\u00e0.","title":"Selezionare solo uno dei due punti doppi"},{"location":"esempi/select_duplicate_vertices/#prova-tu","text":"il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: if \\$id get_feature_by_id array_agg array_sort string_to_array array_last array_find array_reverse geom_to_wkt count array_length \\$geometry","title":"Prova tu"},{"location":"esempi/select_with_aggregate/","tags":["selezionare","aggregare","area"],"text":"Selezionare tramite funzioni di aggregazione - caso minimun \u21b5 Facciamo un esempio, uso vettore province_g del geopackage allegato e seleziono i comuni che hanno superficie pi\u00f9 piccola per ogni provincia: seleziono (nel panel layer) il layer dove effettuare la selezione e premo il tasto funzione F3 oppure come da figura sotto: scrivo l'espressione: $area = minimum($area, group_by:= \"COD_PROV\" ) e poi clicco su (2) seleziona elementi : il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: \\$area minimum uguale","title":"Selezione"},{"location":"esempi/select_with_aggregate/#selezionare-tramite-funzioni-di-aggregazione-caso-minimun","text":"Facciamo un esempio, uso vettore province_g del geopackage allegato e seleziono i comuni che hanno superficie pi\u00f9 piccola per ogni provincia: seleziono (nel panel layer) il layer dove effettuare la selezione e premo il tasto funzione F3 oppure come da figura sotto: scrivo l'espressione: $area = minimum($area, group_by:= \"COD_PROV\" ) e poi clicco su (2) seleziona elementi : il geopackage \u00e8 scaricabile qui Funzioni e variabili utilizzate: \\$area minimum uguale","title":"Selezionare tramite funzioni di aggregazione - caso minimun"},{"location":"esempi/selezionare_poligoni_max_area_sovrapposta/","tags":["selezionare","poligoni","overlay"],"text":"Selezionare i riquadri con massima/minima area sovrapposta da altro layer poligonale \u21b5 Supponiamo di avere il quadro di unione di tutta Italia relativo al DEM Tinitaly e di voler selezionare, per ogni regione, quale siano i riquadri con maggiore sovrapposizione di territorio. Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: area( intersection( $geometry, overlay_intersects('Reg01012022_G_Wgs84', $geometry)[0])) = maximum( area( intersection($geometry, overlay_intersects('Reg01012022_G_Wgs84', $geometry)[0])), group_by:=overlay_intersects('Reg01012022_G_Wgs84', \"cod_reg\")[0]) per ottenere i riquadri minimi, sostituire la funzione maximun con minimun : Funzioni e variabili utilizzate: maximum intersection area overlay_intersects $geometry","title":"Seleziona poligoni con max area sovrapposta"},{"location":"esempi/selezionare_poligoni_max_area_sovrapposta/#selezionare-i-riquadri-con-massimaminima-area-sovrapposta-da-altro-layer-poligonale","text":"Supponiamo di avere il quadro di unione di tutta Italia relativo al DEM Tinitaly e di voler selezionare, per ogni regione, quale siano i riquadri con maggiore sovrapposizione di territorio. Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: area( intersection( $geometry, overlay_intersects('Reg01012022_G_Wgs84', $geometry)[0])) = maximum( area( intersection($geometry, overlay_intersects('Reg01012022_G_Wgs84', $geometry)[0])), group_by:=overlay_intersects('Reg01012022_G_Wgs84', \"cod_reg\")[0]) per ottenere i riquadri minimi, sostituire la funzione maximun con minimun : Funzioni e variabili utilizzate: maximum intersection area overlay_intersects $geometry","title":"Selezionare i riquadri con massima/minima area sovrapposta da altro layer poligonale"},{"location":"esempi/selezionare_primi_n_valori/","tags":["selezionare","poligoni","etichette","area"],"text":"Selezionare i primi 10 poligoni pi\u00f9 grandi \u21b5 Supponiamo di dover selezionare i primi 10 poligoni (per esempio le prime 10 province pi\u00f9 estese d'Italia) usando la selezione per espressione di QGIS: Espressione da usare array_contains( array_slice( array_sort( array_agg($area), ascending:=false ), 0,9 ), $area) Nel linguaggio umano significa: Prendi i primi 10 (da 0 a 9) elementi (valore area) contenuti in un array ordinato in senso decrescente. Etichettatura \u21b5 Etichettare con il nome della provincia e il numero sequenziale Etichettiamo tramite regola e usiamo come filtro is_selected() , come espressione: \"DEN_UTS\" || ' (' || (array_find( array_sort( array_agg( $area ) , ascending:=false ) , $area ) +1) || ')' NB: +1 perch\u00e9 l'indice inizia da 0 Funzioni e variabili utilizzate: doppio-pipe uguale array_contains array_slice array_sort array_agg \\$area \\$geometry","title":"Selezionare primi n valori"},{"location":"esempi/selezionare_primi_n_valori/#selezionare-i-primi-10-poligoni-piu-grandi","text":"Supponiamo di dover selezionare i primi 10 poligoni (per esempio le prime 10 province pi\u00f9 estese d'Italia) usando la selezione per espressione di QGIS: Espressione da usare array_contains( array_slice( array_sort( array_agg($area), ascending:=false ), 0,9 ), $area) Nel linguaggio umano significa: Prendi i primi 10 (da 0 a 9) elementi (valore area) contenuti in un array ordinato in senso decrescente.","title":"Selezionare i primi 10 poligoni pi\u00f9 grandi"},{"location":"esempi/selezionare_primi_n_valori/#etichettatura","text":"Etichettare con il nome della provincia e il numero sequenziale Etichettiamo tramite regola e usiamo come filtro is_selected() , come espressione: \"DEN_UTS\" || ' (' || (array_find( array_sort( array_agg( $area ) , ascending:=false ) , $area ) +1) || ')' NB: +1 perch\u00e9 l'indice inizia da 0 Funzioni e variabili utilizzate: doppio-pipe uguale array_contains array_slice array_sort array_agg \\$area \\$geometry","title":"Etichettatura"},{"location":"esempi/selezionare_primo_record_per_ogni_duplicato/","tags":["selezionare","duplicati","tabella","array","attributi"],"text":"Selezionare primo record per ogni duplicato per attributo \u21b5 Supponiamo di avere una layer con tabella attributi in cui un attributo contiene dei duplicati, selezionare un solo record per ogni duplicato. Questo esempio prende spunto da questa domanda posta su StackExchange . Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: id rischio 1 R1 2 R2 3 R2 4 R3 5 R3 6 R3 with_variable ('your_field','rischio', if( count(eval(@your_field),eval(@your_field))>1 AND $id = array_agg($id,eval(@your_field))[0],true,false) ) selezioner\u00e0 la riga 2 e 4 Funzioni e variabili utilizzate: @with_variable array_agg if count","title":"Seleziona primo record per ogni duplicato"},{"location":"esempi/selezionare_primo_record_per_ogni_duplicato/#selezionare-primo-record-per-ogni-duplicato-per-attributo","text":"Supponiamo di avere una layer con tabella attributi in cui un attributo contiene dei duplicati, selezionare un solo record per ogni duplicato. Questo esempio prende spunto da questa domanda posta su StackExchange . Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: id rischio 1 R1 2 R2 3 R2 4 R3 5 R3 6 R3 with_variable ('your_field','rischio', if( count(eval(@your_field),eval(@your_field))>1 AND $id = array_agg($id,eval(@your_field))[0],true,false) ) selezioner\u00e0 la riga 2 e 4 Funzioni e variabili utilizzate: @with_variable array_agg if count","title":"Selezionare primo record per ogni duplicato per attributo"},{"location":"esempi/selezionare_punti_vicini_punto/","tags":["selezionare","prossimit\u00e0","punti","overlay"],"text":"Selezionare 'n' punti pi\u00f9 vicini ad un punto selezionato \u21b5 Supponiamo di avere un layer di punti e di voler selezionare i primi 10 punti pi\u00f9 vicini ad un punto selezionato arbitrariamente. Questo esempio prende spunto da questa domanda posta su StackExchange . Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: /*Select the first 'n' points closest to the selected point*/ -- fid selection with_variable ('selected_fid', array_find( array_agg(geom_to_wkt($geometry,6)), array_agg(geom_to_wkt($geometry,6), filter:=is_selected())[0]), -- selection circle with_variable ('circle', make_circle ( $geometry, aggregate( layer:=@layer_name, aggregate:='array_agg', expression:= array_max(array_foreach ( overlay_nearest (@layer_name, $geometry,limit:=10), distance($geometry,@element))))[@selected_fid]), -- verify intersects (@circle,array_agg($geometry)[@selected_fid])) ) NB: il valore del parametro limit:= in questo caso specifico, dipende dal provider utilizzato: per shapefile ($id inizia da 0) utilizzare limit:=valore +1 per geopackage ($id inizia da 1) utilizzare limit:=valore Funzioni e variabili utilizzate: @with_variable array_find array_agg array_foreach aggregate geom_to_wkt make_circle distance overlay_nearest intersects is_selected $geometry","title":"Selezionare punti pi\u00f9 vicini ad un punto selezionato"},{"location":"esempi/selezionare_punti_vicini_punto/#selezionare-n-punti-piu-vicini-ad-un-punto-selezionato","text":"Supponiamo di avere un layer di punti e di voler selezionare i primi 10 punti pi\u00f9 vicini ad un punto selezionato arbitrariamente. Questo esempio prende spunto da questa domanda posta su StackExchange . Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: /*Select the first 'n' points closest to the selected point*/ -- fid selection with_variable ('selected_fid', array_find( array_agg(geom_to_wkt($geometry,6)), array_agg(geom_to_wkt($geometry,6), filter:=is_selected())[0]), -- selection circle with_variable ('circle', make_circle ( $geometry, aggregate( layer:=@layer_name, aggregate:='array_agg', expression:= array_max(array_foreach ( overlay_nearest (@layer_name, $geometry,limit:=10), distance($geometry,@element))))[@selected_fid]), -- verify intersects (@circle,array_agg($geometry)[@selected_fid])) ) NB: il valore del parametro limit:= in questo caso specifico, dipende dal provider utilizzato: per shapefile ($id inizia da 0) utilizzare limit:=valore +1 per geopackage ($id inizia da 1) utilizzare limit:=valore Funzioni e variabili utilizzate: @with_variable array_find array_agg array_foreach aggregate geom_to_wkt make_circle distance overlay_nearest intersects is_selected $geometry","title":"Selezionare 'n' punti pi\u00f9 vicini ad un punto selezionato"},{"location":"esempi/selezionare_record_orfani_rel_padrefiglio/","tags":["selezionare","tabella","attributi","relazioni"],"text":"Selezionare i record senza riferimenti in una relazione padre figlio \u21b5 In una relazione padre-figlio (1:m), pu\u00f2 verificarsi che la tabella figlia abbia dei record senza alcun riferimento alla tabella padre, come selezionare questi record? Esempio preso da StackExchange . Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: NOT aggregate ( layer := 'tabellaPadre' , aggregate := 'count' , expression := $ id , filter := \"campoCorrelato\" = attribute ( @parent , 'campoCorrelato' )) > 0 la logica dell'espressione \u00e8 la seguente : per ogni record padre, conta il numero di figli che saranno certamente >0 , negare l'espressione corrisponde a selezionare i record figli che NON hanno un genitore. Funzioni e variabili utilizzate: @parent NOT aggregate count","title":"Selezionare record orfani in una relazione padre-figlio"},{"location":"esempi/selezionare_record_orfani_rel_padrefiglio/#selezionare-i-record-senza-riferimenti-in-una-relazione-padre-figlio","text":"In una relazione padre-figlio (1:m), pu\u00f2 verificarsi che la tabella figlia abbia dei record senza alcun riferimento alla tabella padre, come selezionare questi record? Esempio preso da StackExchange . Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: NOT aggregate ( layer := 'tabellaPadre' , aggregate := 'count' , expression := $ id , filter := \"campoCorrelato\" = attribute ( @parent , 'campoCorrelato' )) > 0 la logica dell'espressione \u00e8 la seguente : per ogni record padre, conta il numero di figli che saranno certamente >0 , negare l'espressione corrisponde a selezionare i record figli che NON hanno un genitore. Funzioni e variabili utilizzate: @parent NOT aggregate count","title":"Selezionare i record senza riferimenti in una relazione padre figlio"},{"location":"esempi/selezione_ultimo_record_per_data/","tags":["selezionare","record","aggregare","array"],"text":"Selezionare ultimo record per data \u21b5 L'esempio \u00e8 preso da qui: stackexchange : https://gis.stackexchange.com/questions/419587/selecting-latest-record-by-date : Una tabella degli attributi (in un GeoPackage) contenente un campo stringa box_ide e un campo data inspection_date . Le righe della tabella sono simili a: box_id inspection_date NE_01_01 2021/05/01 NE_01_01 2021/05/02 NE_01_01 2021/05/04 SE_03_02 2021/06/09 SW_01_04 2021/06/05 SW_01_04 2021/06/07 come selezionare quei record con l'ultimo inspection_date per ciascuno box_id . Usando i dati di esempio, la selezione risultante sarebbe simile a: box_id inspection_date NE_01_01 2021/05/04 SE_03_02 2021/06/09 SW_01_04 2021/06/07 Funzione di Aggregazione \u21b5 Usando le funzioni di aggregazione, per esempio maximum : \"inspection_date\" = maximum(\"inspection_date\", group_by:=\"box_id\") non funziona in quanto (sembra) la funzione maximum trasformi un oggetto QDate in QDateTime e di conseguenza l'uguaglianza non \u00e8 mai verificata, infatti l'espressione: maximum(\"inspection_date\") \u2192 <datetime: 2021-06-09 00:00:00 (ora legale Europa occidentale)> per ovviare occorre trasformare l'output della funzione maximun in data: \"inspection_date\" = to_date(maximum(\"inspection_date\", group_by:=\"box_id\")) questa funziona!!! Funzioni Array \u21b5 Usando gli Array non occorre nessuna trasformazione: \"inspection_date\" = array_max(array_agg(\"inspection_date\", group_by:=\"box_id\")) Osservazione \u21b5 Dal men\u00f9 Impostazioni | Opzioni \u00e8 possibile modificare la visualizzazione delle date: prova tu \u21b5 Geopackage Funzioni e variabili utilizzate: maximum array_agg array_max","title":"Selezione ultimo record per data"},{"location":"esempi/selezione_ultimo_record_per_data/#selezionare-ultimo-record-per-data","text":"L'esempio \u00e8 preso da qui: stackexchange : https://gis.stackexchange.com/questions/419587/selecting-latest-record-by-date : Una tabella degli attributi (in un GeoPackage) contenente un campo stringa box_ide e un campo data inspection_date . Le righe della tabella sono simili a: box_id inspection_date NE_01_01 2021/05/01 NE_01_01 2021/05/02 NE_01_01 2021/05/04 SE_03_02 2021/06/09 SW_01_04 2021/06/05 SW_01_04 2021/06/07 come selezionare quei record con l'ultimo inspection_date per ciascuno box_id . Usando i dati di esempio, la selezione risultante sarebbe simile a: box_id inspection_date NE_01_01 2021/05/04 SE_03_02 2021/06/09 SW_01_04 2021/06/07","title":"Selezionare ultimo record per data"},{"location":"esempi/selezione_ultimo_record_per_data/#funzione-di-aggregazione","text":"Usando le funzioni di aggregazione, per esempio maximum : \"inspection_date\" = maximum(\"inspection_date\", group_by:=\"box_id\") non funziona in quanto (sembra) la funzione maximum trasformi un oggetto QDate in QDateTime e di conseguenza l'uguaglianza non \u00e8 mai verificata, infatti l'espressione: maximum(\"inspection_date\") \u2192 <datetime: 2021-06-09 00:00:00 (ora legale Europa occidentale)> per ovviare occorre trasformare l'output della funzione maximun in data: \"inspection_date\" = to_date(maximum(\"inspection_date\", group_by:=\"box_id\")) questa funziona!!!","title":"Funzione di Aggregazione"},{"location":"esempi/selezione_ultimo_record_per_data/#funzioni-array","text":"Usando gli Array non occorre nessuna trasformazione: \"inspection_date\" = array_max(array_agg(\"inspection_date\", group_by:=\"box_id\"))","title":"Funzioni Array"},{"location":"esempi/selezione_ultimo_record_per_data/#osservazione","text":"Dal men\u00f9 Impostazioni | Opzioni \u00e8 possibile modificare la visualizzazione delle date:","title":"Osservazione"},{"location":"esempi/selezione_ultimo_record_per_data/#prova-tu","text":"Geopackage Funzioni e variabili utilizzate: maximum array_agg array_max","title":"prova tu"},{"location":"esempi/somma_lunghezze_nel_poligono/","tags":["poligoni","aggregare","transform"],"text":"Somma lunghezze nel poligono \u21b5 Sommare le feature di un layer lineare che ricadono dentro poligoni, e \u2018appendere\u2019 i valori nella tabella attributi del layer poligonale. Esiste una geo-algoritmo in processing (somma lunghezze linee) che fa questo lavoro in modo brillante ma crea un altro strato. Un modo rapido per evitare la creazione di un nuovo layer \u00e8 quello di utilizzare il calcolatore di campi: creare un nuovo campo ' tot_lungh ' nel layer poligonale; popolarlo utilizzando la seguente espressione: caso in cui i due layer hanno stesso EPSG: aggregate(layer:='linee', aggregate:='sum',expression:=length(intersection(geometry(@parent),$geometry )), filter:=intersects( $geometry,geometry(@parent))) caso in cui i due layer hanno DIVERSO EPSG: aggregate(layer:='strade', aggregate:='sum', expression:=length(intersection(transform(geometry(@parent),'EPSG:4326','EPSG:32633'),$geometry)), filter:=intersects( $geometry,transform(geometry(@parent),'EPSG:4326','EPSG:32633'))) risultato: NB: la piccola differenza tra le lunghezze \u00e8 imputabile alla trasformazione di EPSG!!! La prima tabella \u00e8 relativa al vettore poligonale la seconda, lunghezze delle linea, deriva dal geo-algoritmo in processing. il geopackage \u00e8 scaricabile [qui](../prova_tu/dati_esempi.zip Funzioni e variabili utilizzate: @parent aggregate length geometry intersection intersects transform \\$geometry","title":"Somma lunghezze nel poligono"},{"location":"esempi/somma_lunghezze_nel_poligono/#somma-lunghezze-nel-poligono","text":"Sommare le feature di un layer lineare che ricadono dentro poligoni, e \u2018appendere\u2019 i valori nella tabella attributi del layer poligonale. Esiste una geo-algoritmo in processing (somma lunghezze linee) che fa questo lavoro in modo brillante ma crea un altro strato. Un modo rapido per evitare la creazione di un nuovo layer \u00e8 quello di utilizzare il calcolatore di campi: creare un nuovo campo ' tot_lungh ' nel layer poligonale; popolarlo utilizzando la seguente espressione: caso in cui i due layer hanno stesso EPSG: aggregate(layer:='linee', aggregate:='sum',expression:=length(intersection(geometry(@parent),$geometry )), filter:=intersects( $geometry,geometry(@parent))) caso in cui i due layer hanno DIVERSO EPSG: aggregate(layer:='strade', aggregate:='sum', expression:=length(intersection(transform(geometry(@parent),'EPSG:4326','EPSG:32633'),$geometry)), filter:=intersects( $geometry,transform(geometry(@parent),'EPSG:4326','EPSG:32633'))) risultato: NB: la piccola differenza tra le lunghezze \u00e8 imputabile alla trasformazione di EPSG!!! La prima tabella \u00e8 relativa al vettore poligonale la seconda, lunghezze delle linea, deriva dal geo-algoritmo in processing. il geopackage \u00e8 scaricabile [qui](../prova_tu/dati_esempi.zip Funzioni e variabili utilizzate: @parent aggregate length geometry intersection intersects transform \\$geometry","title":"Somma lunghezze nel poligono"},{"location":"esempi/spatial_join/","tags":["spatial-join","aggregare"],"text":"Spatial join \u21b5 L\u2019unione spaziale di attributi \u00e8 un problema frequente in ambito GIS - si tratta di trasferire attributi da un layer ad un altro basandosi solo sulle loro reciproche relazioni spaziali. In QGIS questa feature pu\u00f2 essere avviata attraverso lo strumento Unisci attributi per posizione Esempio: supponiamo di avere due layer: le province e regioni ISTAT, trasferire l'attributo ' COD_REG ' dal vettore regione al vettore province . avviare il calcolatore di campi e creare un nuovo campo 'COD_REG' Integer (9) e popolarlo con la seguente espressione: aggregate(layer:='Reg01012018_g', aggregate:='concatenate', expression:=to_string(\"COD_REG\"), filter:=intersects( Buffer($geometry,-10), geometry(@parent) ),concatenator:='-') L'espressione di sopra in linguaggio umano: aggrega, usando il layer Reg01012018_g , il campo COD_REG in modo da rispettare la relazione spaziale (filter:=) tra regioni ($geometry) e province (geometry(@parent)) . Step: seleziono il layer ProvCM01012018_g , clicco sull'icona del calcolatore di campi: nome del campo in uscita: COD_REG tipo di campo in uscita: Integer; lunghezza campo: 9 scrivo espressione di sopra; ecco la tabella attributi: Tematizzo con i valori del nuovo campo: OSSERVAZIONE : ottengo il risultato sperato solo perch\u00e9 ho utilizzato il Buffer negativo altrimenti avrei ottenuto un risultato diverso (ovvero tutti le regioni che si intersecavano con la provincia); il calcolatore di campi permette di aggiungere un campo nuovo nella stessa tabella attributi, cosa che \u00e8 molto utile per questi lavori. un risultato del genere NON \u00e8 possibile ottenerlo cosi rapidamente. Funzioni e variabili utilizzate: @parent aggregate geometry to_string intersects \\$geometry","title":"Spatial join"},{"location":"esempi/spatial_join/#spatial-join","text":"L\u2019unione spaziale di attributi \u00e8 un problema frequente in ambito GIS - si tratta di trasferire attributi da un layer ad un altro basandosi solo sulle loro reciproche relazioni spaziali. In QGIS questa feature pu\u00f2 essere avviata attraverso lo strumento Unisci attributi per posizione Esempio: supponiamo di avere due layer: le province e regioni ISTAT, trasferire l'attributo ' COD_REG ' dal vettore regione al vettore province . avviare il calcolatore di campi e creare un nuovo campo 'COD_REG' Integer (9) e popolarlo con la seguente espressione: aggregate(layer:='Reg01012018_g', aggregate:='concatenate', expression:=to_string(\"COD_REG\"), filter:=intersects( Buffer($geometry,-10), geometry(@parent) ),concatenator:='-') L'espressione di sopra in linguaggio umano: aggrega, usando il layer Reg01012018_g , il campo COD_REG in modo da rispettare la relazione spaziale (filter:=) tra regioni ($geometry) e province (geometry(@parent)) . Step: seleziono il layer ProvCM01012018_g , clicco sull'icona del calcolatore di campi: nome del campo in uscita: COD_REG tipo di campo in uscita: Integer; lunghezza campo: 9 scrivo espressione di sopra; ecco la tabella attributi: Tematizzo con i valori del nuovo campo: OSSERVAZIONE : ottengo il risultato sperato solo perch\u00e9 ho utilizzato il Buffer negativo altrimenti avrei ottenuto un risultato diverso (ovvero tutti le regioni che si intersecavano con la provincia); il calcolatore di campi permette di aggiungere un campo nuovo nella stessa tabella attributi, cosa che \u00e8 molto utile per questi lavori. un risultato del genere NON \u00e8 possibile ottenerlo cosi rapidamente. Funzioni e variabili utilizzate: @parent aggregate geometry to_string intersects \\$geometry","title":"Spatial join"},{"location":"esempi/sposta_etichetta_linea/","tags":["etichette","linee","x","y"],"text":"Spostare etichetta e generare segmento \u21b5 Supponiamo di dover etichettare delle particelle, le label risultano troppo vicine o sovrapposte e vogliamo spostarle facendo generare un segmanto che indichi lo spostamento (vedi screenshot sotto), vediamo come fare: Caso QGIS 2.x (2.18) \u21b5 Per poter tracciare il segmento occorre aggiungere - alla tabella attributi - due campi x e y (Real); queste coordinate serviranno per memorizzare il punto in cui sposteremo - manualmente - l'etichetta. Aggiungiamo i due campi X e Y: tabella attributi: dopo aver creato i due campi: F7 per aprire il pannello Style Layer; scegliere il campo per l'etichetta; scheda posizionamento : Definito in funzione dei dati: selezionare campo X e Y fatto ci\u00f2, usiamo la barra delle etichette: le varie opzioni si attiveranno dopo aver messo il layer in editing e configurato la sezione posizionamento . Vediamo ora come fare disegnare il segmento: tra il centroid del poligono e il punto in cui spostiamo (manualmente) l'etichetta Video demo QGIS 2.18 Caso QGIS 3.x \u21b5 Dalla 3.0 in poi non occorre pi\u00f9 modificare la tabella attributi - aggiungendo i campi x e y - in quanto ci pensa la tabella di memorizzazione ausiliaria occorre solo utilizzare in X e Y: Store Data in the project dopo avere definito il campo primario del layer Geopackage \u00e8 qui Funzioni e variabili utilizzate: x y \\$geometry","title":"Sposta etichette"},{"location":"esempi/sposta_etichetta_linea/#spostare-etichetta-e-generare-segmento","text":"Supponiamo di dover etichettare delle particelle, le label risultano troppo vicine o sovrapposte e vogliamo spostarle facendo generare un segmanto che indichi lo spostamento (vedi screenshot sotto), vediamo come fare:","title":"Spostare etichetta e generare segmento"},{"location":"esempi/sposta_etichetta_linea/#caso-qgis-2x-218","text":"Per poter tracciare il segmento occorre aggiungere - alla tabella attributi - due campi x e y (Real); queste coordinate serviranno per memorizzare il punto in cui sposteremo - manualmente - l'etichetta. Aggiungiamo i due campi X e Y: tabella attributi: dopo aver creato i due campi: F7 per aprire il pannello Style Layer; scegliere il campo per l'etichetta; scheda posizionamento : Definito in funzione dei dati: selezionare campo X e Y fatto ci\u00f2, usiamo la barra delle etichette: le varie opzioni si attiveranno dopo aver messo il layer in editing e configurato la sezione posizionamento . Vediamo ora come fare disegnare il segmento: tra il centroid del poligono e il punto in cui spostiamo (manualmente) l'etichetta Video demo QGIS 2.18","title":"Caso QGIS 2.x (2.18)"},{"location":"esempi/sposta_etichetta_linea/#caso-qgis-3x","text":"Dalla 3.0 in poi non occorre pi\u00f9 modificare la tabella attributi - aggiungendo i campi x e y - in quanto ci pensa la tabella di memorizzazione ausiliaria occorre solo utilizzare in X e Y: Store Data in the project dopo avere definito il campo primario del layer Geopackage \u00e8 qui Funzioni e variabili utilizzate: x y \\$geometry","title":"Caso QGIS 3.x"},{"location":"esempi/sposta_punti_dentro_poligoni_per_attributo/","tags":["punti","poligoni","calamita","linee"],"text":"Spostare i punti dentro i poligoni in base agli attributi \u21b5 Un layer poligonale con tre particelle, attributo Parcel_No (1,2 e 3) e un layer puntuale con mille punti e attributo Parcel_No (1,2 e 3), quindi i punti hanno solo tre valori. Spostare i punti nel corrispondente poligono, utilizzando, appunto, l'attributo comune. espressione utilizzata: closest_point( geometry(get_feature('polygon','Parcel_No', attribute($currentfeature,'Parcel_No' ))), $geometry) l'espressione crea un altro punto pi\u00f9 vicino al poligono, quindi li vedremo quasi tutti lungo il perimetro; se invece volessimo i punti dentro i relativi poligoni, per esempio lungo un cerchio, ecco altra espressione: with_variable('geomPolygon', geometry( get_feature('polygon', 'Parcel_No', attribute( $currentfeature, 'Parcel_No' ))), closest_point(buffer(centroid( @geomPolygon), bounds_height((@geomPolygon))/5), $geometry)) l'espressione di sotto distribuisce casualmente i punti dentro ogni poligono, a partire dal centroide: --> variabile with_variable('geomPolygon', geometry( get_feature('polygon', 'Parcel_No', attribute( $currentfeature, 'Parcel_No' ))), --> variabile project( point:= closest_point( geometry1:=centroid(@geomPolygon), -- polygon geometry2:=$geometry), -- point distance:= distance( closest_point( boundary(@geomPolygon),centroid(@geomPolygon)), centroid(@geomPolygon))*randf(0,1), azimuth:= radians (rand(0,360)) ) ) Maggiori dettagli nel blog post su Pigrecoinfinito idea presa da Stackexchange Animazione: espressione utilizzata: per tracciare le linee: with_variable('geomPolygon', geometry(get_feature('polygon','Parcel_No',attribute( $currentfeature, 'Parcel_No' ))), if(contains(@geomPolygon,@canvas_cursor_point)=1, make_line( $geometry, closest_point(buffer(centroid( @geomPolygon), bounds_height((@geomPolygon))/5), $geometry)) ,null)) per tracciare i punti: with_variable('geomPolygon', geometry(get_feature('polygon','Parcel_No',attribute($currentfeature, 'Parcel_No'))), -- condizione if(contains(@geomPolygon,@canvas_cursor_point)=1, closest_point(buffer(centroid( @geomPolygon), bounds_height((@geomPolygon))/5), $geometry), null)) prova tu \u21b5 dati e progetto QGIS 3.24 Funzioni e variabili utilizzate: with_variable get_feature closest_point bounds_height centroid attribute $currentfeature","title":"Spostare i punti dentro i poligoni in base agli attributi"},{"location":"esempi/sposta_punti_dentro_poligoni_per_attributo/#spostare-i-punti-dentro-i-poligoni-in-base-agli-attributi","text":"Un layer poligonale con tre particelle, attributo Parcel_No (1,2 e 3) e un layer puntuale con mille punti e attributo Parcel_No (1,2 e 3), quindi i punti hanno solo tre valori. Spostare i punti nel corrispondente poligono, utilizzando, appunto, l'attributo comune. espressione utilizzata: closest_point( geometry(get_feature('polygon','Parcel_No', attribute($currentfeature,'Parcel_No' ))), $geometry) l'espressione crea un altro punto pi\u00f9 vicino al poligono, quindi li vedremo quasi tutti lungo il perimetro; se invece volessimo i punti dentro i relativi poligoni, per esempio lungo un cerchio, ecco altra espressione: with_variable('geomPolygon', geometry( get_feature('polygon', 'Parcel_No', attribute( $currentfeature, 'Parcel_No' ))), closest_point(buffer(centroid( @geomPolygon), bounds_height((@geomPolygon))/5), $geometry)) l'espressione di sotto distribuisce casualmente i punti dentro ogni poligono, a partire dal centroide: --> variabile with_variable('geomPolygon', geometry( get_feature('polygon', 'Parcel_No', attribute( $currentfeature, 'Parcel_No' ))), --> variabile project( point:= closest_point( geometry1:=centroid(@geomPolygon), -- polygon geometry2:=$geometry), -- point distance:= distance( closest_point( boundary(@geomPolygon),centroid(@geomPolygon)), centroid(@geomPolygon))*randf(0,1), azimuth:= radians (rand(0,360)) ) ) Maggiori dettagli nel blog post su Pigrecoinfinito idea presa da Stackexchange Animazione: espressione utilizzata: per tracciare le linee: with_variable('geomPolygon', geometry(get_feature('polygon','Parcel_No',attribute( $currentfeature, 'Parcel_No' ))), if(contains(@geomPolygon,@canvas_cursor_point)=1, make_line( $geometry, closest_point(buffer(centroid( @geomPolygon), bounds_height((@geomPolygon))/5), $geometry)) ,null)) per tracciare i punti: with_variable('geomPolygon', geometry(get_feature('polygon','Parcel_No',attribute($currentfeature, 'Parcel_No'))), -- condizione if(contains(@geomPolygon,@canvas_cursor_point)=1, closest_point(buffer(centroid( @geomPolygon), bounds_height((@geomPolygon))/5), $geometry), null))","title":"Spostare i punti dentro i poligoni in base agli attributi"},{"location":"esempi/sposta_punti_dentro_poligoni_per_attributo/#prova-tu","text":"dati e progetto QGIS 3.24 Funzioni e variabili utilizzate: with_variable get_feature closest_point bounds_height centroid attribute $currentfeature","title":"prova tu"},{"location":"esempi/tema_unico_contorno/","tags":["aggregare","stile","contorni"],"text":"Come aggiungere un unico contorno ad un layer poligonale \u21b5 Per aggiungere un unico contorno allo stile di un layer poligonale con elementi adiacenti (vedi immagine sotto), solitamente si duplica il layer e su questo si cambia il tema per ottenere unico contorno (per esempio usando lo stise Elementi fusi ). In questo esempio vedremo come evitare di duplicare il layer e di creare, tramite espressioni, un unico contorno complessivo o raggruppato secondo un attributo. Per ottenere l'unico contorno occorre aggiungere un layer nell'impostazione del simbolo e modificarlo in Generatore Geometria , come espressione utilizzare: buffer(collect($geometry),0) toglier lo sfondo e lasciare solo il contorno. nel caso volessimo raggruppare per un attributo ( \"COD_PROV\" ), ecco un esempio: espressione utilizzata: buffer(collect($geometry,\"COD_PROV\"),0) ma se volessimo solo il contorno interno tra i poligoni adiacenti, allora occorre utilizzare la seguente espressione: DIFFERENCE( boundary(collect($geometry)), boundary( buffer(collect($geometry),0)) ) oppure: intersection( aggregate( layer:=@layer_name, aggregate:='collect', expression:=$geometry, filter:=\"cod_prov\" != attribute(@parent,'cod_prov')), $geometry) dove COD_PROV \u00e8 un attributo del layer (vedi tweet: https://twitter.com/bogind2/status/1538381147436204032 ) ottenendo: Funzioni e variabili utilizzate: collect buffer difference $geometry intersection","title":"Crea Tema unico contorno per poligoni adiacenti"},{"location":"esempi/tema_unico_contorno/#come-aggiungere-un-unico-contorno-ad-un-layer-poligonale","text":"Per aggiungere un unico contorno allo stile di un layer poligonale con elementi adiacenti (vedi immagine sotto), solitamente si duplica il layer e su questo si cambia il tema per ottenere unico contorno (per esempio usando lo stise Elementi fusi ). In questo esempio vedremo come evitare di duplicare il layer e di creare, tramite espressioni, un unico contorno complessivo o raggruppato secondo un attributo. Per ottenere l'unico contorno occorre aggiungere un layer nell'impostazione del simbolo e modificarlo in Generatore Geometria , come espressione utilizzare: buffer(collect($geometry),0) toglier lo sfondo e lasciare solo il contorno. nel caso volessimo raggruppare per un attributo ( \"COD_PROV\" ), ecco un esempio: espressione utilizzata: buffer(collect($geometry,\"COD_PROV\"),0) ma se volessimo solo il contorno interno tra i poligoni adiacenti, allora occorre utilizzare la seguente espressione: DIFFERENCE( boundary(collect($geometry)), boundary( buffer(collect($geometry),0)) ) oppure: intersection( aggregate( layer:=@layer_name, aggregate:='collect', expression:=$geometry, filter:=\"cod_prov\" != attribute(@parent,'cod_prov')), $geometry) dove COD_PROV \u00e8 un attributo del layer (vedi tweet: https://twitter.com/bogind2/status/1538381147436204032 ) ottenendo: Funzioni e variabili utilizzate: collect buffer difference $geometry intersection","title":"Come aggiungere un unico contorno ad un layer poligonale"},{"location":"esempi/tematizzare/","tags":["vestizione","condizioni","punti"],"text":"Tematizzare utilizzando la sovrascrittura definita dai dati \u21b5 Ad uno shapefile puntuale attribuire al simbolo colori diversi in funzione di un campo e la dimensione in funzione di un altro campo. nella Dimensione (mouse sull'icona comparir\u00e0) quindi l'ingresso atteso \u00e8 un numero reale che genereremo con la seguende condizione: CASE WHEN length( \"ID_OD\" ) >3 THEN 4 WHEN length( \"ID_OD\" ) =3 THEN 6 ELSE 2 END nella Colore di riempimento (mouse sull'icona comparir\u00e0) quindi l'ingresso atteso \u00e8 una stringa [r,g,b,a] con interi oppure come hex che genereremo con la seguende condizione: CASE WHEN length( \"ID_OD\" ) >3 THEN '255,0,0' WHEN length( \"ID_OD\" ) =3 THEN '255,0,255' ELSE '255,255,0' END Funzioni e variabili utilizzate: CASE length","title":"Tematizzare"},{"location":"esempi/tematizzare/#tematizzare-utilizzando-la-sovrascrittura-definita-dai-dati","text":"Ad uno shapefile puntuale attribuire al simbolo colori diversi in funzione di un campo e la dimensione in funzione di un altro campo. nella Dimensione (mouse sull'icona comparir\u00e0) quindi l'ingresso atteso \u00e8 un numero reale che genereremo con la seguende condizione: CASE WHEN length( \"ID_OD\" ) >3 THEN 4 WHEN length( \"ID_OD\" ) =3 THEN 6 ELSE 2 END nella Colore di riempimento (mouse sull'icona comparir\u00e0) quindi l'ingresso atteso \u00e8 una stringa [r,g,b,a] con interi oppure come hex che genereremo con la seguende condizione: CASE WHEN length( \"ID_OD\" ) >3 THEN '255,0,0' WHEN length( \"ID_OD\" ) =3 THEN '255,0,255' ELSE '255,255,0' END Funzioni e variabili utilizzate: CASE length","title":"Tematizzare utilizzando la sovrascrittura definita dai dati"},{"location":"esempi/tracciare_grafico_generatore_geometrie/","tags":["grafico","linee","relazioni","array","centroidi","punti","csv"],"text":"Tracciare un grafico usando solo il generatore di geometrie, uno per ogni feature \u21b5 Supponiamo di avere uno shapefile poligonale, le province siciliane, e i relativi dati sul COVID-19 in un file CSV. Tracciare, a partire dal centroide di ogni feature (ogni provincia), una curva che rappresenti l'andamento, nel tempo, del parametro medico presente nel file CSV (in questo caso specifico \u00e8 totale_casi ). Il file CSV \u00e8 cosi strutturato (esempio di due giorni di rilievo) 459 record, 51 giorni di osservazioni: data codice_provincia denominazione_provincia sigla_provincia totale_casi pop_res 2020-02-24T18:00:00.000 084 Agrigento AG 0 434870 2020-02-24T18:00:00.000 085 Caltanissetta CL 0 262458 2020-02-24T18:00:00.000 087 Catania CT 0 1107702 2020-02-24T18:00:00.000 086 Enna EN 0 164788 2020-02-24T18:00:00.000 083 Messina ME 0 626876 2020-02-24T18:00:00.000 082 Palermo PA 0 1252588 2020-02-24T18:00:00.000 088 Ragusa RG 0 320893 2020-02-24T18:00:00.000 089 Siracusa SR 0 399224 2020-02-24T18:00:00.000 081 Trapani TP 0 430492 2020-02-25T18:00:00.000 084 Agrigento AG 0 434870 2020-02-25T18:00:00.000 085 Caltanissetta CL 0 262458 2020-02-25T18:00:00.000 087 Catania CT 0 1107702 2020-02-25T18:00:00.000 086 Enna EN 0 164788 2020-02-25T18:00:00.000 083 Messina ME 0 626876 2020-02-25T18:00:00.000 082 Palermo PA 3 1252588 2020-02-25T18:00:00.000 088 Ragusa RG 0 320893 2020-02-25T18:00:00.000 089 Siracusa SR 0 399224 2020-02-25T18:00:00.000 081 Trapani TP 0 430492 Lo shapefile province ha la tabella attributi cosi strutturata: cod_prov den_prov sigla 81 Trapani TP 82 Palermo PA 83 Messina ME 84 Agrigento AG 85 Caltanissetta CL 86 Enna EN 87 Catania CT 88 Ragusa RG 89 Siracusa SR Creao una relazione di progetto (1:m) tra i due file, utilizzando come campo comune il campo sigla Espressione per traciare la curva: translate( make_line(-- curva relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7 )) ), x(centroid($geometry)),y(centroid($geometry))) L'espressione crea un array di punti geometrici make_point , uno per ogni data ( $id ), successivamente trasformati in linea make_line e traslati translate sui centroidi di ogni provincia. In questa espressione make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7 ) , oltre a normalizzare i dati dividendo per la popolazione residente, uso dei fattori moltiplicativi per l'asse x e y. Per tracciare gli assi cartesiani, che seguono il grafico: ascisse make_line( -- ordinate make_point(x(centroid($geometry)),y(centroid($geometry))), make_point(x(centroid($geometry)), y(end_point( translate( make_line( relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7))), x(centroid($geometry)),y(centroid($geometry)) ) ))) ) ordinate make_line( -- ascisse make_point(x(centroid($geometry)),y(centroid($geometry))), make_point(x(end_point( translate( make_line( relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7))), x(centroid($geometry)),y(centroid($geometry)) ) ) ),y(centroid($geometry)))) Infine, traccio nell'ultimo punto del grafico, il valore normalizzato per 1000 abitati: punto end_point( -- ultimo punto grafico translate( make_line( relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7 ))), x(centroid($geometry)),y(centroid($geometry))) ) etichetta punto round(to_string(relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=\"totale_casi\"/\"pop_res\")[-1])*1000,1) Gif animata realizzata con il plugin TimeManager di Anita Graser Prova tu \u21b5 file CSV : https://raw.githubusercontent.com/pigreco/COVID19_Sicilia/master/risorse/dpc-covid19-ita-province.vrt shapefile : https://github.com/pigreco/COVID19_Sicilia/raw/master/risorse/province.7z Blog post su Pigrecoinfinito : https://pigrecoinfinito.com/2020/04/14/qgis-grafici-geoplot-usando-solo-il-geometry-generator/ caso generico \u21b5 espressione consigliata with_variable('id_min', relation_aggregate( relation:='rel1',aggregate:='array_agg',expression:= $id)[0], (with_variable('pos_min', relation_aggregate( relation:='rel1',aggregate:='array_agg',expression:=\"positive\")[0], ( translate( make_line(-- curva relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point(($id - @id_min )*200, (\"positive\" - @pos_min)*2))), x(centroid($geometry)),y(centroid($geometry))) )))) dove: \"positive\" \u00e8 il campo che contiene i dati da tracciare; 200 \u00e8 un fattore di amplificazione dell'asse x (ma dipende dai dati); 2 \u00e8 un fattore di amplificazione dell'asse y (ma dipende dai dati) esempio dati: name negative positive data CODIMUNI Barcelona 5497 4745 2020-03-29 080193 Barcelona 6259 5355 2020-03-30 080193 Barcelona 6580 5599 2020-04-01 080193 Barcelona 7402 6112 2020-04-02 080193 Barcelona 8078 6354 2020-04-03 080193 Barcelona 8156 6416 2020-04-04 080193 Barcelona 8408 6566 2020-04-05 080193 Barcelona 8483 6655 2020-04-06 080193 Barcelona 8961 6873 2020-04-07 080193 Barcelona 8754 6988 2020-04-08 080193 Barcelona 9490 7305 2020-04-09 080193 Barcelona 9619 7363 2020-04-10 080193 Barcelona 9633 7354 2020-04-11 080193 Barcelona 9671 7319 2020-04-13 080193 Barcelona 9774 7225 2020-04-15 080193 Begues 17 15 2020-03-29 080207 Begues 18 19 2020-03-30 080207 Begues 18 19 2020-04-01 080207 Begues 18 20 2020-04-02 080207 Begues 19 21 2020-04-03 080207 Begues 19 21 2020-04-04 080207 Begues 22 21 2020-04-05 080207 Begues 22 21 2020-04-06 080207 Begues 24 19 2020-04-07 080207 Begues 24 19 2020-04-08 080207 Begues 26 21 2020-04-09 080207 Begues 26 21 2020-04-10 080207 Begues 26 21 2020-04-11 080207 Begues 26 21 2020-04-13 080207 Begues 26 21 2020-04-15 080207 Funzioni e variabili utilizzate: @with_variable relation_aggregate array_to_string array_get array_foreach generate_series translate make_line make_point centroid end_point round \\$geometry","title":"Tracciare un grafico"},{"location":"esempi/tracciare_grafico_generatore_geometrie/#tracciare-un-grafico-usando-solo-il-generatore-di-geometrie-uno-per-ogni-feature","text":"Supponiamo di avere uno shapefile poligonale, le province siciliane, e i relativi dati sul COVID-19 in un file CSV. Tracciare, a partire dal centroide di ogni feature (ogni provincia), una curva che rappresenti l'andamento, nel tempo, del parametro medico presente nel file CSV (in questo caso specifico \u00e8 totale_casi ). Il file CSV \u00e8 cosi strutturato (esempio di due giorni di rilievo) 459 record, 51 giorni di osservazioni: data codice_provincia denominazione_provincia sigla_provincia totale_casi pop_res 2020-02-24T18:00:00.000 084 Agrigento AG 0 434870 2020-02-24T18:00:00.000 085 Caltanissetta CL 0 262458 2020-02-24T18:00:00.000 087 Catania CT 0 1107702 2020-02-24T18:00:00.000 086 Enna EN 0 164788 2020-02-24T18:00:00.000 083 Messina ME 0 626876 2020-02-24T18:00:00.000 082 Palermo PA 0 1252588 2020-02-24T18:00:00.000 088 Ragusa RG 0 320893 2020-02-24T18:00:00.000 089 Siracusa SR 0 399224 2020-02-24T18:00:00.000 081 Trapani TP 0 430492 2020-02-25T18:00:00.000 084 Agrigento AG 0 434870 2020-02-25T18:00:00.000 085 Caltanissetta CL 0 262458 2020-02-25T18:00:00.000 087 Catania CT 0 1107702 2020-02-25T18:00:00.000 086 Enna EN 0 164788 2020-02-25T18:00:00.000 083 Messina ME 0 626876 2020-02-25T18:00:00.000 082 Palermo PA 3 1252588 2020-02-25T18:00:00.000 088 Ragusa RG 0 320893 2020-02-25T18:00:00.000 089 Siracusa SR 0 399224 2020-02-25T18:00:00.000 081 Trapani TP 0 430492 Lo shapefile province ha la tabella attributi cosi strutturata: cod_prov den_prov sigla 81 Trapani TP 82 Palermo PA 83 Messina ME 84 Agrigento AG 85 Caltanissetta CL 86 Enna EN 87 Catania CT 88 Ragusa RG 89 Siracusa SR Creao una relazione di progetto (1:m) tra i due file, utilizzando come campo comune il campo sigla Espressione per traciare la curva: translate( make_line(-- curva relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7 )) ), x(centroid($geometry)),y(centroid($geometry))) L'espressione crea un array di punti geometrici make_point , uno per ogni data ( $id ), successivamente trasformati in linea make_line e traslati translate sui centroidi di ogni provincia. In questa espressione make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7 ) , oltre a normalizzare i dati dividendo per la popolazione residente, uso dei fattori moltiplicativi per l'asse x e y. Per tracciare gli assi cartesiani, che seguono il grafico: ascisse make_line( -- ordinate make_point(x(centroid($geometry)),y(centroid($geometry))), make_point(x(centroid($geometry)), y(end_point( translate( make_line( relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7))), x(centroid($geometry)),y(centroid($geometry)) ) ))) ) ordinate make_line( -- ascisse make_point(x(centroid($geometry)),y(centroid($geometry))), make_point(x(end_point( translate( make_line( relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7))), x(centroid($geometry)),y(centroid($geometry)) ) ) ),y(centroid($geometry)))) Infine, traccio nell'ultimo punto del grafico, il valore normalizzato per 1000 abitati: punto end_point( -- ultimo punto grafico translate( make_line( relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point( $id*50, \"totale_casi\"/\"pop_res\"*2*10^7 ))), x(centroid($geometry)),y(centroid($geometry))) ) etichetta punto round(to_string(relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=\"totale_casi\"/\"pop_res\")[-1])*1000,1) Gif animata realizzata con il plugin TimeManager di Anita Graser","title":"Tracciare un grafico usando solo il generatore di geometrie, uno per ogni feature"},{"location":"esempi/tracciare_grafico_generatore_geometrie/#prova-tu","text":"file CSV : https://raw.githubusercontent.com/pigreco/COVID19_Sicilia/master/risorse/dpc-covid19-ita-province.vrt shapefile : https://github.com/pigreco/COVID19_Sicilia/raw/master/risorse/province.7z Blog post su Pigrecoinfinito : https://pigrecoinfinito.com/2020/04/14/qgis-grafici-geoplot-usando-solo-il-geometry-generator/","title":"Prova tu"},{"location":"esempi/tracciare_grafico_generatore_geometrie/#caso-generico","text":"espressione consigliata with_variable('id_min', relation_aggregate( relation:='rel1',aggregate:='array_agg',expression:= $id)[0], (with_variable('pos_min', relation_aggregate( relation:='rel1',aggregate:='array_agg',expression:=\"positive\")[0], ( translate( make_line(-- curva relation_aggregate( relation:='rel1', aggregate:='array_agg', expression:=make_point(($id - @id_min )*200, (\"positive\" - @pos_min)*2))), x(centroid($geometry)),y(centroid($geometry))) )))) dove: \"positive\" \u00e8 il campo che contiene i dati da tracciare; 200 \u00e8 un fattore di amplificazione dell'asse x (ma dipende dai dati); 2 \u00e8 un fattore di amplificazione dell'asse y (ma dipende dai dati) esempio dati: name negative positive data CODIMUNI Barcelona 5497 4745 2020-03-29 080193 Barcelona 6259 5355 2020-03-30 080193 Barcelona 6580 5599 2020-04-01 080193 Barcelona 7402 6112 2020-04-02 080193 Barcelona 8078 6354 2020-04-03 080193 Barcelona 8156 6416 2020-04-04 080193 Barcelona 8408 6566 2020-04-05 080193 Barcelona 8483 6655 2020-04-06 080193 Barcelona 8961 6873 2020-04-07 080193 Barcelona 8754 6988 2020-04-08 080193 Barcelona 9490 7305 2020-04-09 080193 Barcelona 9619 7363 2020-04-10 080193 Barcelona 9633 7354 2020-04-11 080193 Barcelona 9671 7319 2020-04-13 080193 Barcelona 9774 7225 2020-04-15 080193 Begues 17 15 2020-03-29 080207 Begues 18 19 2020-03-30 080207 Begues 18 19 2020-04-01 080207 Begues 18 20 2020-04-02 080207 Begues 19 21 2020-04-03 080207 Begues 19 21 2020-04-04 080207 Begues 22 21 2020-04-05 080207 Begues 22 21 2020-04-06 080207 Begues 24 19 2020-04-07 080207 Begues 24 19 2020-04-08 080207 Begues 26 21 2020-04-09 080207 Begues 26 21 2020-04-10 080207 Begues 26 21 2020-04-11 080207 Begues 26 21 2020-04-13 080207 Begues 26 21 2020-04-15 080207 Funzioni e variabili utilizzate: @with_variable relation_aggregate array_to_string array_get array_foreach generate_series translate make_line make_point centroid end_point round \\$geometry","title":"caso generico"},{"location":"esempi/tracciare_punti_adistanzaprefissata_lungo_linea/","tags":["linee","punti"],"text":"Tracciare punti a distanza prefissata lungo una linea \u21b5 Come tracciare dei punti su una linea a distanza prefissata a partire dall'origine della linea: tracciare dei punti casuali sulla linea (nome layer: linea ); nella tabella attributi, dei punti casuali , aggiungere un campo distanza e popolere con le distanze desiderate (a partire dallo start_point della linea); aggiornare la geometria dei punti usando il field calc e la seguente espressione: line_interpolate_point( overlay_nearest('linea',$geometry)[0], \"distanza\") video: https://youtu.be/iYPjdYOHSLc Usando algoritmo di processing \u21b5 \u00c8 possibile creare direttamente la geometria punto usando l'algoritmo Geometria con Espressione a partire dal Layer in ingresso il layer lineare, tipo di geometria Punto ed espressione: collect_geometries( array_foreach(array(1000,10000,150000,270000,500000), line_interpolate_point($geometry,@element))) Funzioni e variabili utilizzate: overlay_nearest collect_geometries line_interpolate_point \\$geometry array_foreach array","title":"Tracciare puntia distanza prefissata lungo una linea"},{"location":"esempi/tracciare_punti_adistanzaprefissata_lungo_linea/#tracciare-punti-a-distanza-prefissata-lungo-una-linea","text":"Come tracciare dei punti su una linea a distanza prefissata a partire dall'origine della linea: tracciare dei punti casuali sulla linea (nome layer: linea ); nella tabella attributi, dei punti casuali , aggiungere un campo distanza e popolere con le distanze desiderate (a partire dallo start_point della linea); aggiornare la geometria dei punti usando il field calc e la seguente espressione: line_interpolate_point( overlay_nearest('linea',$geometry)[0], \"distanza\") video: https://youtu.be/iYPjdYOHSLc","title":"Tracciare punti a distanza prefissata lungo una linea"},{"location":"esempi/tracciare_punti_adistanzaprefissata_lungo_linea/#usando-algoritmo-di-processing","text":"\u00c8 possibile creare direttamente la geometria punto usando l'algoritmo Geometria con Espressione a partire dal Layer in ingresso il layer lineare, tipo di geometria Punto ed espressione: collect_geometries( array_foreach(array(1000,10000,150000,270000,500000), line_interpolate_point($geometry,@element))) Funzioni e variabili utilizzate: overlay_nearest collect_geometries line_interpolate_point \\$geometry array_foreach array","title":"Usando algoritmo di processing"},{"location":"esempi/trova_nella_tabella_attributi/","tags":["tabella","attributi","chiave-valore","array","selezionare"],"text":"Trova nella tabella attributi \u21b5 La ricerca di un valore (numero o stringa) avviene sempre all'interno di un campo, ma se volessimo fare una ricerca su tutta la tabella attributi? ecco un trucco: Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: array_find(map_avals (attributes ()),'valore')>=0 dove: 'valore' = 'stringa da cercare tra apici' 'valore' = x numero senza apici esempio \u21b5 id nome cognome eta 1 carlo rossi 25 2 pippo bianchi 50 3 anna bella 25 4 bianchi verde 34 se volessi selezionare le feature che contenessero, non importa in quale campo, il valore 25: array_find(map_avals (attributes ()),25)>=0 selezionerebbe la prima e la terza riga; se invece volessi cercare, la parola bianchi : array_find(map_avals (attributes ()),'bianchi')>=0 otterrei selezionate le righe 2 e 4 Funzioni e variabili utilizzate: array_find map_avals attributes","title":"Trova valore"},{"location":"esempi/trova_nella_tabella_attributi/#trova-nella-tabella-attributi","text":"La ricerca di un valore (numero o stringa) avviene sempre all'interno di un campo, ma se volessimo fare una ricerca su tutta la tabella attributi? ecco un trucco: Usando solo le espressioni di QGIS e Select by Expression , l'espressione da usare \u00e8: array_find(map_avals (attributes ()),'valore')>=0 dove: 'valore' = 'stringa da cercare tra apici' 'valore' = x numero senza apici","title":"Trova nella tabella attributi"},{"location":"esempi/trova_nella_tabella_attributi/#esempio","text":"id nome cognome eta 1 carlo rossi 25 2 pippo bianchi 50 3 anna bella 25 4 bianchi verde 34 se volessi selezionare le feature che contenessero, non importa in quale campo, il valore 25: array_find(map_avals (attributes ()),25)>=0 selezionerebbe la prima e la terza riga; se invece volessi cercare, la parola bianchi : array_find(map_avals (attributes ()),'bianchi')>=0 otterrei selezionate le righe 2 e 4 Funzioni e variabili utilizzate: array_find map_avals attributes","title":"esempio"},{"location":"esempi/unica_etichetta_pi%C3%B9_poligoni/","tags":["etichette","poligoni","x","y","centroidi","punti"],"text":"Etichettare pi\u00f9 poligoni con unica label \u21b5 Etichettare con l'attributo \"COD_REG\" lo strato province italiane ISTAT (QGIS >=3.0) Per poter etichettare pi\u00f9 feature, con una unica label, occorre che nella tabella attributi sia presente un campo con valori ripetuti (nel nostro esempio si ripetono i valori del campo \"COD_REG\" ): Vediamo come realizzare tutto ci\u00f2: Come campo etichetta seleziono \"COD_REG\" e poi dalla scheda Posizionamento sezione Definito dai dati . Nelle Coordinate x e y scrivere la seguente espressione: x (centroid(collect (expression:=$geometry, group_by:=\"COD_REG\" ))) ripetere la stessa cosa per la y: y (centroid(collect (expression:=$geometry, group_by:=\"COD_REG\" ))) Funzioni utilizzate (cercare le funzioni nella guida): x, y : estrae la coordinate x o y dal centroide; centroid: estrai il centroide di una feature; collect: crea unica feature secondo un raggruppamento. Funzioni e variabili utilizzate: x y make_point centroid collect \\$geometry","title":"Unica label"},{"location":"esempi/unica_etichetta_pi%C3%B9_poligoni/#etichettare-piu-poligoni-con-unica-label","text":"Etichettare con l'attributo \"COD_REG\" lo strato province italiane ISTAT (QGIS >=3.0) Per poter etichettare pi\u00f9 feature, con una unica label, occorre che nella tabella attributi sia presente un campo con valori ripetuti (nel nostro esempio si ripetono i valori del campo \"COD_REG\" ): Vediamo come realizzare tutto ci\u00f2: Come campo etichetta seleziono \"COD_REG\" e poi dalla scheda Posizionamento sezione Definito dai dati . Nelle Coordinate x e y scrivere la seguente espressione: x (centroid(collect (expression:=$geometry, group_by:=\"COD_REG\" ))) ripetere la stessa cosa per la y: y (centroid(collect (expression:=$geometry, group_by:=\"COD_REG\" ))) Funzioni utilizzate (cercare le funzioni nella guida): x, y : estrae la coordinate x o y dal centroide; centroid: estrai il centroide di una feature; collect: crea unica feature secondo un raggruppamento. Funzioni e variabili utilizzate: x y make_point centroid collect \\$geometry","title":"Etichettare pi\u00f9 poligoni con unica label"},{"location":"gr_funzioni/da_documentare/","text":"Vuoi documentare una variabile? Ecco quelle ancora non pronte \u21b5 Al momento sono circa 130 elenco variabili \u21b5 Variable Description algorithm_id The unique ID of an algorithm animation_end_time End of the animation\u2019s overall temporal time range (as a datetime value) animation_interval Duration of the animation\u2019s overall temporal time range (as an interval value) animation_start_time Start of the animation\u2019s overall temporal time range (as a datetime value) atlas_feature The current atlas feature (as feature object) atlas_featureid The current atlas feature ID atlas_featurenumber The current atlas feature number in the layout atlas_filename The current atlas file name atlas_geometry The current atlas feature geometry atlas_layerid The current atlas coverage layer ID atlas_layername The current atlas coverage layer name atlas_pagename The current atlas page name atlas_totalfeatures The total number of features in atlas canvas_cursor_point The last cursor position on the canvas in the project\u2019s geographical coordinates cluster_color The color of symbols within a cluster, or NULL if symbols have mixed colors cluster_size The number of symbols contained within a cluster current_feature The feature currently being edited in the attribute form or table row current_geometry The geometry of the feature currently being edited in the form or the table row current_parent_feature represents the feature currently being edited in the parent form. Only usable in an embedded form context. current_parent_geometry represents the geometry of the feature currently being edited in the parent form. Only usable in an embedded form context. form_mode What the form is used for, like AddFeatureMode, SingleEditMode, MultiEditMode, SearchMode, AggregateSearchMode or IdentifyMode as string. frame_duration Temporal duration of each animation frame (as an interval value) frame_number Current frame number during animation playback frame_rate Number of frames per second during animation playback fullextent_maxx Maximum x value from full canvas extent (including all layers) fullextent_maxy Maximum y value from full canvas extent (including all layers) fullextent_minx Minimum x value from full canvas extent (including all layers) fullextent_miny Minimum y value from full canvas extent (including all layers) geometry_part_count The number of parts in rendered feature\u2019s geometry geometry_part_num The current geometry part number for feature being rendered geometry_point_count The number of points in the rendered geometry\u2019s part geometry_point_num The current point number in the rendered geometry\u2019s part geometry_ring_num Current geometry ring number for feature being rendered (for polygon features only). The exterior ring has a value of 0. grid_axis The current grid annotation axis (eg, \u2018x\u2019 for longitude, \u2018y\u2019 for latitude) grid_number The current grid annotation value item_id The layout item user ID (not necessarily unique) item_uuid The layout item unique ID layer The current layer layer_crs The Coordinate Reference System Authority ID of the current layer layer_id The ID of current layer layer_ids The IDs of all the map layers in the current project as a list layer_name The name of current layer layers All the map layers in the current project as a list layout_dpi The composition resolution (DPI) layout_name The layout name layout_numpages The number of pages in the layout layout_page The page number of the current item in the layout layout_pageheight The active page height in the layout (in mm for standard paper sizes, or whatever unit was used for custom paper size) layout_pageoffsets Array of Y coordinate of the top of each page. Allows to dynamically position items on pages in a context where page sizes may change layout_pagewidth The active page width in the layout (in mm for standard paper sizes, or whatever unit was used for custom paper size) legend_column_count The number of columns in the legend legend_filter_by_map Indicates if the content of the legend is filtered by the map legend_filter_out_atlas Indicates if the atlas is filtered out of the legend legend_split_layers Indicates if layers can be split in the legend legend_title The title of the legend legend_wrap_string The character(s) used to wrap the legend text map_crs The Coordinate reference system of the current map map_crs_acronym The acronym of the Coordinate reference system of the current map map_crs_definition The full definition of the Coordinate reference system of the current map map_crs_description The name of the Coordinate reference system of the current map map_crs_ellipsoid The acronym of the ellipsoid of the Coordinate reference system of the current map map_crs_proj4 The Proj4 definition of the Coordinate reference system of the current map map_crs_projection The descriptive name of the projection method used by the Coordinate reference system of the map (e.g. \u2018Albers Equal Area\u2019) map_crs_wkt The WKT definition of the Coordinate reference system of the current map map_end_time The end of the map\u2019s temporal time range (as a datetime value) map_extent The geometry representing the current extent of the map map_extent_center The point feature at the center of the map map_extent_height The current height of the map map_extent_width The current width of the map map_id The ID of current map destination. This will be \u2018canvas\u2019 for canvas renders, and the item ID for layout map renders map_interval The duration of the map\u2019s temporal time range (as an interval value) map_layer_ids The list of map layer IDs visible in the map map_layers The list of map layers visible in the map map_rotation The current rotation of the map map_scale The current scale of the map map_start_time The start of the map\u2019s temporal time range (as a datetime value) map_units The units of map measurements model_path Full path (including file name) of current model (or project path if model is embedded in a project). model_folder Folder containing current model (or project folder if model is embedded in a project). model_name Name of current model model_group Group for current model notification_message Content of the notification message sent by the provider (available only for actions triggered by provider notifications). parent Refers to the current feature in the parent layer, providing access to its attributes and geometry when filtering an aggregate function project_abstract The project abstract, taken from project metadata project_area_units The area unit for the current project, used when calculating areas of geometries project_author The project author, taken from project metadata project_basename The basename of current project\u2019s filename (without path and extension) project_creation_date The project creation date, taken from project metadata project_crs The Coordinate reference system of the project project_crs_arconym The acronym of the Coordinate reference system of the project project_crs_definition The full definition of the Coordinate reference system of the project project_crs_description The description of the Coordinate reference system of the project project_crs_ellipsoid The ellipsoid of the Coordinate reference system of the project project_crs_proj4 The Proj4 representation of the Coordinate reference system of the project project_crs_wkt The WKT (well known text) representation of the coordinate reference system of the project project_distance_units The distance unit for the current project, used when calculating lengths of geometries and distances project_ellipsoid The name of the ellipsoid of the current project, used when calculating geodetic areas or lengths of geometries project_filename The filename of the current project project_folder The folder of the current project project_home The home path of the current project project_identifier The project identifier, taken from the project\u2019s metadata project_keywords The project keywords, taken from the project\u2019s metadata project_last_saved Date/time when project was last saved. project_path The full path (including file name) of the current project project_title The title of current project project_units The units of the project\u2019s CRS qgis_locale The current language of QGIS qgis_os_name The current Operating system name, eg \u2018windows\u2019, \u2018linux\u2019 or \u2018osx\u2019 qgis_platform The QGIS platform, eg \u2018desktop\u2019 or \u2018server\u2019 qgis_release_name The current QGIS release name qgis_short_version The current QGIS version short string qgis_version The current QGIS version string qgis_version_no The current QGIS version number row_number Stores the number of the current row snapping_results Gives access to snapping results while digitizing a feature (only available in add feature) scale_value The current scale bar distance value symbol_angle The angle of the symbol used to render the feature (valid for marker symbols only) symbol_color The color of the symbol used to render the feature symbol_count The number of features represented by the symbol (in the layout legend) symbol_id The Internal ID of the symbol (in the layout legend) symbol_label The label for the symbol (either a user defined label or the default autogenerated label - in the layout legend) symbol_layer_count Total number of symbol layers in the symbol symbol_layer_index Current symbol layer index symbol_marker_column Column number for marker (valid for point pattern fills only). symbol_marker_row Row number for marker (valid for point pattern fills only). user_account_name The current user\u2019s operating system account name user_full_name The current user\u2019s operating system user name value The current value with_variable Allows setting a variable for usage within an expression and avoid recalculating the same value repeatedly zoom_level Zoom level of the tile that is being rendered (derived from the current map scale). Normally in interval [0, 20]. come sostenere \u21b5","title":"Da documentare"},{"location":"gr_funzioni/da_documentare/#vuoi-documentare-una-variabile-ecco-quelle-ancora-non-pronte","text":"Al momento sono circa 130","title":"Vuoi documentare una variabile? Ecco quelle ancora non pronte"},{"location":"gr_funzioni/da_documentare/#elenco-variabili","text":"Variable Description algorithm_id The unique ID of an algorithm animation_end_time End of the animation\u2019s overall temporal time range (as a datetime value) animation_interval Duration of the animation\u2019s overall temporal time range (as an interval value) animation_start_time Start of the animation\u2019s overall temporal time range (as a datetime value) atlas_feature The current atlas feature (as feature object) atlas_featureid The current atlas feature ID atlas_featurenumber The current atlas feature number in the layout atlas_filename The current atlas file name atlas_geometry The current atlas feature geometry atlas_layerid The current atlas coverage layer ID atlas_layername The current atlas coverage layer name atlas_pagename The current atlas page name atlas_totalfeatures The total number of features in atlas canvas_cursor_point The last cursor position on the canvas in the project\u2019s geographical coordinates cluster_color The color of symbols within a cluster, or NULL if symbols have mixed colors cluster_size The number of symbols contained within a cluster current_feature The feature currently being edited in the attribute form or table row current_geometry The geometry of the feature currently being edited in the form or the table row current_parent_feature represents the feature currently being edited in the parent form. Only usable in an embedded form context. current_parent_geometry represents the geometry of the feature currently being edited in the parent form. Only usable in an embedded form context. form_mode What the form is used for, like AddFeatureMode, SingleEditMode, MultiEditMode, SearchMode, AggregateSearchMode or IdentifyMode as string. frame_duration Temporal duration of each animation frame (as an interval value) frame_number Current frame number during animation playback frame_rate Number of frames per second during animation playback fullextent_maxx Maximum x value from full canvas extent (including all layers) fullextent_maxy Maximum y value from full canvas extent (including all layers) fullextent_minx Minimum x value from full canvas extent (including all layers) fullextent_miny Minimum y value from full canvas extent (including all layers) geometry_part_count The number of parts in rendered feature\u2019s geometry geometry_part_num The current geometry part number for feature being rendered geometry_point_count The number of points in the rendered geometry\u2019s part geometry_point_num The current point number in the rendered geometry\u2019s part geometry_ring_num Current geometry ring number for feature being rendered (for polygon features only). The exterior ring has a value of 0. grid_axis The current grid annotation axis (eg, \u2018x\u2019 for longitude, \u2018y\u2019 for latitude) grid_number The current grid annotation value item_id The layout item user ID (not necessarily unique) item_uuid The layout item unique ID layer The current layer layer_crs The Coordinate Reference System Authority ID of the current layer layer_id The ID of current layer layer_ids The IDs of all the map layers in the current project as a list layer_name The name of current layer layers All the map layers in the current project as a list layout_dpi The composition resolution (DPI) layout_name The layout name layout_numpages The number of pages in the layout layout_page The page number of the current item in the layout layout_pageheight The active page height in the layout (in mm for standard paper sizes, or whatever unit was used for custom paper size) layout_pageoffsets Array of Y coordinate of the top of each page. Allows to dynamically position items on pages in a context where page sizes may change layout_pagewidth The active page width in the layout (in mm for standard paper sizes, or whatever unit was used for custom paper size) legend_column_count The number of columns in the legend legend_filter_by_map Indicates if the content of the legend is filtered by the map legend_filter_out_atlas Indicates if the atlas is filtered out of the legend legend_split_layers Indicates if layers can be split in the legend legend_title The title of the legend legend_wrap_string The character(s) used to wrap the legend text map_crs The Coordinate reference system of the current map map_crs_acronym The acronym of the Coordinate reference system of the current map map_crs_definition The full definition of the Coordinate reference system of the current map map_crs_description The name of the Coordinate reference system of the current map map_crs_ellipsoid The acronym of the ellipsoid of the Coordinate reference system of the current map map_crs_proj4 The Proj4 definition of the Coordinate reference system of the current map map_crs_projection The descriptive name of the projection method used by the Coordinate reference system of the map (e.g. \u2018Albers Equal Area\u2019) map_crs_wkt The WKT definition of the Coordinate reference system of the current map map_end_time The end of the map\u2019s temporal time range (as a datetime value) map_extent The geometry representing the current extent of the map map_extent_center The point feature at the center of the map map_extent_height The current height of the map map_extent_width The current width of the map map_id The ID of current map destination. This will be \u2018canvas\u2019 for canvas renders, and the item ID for layout map renders map_interval The duration of the map\u2019s temporal time range (as an interval value) map_layer_ids The list of map layer IDs visible in the map map_layers The list of map layers visible in the map map_rotation The current rotation of the map map_scale The current scale of the map map_start_time The start of the map\u2019s temporal time range (as a datetime value) map_units The units of map measurements model_path Full path (including file name) of current model (or project path if model is embedded in a project). model_folder Folder containing current model (or project folder if model is embedded in a project). model_name Name of current model model_group Group for current model notification_message Content of the notification message sent by the provider (available only for actions triggered by provider notifications). parent Refers to the current feature in the parent layer, providing access to its attributes and geometry when filtering an aggregate function project_abstract The project abstract, taken from project metadata project_area_units The area unit for the current project, used when calculating areas of geometries project_author The project author, taken from project metadata project_basename The basename of current project\u2019s filename (without path and extension) project_creation_date The project creation date, taken from project metadata project_crs The Coordinate reference system of the project project_crs_arconym The acronym of the Coordinate reference system of the project project_crs_definition The full definition of the Coordinate reference system of the project project_crs_description The description of the Coordinate reference system of the project project_crs_ellipsoid The ellipsoid of the Coordinate reference system of the project project_crs_proj4 The Proj4 representation of the Coordinate reference system of the project project_crs_wkt The WKT (well known text) representation of the coordinate reference system of the project project_distance_units The distance unit for the current project, used when calculating lengths of geometries and distances project_ellipsoid The name of the ellipsoid of the current project, used when calculating geodetic areas or lengths of geometries project_filename The filename of the current project project_folder The folder of the current project project_home The home path of the current project project_identifier The project identifier, taken from the project\u2019s metadata project_keywords The project keywords, taken from the project\u2019s metadata project_last_saved Date/time when project was last saved. project_path The full path (including file name) of the current project project_title The title of current project project_units The units of the project\u2019s CRS qgis_locale The current language of QGIS qgis_os_name The current Operating system name, eg \u2018windows\u2019, \u2018linux\u2019 or \u2018osx\u2019 qgis_platform The QGIS platform, eg \u2018desktop\u2019 or \u2018server\u2019 qgis_release_name The current QGIS release name qgis_short_version The current QGIS version short string qgis_version The current QGIS version string qgis_version_no The current QGIS version number row_number Stores the number of the current row snapping_results Gives access to snapping results while digitizing a feature (only available in add feature) scale_value The current scale bar distance value symbol_angle The angle of the symbol used to render the feature (valid for marker symbols only) symbol_color The color of the symbol used to render the feature symbol_count The number of features represented by the symbol (in the layout legend) symbol_id The Internal ID of the symbol (in the layout legend) symbol_label The label for the symbol (either a user defined label or the default autogenerated label - in the layout legend) symbol_layer_count Total number of symbol layers in the symbol symbol_layer_index Current symbol layer index symbol_marker_column Column number for marker (valid for point pattern fills only). symbol_marker_row Row number for marker (valid for point pattern fills only). user_account_name The current user\u2019s operating system account name user_full_name The current user\u2019s operating system user name value The current value with_variable Allows setting a variable for usage within an expression and avoid recalculating the same value repeatedly zoom_level Zoom level of the tile that is being rendered (derived from the current map scale). Normally in interval [0, 20].","title":"elenco variabili"},{"location":"gr_funzioni/da_documentare/#come-sostenere","text":"","title":"come sostenere"},{"location":"gr_funzioni/gruppo_funzioni/","text":"Gruppi funzioni \u21b5 Nell'Interfaccia del Field Calc (e nel costruttore di espressione) \u00e8 presente, nella parte centrale, una sezione che raccoglie i Gruppi delle Funzioni elencate sotto: Gruppo funzioni nro funzioni* Descrizione info Aggrega (23/23) Contiene funzioni che aggregano valori nei livelli e campi. aggiornate a QGIS 3.0 Array (36/36) Questo gruppo contiene funzioni espressione per la creazione e la manipolazione di array (noti anche come strutture dati ad elenco). L'ordine dei valori all'interno dell'array \u00e8 importante, al contrario della struttura dati 'a mappa', in cui l'ordine delle coppie chiave-valore \u00e8 irrilevante e i valori vengono identificati dalle loro chiavi. aggiornate a QGIS 3.28 Campi e valori (1/1) Contiene un elenco di campi del layer. Si possono ottenere valori campione con il click del tasto destro del mouse. Seleziona il nome del campo dall'elenco e fai click con il tasto destro per aprire il men\u00f9 con le opzioni per caricare un campione di valori dal campo selezionato. Elenco dei campi del layer selezionato QGIS 3.28 Colore (17/17) Questo gruppo contiene funzioni per manipolare i colori Per manipolare i colori Condizioni (6/6) Questo gruppo contiene funzioni per gestire controlli condizionali nelle espressioni. aggiornate a QGIS 3.6 Conversioni (15/15) Questo gruppo contiene funzioni per convertire i dati da un tipo ad un altro, es. da stringa a intero, da intero a stringa. aggiornate a QGIS 3.16 Corrispondenza Fuzzy (4/4) Questo gruppo contiene funzioni per confronti fuzzy fra valori. funzioni per confronti fuzzy fra valori Custom (16/16) Questo gruppo contiene funzioni Python create in modo personalizzato dall'utente. funzioni personalizzate Data ora (21/21) Questo gruppo contiene funzioni per gestire dati con date e ore. aggiornate a QGIS 3.14 Espressioni utente (?) Questo gruppo contiene espressioni memorizzate nel profilo utente. aggiornate a QGIS 3.12 File e percorsi (9/9) Contiene funzioni che manipolano nomi di file e di percorsi. manipolano nomi di file e di percorsi aggiornate a QGIS 3.22 Form (0/2) Questo gruppo contiene funzioni che sono disponibili nel contesto modulo attributi. Per esempio, in impostazioni campo widget. Gruppo visibile solo nei widget. aggiornate a QGIS 3.14 Generale (7/7) Questo gruppo contiene funzioni generali assortite. assortimento di funzioni generiche Geometria (146/146) Questo gruppo contiene funzioni che operano sugli oggetti geometrici es. lunghezza, area. aggiornate a QGIS 3.28 Layer mappa (2/2) Contiene due funzioni e la lista dei layer della mappa che sono disponibili nel progetto corrente con possibilit\u00e0 di leggere 1 i nomi e valori degli attributi. aggiornate a QGIS 3.24 Layout (2/2) Visibile solo nel layout di stampa Maps (14/14) Questo gruppo contiene funzioni per la creazione e la manipolazione di strutture di dati 'a mappa' (noti anche come oggetti dizionario, coppie chiave-valore o array associative). Si possono assegnare valori a determinate chiavi. L'ordine delle coppie chiave-valore nell'oggetto mappa non \u00e8 rilevante. >= QGIS 3.0 aggiornate a QGIS 3.24 Matematica (28/28) Questo gruppo contiene funzioni matematiche es. radice quadrata, seno e coseno aggiornate a QGIS 3.12 Operatori (23/23) Questo gruppo contiene operatori es. + - * aggiornate a QGIS 3.20 Raster (2/2) Contiene funzioni che calcolano statistiche e valori raster. >= QGIS 3.4 Recente (1/1) Elenca le ultime 20 espressioni utilizzate Record e attributi (14/14) Questo gruppo contiene funzioni che operano sugli identificativi dei record. aggiornate a QGIS 3.24 Relazioni (?) Visibile solo se ci sono relazioni di progetto Stringhe di testo (23/23) Questo gruppo contiene le funzioni che operano sulle stringhe es. sostituzione, conversione in maiuscolo. aggiornate a QGIS 3.14 Variabili (4/65+) Questo gruppo contiene variabili dinamiche che possono essere inserite nelle tue espressioni. >= QGIS 2.12 - variano in funzione del contesto conteggio: https://gist.github.com/pigreco/2b2ad2eb12d17c4370b09635ae1470b4 * i numeri tra parentesi rappresentano: (numero funzioni documentate/numero funzioni nel gruppo) espressione e tag \u21b5 I tag sono utili per la ricerca delle espressioni: funzioni tags $geometry current, processing, functions $id row, current $length distance, planimetric, length, perimeter, current, linestring, project, settings, ellipsoid, border, setting, calculated $map layout, item, drawn, current, main, print, map, window, overview, canvas $page layout, print, page, current $perimeter distance, planimetric, length, perimeter, current, polygon, project, settings, ellipsoid, setting, calculated $rownum row, number, current $scale denominator, contexts, current, scale, canvas, map $vertex_as_point point, mesh, vertex, current $vertex_index index, mesh, vertex, current $vertex_x coordinate, mesh, vertex, current $vertex_y coordinate, mesh, vertex, current $vertex_z mesh, vertex, current $x first, point, coordinate, current, multipoint $x_at current, retrieves, feature, coordinate $y first, point, coordinate, current, multipoint $y_at current, retrieves, feature, coordinate $z first, point, current, multipoint, altitude, 3D % division, remainder * multiplication, values + addition, null, result, values - subtraction, null, result, values / division, values < left, evaluates, compares, less, values, right <= compares, equal, less, values, left, evaluates, right <> compares, evaluates, values, equal = compares, evaluates, values, equal AND condition CASE casewhen, clause, series, met, first, corresponding, end, none, evaluated, components, conditions, optional, marks, return, evaluation, else, case, evaluate, result, stops, condition, set ILIKE compare, numbers, insensitive, first, match, sensitive, supplied, parameter, case, matches, pattern IN list, contained, found IS compare, same, equal, identical IS NOT compare, same, different LIKE compare, sensitive, numbers, first, works, supplied, parameter, matches, pattern Meshes calculate, functions, return, mesh, related, contains NOT negates, condition NULL equates, null OR condition [] array, operator, element, map, index > greater, compares, evaluates, left, values, right >= compares, equal, values, greater, left, evaluates, right ^ power, values abs absolute acos angle, cosine, inverse, radians affine_transform affine, coordinate, operations, spatial, transformation, reference, offset, system, calculations, translation, rotation, order, added, present, scale age difference, needs, datetimes, order, extract, information, following, interval, dates, functions, yearmonthweekdayhourminutesecond aggregate aggregate, combine, features, calculated, merge, concatenate, sum, mean, median, count, quartile, minimum, maximum, minority, majority, standard, deviation, length, unique angle_at_vertex angles, specified, clockwise, angle, linestring, degrees, bisector, north, average, vertex apply_dash_pattern dash, stroked, multilinestring, input, ring, specified, applies, line, pattern, returning area planimetric, polygon, spatial, reference, system, calculations, area, project, settings, surface, ellipsoid, units array list, array, parameter, containing array_agg array, field, aggregated array_all array, contains, compare, search array_append array, added, end array_cat concatenated, arrays, containing array_distinct array, containing, distinct array_filter array, items, limit, evaluates array_find array, found, first, lowest, index array_first array, first array_foreach evaluated, array, iterate, item array_get array, position, index, last, nth, one, first array_insert array, added, position array_intersect array, element, exists, intersection, overlap array_last array, last array_length elements, array, count array_majority common, array, median array_max array, maximum array_mean array, ignored, mean, numeric, arithmetic array_median array, arithmetic, median, ignored array_min array, minimum array_minority common, array, median array_prepend array, added, beginning array_prioritize sorted, array, first, specified, missing, second, ordering, added, present, result, end array_remove_all array, entries, removed array_remove_at array, removed, index array_replace array, map, replaced, supplied array_reverse array, reversed, order array_slice array, defined, arguments, start, position, slice, portion, end, index array_sort sorted, array, elements, provided array_sum array, ignored, numeric, arithmetic, sum array_to_string concatenates, delimiter, join, aggregate ascii code, first, associated, character, unicode asin sine, inverse, angle, radians atan tangent, inverse, angle, radians atan2 tangent, arguments, signs, angle, inverse, quadrant attribute attribute attributes attributes, names, field, keys, containing, map azimuth measured, clockwise, points, angle, vertical, north, azimuth, radians base_file_name suffix, base, directory, name, file, folder, path boundary polygon, linestrings, instance, combinatorial, topological, points, collections, types, ring, boundary, closure bounds box, input, spatial, reference, calculations, system, represents, bounding bounds_height box, spatial, reference, calculations, system, height, bounding bounds_width width, box, spatial, reference, calculations, system, bounding buffer distance, equal, spatial, reference, calculations, system, points, segments, miter, join, cap, round buffer_by_m line, according, values, varies, vertices, buffer, diameter ceil rounds, number centroid geometric, center char associated, character, unicode, code clamp specified, restricts, input, range close_line first, point, closed, end, input, appending, result, line, multi closest_point closest, point, nearest coalesce list, first, arguments, null collect aggregated, multipart collect_geometries part, set, collects, object, multi color_cmyk cyan, color, black, yellow, representation, components color_cmyka cyan, alpha, color, black, yellow, representation, components color_grayscale_average filter, color, provided, applies, grayscale, representation color_hsl attributes, lightness, color, hue, representation, saturation color_hsla attributes, alpha, lightness, color, transparency, hue, representation, saturation color_hsv attributes, color, hue, representation, saturation color_hsva attributes, alpha, color, transparency, hue, representation, saturation color_mix_rgb green, blue, red, alpha, mixing, color, colors, provided, ratio color_part red, specific, color, component, alpha color_rgb green, blue, red, color, representation, components color_rgba green, blue, red, alpha, color, representation, components combine combination, union concat empty, converted, numbers, concatenates, null, strings, several, other, values concatenate aggregated, field, joined, delimiter, strings concatenate_unique aggregated, unique, field, joined, delimiter, strings contains lie, point, lies, tests, interior, exterior, within, points, contains convex_hull hull, convex, minimum, represents, encloses, set cos angle, cosine count aggregate, features, matching, count count_distinct aggregate, distinct, count count_missing aggregate, missing, count create_ramp map, gradient, steps, strings, ramp, color crosses common, supplied, crosses, tests, interior, points current_parent_value field, actual, unsaved, wrapped, retrieve, widget, current, relation, differ, edited, embedded, coalesce, attribute, form, filter, added, features, parent, context, usable current_value table, field, actual, unsaved, current, differ, edited, row, attribute, form, added, features darker darker, color, lighter datetime_from_epoch passed, datetime, localtime, msecs, date, coordinated, converted, universal, milliseconds, time day date, extracts, interval, days, number, day day_of_week week, day, specified, datetime, corresponds, ranges, date, saturday decode_uri depends, layer, data, dataprovider, provider, uri, underlying, decodes, available degrees converts, degrees, radians densify_by_count generates, layer, line, number, one, new, polygon, vertices, larger, original densify_by_distance maximum, edges, additional, generates, line, densified, adding, new, polygon, interval, layer, one, distance, vertices, specified difference part, represents, intersect, clip disjoint share, intersect, tests, space display_expression evaluated, arguments, details, display, default distance projected, reference, spatial, minimum, units distance_to_vertex distance, specified, vertex end_point last, node, vertex env operating, content, prefixes, gets, definition, found, drive, check, system, environment, path, variables, letters, inject, specific, configuration, depends, administrator, variable, documentation, handy, set epoch interval, date, milliseconds, epoch eval dynamic, fields, parameters, expression, expand, context, passed, variables, evaluates eval_template dynamic, fields, parameters, template, expand, context, passed, variables, evaluates exif exif, retrieves, tag, file, image, values exif_geotag geotags, exif, point, file, image exp exponential extend start, distances, line, last, linestring, amount, parts, bearing, lines, extends, reference, spatial, extended, first, segment, system, multilinestring, specified, end exterior_ring polygon, line, ring, exterior, result, representing extrude curve, version, extension, input, specified, extruded, linestring, multi file_exists path, exists, file file_name extension, name, directory, file, path file_path path, directory, name, folder, file file_size size, file, bytes file_suffix extension, path, suffix, file flip_coordinates latitude, longitude, reversed, swapped, coordinates, repairing, copy floor downwards, rounds, number force_polygon_ccw exterior, clockwise, respect, convention, rings, counter, interior, forces force_polygon_cw exterior, clockwise, respect, convention, rings, interior, counter, forces force_rhr contexts, clockwise, boundary, interior, rings, bounded, force_polygon_cw, explicit, polygon, area, exterior, inconsistency, right, use, hand, particular, respect, counter, forces, ring, recommended, oriented, direction, rule, definition format format, supplied, arguments format_date custom, type, uses, format, strings, time, date, formats, see, qdatetime, tostring format_number formatted, truncates, places, separator, decimal, default, thousands, locale, language from_base64 encoding, base, binary, decodes from_json json, loads, formatted generate_series sequence, containing, numbers, array geom_from_gml representation, conversion geom_from_wkb created, wkb, binary, known, representation, conversion geom_from_wkt text, known, wkt, representation, conversion geom_to_wkb wkb, binary, representation, known, conversion geom_to_wkt text, wkt, srid, representation, known, conversion geometry geometry_n part, input, multipart, collection, specific geometry_type describing, type, point, polygon, line get_feature attribute, first, matching, search, find get_feature_by_id hamming_distance distance, length, input, sensitive, different, strings, corresponding, hamming, equates, characters, case, same, comparison, positions hash hex, bytes, byte, digits, hash, method, given, represented, character, long, bits, produces hausdorff_distance distance, segment, dissimilar, densify, linestrings, parallel, other, matching, total, close, executed, specifying, occurs, equal, fraction, testing, method, discrete, linear, default, approximate, sets, length, large, lower, similar, similarity, parameter, measure, split, make, approach, closest, examples, provided, performs, insufficient, networks, specify, optional, decreasing, approximation, cases, densification, specified, computing, argument, subsegments, hausdorff, exact, indicating, subset, standard hour extracts, number, time, part, interval, hours, hour, datetime hstore_to_map formatted, hstore, map if tests, different, check, result, conditional, depending, condition inclination zenith, nadir, inclination, measured, points interior_ring_n interior, polygon, hole, ring intersection shared, represents, portion, overlap intersects share, space, intersects, tests, intersect, portion, overlaps intersects_bbox box, tests, overlaps, defined, intersect, bounding iqr field, quartile, range, inter, calculated, statistics, aggregates is_closed points, start, closed, end, coincident, result, false, line is_directory path, directory, folder is_empty empty, is_empty_or_null, see, coordinates, false is_empty_or_null empty, is_empty, coordinates, false is_file path, file is_layer_visible specified, visible is_multipart type, multi is_selected selected, arguments, details is_valid rules, valid, ogc, according, formed item_variables layout, item, variables, print, map layer_property property, matching, metadata left first, substring, leftmost, characters, contains, extracts length distance, linestring, length, count, characters, planimetric length3D planimetric, distance, length, spatial, reference, system, calculations, calculates, line, project, differs, object, match, settings, ellipsoid, units levenshtein distance, required, edit, indicate, sensitive, similarity, insertions, similar, mean, measure, different, character, change, substitutions, strings, edits, distances, larger, deletions, equates, case, minimum, levenshtein, smaller lighter darker, color, lighter line_interpolate_angle distance, angles, parallel, specified, clockwise, angle, linestring, degrees, north line_interpolate_point distance, interpolated, linestring, point, specified, along line_locate_point distance, point, specified, closest, linestring, position, corresponding, along line_merge passed, single, return, input, linestrings, merged, connected, linestring, multilinestring line_substring curve, start, specified, measured, falls, existing, interpolated, beginning, distances, line, end, portion ln natural, logarithm log base, logarithm log10 base, logarithm longest_common_substring longest, common, input, sensitive, case, substring, strings lower converts, letters, lower, case lpad length, padded, width, truncated, specified, target, fill, left, character, smaller m point, measure m_max maximum, measure m_min minimum, measure main_angle oriented, minimal, covers, clockwise, angle, long, north, degrees, rectangle, axis, bounding majority occurring, field, majority, aggregate make_circle circular, polygon make_date year, date, month, numbers, day make_datetime minute, month, numbers, day, year, second, hour, datetime make_ellipse polygon, elliptical make_interval minute, seconds, month, year, weeks, values, interval, hours, days make_line point, line, series make_point optional, point make_point_m point, coordinate make_polygon outer, ring, series, inner, optional, polygon make_rectangle_3points rectangle, points make_regular_polygon polygon, regular make_square square, diagonal make_time minute, hour, second, numbers, time make_triangle triangle, polygon map passed, keys, pair, containing, parameters, map map_akeys array, map, keys map_avals array, map map_concat containing, key, concatenate, contain, entries, maps, map map_credits list, rights, layers, layout, item, usage, credit, strings, map map_delete deleted, corresponding, map, key map_exist map, exists, key map_get map, exists, key map_insert map, added, exists, key, overridden map_prefix_keys prefixed, keys, map map_to_hstore formatted, hstore, elements, map, merge maptip evaluated, arguments, maptip, details, default, see max longest, biggest, most, largest, maximum max_length length, maximum, strings, characters, count, aggregate maximum maximum, aggregate md5 hash mean average, aggregate, mean median median, aggregate mime_type type, data, binary min least, smallest, minimum min_length length, characters, count, minimum, strings minimal_circle enclosing, minimal, minimum, represents, encloses, circle, smallest minimum minimum, aggregate minority least, occurring, field, minority, aggregate minute minutes, extracts, part, interval, number, time, datetime month date, extracts, months, part, interval, month, number nodes_to_points vertex, multipoint, node, input now static, evaluating, current, date, time nullif substitute, equals, condition, compare num_geometries collection, multipart, parts, count num_interior_rings rings, holes, count, polygon, collection, interior num_points vertices num_rings rings, holes, polygon, collection, exterior, including num_selected evaluated, selected, works, default, features offset_curve spatial, offsetting, reference, system, linestring, formed, distances, side order_parts criteria, multigeometry, orders, parts, given oriented_bbox oriented, box, minimal, represents, bounding overlaps share, tests, contained, overlaps, same, dimension, space overlay_contains least, predicate, current, contained, target, contains, array, geos, st_contains, postgis, described, underlying, features overlay_crosses predicate, st_crosses, crosses, current, target, array, geos, described, underlying, features, crossed overlay_disjoint predicate, st_disjoint, disjoint, current, target, array, geos, described, underlying, features overlay_equals predicate, current, equals, equal, target, array, geos, st_equals, described, underlying, features overlay_intersects intersected, least, predicate, current, target, array, geos, postgis, described, st_intersects, intersects, underlying, features overlay_nearest distance, layers, large, slow, current, target, array, lot, features overlay_touches least, predicate, touches, current, target, array, geos, described, underlying, touched, st_touches, features overlay_within predicate, current, contain, target, array, geos, described, underlying, features parameter algorithm, parameter, processing perimeter planimetric, distance, polygon, perimeter, spatial, reference, system, calculations, project, differs, object, match, settings, ellipsoid, units pi calculations, pi point_n specific, node, vertex point_on_surface point, surface, lie, centroid, overlay pole_of_inaccessibility inaccessibility, precise, tolerances, calculates, guaranteed, boundary, require, point, true, iterations, internal, uses, approximate, approach, polylabel, find, distant, calculate, pole, take, surface, specified, tolerance, iterative project distance, elevation, projected, start, point, azimuth, radians, bearing project_color scheme, project, color q1 field, quartile, first, calculated q3 third, field, quartile, calculated radians converts, degrees, radians ramp_color ramp, color, representing rand random, inclusive, specified, range, argument, seed, same, provided, minimum, maximum, integer, depending randf random, specified, range, argument, seed, same, provided, float, minimum, maximum, inclusive, depending range field, range, aggregate, minimum, maximum raster_statistic raster, statistics raster_value provided, point, raster, found regexp_match return, found, matching, unicode, regular, position, substring, first regexp_matches array, groups, capturing, captured, order, appear, supplied, regular, strings regexp_replace regular, supplied, replaced regexp_substr regular, matches, supplied, portion relate dimensional, relationship, extended, intersection, representation, model, tests relation_aggregate child, matching, aggregate, features, relation replace array, map, strings, supplied, replaced represent_attributes attributes, keys, arguments, representation, map, see, attribute, configured, names, type, details, depends, widget represent_value depends, configured, field, type, widgets, map, representation, widget reverse direction, order, vertices, reverses, line, reversing right last, substring, rightmost, characters, contains rotate version, spatial, reference, calculations, rotated, system round rounds, places, decimal, number roundness polygon, perfect, flat, close, shape, calculates, circle rpad length, right, padded, width, specified, truncated, target, fill, character, smaller scale version, scaled, spatial, reference, calculations, system scale_exp exponential, curve, ease, transforms, output, given, input, domain, range, specified, values scale_linear transforms, linear, output, given, input, domain, range, interpolation second extracts, part, seconds, interval, number, time, datetime segments_to_lines consisting, segment, input, multi, line set_color_part alpha, component, specific, red, color, sets sha256 hash shortest_line start, resultant, joining, end, shortest, line simplify straight, large, deviations, nodes, algorithm, reduces, simplifies, segments, number, threshold, distance, removing, vertices, based, preserves simplify_vw spikes, areas, straight, nodes, algorithm, area, simplifies, removes, narrow, segments, visvalingam, threshold, create, vertices, removing, based, small sin sine, angle single_sided_buffer buffering, spatial, reference, system, linestring, formed, distances, side sinuosity curve, distance, length, endpoints, sinuosity, ratio, straight smooth adding, corners, smoothed, dimensionality, round, output, contain, input, retain, extra, smooths, nodes, values, same soundex code, represented, similar, matching, algorithm, soundex, same, phonetic, representation, strings, sounds sqlite_fetch_and_increment attributes, children, applied, uncommitted, works, relations, prefetched, intended, creating, several, auto_increment, form, databases, transaction, parents, filter_value, mode, open, primary, evaluate, sidenote, add, require, impossible, default_values, table, insert, nice, formats, current, adding, get, target, work, specified, usage, columns, retrieved, autoincrementing, new, limitation, gpkg, parallel, database, additional, makes, postgres, modifies, sequence, cached, manage, key, same, id_field, acquire, filtered, default, filter_attribute, parent, option, unsafe, sqlite, separate, parameter, map, row, configurations, lifetime, processes, incremented, able, features, purpose sqrt root, square square_wave waves, rectangular, constructs, square, boundary square_wave_randomized waves, rectangular, constructs, square, boundary, randomized start_point first, node stdev deviation, field, standard, aggregate straight_distance_2d distance, curve, circularstring, first, last, direct, euclidean, linestring, vertex string_to_array split, convert, separate, delimiter, divides strpos substring, position, return, found, first, matching substr part sum field, summed, aggregate sym_difference portions, represents, intersect tan angle, tangent tapered_buffer varies, buffer, line, diameter, length title letter, words, lower, converts, leading, capital, title, case to_base64 encoding, base, binary, encodes to_date provided, additional, user, format_date, parse, qdate, converts, default, current, format, object, fromstring, date, optional, documentation, see to_datetime provided, additional, user, format_date, parse, qdate, converts, default, datetime, current, format, object, fromstring, optional, documentation, qtime, see to_decimal converts, minute, degree, equivalent, second, coordinate, decimal to_dm converts, minute, degree, coordinate to_dms converts, minute, degree, second, coordinate to_int converts, invalid, converted, integer to_interval type, month, converts, date, interval, take, hours, days to_json formatted, json, array, create, other, map to_real converts, precision, invalid, rounded, numbers, changes, real, result, converted, saving, conversion, smaller to_string converts, number to_time provided, additional, format, object, parse, time, converts, fromstring, optional, documentation, qtime, see touches point, common, touches, interiors, tests, intersect transform crs, source, transformed, destination, reprojection translate spatial, reference, calculations, system, translated, displace, move triangular_wave waves, boundary, constructs, triangular triangular_wave_randomized waves, boundary, constructs, randomized, triangular trim removes, leading, whitespace, spaces, tabs, trailing try return, tries, error, alternative, provided, exception union union, dissolve, point, represents, set upper converts, upper, letters, case url_encode encoded, producing, form, characters, query, plus, url, compliant, converted, map, sign, transforms uuid createuuid, generates, method, unique, quuid, identifier, row var stored, variable, specified wave waves, rounded, sine, boundary, constructs wave_randomized waves, sine, boundary, curved, constructs, randomized wedge_buffer buffer, wedge, point, originating, shaped week weeks, week, date, extracts, interval, number with_variable variable, argument, value, evaluation within tests, contains, completely wordwrap maximum, minimum, wrapped, characters, multiline x centroid, point, coordinate x_max coordinate, spatial, reference, calculations, system, maximum x_min coordinate, spatial, reference, calculations, system, minimum y centroid, point, coordinate y_max coordinate, spatial, reference, calculations, system, maximum y_min coordinate, spatial, reference, calculations, system, minimum year year, years, date, extracts, part, interval, number z point, coordinate z_max coordinate, maximum z_min coordinate, minimum || behavior, different, see, concat, null, joins, result, values ~ white, space, regular, performs, backslash, characters, escaped, character, expression, match tag e espressioni \u21b5 tag espressioni geometry, get_feature_by_id absolute abs adding smooth, sqlite_fetch_and_increment, densify_by_distance corners smooth smoothed smooth dimensionality smooth round smooth, buffer output smooth, scale_exp, scale_linear contain smooth, map_concat, overlay_within input smooth, bounds, segments_to_lines, extrude, apply_dash_pattern, hamming_distance, scale_exp, close_line, longest_common_substring, geometry_n, line_merge, clamp, scale_linear, nodes_to_points retain smooth extra smooth smooths smooth nodes smooth, simplify_vw, simplify values smooth, +, same smooth, sqlite_fetch_and_increment, soundex, IS NOT, IS, hamming_distance, rand, randf, overlaps addition + null +, result +, affine affine_transform coordinate affine_transform, x, y, to_dm, to_decimal, to_dms, z_max, $vertex_x, $vertex_y, z_min, x_max, y_max, x_min, y_min, $x_at, $y_at, $x, $y, make_point_m, z operations affine_transform spatial affine_transform, bounds, bounds_height, single_sided_buffer, x_max, y_max, x_min, y_min, buffer, length3D, perimeter, area, distance, offset_curve, translate, extend, scale, rotate, bounds_width transformation affine_transform reference affine_transform, bounds, bounds_height, single_sided_buffer, x_max, y_max, x_min, y_min, buffer, length3D, perimeter, area, distance, offset_curve, translate, extend, scale, rotate, bounds_width offset affine_transform system affine_transform, bounds, bounds_height, single_sided_buffer, x_max, y_max, x_min, y_min, buffer, env, length3D, perimeter, area, offset_curve, translate, extend, scale, rotate, bounds_width calculations affine_transform, bounds, bounds_height, pi, x_max, y_max, x_min, y_min, buffer, length3D, perimeter, area, translate, scale, rotate, bounds_width translation affine_transform rotation affine_transform order affine_transform, regexp_matches, array_reverse, age, reverse added affine_transform, array_prepend, array_append, array_insert, current_parent_value, map_insert, array_prioritize, current_value present affine_transform, array_prioritize scale affine_transform, $scale aggregate aggregate, count_distinct, count, count_missing, mean, relation_aggregate, array_to_string, stdev, range, sum, minority, max_length, maximum, median, minimum, majority combine aggregate features aggregate, count, sqlite_fetch_and_increment, relation_aggregate, overlay_nearest, num_selected, current_parent_value, overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint, current_value calculated aggregate, $length, $perimeter, q1, iqr, q3 merge aggregate, map_to_hstore concatenate aggregate, map_concat sum aggregate, array_sum mean aggregate, array_mean, mean, levenshtein median aggregate, array_median, array_majority, array_minority, median count aggregate, count_distinct, count, count_missing, num_geometries, length, array_length, min_length, max_length, num_interior_rings quartile aggregate, q1, iqr, q3 minimum aggregate, array_min, z_min, x_min, y_min, levenshtein, minimal_circle, range, convex_hull, min, min_length, wordwrap, minimum, m_min, distance, rand, randf maximum aggregate, array_max, z_max, x_max, y_max, range, max_length, max, maximum, densify_by_distance, m_max, wordwrap, rand, randf minority aggregate, minority majority aggregate, majority standard aggregate, stdev, hausdorff_distance deviation aggregate, stdev length aggregate, sinuosity, hamming_distance, length, $length, $perimeter, hausdorff_distance, min_length, max_length, lpad, rpad, length3D, tapered_buffer unique aggregate, concatenate_unique, uuid distinct count_distinct, array_distinct matching count, get_feature, relation_aggregate, soundex, hausdorff_distance, layer_property, regexp_match, strpos missing count_missing, array_prioritize aggregated concatenate, collect, concatenate_unique, array_agg field concatenate, concatenate_unique, array_agg, attributes, represent_value, stdev, current_parent_value, q1, iqr, range, sum, minority, majority, current_value, q3 joined concatenate, concatenate_unique delimiter concatenate, concatenate_unique, array_to_string, string_to_array strings concatenate, concatenate_unique, regexp_matches, replace, soundex, format_date, hamming_distance, levenshtein, concat, min_length, max_length, map_credits, longest_common_substring, create_ramp multipart collect, num_geometries, geometry_n algorithm parameter, soundex, simplify_vw, simplify parameter parameter, sqlite_fetch_and_increment, ILIKE, LIKE, hausdorff_distance, array processing parameter, $geometry alpha set_color_part, color_hsva, color_hsla, color_cmyka, color_rgba, color_mix_rgb, color_part component set_color_part, color_part specific set_color_part, env, geometry_n, color_part, point_n red set_color_part, color_rgba, color_mix_rgb, color_rgb, color_part color set_color_part, color_hsva, color_hsla, color_hsv, color_hsl, color_cmyka, color_cmyk, darker, lighter, color_grayscale_average, color_rgba, color_mix_rgb, color_rgb, create_ramp, ramp_color, color_part, project_color sets set_color_part, hausdorff_distance angle cos, acos, tan, angle_at_vertex, line_interpolate_angle, azimuth, main_angle, sin, asin, atan2, atan cosine cos, acos inverse acos, asin, atan2, atan radians acos, degrees, radians, project, azimuth, asin, atan tangent tan, atan2, atan angles angle_at_vertex, line_interpolate_angle specified angle_at_vertex, sqlite_fetch_and_increment, line_substring, extrude, apply_dash_pattern, line_interpolate_angle, line_interpolate_point, line_locate_point, hausdorff_distance, distance_to_vertex, scale_exp, pole_of_inaccessibility, lpad, rpad, densify_by_distance, rand, randf, array_prioritize, clamp, is_layer_visible, extend, var, day_of_week clockwise angle_at_vertex, force_rhr, line_interpolate_angle, force_polygon_ccw, force_polygon_cw, azimuth, main_angle linestring angle_at_vertex, single_sided_buffer, extrude, line_interpolate_angle, straight_distance_2d, line_interpolate_point, length, $length, line_locate_point, line_merge, offset_curve, extend degrees angle_at_vertex, degrees, radians, line_interpolate_angle, main_angle bisector angle_at_vertex north angle_at_vertex, line_interpolate_angle, azimuth, main_angle average angle_at_vertex, mean vertex angle_at_vertex, $vertex_x, $vertex_y, straight_distance_2d, distance_to_vertex, $vertex_index, end_point, $vertex_z, $vertex_as_point, point_n, nodes_to_points array array_prepend, array_append, array_insert, array_median, array_distinct, array_all, array_slice, array_intersect, array_remove_all, array_agg, array_first, array_find, regexp_matches, array_mean, array_sum, array_filter, array_last, map_avals, map_akeys, array_replace, replace, array_max, array_min, [], array_get, array_remove_at, array_reverse, array_majority, array_minority, overlay_nearest, array_length, array_foreach, to_json, overlay_intersects, overlay_contains, overlay_touches, array, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint, generate_series, array_sort, array_prioritize beginning array_prepend, line_substring end array_append, array_slice, CASE, line_substring, close_line, is_closed, array_prioritize, extend, shortest_line position array_insert, array_slice, array_get, line_locate_point, regexp_match, strpos arithmetic array_median, array_mean, array_sum ignored array_median, array_mean, array_sum containing array_distinct, attributes, array_cat, map_concat, array, map, generate_series contains array_all, Meshes, left, right, overlay_contains, contains, within compare array_all, ILIKE, IS NOT, IS, LIKE, nullif search array_all, get_feature defined array_slice, intersects_bbox arguments array_slice, represent_attributes, display_expression, maptip, format, coalesce, is_selected, atan2 start array_slice, line_substring, project, is_closed, extend, shortest_line slice array_slice portion array_slice, line_substring, regexp_substr, intersects, intersection index array_slice, array_find, [], array_get, array_remove_at, $vertex_index element array_intersect, [] exists array_intersect, map_insert, map_exist, map_get, file_exists intersection array_intersect, relate overlap array_intersect, intersection entries array_remove_all, map_concat removed array_remove_all, array_remove_at first array_first, array_find, array_get, get_feature, CASE, ascii, ILIKE, LIKE, straight_distance_2d, q1, start_point, close_line, $x, $y, $z, left, coalesce, regexp_match, array_prioritize, extend, strpos found array_find, IN, env, raster_value, regexp_match, strpos lowest array_find groups regexp_matches capturing regexp_matches captured regexp_matches appear regexp_matches supplied regexp_matches, array_replace, replace, crosses, ILIKE, LIKE, format, regexp_substr, regexp_replace regular regexp_matches, make_regular_polygon, regexp_substr, regexp_replace, regexp_match, ~ numeric array_mean, array_sum items array_filter limit array_filter evaluates array_filter, <=, >=, =, <>, eval, eval_template, >, < last array_last, array_get, straight_distance_2d, end_point, right, extend map map_avals, map_akeys, array_replace, replace, [], sqlite_fetch_and_increment, represent_attributes, attributes, map_concat, map_delete, $scale, represent_value, url_encode, map_to_hstore, hstore_to_map, to_json, $map, item_variables, map_credits, map_insert, map_exist, map_get, create_ramp, map, map_prefix_keys keys map_akeys, represent_attributes, attributes, map, map_prefix_keys replaced array_replace, replace, regexp_replace operator [] nth array_get one array_get, densify_by_count, densify_by_distance reversed array_reverse, flip_coordinates associated char, ascii character char, ascii, levenshtein, hash, lpad, rpad, ~ unicode char, ascii, regexp_match code char, ascii, soundex attribute attribute, get_feature, represent_attributes, current_parent_value, current_value find get_feature, pole_of_inaccessibility attributes color_hsva, color_hsla, sqlite_fetch_and_increment, color_hsv, represent_attributes, color_hsl, attributes transparency color_hsva, color_hsla hue color_hsva, color_hsla, color_hsv, color_hsl representation color_hsva, color_hsla, color_hsv, represent_attributes, color_hsl, soundex, geom_from_wkb, color_cmyka, color_cmyk, represent_value, relate, color_grayscale_average, color_rgba, color_rgb, geom_from_gml, geom_from_wkt, geom_to_wkt, geom_to_wkb saturation color_hsva, color_hsla, color_hsv, color_hsl lightness color_hsla, color_hsl children sqlite_fetch_and_increment applied sqlite_fetch_and_increment uncommitted sqlite_fetch_and_increment works sqlite_fetch_and_increment, LIKE, num_selected relations sqlite_fetch_and_increment prefetched sqlite_fetch_and_increment intended sqlite_fetch_and_increment creating sqlite_fetch_and_increment several sqlite_fetch_and_increment, concat auto_increment sqlite_fetch_and_increment form sqlite_fetch_and_increment, url_encode, current_parent_value, current_value databases sqlite_fetch_and_increment transaction sqlite_fetch_and_increment parents sqlite_fetch_and_increment filter_value sqlite_fetch_and_increment mode sqlite_fetch_and_increment open sqlite_fetch_and_increment primary sqlite_fetch_and_increment evaluate sqlite_fetch_and_increment, CASE sidenote sqlite_fetch_and_increment add sqlite_fetch_and_increment require sqlite_fetch_and_increment, pole_of_inaccessibility impossible sqlite_fetch_and_increment default_values sqlite_fetch_and_increment table sqlite_fetch_and_increment, current_value insert sqlite_fetch_and_increment nice sqlite_fetch_and_increment formats sqlite_fetch_and_increment, format_date current sqlite_fetch_and_increment, $vertex_x, $vertex_y, $geometry, $x_at, $y_at, $scale, overlay_nearest, $length, $perimeter, current_parent_value, $x, $y, $z, $vertex_index, overlay_intersects, $map, $page, overlay_contains, overlay_touches, $vertex_z, $vertex_as_point, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint, to_date, to_datetime, $id, $rownum, now, current_value get sqlite_fetch_and_increment target sqlite_fetch_and_increment, overlay_nearest, overlay_intersects, overlay_contains, overlay_touches, lpad, rpad, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint work sqlite_fetch_and_increment usage sqlite_fetch_and_increment, map_credits columns sqlite_fetch_and_increment retrieved sqlite_fetch_and_increment autoincrementing sqlite_fetch_and_increment new sqlite_fetch_and_increment, densify_by_count, densify_by_distance limitation sqlite_fetch_and_increment gpkg sqlite_fetch_and_increment parallel sqlite_fetch_and_increment, line_interpolate_angle, hausdorff_distance database sqlite_fetch_and_increment additional sqlite_fetch_and_increment, densify_by_distance, to_time, to_date, to_datetime makes sqlite_fetch_and_increment postgres sqlite_fetch_and_increment modifies sqlite_fetch_and_increment sequence sqlite_fetch_and_increment, generate_series cached sqlite_fetch_and_increment manage sqlite_fetch_and_increment key sqlite_fetch_and_increment, map_concat, map_delete, map_insert, map_exist, map_get id_field sqlite_fetch_and_increment acquire sqlite_fetch_and_increment filtered sqlite_fetch_and_increment default sqlite_fetch_and_increment, hausdorff_distance, display_expression, maptip, num_selected, format_number, to_date, to_datetime filter_attribute sqlite_fetch_and_increment parent sqlite_fetch_and_increment, current_parent_value option sqlite_fetch_and_increment unsafe sqlite_fetch_and_increment sqlite sqlite_fetch_and_increment separate sqlite_fetch_and_increment, string_to_array row sqlite_fetch_and_increment, uuid, $id, $rownum, current_value configurations sqlite_fetch_and_increment lifetime sqlite_fetch_and_increment processes sqlite_fetch_and_increment incremented sqlite_fetch_and_increment able sqlite_fetch_and_increment purpose sqlite_fetch_and_increment see represent_attributes, configured represent_attributes, represent_value names represent_attributes, attributes type represent_attributes, format_date, represent_value, geometry_type, mime_type, to_interval, is_multipart details represent_attributes, display_expression, maptip, is_selected depends represent_attributes, represent_value, decode_uri, env widget represent_attributes, represent_value, current_parent_value base log, log10, from_base64, to_base64, base_file_name logarithm log, log10, ln behavior different concat joins box bounds, bounds_height, intersects_bbox, oriented_bbox, bounds_width represents bounds, minimal_circle, convex_hull, oriented_bbox, difference, sym_difference, intersection, union bounding bounds, bounds_height, intersects_bbox, oriented_bbox, main_angle, bounds_width height bounds_height tests intersects_bbox, crosses, relate, contains, touches, disjoint, intersects, overlaps, within, if overlaps intersects_bbox, intersects, overlaps intersect intersects_bbox, difference, touches, sym_difference, disjoint, intersects buffer wedge_buffer, buffer_by_m, tapered_buffer wedge wedge_buffer point wedge_buffer, x, y, closest_point, geometry_type, project, line_interpolate_point, line_locate_point, close_line, $x, $y, $z, exif_geotag, pole_of_inaccessibility, contains, make_point, touches, make_point_m, z, make_line, m, $vertex_as_point, point_on_surface, raster_value, union originating wedge_buffer shaped wedge_buffer buffering single_sided_buffer formed single_sided_buffer, is_valid, offset_curve distances single_sided_buffer, line_substring, levenshtein, offset_curve, extend side single_sided_buffer, offset_curve calculate Meshes, pole_of_inaccessibility functions Meshes, $geometry, age return Meshes, CASE, line_merge, regexp_match, try, strpos mesh Meshes, $vertex_x, $vertex_y, $vertex_index, $vertex_z, $vertex_as_point related Meshes pi pi casewhen CASE clause CASE series CASE, make_polygon, make_line met CASE corresponding CASE, map_delete, hamming_distance, line_locate_point none CASE evaluated CASE, display_expression, maptip, array_foreach, num_selected components CASE, color_cmyka, color_cmyk, color_rgba, color_rgb conditions CASE optional CASE, hausdorff_distance, make_point, make_polygon, to_time, to_date, to_datetime marks CASE evaluation CASE, with_variable else CASE case CASE, ILIKE, lower, upper, hamming_distance, levenshtein, title, longest_common_substring stops CASE condition CASE, AND, OR, NOT, nullif, if set CASE, convex_hull, env, collect_geometries, union centroid x, y, point_on_surface child relation_aggregate relation relation_aggregate, current_parent_value circular make_circle polygon make_circle, force_rhr, geometry_type, $perimeter, densify_by_count, interior_ring_n, densify_by_distance, make_polygon, perimeter, area, make_ellipse, exterior_ring, boundary, roundness, make_regular_polygon, num_interior_rings, num_rings, make_triangle closest closest_point, line_locate_point, hausdorff_distance nearest closest_point represented soundex, hash similar soundex, levenshtein, hausdorff_distance soundex soundex phonetic soundex sounds soundex collection num_geometries, geometry_n, num_interior_rings, num_rings parts num_geometries, order_parts, extend combination combine union combine, union common array_majority, array_minority, crosses, longest_common_substring, touches crosses crosses, overlay_crosses interior crosses, force_rhr, force_polygon_ccw, force_polygon_cw, interior_ring_n, contains, num_interior_rings points crosses, buffer, contains, azimuth, is_closed, boundary, make_rectangle_3points, inclination numbers ILIKE, LIKE, to_real, concat, make_time, make_datetime, generate_series, make_date insensitive ILIKE match ILIKE, length3D, perimeter, ~ sensitive ILIKE, LIKE, hamming_distance, levenshtein, longest_common_substring matches ILIKE, LIKE, regexp_substr pattern ILIKE, LIKE, apply_dash_pattern equal IS, <=, >=, =, <>, buffer, hausdorff_distance, overlay_equals identical IS compares <=, >=, =, <>, >, < less <=, < left <=, >=, >, <, lpad right <=, >=, force_rhr, >, <, rpad greater >=, > concatenated array_cat arrays array_cat concatenates array_to_string, concat join array_to_string, buffer consisting segments_to_lines segment segments_to_lines, hausdorff_distance, extend multi segments_to_lines, extrude, close_line, collect_geometries, is_multipart line segments_to_lines, line_substring, apply_dash_pattern, geometry_type, reverse, close_line, densify_by_count, buffer_by_m, densify_by_distance, length3D, make_line, is_closed, exterior_ring, extend, shortest_line, tapered_buffer maps map_concat contexts force_rhr, $scale boundary force_rhr, pole_of_inaccessibility, boundary, triangular_wave_randomized, triangular_wave, square_wave, square_wave_randomized, wave, wave_randomized rings force_rhr, force_polygon_ccw, force_polygon_cw, num_interior_rings, num_rings bounded force_rhr force_polygon_cw force_rhr explicit force_rhr area force_rhr, area, simplify_vw exterior force_rhr, force_polygon_ccw, force_polygon_cw, contains, exterior_ring, num_rings inconsistency force_rhr use force_rhr hand force_rhr particular force_rhr respect force_rhr, force_polygon_ccw, force_polygon_cw counter force_rhr, force_polygon_ccw, force_polygon_cw forces force_rhr, force_polygon_ccw, force_polygon_cw ring force_rhr, apply_dash_pattern, interior_ring_n, make_polygon, exterior_ring, boundary recommended force_rhr oriented force_rhr, oriented_bbox, main_angle direction force_rhr, reverse rule force_rhr definition force_rhr, env converts degrees, radians, to_int, lower, to_dm, to_decimal, to_dms, to_string, to_real, upper, title, to_time, to_date, to_datetime, to_interval invalid to_int, to_real converted to_int, to_real, concat, url_encode, datetime_from_epoch integer to_int, rand letters lower, upper, env lower lower, hausdorff_distance, title minute to_dm, to_decimal, to_dms, make_time, make_datetime, make_interval degree to_dm, to_decimal, to_dms equivalent to_decimal second to_decimal, to_dms, make_time, make_datetime, array_prioritize decimal to_decimal, format_number, round number to_string, day, month, floor, hour, second, densify_by_count, minute, ceil, round, $rownum, simplify, week, year precision to_real rounded to_real, wave changes to_real real to_real saving to_real conversion to_real, geom_from_wkb, geom_from_gml, geom_from_wkt, geom_to_wkt, geom_to_wkb smaller to_real, levenshtein, lpad, rpad upper upper created geom_from_wkb wkb geom_from_wkb, geom_to_wkb binary geom_from_wkb, from_base64, to_base64, mime_type, geom_to_wkb known geom_from_wkb, geom_from_wkt, geom_to_wkt, geom_to_wkb createuuid uuid generates uuid, densify_by_count, densify_by_distance method uuid, hausdorff_distance, hash quuid uuid identifier uuid criteria order_parts multigeometry order_parts orders order_parts given order_parts, scale_exp, hash, scale_linear crs transform source transform transformed transform destination transform reprojection transform retrieves $x_at, $y_at, exif feature $x_at, $y_at curve sinuosity, line_substring, extrude, straight_distance_2d, scale_exp distance sinuosity, line_interpolate_angle, straight_distance_2d, project, buffer, line_interpolate_point, overlay_nearest, hamming_distance, length, $length, $perimeter, line_locate_point, levenshtein, hausdorff_distance, distance_to_vertex, densify_by_distance, length3D, perimeter, simplify endpoints sinuosity sinuosity sinuosity ratio sinuosity, color_mix_rgb straight sinuosity, simplify_vw, simplify measured line_substring, azimuth, inclination falls line_substring existing line_substring interpolated line_substring, line_interpolate_point version extrude, scale, rotate extension extrude, file_name, file_suffix extruded extrude custom format_date uses format_date, pole_of_inaccessibility format format_date, format, to_time, to_date, to_datetime time format_date, hour, second, make_time, minute, datetime_from_epoch, to_time, now date format_date, day, month, epoch, datetime_from_epoch, to_date, now, to_interval, day_of_week, week, make_date, year qdatetime format_date tostring format_date cyan color_cmyka, color_cmyk black color_cmyka, color_cmyk yellow color_cmyka, color_cmyk darker darker, lighter lighter darker, lighter dash apply_dash_pattern stroked apply_dash_pattern multilinestring apply_dash_pattern, line_merge, extend applies apply_dash_pattern, color_grayscale_average returning apply_dash_pattern extracts day, month, hour, second, left, minute, week, year interval day, month, age, hour, second, epoch, densify_by_distance, make_interval, minute, to_interval, week, year days day, make_interval, to_interval day day, make_datetime, day_of_week, make_date months month part month, hour, second, minute, substr, geometry_n, difference, collect_geometries, year month month, make_datetime, make_interval, to_interval, make_date deleted map_delete denominator $scale canvas $scale, $map widgets represent_value layer decode_uri, densify_by_count, densify_by_distance data decode_uri, mime_type dataprovider decode_uri provider decode_uri uri decode_uri underlying decode_uri, overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint decodes decode_uri, from_base64 available decode_uri describing geometry_type difference age needs age datetimes age extract age information age following age dates age yearmonthweekdayhourminutesecond age dimensional relate relationship relate extended relate, extend model relate vertices reverse, densify_by_count, buffer_by_m, densify_by_distance, simplify_vw, simplify, num_points reverses reverse reversing reverse circularstring straight_distance_2d direct straight_distance_2d euclidean straight_distance_2d elevation project projected project, distance azimuth project, azimuth bearing project, extend segments buffer, simplify_vw, simplify miter buffer cap buffer along line_interpolate_point, line_locate_point layers overlay_nearest, map_credits large overlay_nearest, hausdorff_distance, simplify slow overlay_nearest lot overlay_nearest hamming hamming_distance equates hamming_distance, levenshtein, NULL characters hamming_distance, length, url_encode, left, right, min_length, max_length, wordwrap, ~ comparison hamming_distance positions hamming_distance planimetric length, $length, $perimeter, length3D, perimeter, area perimeter $length, $perimeter, perimeter project $length, $perimeter, length3D, perimeter, area, project_color settings $length, $perimeter, length3D, perimeter, area ellipsoid $length, $perimeter, length3D, perimeter, area border $length setting $length, $perimeter required levenshtein edit levenshtein indicate levenshtein similarity levenshtein, hausdorff_distance insertions levenshtein measure levenshtein, hausdorff_distance, m_max, m_min, m change levenshtein substitutions levenshtein edits levenshtein larger levenshtein, densify_by_count deletions levenshtein levenshtein levenshtein dissimilar hausdorff_distance densify hausdorff_distance linestrings hausdorff_distance, line_merge, boundary other hausdorff_distance, concat, to_json total hausdorff_distance close hausdorff_distance, roundness executed hausdorff_distance specifying hausdorff_distance occurs hausdorff_distance fraction hausdorff_distance testing hausdorff_distance discrete hausdorff_distance linear hausdorff_distance, scale_linear approximate hausdorff_distance, pole_of_inaccessibility split hausdorff_distance, string_to_array make hausdorff_distance approach hausdorff_distance, pole_of_inaccessibility examples hausdorff_distance provided hausdorff_distance, color_grayscale_average, color_mix_rgb, to_time, to_date, to_datetime, raster_value, rand, randf, try, array_sort performs hausdorff_distance, ~ insufficient hausdorff_distance networks hausdorff_distance specify hausdorff_distance decreasing hausdorff_distance approximation hausdorff_distance cases hausdorff_distance densification hausdorff_distance computing hausdorff_distance argument hausdorff_distance, rand, randf, with_variable subsegments hausdorff_distance hausdorff hausdorff_distance exact hausdorff_distance indicating hausdorff_distance subset hausdorff_distance division %, / remainder % downwards floor rounds floor, ceil, round dynamic eval, eval_template fields eval, eval_template parameters eval, eval_template, map expression eval, ~ expand eval, eval_template context eval, eval_template, current_parent_value passed eval, eval_template, datetime_from_epoch, map, line_merge variables eval, eval_template, item_variables, env template eval_template elements array_length, map_to_hstore, array_sort empty concat, is_empty_or_null, is_empty is_empty is_empty_or_null coordinates is_empty_or_null, is_empty, flip_coordinates false is_empty_or_null, is_empty, is_closed is_empty_or_null is_empty enclosing minimal_circle minimal minimal_circle, oriented_bbox, main_angle encloses minimal_circle, convex_hull circle minimal_circle, roundness smallest minimal_circle, min encoded url_encode producing url_encode query url_encode plus url_encode url url_encode compliant url_encode sign url_encode transforms url_encode, scale_exp, scale_linear encoding from_base64, to_base64 encodes to_base64 display display_expression maptip maptip iterate array_foreach item array_foreach, $map, item_variables, map_credits selected num_selected, is_selected exif exif, exif_geotag tag exif file exif, file_name, file_suffix, exif_geotag, file_path, file_exists, is_file, file_size, base_file_name image exif, exif_geotag exponential exp, scale_exp ease scale_exp domain scale_exp, scale_linear range scale_exp, iqr, range, rand, randf, clamp, scale_linear name file_name, file_path, base_file_name directory file_name, is_directory, file_path, base_file_name path file_name, file_suffix, env, is_directory, file_path, file_exists, is_file, base_file_name suffix file_suffix, base_file_name convention force_polygon_ccw, force_polygon_cw hours hour, make_interval, to_interval hour hour, make_time, make_datetime datetime hour, second, make_datetime, minute, datetime_from_epoch, to_datetime, day_of_week seconds second, make_interval actual current_parent_value, current_value unsaved current_parent_value, current_value wrapped current_parent_value, wordwrap retrieve current_parent_value differ current_parent_value, current_value edited current_parent_value, current_value embedded current_parent_value coalesce current_parent_value filter current_parent_value, color_grayscale_average usable current_parent_value inter iqr statistics iqr, raster_statistic aggregates iqr summed sum grayscale color_grayscale_average node start_point, end_point, point_n, nodes_to_points closed close_line, is_closed appending close_line multipoint $x, $y, $z, nodes_to_points altitude $z 3D $z substring left, right, longest_common_substring, regexp_match, strpos leftmost left formatted map_to_hstore, hstore_to_map, to_json, format_number, from_json hstore map_to_hstore, hstore_to_map json to_json, from_json create to_json, simplify_vw truncates format_number places format_number, round separator format_number thousands format_number locale format_number language format_number original densify_by_count geometric centroid center centroid geotags exif_geotag green color_rgba, color_mix_rgb, color_rgb blue color_rgba, color_mix_rgb, color_rgb mixing color_mix_rgb colors color_mix_rgb hash md5, sha256, hash hex hash bytes hash, file_size byte hash digits hash long hash, main_angle bits hash produces hash hull convex_hull convex convex_hull inaccessibility pole_of_inaccessibility precise pole_of_inaccessibility tolerances pole_of_inaccessibility calculates pole_of_inaccessibility, length3D, roundness guaranteed pole_of_inaccessibility true pole_of_inaccessibility iterations pole_of_inaccessibility internal pole_of_inaccessibility polylabel pole_of_inaccessibility distant pole_of_inaccessibility pole pole_of_inaccessibility take pole_of_inaccessibility, to_interval surface pole_of_inaccessibility, area, point_on_surface tolerance pole_of_inaccessibility iterative pole_of_inaccessibility hole interior_ring_n intersected overlay_intersects least overlay_intersects, minority, overlay_contains, overlay_touches, min predicate overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint geos overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint postgis overlay_intersects, overlay_contains described overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint st_intersects overlay_intersects intersects overlay_intersects, intersects milliseconds epoch, datetime_from_epoch epoch epoch loads from_json rightmost right latitude flip_coordinates longitude flip_coordinates swapped flip_coordinates repairing flip_coordinates copy flip_coordinates layout $map, item_variables, $page, map_credits drawn $map main $map print $map, item_variables, $page window $map overview $map page $page occurring minority, majority contained overlay_contains, IN, overlaps st_contains overlay_contains touches overlay_touches, touches touched overlay_touches st_touches overlay_touches padded lpad, rpad width lpad, rpad, bounds_width truncated lpad, rpad fill lpad, rpad letter title words title leading title, trim capital title title title lie contains, point_on_surface lies contains within contains according buffer_by_m, is_valid varies buffer_by_m, tapered_buffer diameter buffer_by_m, tapered_buffer list array, IN, coalesce, map_credits rights map_credits credit map_credits longest max, longest_common_substring biggest max most max largest max overridden map_insert gradient create_ramp steps create_ramp ramp create_ramp, ramp_color edges densify_by_distance densified densify_by_distance multiline wordwrap vertical azimuth year make_datetime, make_interval, make_date, year weeks make_interval, week minutes minute multiplication * natural ln negates NOT operating env content env prefixes env gets env drive env check env, if environment env inject env configuration env administrator env variable env, var, with_variable documentation env, to_time, to_date, to_datetime handy env covers main_angle rectangle main_angle, make_rectangle_3points axis main_angle outer make_polygon inner make_polygon clip difference collects collect_geometries object collect_geometries, length3D, perimeter, to_time, to_date, to_datetime localtime datetime_from_epoch msecs datetime_from_epoch coordinated datetime_from_epoch universal datetime_from_epoch pair map single line_merge merged line_merge connected line_merge folder is_directory, file_path, base_file_name differs length3D, perimeter units length3D, perimeter, area, distance interiors touches overlay point_on_surface coincident is_closed elliptical make_ellipse representing exterior_ring, ramp_color instance boundary combinatorial boundary topological boundary collections boundary types boundary closure boundary perfect roundness flat roundness shape roundness portions sym_difference power ^ equals overlay_equals, nullif st_equals overlay_equals st_crosses overlay_crosses crossed overlay_crosses st_disjoint overlay_disjoint disjoint overlay_disjoint prefixed map_prefix_keys property layer_property metadata layer_property parse to_time, to_date, to_datetime fromstring to_time, to_date, to_datetime qtime to_time, to_datetime user to_date, to_datetime format_date to_date, to_datetime qdate to_date, to_datetime raster raster_value, raster_statistic random rand, randf inclusive rand, randf seed rand, randf depending rand, randf, if float randf removes trim, simplify_vw whitespace trim spaces trim tabs trim trailing trim tries try error try alternative try exception try holes num_interior_rings, num_rings including num_rings root sqrt square sqrt, make_square, square_wave, square_wave_randomized rules is_valid valid is_valid ogc is_valid scheme project_color share disjoint, intersects, overlaps space disjoint, intersects, overlaps, ~ dimension overlaps shared intersection sine sin, asin, wave, wave_randomized size file_size sorted array_sort, array_prioritize ordering array_prioritize offsetting offset_curve translated translate displace translate move translate restricts clamp visible is_layer_visible spikes simplify_vw areas simplify_vw simplifies simplify_vw, simplify narrow simplify_vw visvalingam simplify_vw threshold simplify_vw, simplify removing simplify_vw, simplify based simplify_vw, simplify small simplify_vw convert string_to_array divides string_to_array diagonal make_square amount extend lines extend extends extend resultant shortest_line joining shortest_line shortest shortest_line static now evaluating now stored var deviations simplify reduces simplify preserves simplify substitute nullif subtraction - signs atan2 quadrant atan2 completely within conditional if text geom_from_wkt, geom_to_wkt wkt geom_from_wkt, geom_to_wkt srid geom_to_wkt third q3 interpolation scale_linear triangle make_triangle dissolve union value with_variable scaled scale rotated rotate waves triangular_wave_randomized, triangular_wave, square_wave, square_wave_randomized, wave, wave_randomized constructs triangular_wave_randomized, triangular_wave, square_wave, square_wave_randomized, wave, wave_randomized randomized triangular_wave_randomized, square_wave_randomized, wave_randomized triangular triangular_wave_randomized, triangular_wave rectangular square_wave, square_wave_randomized curved wave_randomized week day_of_week, week corresponds day_of_week ranges day_of_week saturday day_of_week white ~ backslash ~ escaped ~ years year zenith inclination nadir inclination inclination inclination >= QGIS 3.24 \u21a9","title":"Elenco gruppi"},{"location":"gr_funzioni/gruppo_funzioni/#gruppi-funzioni","text":"Nell'Interfaccia del Field Calc (e nel costruttore di espressione) \u00e8 presente, nella parte centrale, una sezione che raccoglie i Gruppi delle Funzioni elencate sotto: Gruppo funzioni nro funzioni* Descrizione info Aggrega (23/23) Contiene funzioni che aggregano valori nei livelli e campi. aggiornate a QGIS 3.0 Array (36/36) Questo gruppo contiene funzioni espressione per la creazione e la manipolazione di array (noti anche come strutture dati ad elenco). L'ordine dei valori all'interno dell'array \u00e8 importante, al contrario della struttura dati 'a mappa', in cui l'ordine delle coppie chiave-valore \u00e8 irrilevante e i valori vengono identificati dalle loro chiavi. aggiornate a QGIS 3.28 Campi e valori (1/1) Contiene un elenco di campi del layer. Si possono ottenere valori campione con il click del tasto destro del mouse. Seleziona il nome del campo dall'elenco e fai click con il tasto destro per aprire il men\u00f9 con le opzioni per caricare un campione di valori dal campo selezionato. Elenco dei campi del layer selezionato QGIS 3.28 Colore (17/17) Questo gruppo contiene funzioni per manipolare i colori Per manipolare i colori Condizioni (6/6) Questo gruppo contiene funzioni per gestire controlli condizionali nelle espressioni. aggiornate a QGIS 3.6 Conversioni (15/15) Questo gruppo contiene funzioni per convertire i dati da un tipo ad un altro, es. da stringa a intero, da intero a stringa. aggiornate a QGIS 3.16 Corrispondenza Fuzzy (4/4) Questo gruppo contiene funzioni per confronti fuzzy fra valori. funzioni per confronti fuzzy fra valori Custom (16/16) Questo gruppo contiene funzioni Python create in modo personalizzato dall'utente. funzioni personalizzate Data ora (21/21) Questo gruppo contiene funzioni per gestire dati con date e ore. aggiornate a QGIS 3.14 Espressioni utente (?) Questo gruppo contiene espressioni memorizzate nel profilo utente. aggiornate a QGIS 3.12 File e percorsi (9/9) Contiene funzioni che manipolano nomi di file e di percorsi. manipolano nomi di file e di percorsi aggiornate a QGIS 3.22 Form (0/2) Questo gruppo contiene funzioni che sono disponibili nel contesto modulo attributi. Per esempio, in impostazioni campo widget. Gruppo visibile solo nei widget. aggiornate a QGIS 3.14 Generale (7/7) Questo gruppo contiene funzioni generali assortite. assortimento di funzioni generiche Geometria (146/146) Questo gruppo contiene funzioni che operano sugli oggetti geometrici es. lunghezza, area. aggiornate a QGIS 3.28 Layer mappa (2/2) Contiene due funzioni e la lista dei layer della mappa che sono disponibili nel progetto corrente con possibilit\u00e0 di leggere 1 i nomi e valori degli attributi. aggiornate a QGIS 3.24 Layout (2/2) Visibile solo nel layout di stampa Maps (14/14) Questo gruppo contiene funzioni per la creazione e la manipolazione di strutture di dati 'a mappa' (noti anche come oggetti dizionario, coppie chiave-valore o array associative). Si possono assegnare valori a determinate chiavi. L'ordine delle coppie chiave-valore nell'oggetto mappa non \u00e8 rilevante. >= QGIS 3.0 aggiornate a QGIS 3.24 Matematica (28/28) Questo gruppo contiene funzioni matematiche es. radice quadrata, seno e coseno aggiornate a QGIS 3.12 Operatori (23/23) Questo gruppo contiene operatori es. + - * aggiornate a QGIS 3.20 Raster (2/2) Contiene funzioni che calcolano statistiche e valori raster. >= QGIS 3.4 Recente (1/1) Elenca le ultime 20 espressioni utilizzate Record e attributi (14/14) Questo gruppo contiene funzioni che operano sugli identificativi dei record. aggiornate a QGIS 3.24 Relazioni (?) Visibile solo se ci sono relazioni di progetto Stringhe di testo (23/23) Questo gruppo contiene le funzioni che operano sulle stringhe es. sostituzione, conversione in maiuscolo. aggiornate a QGIS 3.14 Variabili (4/65+) Questo gruppo contiene variabili dinamiche che possono essere inserite nelle tue espressioni. >= QGIS 2.12 - variano in funzione del contesto conteggio: https://gist.github.com/pigreco/2b2ad2eb12d17c4370b09635ae1470b4 * i numeri tra parentesi rappresentano: (numero funzioni documentate/numero funzioni nel gruppo)","title":"Gruppi funzioni"},{"location":"gr_funzioni/gruppo_funzioni/#espressione-e-tag","text":"I tag sono utili per la ricerca delle espressioni: funzioni tags $geometry current, processing, functions $id row, current $length distance, planimetric, length, perimeter, current, linestring, project, settings, ellipsoid, border, setting, calculated $map layout, item, drawn, current, main, print, map, window, overview, canvas $page layout, print, page, current $perimeter distance, planimetric, length, perimeter, current, polygon, project, settings, ellipsoid, setting, calculated $rownum row, number, current $scale denominator, contexts, current, scale, canvas, map $vertex_as_point point, mesh, vertex, current $vertex_index index, mesh, vertex, current $vertex_x coordinate, mesh, vertex, current $vertex_y coordinate, mesh, vertex, current $vertex_z mesh, vertex, current $x first, point, coordinate, current, multipoint $x_at current, retrieves, feature, coordinate $y first, point, coordinate, current, multipoint $y_at current, retrieves, feature, coordinate $z first, point, current, multipoint, altitude, 3D % division, remainder * multiplication, values + addition, null, result, values - subtraction, null, result, values / division, values < left, evaluates, compares, less, values, right <= compares, equal, less, values, left, evaluates, right <> compares, evaluates, values, equal = compares, evaluates, values, equal AND condition CASE casewhen, clause, series, met, first, corresponding, end, none, evaluated, components, conditions, optional, marks, return, evaluation, else, case, evaluate, result, stops, condition, set ILIKE compare, numbers, insensitive, first, match, sensitive, supplied, parameter, case, matches, pattern IN list, contained, found IS compare, same, equal, identical IS NOT compare, same, different LIKE compare, sensitive, numbers, first, works, supplied, parameter, matches, pattern Meshes calculate, functions, return, mesh, related, contains NOT negates, condition NULL equates, null OR condition [] array, operator, element, map, index > greater, compares, evaluates, left, values, right >= compares, equal, values, greater, left, evaluates, right ^ power, values abs absolute acos angle, cosine, inverse, radians affine_transform affine, coordinate, operations, spatial, transformation, reference, offset, system, calculations, translation, rotation, order, added, present, scale age difference, needs, datetimes, order, extract, information, following, interval, dates, functions, yearmonthweekdayhourminutesecond aggregate aggregate, combine, features, calculated, merge, concatenate, sum, mean, median, count, quartile, minimum, maximum, minority, majority, standard, deviation, length, unique angle_at_vertex angles, specified, clockwise, angle, linestring, degrees, bisector, north, average, vertex apply_dash_pattern dash, stroked, multilinestring, input, ring, specified, applies, line, pattern, returning area planimetric, polygon, spatial, reference, system, calculations, area, project, settings, surface, ellipsoid, units array list, array, parameter, containing array_agg array, field, aggregated array_all array, contains, compare, search array_append array, added, end array_cat concatenated, arrays, containing array_distinct array, containing, distinct array_filter array, items, limit, evaluates array_find array, found, first, lowest, index array_first array, first array_foreach evaluated, array, iterate, item array_get array, position, index, last, nth, one, first array_insert array, added, position array_intersect array, element, exists, intersection, overlap array_last array, last array_length elements, array, count array_majority common, array, median array_max array, maximum array_mean array, ignored, mean, numeric, arithmetic array_median array, arithmetic, median, ignored array_min array, minimum array_minority common, array, median array_prepend array, added, beginning array_prioritize sorted, array, first, specified, missing, second, ordering, added, present, result, end array_remove_all array, entries, removed array_remove_at array, removed, index array_replace array, map, replaced, supplied array_reverse array, reversed, order array_slice array, defined, arguments, start, position, slice, portion, end, index array_sort sorted, array, elements, provided array_sum array, ignored, numeric, arithmetic, sum array_to_string concatenates, delimiter, join, aggregate ascii code, first, associated, character, unicode asin sine, inverse, angle, radians atan tangent, inverse, angle, radians atan2 tangent, arguments, signs, angle, inverse, quadrant attribute attribute attributes attributes, names, field, keys, containing, map azimuth measured, clockwise, points, angle, vertical, north, azimuth, radians base_file_name suffix, base, directory, name, file, folder, path boundary polygon, linestrings, instance, combinatorial, topological, points, collections, types, ring, boundary, closure bounds box, input, spatial, reference, calculations, system, represents, bounding bounds_height box, spatial, reference, calculations, system, height, bounding bounds_width width, box, spatial, reference, calculations, system, bounding buffer distance, equal, spatial, reference, calculations, system, points, segments, miter, join, cap, round buffer_by_m line, according, values, varies, vertices, buffer, diameter ceil rounds, number centroid geometric, center char associated, character, unicode, code clamp specified, restricts, input, range close_line first, point, closed, end, input, appending, result, line, multi closest_point closest, point, nearest coalesce list, first, arguments, null collect aggregated, multipart collect_geometries part, set, collects, object, multi color_cmyk cyan, color, black, yellow, representation, components color_cmyka cyan, alpha, color, black, yellow, representation, components color_grayscale_average filter, color, provided, applies, grayscale, representation color_hsl attributes, lightness, color, hue, representation, saturation color_hsla attributes, alpha, lightness, color, transparency, hue, representation, saturation color_hsv attributes, color, hue, representation, saturation color_hsva attributes, alpha, color, transparency, hue, representation, saturation color_mix_rgb green, blue, red, alpha, mixing, color, colors, provided, ratio color_part red, specific, color, component, alpha color_rgb green, blue, red, color, representation, components color_rgba green, blue, red, alpha, color, representation, components combine combination, union concat empty, converted, numbers, concatenates, null, strings, several, other, values concatenate aggregated, field, joined, delimiter, strings concatenate_unique aggregated, unique, field, joined, delimiter, strings contains lie, point, lies, tests, interior, exterior, within, points, contains convex_hull hull, convex, minimum, represents, encloses, set cos angle, cosine count aggregate, features, matching, count count_distinct aggregate, distinct, count count_missing aggregate, missing, count create_ramp map, gradient, steps, strings, ramp, color crosses common, supplied, crosses, tests, interior, points current_parent_value field, actual, unsaved, wrapped, retrieve, widget, current, relation, differ, edited, embedded, coalesce, attribute, form, filter, added, features, parent, context, usable current_value table, field, actual, unsaved, current, differ, edited, row, attribute, form, added, features darker darker, color, lighter datetime_from_epoch passed, datetime, localtime, msecs, date, coordinated, converted, universal, milliseconds, time day date, extracts, interval, days, number, day day_of_week week, day, specified, datetime, corresponds, ranges, date, saturday decode_uri depends, layer, data, dataprovider, provider, uri, underlying, decodes, available degrees converts, degrees, radians densify_by_count generates, layer, line, number, one, new, polygon, vertices, larger, original densify_by_distance maximum, edges, additional, generates, line, densified, adding, new, polygon, interval, layer, one, distance, vertices, specified difference part, represents, intersect, clip disjoint share, intersect, tests, space display_expression evaluated, arguments, details, display, default distance projected, reference, spatial, minimum, units distance_to_vertex distance, specified, vertex end_point last, node, vertex env operating, content, prefixes, gets, definition, found, drive, check, system, environment, path, variables, letters, inject, specific, configuration, depends, administrator, variable, documentation, handy, set epoch interval, date, milliseconds, epoch eval dynamic, fields, parameters, expression, expand, context, passed, variables, evaluates eval_template dynamic, fields, parameters, template, expand, context, passed, variables, evaluates exif exif, retrieves, tag, file, image, values exif_geotag geotags, exif, point, file, image exp exponential extend start, distances, line, last, linestring, amount, parts, bearing, lines, extends, reference, spatial, extended, first, segment, system, multilinestring, specified, end exterior_ring polygon, line, ring, exterior, result, representing extrude curve, version, extension, input, specified, extruded, linestring, multi file_exists path, exists, file file_name extension, name, directory, file, path file_path path, directory, name, folder, file file_size size, file, bytes file_suffix extension, path, suffix, file flip_coordinates latitude, longitude, reversed, swapped, coordinates, repairing, copy floor downwards, rounds, number force_polygon_ccw exterior, clockwise, respect, convention, rings, counter, interior, forces force_polygon_cw exterior, clockwise, respect, convention, rings, interior, counter, forces force_rhr contexts, clockwise, boundary, interior, rings, bounded, force_polygon_cw, explicit, polygon, area, exterior, inconsistency, right, use, hand, particular, respect, counter, forces, ring, recommended, oriented, direction, rule, definition format format, supplied, arguments format_date custom, type, uses, format, strings, time, date, formats, see, qdatetime, tostring format_number formatted, truncates, places, separator, decimal, default, thousands, locale, language from_base64 encoding, base, binary, decodes from_json json, loads, formatted generate_series sequence, containing, numbers, array geom_from_gml representation, conversion geom_from_wkb created, wkb, binary, known, representation, conversion geom_from_wkt text, known, wkt, representation, conversion geom_to_wkb wkb, binary, representation, known, conversion geom_to_wkt text, wkt, srid, representation, known, conversion geometry geometry_n part, input, multipart, collection, specific geometry_type describing, type, point, polygon, line get_feature attribute, first, matching, search, find get_feature_by_id hamming_distance distance, length, input, sensitive, different, strings, corresponding, hamming, equates, characters, case, same, comparison, positions hash hex, bytes, byte, digits, hash, method, given, represented, character, long, bits, produces hausdorff_distance distance, segment, dissimilar, densify, linestrings, parallel, other, matching, total, close, executed, specifying, occurs, equal, fraction, testing, method, discrete, linear, default, approximate, sets, length, large, lower, similar, similarity, parameter, measure, split, make, approach, closest, examples, provided, performs, insufficient, networks, specify, optional, decreasing, approximation, cases, densification, specified, computing, argument, subsegments, hausdorff, exact, indicating, subset, standard hour extracts, number, time, part, interval, hours, hour, datetime hstore_to_map formatted, hstore, map if tests, different, check, result, conditional, depending, condition inclination zenith, nadir, inclination, measured, points interior_ring_n interior, polygon, hole, ring intersection shared, represents, portion, overlap intersects share, space, intersects, tests, intersect, portion, overlaps intersects_bbox box, tests, overlaps, defined, intersect, bounding iqr field, quartile, range, inter, calculated, statistics, aggregates is_closed points, start, closed, end, coincident, result, false, line is_directory path, directory, folder is_empty empty, is_empty_or_null, see, coordinates, false is_empty_or_null empty, is_empty, coordinates, false is_file path, file is_layer_visible specified, visible is_multipart type, multi is_selected selected, arguments, details is_valid rules, valid, ogc, according, formed item_variables layout, item, variables, print, map layer_property property, matching, metadata left first, substring, leftmost, characters, contains, extracts length distance, linestring, length, count, characters, planimetric length3D planimetric, distance, length, spatial, reference, system, calculations, calculates, line, project, differs, object, match, settings, ellipsoid, units levenshtein distance, required, edit, indicate, sensitive, similarity, insertions, similar, mean, measure, different, character, change, substitutions, strings, edits, distances, larger, deletions, equates, case, minimum, levenshtein, smaller lighter darker, color, lighter line_interpolate_angle distance, angles, parallel, specified, clockwise, angle, linestring, degrees, north line_interpolate_point distance, interpolated, linestring, point, specified, along line_locate_point distance, point, specified, closest, linestring, position, corresponding, along line_merge passed, single, return, input, linestrings, merged, connected, linestring, multilinestring line_substring curve, start, specified, measured, falls, existing, interpolated, beginning, distances, line, end, portion ln natural, logarithm log base, logarithm log10 base, logarithm longest_common_substring longest, common, input, sensitive, case, substring, strings lower converts, letters, lower, case lpad length, padded, width, truncated, specified, target, fill, left, character, smaller m point, measure m_max maximum, measure m_min minimum, measure main_angle oriented, minimal, covers, clockwise, angle, long, north, degrees, rectangle, axis, bounding majority occurring, field, majority, aggregate make_circle circular, polygon make_date year, date, month, numbers, day make_datetime minute, month, numbers, day, year, second, hour, datetime make_ellipse polygon, elliptical make_interval minute, seconds, month, year, weeks, values, interval, hours, days make_line point, line, series make_point optional, point make_point_m point, coordinate make_polygon outer, ring, series, inner, optional, polygon make_rectangle_3points rectangle, points make_regular_polygon polygon, regular make_square square, diagonal make_time minute, hour, second, numbers, time make_triangle triangle, polygon map passed, keys, pair, containing, parameters, map map_akeys array, map, keys map_avals array, map map_concat containing, key, concatenate, contain, entries, maps, map map_credits list, rights, layers, layout, item, usage, credit, strings, map map_delete deleted, corresponding, map, key map_exist map, exists, key map_get map, exists, key map_insert map, added, exists, key, overridden map_prefix_keys prefixed, keys, map map_to_hstore formatted, hstore, elements, map, merge maptip evaluated, arguments, maptip, details, default, see max longest, biggest, most, largest, maximum max_length length, maximum, strings, characters, count, aggregate maximum maximum, aggregate md5 hash mean average, aggregate, mean median median, aggregate mime_type type, data, binary min least, smallest, minimum min_length length, characters, count, minimum, strings minimal_circle enclosing, minimal, minimum, represents, encloses, circle, smallest minimum minimum, aggregate minority least, occurring, field, minority, aggregate minute minutes, extracts, part, interval, number, time, datetime month date, extracts, months, part, interval, month, number nodes_to_points vertex, multipoint, node, input now static, evaluating, current, date, time nullif substitute, equals, condition, compare num_geometries collection, multipart, parts, count num_interior_rings rings, holes, count, polygon, collection, interior num_points vertices num_rings rings, holes, polygon, collection, exterior, including num_selected evaluated, selected, works, default, features offset_curve spatial, offsetting, reference, system, linestring, formed, distances, side order_parts criteria, multigeometry, orders, parts, given oriented_bbox oriented, box, minimal, represents, bounding overlaps share, tests, contained, overlaps, same, dimension, space overlay_contains least, predicate, current, contained, target, contains, array, geos, st_contains, postgis, described, underlying, features overlay_crosses predicate, st_crosses, crosses, current, target, array, geos, described, underlying, features, crossed overlay_disjoint predicate, st_disjoint, disjoint, current, target, array, geos, described, underlying, features overlay_equals predicate, current, equals, equal, target, array, geos, st_equals, described, underlying, features overlay_intersects intersected, least, predicate, current, target, array, geos, postgis, described, st_intersects, intersects, underlying, features overlay_nearest distance, layers, large, slow, current, target, array, lot, features overlay_touches least, predicate, touches, current, target, array, geos, described, underlying, touched, st_touches, features overlay_within predicate, current, contain, target, array, geos, described, underlying, features parameter algorithm, parameter, processing perimeter planimetric, distance, polygon, perimeter, spatial, reference, system, calculations, project, differs, object, match, settings, ellipsoid, units pi calculations, pi point_n specific, node, vertex point_on_surface point, surface, lie, centroid, overlay pole_of_inaccessibility inaccessibility, precise, tolerances, calculates, guaranteed, boundary, require, point, true, iterations, internal, uses, approximate, approach, polylabel, find, distant, calculate, pole, take, surface, specified, tolerance, iterative project distance, elevation, projected, start, point, azimuth, radians, bearing project_color scheme, project, color q1 field, quartile, first, calculated q3 third, field, quartile, calculated radians converts, degrees, radians ramp_color ramp, color, representing rand random, inclusive, specified, range, argument, seed, same, provided, minimum, maximum, integer, depending randf random, specified, range, argument, seed, same, provided, float, minimum, maximum, inclusive, depending range field, range, aggregate, minimum, maximum raster_statistic raster, statistics raster_value provided, point, raster, found regexp_match return, found, matching, unicode, regular, position, substring, first regexp_matches array, groups, capturing, captured, order, appear, supplied, regular, strings regexp_replace regular, supplied, replaced regexp_substr regular, matches, supplied, portion relate dimensional, relationship, extended, intersection, representation, model, tests relation_aggregate child, matching, aggregate, features, relation replace array, map, strings, supplied, replaced represent_attributes attributes, keys, arguments, representation, map, see, attribute, configured, names, type, details, depends, widget represent_value depends, configured, field, type, widgets, map, representation, widget reverse direction, order, vertices, reverses, line, reversing right last, substring, rightmost, characters, contains rotate version, spatial, reference, calculations, rotated, system round rounds, places, decimal, number roundness polygon, perfect, flat, close, shape, calculates, circle rpad length, right, padded, width, specified, truncated, target, fill, character, smaller scale version, scaled, spatial, reference, calculations, system scale_exp exponential, curve, ease, transforms, output, given, input, domain, range, specified, values scale_linear transforms, linear, output, given, input, domain, range, interpolation second extracts, part, seconds, interval, number, time, datetime segments_to_lines consisting, segment, input, multi, line set_color_part alpha, component, specific, red, color, sets sha256 hash shortest_line start, resultant, joining, end, shortest, line simplify straight, large, deviations, nodes, algorithm, reduces, simplifies, segments, number, threshold, distance, removing, vertices, based, preserves simplify_vw spikes, areas, straight, nodes, algorithm, area, simplifies, removes, narrow, segments, visvalingam, threshold, create, vertices, removing, based, small sin sine, angle single_sided_buffer buffering, spatial, reference, system, linestring, formed, distances, side sinuosity curve, distance, length, endpoints, sinuosity, ratio, straight smooth adding, corners, smoothed, dimensionality, round, output, contain, input, retain, extra, smooths, nodes, values, same soundex code, represented, similar, matching, algorithm, soundex, same, phonetic, representation, strings, sounds sqlite_fetch_and_increment attributes, children, applied, uncommitted, works, relations, prefetched, intended, creating, several, auto_increment, form, databases, transaction, parents, filter_value, mode, open, primary, evaluate, sidenote, add, require, impossible, default_values, table, insert, nice, formats, current, adding, get, target, work, specified, usage, columns, retrieved, autoincrementing, new, limitation, gpkg, parallel, database, additional, makes, postgres, modifies, sequence, cached, manage, key, same, id_field, acquire, filtered, default, filter_attribute, parent, option, unsafe, sqlite, separate, parameter, map, row, configurations, lifetime, processes, incremented, able, features, purpose sqrt root, square square_wave waves, rectangular, constructs, square, boundary square_wave_randomized waves, rectangular, constructs, square, boundary, randomized start_point first, node stdev deviation, field, standard, aggregate straight_distance_2d distance, curve, circularstring, first, last, direct, euclidean, linestring, vertex string_to_array split, convert, separate, delimiter, divides strpos substring, position, return, found, first, matching substr part sum field, summed, aggregate sym_difference portions, represents, intersect tan angle, tangent tapered_buffer varies, buffer, line, diameter, length title letter, words, lower, converts, leading, capital, title, case to_base64 encoding, base, binary, encodes to_date provided, additional, user, format_date, parse, qdate, converts, default, current, format, object, fromstring, date, optional, documentation, see to_datetime provided, additional, user, format_date, parse, qdate, converts, default, datetime, current, format, object, fromstring, optional, documentation, qtime, see to_decimal converts, minute, degree, equivalent, second, coordinate, decimal to_dm converts, minute, degree, coordinate to_dms converts, minute, degree, second, coordinate to_int converts, invalid, converted, integer to_interval type, month, converts, date, interval, take, hours, days to_json formatted, json, array, create, other, map to_real converts, precision, invalid, rounded, numbers, changes, real, result, converted, saving, conversion, smaller to_string converts, number to_time provided, additional, format, object, parse, time, converts, fromstring, optional, documentation, qtime, see touches point, common, touches, interiors, tests, intersect transform crs, source, transformed, destination, reprojection translate spatial, reference, calculations, system, translated, displace, move triangular_wave waves, boundary, constructs, triangular triangular_wave_randomized waves, boundary, constructs, randomized, triangular trim removes, leading, whitespace, spaces, tabs, trailing try return, tries, error, alternative, provided, exception union union, dissolve, point, represents, set upper converts, upper, letters, case url_encode encoded, producing, form, characters, query, plus, url, compliant, converted, map, sign, transforms uuid createuuid, generates, method, unique, quuid, identifier, row var stored, variable, specified wave waves, rounded, sine, boundary, constructs wave_randomized waves, sine, boundary, curved, constructs, randomized wedge_buffer buffer, wedge, point, originating, shaped week weeks, week, date, extracts, interval, number with_variable variable, argument, value, evaluation within tests, contains, completely wordwrap maximum, minimum, wrapped, characters, multiline x centroid, point, coordinate x_max coordinate, spatial, reference, calculations, system, maximum x_min coordinate, spatial, reference, calculations, system, minimum y centroid, point, coordinate y_max coordinate, spatial, reference, calculations, system, maximum y_min coordinate, spatial, reference, calculations, system, minimum year year, years, date, extracts, part, interval, number z point, coordinate z_max coordinate, maximum z_min coordinate, minimum || behavior, different, see, concat, null, joins, result, values ~ white, space, regular, performs, backslash, characters, escaped, character, expression, match","title":"espressione e tag"},{"location":"gr_funzioni/gruppo_funzioni/#tag-e-espressioni","text":"tag espressioni geometry, get_feature_by_id absolute abs adding smooth, sqlite_fetch_and_increment, densify_by_distance corners smooth smoothed smooth dimensionality smooth round smooth, buffer output smooth, scale_exp, scale_linear contain smooth, map_concat, overlay_within input smooth, bounds, segments_to_lines, extrude, apply_dash_pattern, hamming_distance, scale_exp, close_line, longest_common_substring, geometry_n, line_merge, clamp, scale_linear, nodes_to_points retain smooth extra smooth smooths smooth nodes smooth, simplify_vw, simplify values smooth, +, same smooth, sqlite_fetch_and_increment, soundex, IS NOT, IS, hamming_distance, rand, randf, overlaps addition + null +, result +, affine affine_transform coordinate affine_transform, x, y, to_dm, to_decimal, to_dms, z_max, $vertex_x, $vertex_y, z_min, x_max, y_max, x_min, y_min, $x_at, $y_at, $x, $y, make_point_m, z operations affine_transform spatial affine_transform, bounds, bounds_height, single_sided_buffer, x_max, y_max, x_min, y_min, buffer, length3D, perimeter, area, distance, offset_curve, translate, extend, scale, rotate, bounds_width transformation affine_transform reference affine_transform, bounds, bounds_height, single_sided_buffer, x_max, y_max, x_min, y_min, buffer, length3D, perimeter, area, distance, offset_curve, translate, extend, scale, rotate, bounds_width offset affine_transform system affine_transform, bounds, bounds_height, single_sided_buffer, x_max, y_max, x_min, y_min, buffer, env, length3D, perimeter, area, offset_curve, translate, extend, scale, rotate, bounds_width calculations affine_transform, bounds, bounds_height, pi, x_max, y_max, x_min, y_min, buffer, length3D, perimeter, area, translate, scale, rotate, bounds_width translation affine_transform rotation affine_transform order affine_transform, regexp_matches, array_reverse, age, reverse added affine_transform, array_prepend, array_append, array_insert, current_parent_value, map_insert, array_prioritize, current_value present affine_transform, array_prioritize scale affine_transform, $scale aggregate aggregate, count_distinct, count, count_missing, mean, relation_aggregate, array_to_string, stdev, range, sum, minority, max_length, maximum, median, minimum, majority combine aggregate features aggregate, count, sqlite_fetch_and_increment, relation_aggregate, overlay_nearest, num_selected, current_parent_value, overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint, current_value calculated aggregate, $length, $perimeter, q1, iqr, q3 merge aggregate, map_to_hstore concatenate aggregate, map_concat sum aggregate, array_sum mean aggregate, array_mean, mean, levenshtein median aggregate, array_median, array_majority, array_minority, median count aggregate, count_distinct, count, count_missing, num_geometries, length, array_length, min_length, max_length, num_interior_rings quartile aggregate, q1, iqr, q3 minimum aggregate, array_min, z_min, x_min, y_min, levenshtein, minimal_circle, range, convex_hull, min, min_length, wordwrap, minimum, m_min, distance, rand, randf maximum aggregate, array_max, z_max, x_max, y_max, range, max_length, max, maximum, densify_by_distance, m_max, wordwrap, rand, randf minority aggregate, minority majority aggregate, majority standard aggregate, stdev, hausdorff_distance deviation aggregate, stdev length aggregate, sinuosity, hamming_distance, length, $length, $perimeter, hausdorff_distance, min_length, max_length, lpad, rpad, length3D, tapered_buffer unique aggregate, concatenate_unique, uuid distinct count_distinct, array_distinct matching count, get_feature, relation_aggregate, soundex, hausdorff_distance, layer_property, regexp_match, strpos missing count_missing, array_prioritize aggregated concatenate, collect, concatenate_unique, array_agg field concatenate, concatenate_unique, array_agg, attributes, represent_value, stdev, current_parent_value, q1, iqr, range, sum, minority, majority, current_value, q3 joined concatenate, concatenate_unique delimiter concatenate, concatenate_unique, array_to_string, string_to_array strings concatenate, concatenate_unique, regexp_matches, replace, soundex, format_date, hamming_distance, levenshtein, concat, min_length, max_length, map_credits, longest_common_substring, create_ramp multipart collect, num_geometries, geometry_n algorithm parameter, soundex, simplify_vw, simplify parameter parameter, sqlite_fetch_and_increment, ILIKE, LIKE, hausdorff_distance, array processing parameter, $geometry alpha set_color_part, color_hsva, color_hsla, color_cmyka, color_rgba, color_mix_rgb, color_part component set_color_part, color_part specific set_color_part, env, geometry_n, color_part, point_n red set_color_part, color_rgba, color_mix_rgb, color_rgb, color_part color set_color_part, color_hsva, color_hsla, color_hsv, color_hsl, color_cmyka, color_cmyk, darker, lighter, color_grayscale_average, color_rgba, color_mix_rgb, color_rgb, create_ramp, ramp_color, color_part, project_color sets set_color_part, hausdorff_distance angle cos, acos, tan, angle_at_vertex, line_interpolate_angle, azimuth, main_angle, sin, asin, atan2, atan cosine cos, acos inverse acos, asin, atan2, atan radians acos, degrees, radians, project, azimuth, asin, atan tangent tan, atan2, atan angles angle_at_vertex, line_interpolate_angle specified angle_at_vertex, sqlite_fetch_and_increment, line_substring, extrude, apply_dash_pattern, line_interpolate_angle, line_interpolate_point, line_locate_point, hausdorff_distance, distance_to_vertex, scale_exp, pole_of_inaccessibility, lpad, rpad, densify_by_distance, rand, randf, array_prioritize, clamp, is_layer_visible, extend, var, day_of_week clockwise angle_at_vertex, force_rhr, line_interpolate_angle, force_polygon_ccw, force_polygon_cw, azimuth, main_angle linestring angle_at_vertex, single_sided_buffer, extrude, line_interpolate_angle, straight_distance_2d, line_interpolate_point, length, $length, line_locate_point, line_merge, offset_curve, extend degrees angle_at_vertex, degrees, radians, line_interpolate_angle, main_angle bisector angle_at_vertex north angle_at_vertex, line_interpolate_angle, azimuth, main_angle average angle_at_vertex, mean vertex angle_at_vertex, $vertex_x, $vertex_y, straight_distance_2d, distance_to_vertex, $vertex_index, end_point, $vertex_z, $vertex_as_point, point_n, nodes_to_points array array_prepend, array_append, array_insert, array_median, array_distinct, array_all, array_slice, array_intersect, array_remove_all, array_agg, array_first, array_find, regexp_matches, array_mean, array_sum, array_filter, array_last, map_avals, map_akeys, array_replace, replace, array_max, array_min, [], array_get, array_remove_at, array_reverse, array_majority, array_minority, overlay_nearest, array_length, array_foreach, to_json, overlay_intersects, overlay_contains, overlay_touches, array, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint, generate_series, array_sort, array_prioritize beginning array_prepend, line_substring end array_append, array_slice, CASE, line_substring, close_line, is_closed, array_prioritize, extend, shortest_line position array_insert, array_slice, array_get, line_locate_point, regexp_match, strpos arithmetic array_median, array_mean, array_sum ignored array_median, array_mean, array_sum containing array_distinct, attributes, array_cat, map_concat, array, map, generate_series contains array_all, Meshes, left, right, overlay_contains, contains, within compare array_all, ILIKE, IS NOT, IS, LIKE, nullif search array_all, get_feature defined array_slice, intersects_bbox arguments array_slice, represent_attributes, display_expression, maptip, format, coalesce, is_selected, atan2 start array_slice, line_substring, project, is_closed, extend, shortest_line slice array_slice portion array_slice, line_substring, regexp_substr, intersects, intersection index array_slice, array_find, [], array_get, array_remove_at, $vertex_index element array_intersect, [] exists array_intersect, map_insert, map_exist, map_get, file_exists intersection array_intersect, relate overlap array_intersect, intersection entries array_remove_all, map_concat removed array_remove_all, array_remove_at first array_first, array_find, array_get, get_feature, CASE, ascii, ILIKE, LIKE, straight_distance_2d, q1, start_point, close_line, $x, $y, $z, left, coalesce, regexp_match, array_prioritize, extend, strpos found array_find, IN, env, raster_value, regexp_match, strpos lowest array_find groups regexp_matches capturing regexp_matches captured regexp_matches appear regexp_matches supplied regexp_matches, array_replace, replace, crosses, ILIKE, LIKE, format, regexp_substr, regexp_replace regular regexp_matches, make_regular_polygon, regexp_substr, regexp_replace, regexp_match, ~ numeric array_mean, array_sum items array_filter limit array_filter evaluates array_filter, <=, >=, =, <>, eval, eval_template, >, < last array_last, array_get, straight_distance_2d, end_point, right, extend map map_avals, map_akeys, array_replace, replace, [], sqlite_fetch_and_increment, represent_attributes, attributes, map_concat, map_delete, $scale, represent_value, url_encode, map_to_hstore, hstore_to_map, to_json, $map, item_variables, map_credits, map_insert, map_exist, map_get, create_ramp, map, map_prefix_keys keys map_akeys, represent_attributes, attributes, map, map_prefix_keys replaced array_replace, replace, regexp_replace operator [] nth array_get one array_get, densify_by_count, densify_by_distance reversed array_reverse, flip_coordinates associated char, ascii character char, ascii, levenshtein, hash, lpad, rpad, ~ unicode char, ascii, regexp_match code char, ascii, soundex attribute attribute, get_feature, represent_attributes, current_parent_value, current_value find get_feature, pole_of_inaccessibility attributes color_hsva, color_hsla, sqlite_fetch_and_increment, color_hsv, represent_attributes, color_hsl, attributes transparency color_hsva, color_hsla hue color_hsva, color_hsla, color_hsv, color_hsl representation color_hsva, color_hsla, color_hsv, represent_attributes, color_hsl, soundex, geom_from_wkb, color_cmyka, color_cmyk, represent_value, relate, color_grayscale_average, color_rgba, color_rgb, geom_from_gml, geom_from_wkt, geom_to_wkt, geom_to_wkb saturation color_hsva, color_hsla, color_hsv, color_hsl lightness color_hsla, color_hsl children sqlite_fetch_and_increment applied sqlite_fetch_and_increment uncommitted sqlite_fetch_and_increment works sqlite_fetch_and_increment, LIKE, num_selected relations sqlite_fetch_and_increment prefetched sqlite_fetch_and_increment intended sqlite_fetch_and_increment creating sqlite_fetch_and_increment several sqlite_fetch_and_increment, concat auto_increment sqlite_fetch_and_increment form sqlite_fetch_and_increment, url_encode, current_parent_value, current_value databases sqlite_fetch_and_increment transaction sqlite_fetch_and_increment parents sqlite_fetch_and_increment filter_value sqlite_fetch_and_increment mode sqlite_fetch_and_increment open sqlite_fetch_and_increment primary sqlite_fetch_and_increment evaluate sqlite_fetch_and_increment, CASE sidenote sqlite_fetch_and_increment add sqlite_fetch_and_increment require sqlite_fetch_and_increment, pole_of_inaccessibility impossible sqlite_fetch_and_increment default_values sqlite_fetch_and_increment table sqlite_fetch_and_increment, current_value insert sqlite_fetch_and_increment nice sqlite_fetch_and_increment formats sqlite_fetch_and_increment, format_date current sqlite_fetch_and_increment, $vertex_x, $vertex_y, $geometry, $x_at, $y_at, $scale, overlay_nearest, $length, $perimeter, current_parent_value, $x, $y, $z, $vertex_index, overlay_intersects, $map, $page, overlay_contains, overlay_touches, $vertex_z, $vertex_as_point, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint, to_date, to_datetime, $id, $rownum, now, current_value get sqlite_fetch_and_increment target sqlite_fetch_and_increment, overlay_nearest, overlay_intersects, overlay_contains, overlay_touches, lpad, rpad, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint work sqlite_fetch_and_increment usage sqlite_fetch_and_increment, map_credits columns sqlite_fetch_and_increment retrieved sqlite_fetch_and_increment autoincrementing sqlite_fetch_and_increment new sqlite_fetch_and_increment, densify_by_count, densify_by_distance limitation sqlite_fetch_and_increment gpkg sqlite_fetch_and_increment parallel sqlite_fetch_and_increment, line_interpolate_angle, hausdorff_distance database sqlite_fetch_and_increment additional sqlite_fetch_and_increment, densify_by_distance, to_time, to_date, to_datetime makes sqlite_fetch_and_increment postgres sqlite_fetch_and_increment modifies sqlite_fetch_and_increment sequence sqlite_fetch_and_increment, generate_series cached sqlite_fetch_and_increment manage sqlite_fetch_and_increment key sqlite_fetch_and_increment, map_concat, map_delete, map_insert, map_exist, map_get id_field sqlite_fetch_and_increment acquire sqlite_fetch_and_increment filtered sqlite_fetch_and_increment default sqlite_fetch_and_increment, hausdorff_distance, display_expression, maptip, num_selected, format_number, to_date, to_datetime filter_attribute sqlite_fetch_and_increment parent sqlite_fetch_and_increment, current_parent_value option sqlite_fetch_and_increment unsafe sqlite_fetch_and_increment sqlite sqlite_fetch_and_increment separate sqlite_fetch_and_increment, string_to_array row sqlite_fetch_and_increment, uuid, $id, $rownum, current_value configurations sqlite_fetch_and_increment lifetime sqlite_fetch_and_increment processes sqlite_fetch_and_increment incremented sqlite_fetch_and_increment able sqlite_fetch_and_increment purpose sqlite_fetch_and_increment see represent_attributes, configured represent_attributes, represent_value names represent_attributes, attributes type represent_attributes, format_date, represent_value, geometry_type, mime_type, to_interval, is_multipart details represent_attributes, display_expression, maptip, is_selected depends represent_attributes, represent_value, decode_uri, env widget represent_attributes, represent_value, current_parent_value base log, log10, from_base64, to_base64, base_file_name logarithm log, log10, ln behavior different concat joins box bounds, bounds_height, intersects_bbox, oriented_bbox, bounds_width represents bounds, minimal_circle, convex_hull, oriented_bbox, difference, sym_difference, intersection, union bounding bounds, bounds_height, intersects_bbox, oriented_bbox, main_angle, bounds_width height bounds_height tests intersects_bbox, crosses, relate, contains, touches, disjoint, intersects, overlaps, within, if overlaps intersects_bbox, intersects, overlaps intersect intersects_bbox, difference, touches, sym_difference, disjoint, intersects buffer wedge_buffer, buffer_by_m, tapered_buffer wedge wedge_buffer point wedge_buffer, x, y, closest_point, geometry_type, project, line_interpolate_point, line_locate_point, close_line, $x, $y, $z, exif_geotag, pole_of_inaccessibility, contains, make_point, touches, make_point_m, z, make_line, m, $vertex_as_point, point_on_surface, raster_value, union originating wedge_buffer shaped wedge_buffer buffering single_sided_buffer formed single_sided_buffer, is_valid, offset_curve distances single_sided_buffer, line_substring, levenshtein, offset_curve, extend side single_sided_buffer, offset_curve calculate Meshes, pole_of_inaccessibility functions Meshes, $geometry, age return Meshes, CASE, line_merge, regexp_match, try, strpos mesh Meshes, $vertex_x, $vertex_y, $vertex_index, $vertex_z, $vertex_as_point related Meshes pi pi casewhen CASE clause CASE series CASE, make_polygon, make_line met CASE corresponding CASE, map_delete, hamming_distance, line_locate_point none CASE evaluated CASE, display_expression, maptip, array_foreach, num_selected components CASE, color_cmyka, color_cmyk, color_rgba, color_rgb conditions CASE optional CASE, hausdorff_distance, make_point, make_polygon, to_time, to_date, to_datetime marks CASE evaluation CASE, with_variable else CASE case CASE, ILIKE, lower, upper, hamming_distance, levenshtein, title, longest_common_substring stops CASE condition CASE, AND, OR, NOT, nullif, if set CASE, convex_hull, env, collect_geometries, union centroid x, y, point_on_surface child relation_aggregate relation relation_aggregate, current_parent_value circular make_circle polygon make_circle, force_rhr, geometry_type, $perimeter, densify_by_count, interior_ring_n, densify_by_distance, make_polygon, perimeter, area, make_ellipse, exterior_ring, boundary, roundness, make_regular_polygon, num_interior_rings, num_rings, make_triangle closest closest_point, line_locate_point, hausdorff_distance nearest closest_point represented soundex, hash similar soundex, levenshtein, hausdorff_distance soundex soundex phonetic soundex sounds soundex collection num_geometries, geometry_n, num_interior_rings, num_rings parts num_geometries, order_parts, extend combination combine union combine, union common array_majority, array_minority, crosses, longest_common_substring, touches crosses crosses, overlay_crosses interior crosses, force_rhr, force_polygon_ccw, force_polygon_cw, interior_ring_n, contains, num_interior_rings points crosses, buffer, contains, azimuth, is_closed, boundary, make_rectangle_3points, inclination numbers ILIKE, LIKE, to_real, concat, make_time, make_datetime, generate_series, make_date insensitive ILIKE match ILIKE, length3D, perimeter, ~ sensitive ILIKE, LIKE, hamming_distance, levenshtein, longest_common_substring matches ILIKE, LIKE, regexp_substr pattern ILIKE, LIKE, apply_dash_pattern equal IS, <=, >=, =, <>, buffer, hausdorff_distance, overlay_equals identical IS compares <=, >=, =, <>, >, < less <=, < left <=, >=, >, <, lpad right <=, >=, force_rhr, >, <, rpad greater >=, > concatenated array_cat arrays array_cat concatenates array_to_string, concat join array_to_string, buffer consisting segments_to_lines segment segments_to_lines, hausdorff_distance, extend multi segments_to_lines, extrude, close_line, collect_geometries, is_multipart line segments_to_lines, line_substring, apply_dash_pattern, geometry_type, reverse, close_line, densify_by_count, buffer_by_m, densify_by_distance, length3D, make_line, is_closed, exterior_ring, extend, shortest_line, tapered_buffer maps map_concat contexts force_rhr, $scale boundary force_rhr, pole_of_inaccessibility, boundary, triangular_wave_randomized, triangular_wave, square_wave, square_wave_randomized, wave, wave_randomized rings force_rhr, force_polygon_ccw, force_polygon_cw, num_interior_rings, num_rings bounded force_rhr force_polygon_cw force_rhr explicit force_rhr area force_rhr, area, simplify_vw exterior force_rhr, force_polygon_ccw, force_polygon_cw, contains, exterior_ring, num_rings inconsistency force_rhr use force_rhr hand force_rhr particular force_rhr respect force_rhr, force_polygon_ccw, force_polygon_cw counter force_rhr, force_polygon_ccw, force_polygon_cw forces force_rhr, force_polygon_ccw, force_polygon_cw ring force_rhr, apply_dash_pattern, interior_ring_n, make_polygon, exterior_ring, boundary recommended force_rhr oriented force_rhr, oriented_bbox, main_angle direction force_rhr, reverse rule force_rhr definition force_rhr, env converts degrees, radians, to_int, lower, to_dm, to_decimal, to_dms, to_string, to_real, upper, title, to_time, to_date, to_datetime, to_interval invalid to_int, to_real converted to_int, to_real, concat, url_encode, datetime_from_epoch integer to_int, rand letters lower, upper, env lower lower, hausdorff_distance, title minute to_dm, to_decimal, to_dms, make_time, make_datetime, make_interval degree to_dm, to_decimal, to_dms equivalent to_decimal second to_decimal, to_dms, make_time, make_datetime, array_prioritize decimal to_decimal, format_number, round number to_string, day, month, floor, hour, second, densify_by_count, minute, ceil, round, $rownum, simplify, week, year precision to_real rounded to_real, wave changes to_real real to_real saving to_real conversion to_real, geom_from_wkb, geom_from_gml, geom_from_wkt, geom_to_wkt, geom_to_wkb smaller to_real, levenshtein, lpad, rpad upper upper created geom_from_wkb wkb geom_from_wkb, geom_to_wkb binary geom_from_wkb, from_base64, to_base64, mime_type, geom_to_wkb known geom_from_wkb, geom_from_wkt, geom_to_wkt, geom_to_wkb createuuid uuid generates uuid, densify_by_count, densify_by_distance method uuid, hausdorff_distance, hash quuid uuid identifier uuid criteria order_parts multigeometry order_parts orders order_parts given order_parts, scale_exp, hash, scale_linear crs transform source transform transformed transform destination transform reprojection transform retrieves $x_at, $y_at, exif feature $x_at, $y_at curve sinuosity, line_substring, extrude, straight_distance_2d, scale_exp distance sinuosity, line_interpolate_angle, straight_distance_2d, project, buffer, line_interpolate_point, overlay_nearest, hamming_distance, length, $length, $perimeter, line_locate_point, levenshtein, hausdorff_distance, distance_to_vertex, densify_by_distance, length3D, perimeter, simplify endpoints sinuosity sinuosity sinuosity ratio sinuosity, color_mix_rgb straight sinuosity, simplify_vw, simplify measured line_substring, azimuth, inclination falls line_substring existing line_substring interpolated line_substring, line_interpolate_point version extrude, scale, rotate extension extrude, file_name, file_suffix extruded extrude custom format_date uses format_date, pole_of_inaccessibility format format_date, format, to_time, to_date, to_datetime time format_date, hour, second, make_time, minute, datetime_from_epoch, to_time, now date format_date, day, month, epoch, datetime_from_epoch, to_date, now, to_interval, day_of_week, week, make_date, year qdatetime format_date tostring format_date cyan color_cmyka, color_cmyk black color_cmyka, color_cmyk yellow color_cmyka, color_cmyk darker darker, lighter lighter darker, lighter dash apply_dash_pattern stroked apply_dash_pattern multilinestring apply_dash_pattern, line_merge, extend applies apply_dash_pattern, color_grayscale_average returning apply_dash_pattern extracts day, month, hour, second, left, minute, week, year interval day, month, age, hour, second, epoch, densify_by_distance, make_interval, minute, to_interval, week, year days day, make_interval, to_interval day day, make_datetime, day_of_week, make_date months month part month, hour, second, minute, substr, geometry_n, difference, collect_geometries, year month month, make_datetime, make_interval, to_interval, make_date deleted map_delete denominator $scale canvas $scale, $map widgets represent_value layer decode_uri, densify_by_count, densify_by_distance data decode_uri, mime_type dataprovider decode_uri provider decode_uri uri decode_uri underlying decode_uri, overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint decodes decode_uri, from_base64 available decode_uri describing geometry_type difference age needs age datetimes age extract age information age following age dates age yearmonthweekdayhourminutesecond age dimensional relate relationship relate extended relate, extend model relate vertices reverse, densify_by_count, buffer_by_m, densify_by_distance, simplify_vw, simplify, num_points reverses reverse reversing reverse circularstring straight_distance_2d direct straight_distance_2d euclidean straight_distance_2d elevation project projected project, distance azimuth project, azimuth bearing project, extend segments buffer, simplify_vw, simplify miter buffer cap buffer along line_interpolate_point, line_locate_point layers overlay_nearest, map_credits large overlay_nearest, hausdorff_distance, simplify slow overlay_nearest lot overlay_nearest hamming hamming_distance equates hamming_distance, levenshtein, NULL characters hamming_distance, length, url_encode, left, right, min_length, max_length, wordwrap, ~ comparison hamming_distance positions hamming_distance planimetric length, $length, $perimeter, length3D, perimeter, area perimeter $length, $perimeter, perimeter project $length, $perimeter, length3D, perimeter, area, project_color settings $length, $perimeter, length3D, perimeter, area ellipsoid $length, $perimeter, length3D, perimeter, area border $length setting $length, $perimeter required levenshtein edit levenshtein indicate levenshtein similarity levenshtein, hausdorff_distance insertions levenshtein measure levenshtein, hausdorff_distance, m_max, m_min, m change levenshtein substitutions levenshtein edits levenshtein larger levenshtein, densify_by_count deletions levenshtein levenshtein levenshtein dissimilar hausdorff_distance densify hausdorff_distance linestrings hausdorff_distance, line_merge, boundary other hausdorff_distance, concat, to_json total hausdorff_distance close hausdorff_distance, roundness executed hausdorff_distance specifying hausdorff_distance occurs hausdorff_distance fraction hausdorff_distance testing hausdorff_distance discrete hausdorff_distance linear hausdorff_distance, scale_linear approximate hausdorff_distance, pole_of_inaccessibility split hausdorff_distance, string_to_array make hausdorff_distance approach hausdorff_distance, pole_of_inaccessibility examples hausdorff_distance provided hausdorff_distance, color_grayscale_average, color_mix_rgb, to_time, to_date, to_datetime, raster_value, rand, randf, try, array_sort performs hausdorff_distance, ~ insufficient hausdorff_distance networks hausdorff_distance specify hausdorff_distance decreasing hausdorff_distance approximation hausdorff_distance cases hausdorff_distance densification hausdorff_distance computing hausdorff_distance argument hausdorff_distance, rand, randf, with_variable subsegments hausdorff_distance hausdorff hausdorff_distance exact hausdorff_distance indicating hausdorff_distance subset hausdorff_distance division %, / remainder % downwards floor rounds floor, ceil, round dynamic eval, eval_template fields eval, eval_template parameters eval, eval_template, map expression eval, ~ expand eval, eval_template context eval, eval_template, current_parent_value passed eval, eval_template, datetime_from_epoch, map, line_merge variables eval, eval_template, item_variables, env template eval_template elements array_length, map_to_hstore, array_sort empty concat, is_empty_or_null, is_empty is_empty is_empty_or_null coordinates is_empty_or_null, is_empty, flip_coordinates false is_empty_or_null, is_empty, is_closed is_empty_or_null is_empty enclosing minimal_circle minimal minimal_circle, oriented_bbox, main_angle encloses minimal_circle, convex_hull circle minimal_circle, roundness smallest minimal_circle, min encoded url_encode producing url_encode query url_encode plus url_encode url url_encode compliant url_encode sign url_encode transforms url_encode, scale_exp, scale_linear encoding from_base64, to_base64 encodes to_base64 display display_expression maptip maptip iterate array_foreach item array_foreach, $map, item_variables, map_credits selected num_selected, is_selected exif exif, exif_geotag tag exif file exif, file_name, file_suffix, exif_geotag, file_path, file_exists, is_file, file_size, base_file_name image exif, exif_geotag exponential exp, scale_exp ease scale_exp domain scale_exp, scale_linear range scale_exp, iqr, range, rand, randf, clamp, scale_linear name file_name, file_path, base_file_name directory file_name, is_directory, file_path, base_file_name path file_name, file_suffix, env, is_directory, file_path, file_exists, is_file, base_file_name suffix file_suffix, base_file_name convention force_polygon_ccw, force_polygon_cw hours hour, make_interval, to_interval hour hour, make_time, make_datetime datetime hour, second, make_datetime, minute, datetime_from_epoch, to_datetime, day_of_week seconds second, make_interval actual current_parent_value, current_value unsaved current_parent_value, current_value wrapped current_parent_value, wordwrap retrieve current_parent_value differ current_parent_value, current_value edited current_parent_value, current_value embedded current_parent_value coalesce current_parent_value filter current_parent_value, color_grayscale_average usable current_parent_value inter iqr statistics iqr, raster_statistic aggregates iqr summed sum grayscale color_grayscale_average node start_point, end_point, point_n, nodes_to_points closed close_line, is_closed appending close_line multipoint $x, $y, $z, nodes_to_points altitude $z 3D $z substring left, right, longest_common_substring, regexp_match, strpos leftmost left formatted map_to_hstore, hstore_to_map, to_json, format_number, from_json hstore map_to_hstore, hstore_to_map json to_json, from_json create to_json, simplify_vw truncates format_number places format_number, round separator format_number thousands format_number locale format_number language format_number original densify_by_count geometric centroid center centroid geotags exif_geotag green color_rgba, color_mix_rgb, color_rgb blue color_rgba, color_mix_rgb, color_rgb mixing color_mix_rgb colors color_mix_rgb hash md5, sha256, hash hex hash bytes hash, file_size byte hash digits hash long hash, main_angle bits hash produces hash hull convex_hull convex convex_hull inaccessibility pole_of_inaccessibility precise pole_of_inaccessibility tolerances pole_of_inaccessibility calculates pole_of_inaccessibility, length3D, roundness guaranteed pole_of_inaccessibility true pole_of_inaccessibility iterations pole_of_inaccessibility internal pole_of_inaccessibility polylabel pole_of_inaccessibility distant pole_of_inaccessibility pole pole_of_inaccessibility take pole_of_inaccessibility, to_interval surface pole_of_inaccessibility, area, point_on_surface tolerance pole_of_inaccessibility iterative pole_of_inaccessibility hole interior_ring_n intersected overlay_intersects least overlay_intersects, minority, overlay_contains, overlay_touches, min predicate overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint geos overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint postgis overlay_intersects, overlay_contains described overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint st_intersects overlay_intersects intersects overlay_intersects, intersects milliseconds epoch, datetime_from_epoch epoch epoch loads from_json rightmost right latitude flip_coordinates longitude flip_coordinates swapped flip_coordinates repairing flip_coordinates copy flip_coordinates layout $map, item_variables, $page, map_credits drawn $map main $map print $map, item_variables, $page window $map overview $map page $page occurring minority, majority contained overlay_contains, IN, overlaps st_contains overlay_contains touches overlay_touches, touches touched overlay_touches st_touches overlay_touches padded lpad, rpad width lpad, rpad, bounds_width truncated lpad, rpad fill lpad, rpad letter title words title leading title, trim capital title title title lie contains, point_on_surface lies contains within contains according buffer_by_m, is_valid varies buffer_by_m, tapered_buffer diameter buffer_by_m, tapered_buffer list array, IN, coalesce, map_credits rights map_credits credit map_credits longest max, longest_common_substring biggest max most max largest max overridden map_insert gradient create_ramp steps create_ramp ramp create_ramp, ramp_color edges densify_by_distance densified densify_by_distance multiline wordwrap vertical azimuth year make_datetime, make_interval, make_date, year weeks make_interval, week minutes minute multiplication * natural ln negates NOT operating env content env prefixes env gets env drive env check env, if environment env inject env configuration env administrator env variable env, var, with_variable documentation env, to_time, to_date, to_datetime handy env covers main_angle rectangle main_angle, make_rectangle_3points axis main_angle outer make_polygon inner make_polygon clip difference collects collect_geometries object collect_geometries, length3D, perimeter, to_time, to_date, to_datetime localtime datetime_from_epoch msecs datetime_from_epoch coordinated datetime_from_epoch universal datetime_from_epoch pair map single line_merge merged line_merge connected line_merge folder is_directory, file_path, base_file_name differs length3D, perimeter units length3D, perimeter, area, distance interiors touches overlay point_on_surface coincident is_closed elliptical make_ellipse representing exterior_ring, ramp_color instance boundary combinatorial boundary topological boundary collections boundary types boundary closure boundary perfect roundness flat roundness shape roundness portions sym_difference power ^ equals overlay_equals, nullif st_equals overlay_equals st_crosses overlay_crosses crossed overlay_crosses st_disjoint overlay_disjoint disjoint overlay_disjoint prefixed map_prefix_keys property layer_property metadata layer_property parse to_time, to_date, to_datetime fromstring to_time, to_date, to_datetime qtime to_time, to_datetime user to_date, to_datetime format_date to_date, to_datetime qdate to_date, to_datetime raster raster_value, raster_statistic random rand, randf inclusive rand, randf seed rand, randf depending rand, randf, if float randf removes trim, simplify_vw whitespace trim spaces trim tabs trim trailing trim tries try error try alternative try exception try holes num_interior_rings, num_rings including num_rings root sqrt square sqrt, make_square, square_wave, square_wave_randomized rules is_valid valid is_valid ogc is_valid scheme project_color share disjoint, intersects, overlaps space disjoint, intersects, overlaps, ~ dimension overlaps shared intersection sine sin, asin, wave, wave_randomized size file_size sorted array_sort, array_prioritize ordering array_prioritize offsetting offset_curve translated translate displace translate move translate restricts clamp visible is_layer_visible spikes simplify_vw areas simplify_vw simplifies simplify_vw, simplify narrow simplify_vw visvalingam simplify_vw threshold simplify_vw, simplify removing simplify_vw, simplify based simplify_vw, simplify small simplify_vw convert string_to_array divides string_to_array diagonal make_square amount extend lines extend extends extend resultant shortest_line joining shortest_line shortest shortest_line static now evaluating now stored var deviations simplify reduces simplify preserves simplify substitute nullif subtraction - signs atan2 quadrant atan2 completely within conditional if text geom_from_wkt, geom_to_wkt wkt geom_from_wkt, geom_to_wkt srid geom_to_wkt third q3 interpolation scale_linear triangle make_triangle dissolve union value with_variable scaled scale rotated rotate waves triangular_wave_randomized, triangular_wave, square_wave, square_wave_randomized, wave, wave_randomized constructs triangular_wave_randomized, triangular_wave, square_wave, square_wave_randomized, wave, wave_randomized randomized triangular_wave_randomized, square_wave_randomized, wave_randomized triangular triangular_wave_randomized, triangular_wave rectangular square_wave, square_wave_randomized curved wave_randomized week day_of_week, week corresponds day_of_week ranges day_of_week saturday day_of_week white ~ backslash ~ escaped ~ years year zenith inclination nadir inclination inclination inclination >= QGIS 3.24 \u21a9","title":"tag e espressioni"},{"location":"gr_funzioni/aggrega/aggrega_unico/","tags":["gruppo"],"text":"Gruppo Aggrega \u21b5 Abstract Contiene funzioni che aggregano valori nei livelli e campi. aggregate \u21b5 Restituisce un valore aggregato calcolato usando elementi da un altro vettore. Sintassi: aggregate( layer , aggregate , expression [, filter ][, concatenator='' ][, order_by ) [ ] indica componenti opzionali Argomenti: layer una stringa, rappresentante o un nome di un layer o un ID di layer aggregate una stringa corrispondente all'aggregato da calcolare. Opzioni valide sono: count count_distinct count_missing min max sum mean median stdev stdevsample range minority majority q1: primo quartile q3: terzo quartile iqr: inter quartile range min_length: minima lunghezza stringa max_length: massima lunghezza stringa concatenate: unisce stringhe con un concatenatore collect: crea una geometria multiparte aggregata expression sotto-espressione o nome campo da aggregare filter espressione filtro opzionale per limitare gli elementi usati per calcolare l'aggregato. I campi e la geometria provengono dagli elementi del vettore unito. Si pu\u00f2 accedere all'elemento sorgente con la variabile @parent . concatenator stringa opzionale da usare per unire i valori per il raggruppamento 'concatenate' order_by espressione filtro opzionale per ordinare gli elementi usati per calcolare il valore aggregato. I campi e la geometria provengono dagli elementi del vettore unito. Da predefinito, gli elementi verranno restituiti in un ordine non specificato. Esempi: aggregate(layer:='rail_stations',aggregate:='sum',expression:=\"passengers\") \u2192 somma tutti i valori per il campo passengers nel layer rail_stations aggregate('rail_stations','sum', \"passengers\"/7) \u2192 calcola la media giornaliera di \"passengers\" dividendo il campo \"passengers\" per 7 prima di sommare i valori aggregate(layer:='rail_stations',aggregate:='sum',expression:=\"passengers\",filter:=\"class\">3) \u2192 somma tutti i valori per il campo \"passengers\" soltanto dagli elementi geometrie dove l'attributo \"class\" \u00e8 maggiore di 3 aggregate(layer:='rail_stations',aggregate:='concatenate', expression:=\"name\", concatenator:=',') \u2192 elenco separato da virgole del campo name per tutti gli elementi nel vettore rail_stations aggregate(layer:='countries', aggregate:='max', expression:=\"code\", filter:=intersects( $geometry, geometry(@parent) ) ) \u2192 Il codice Paese di un Paese di intersezione nel vettore 'countries' aggregate(layer:='stazioni_rotaie',aggregate:='sum',expression:=\"viaggiatori\",filter:=contains( @atlas_geometry, $geometry ) ) \u2192 somma tutti i valori del campo viaggiatori in rail_stations all'interno dell'elemento atlante corrente aggregate(layer:='rail_stations', aggregate:='collect', expression:=centroid($geometry), filter:=\"region_name\" = attribute(@parent,'name') ) \u2192 aggrega le geometrie dei centroidi delle stazioni ferroviarie della stessa regione dell'elemento corrente Osservazioni i nomi dei layer vanno scritti tra apici semplici ( 'nome_layer' ) mentre i nomi dei campi con doppi apici ( \"nome_campo\" ) Altri esempi: Come realizzare una spatial-join con aggregazione usando solo il calcolatore di campi qui array_agg \u21b5 Restituisce un array di valori aggregati da un campo o espressione. Sintassi: array_agg( expression [, group_by ][, filter ][, order_by ]) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato order_by espressione opzionale da usare per ordinare gli elementi usati per calcolare il valore aggregato. Da predefinito, gli elementi verranno restituiti in un ordine non specificato. Esempi: array_agg( \"DEN_PCM\" ,group_by:= \"COD_REG\" ) \u2192 lista di valori del \"DEN_PCM\", ragguppata per il campo \"COD_REG\" Nota bene Per prendere un valore specifico dell'array: - array_agg(\"z\")[0] \u2192 148,03 \u00e8 il primo valore dell'array, indice 0; - array_agg(\"z\")[1] \u2192 164,21 \u00e8 il secondo valore dell'array, indice 1; - ecc... dove \"z\" \u00e8 un attributo Osservazioni: la funzione array_agg permette di trasformare un attributo (colonna di una tabella) in un array!!! la funzione attributes permette di trasformare una feature (riga di una tabella) in una maps e quindi in un array!!! collect \u21b5 Restituisce la geometria a parti multiple di geometrie aggregate da una espressione Sintassi: collect( expression [, group_by ][, filter ]) Argomenti: expression espressione geometria da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: collect( $geometry ) \u2192 geometria a parti multiple delle geometrie aggregate collect( centroid($geometry), group_by:=\"region\", filter:= \"use\" = 'civilian' ) \u2192 centroidi aggregati degli elementi civili basati sul relativo valore regionale -- estrae i bounding box, uno per ogni geometria: estrae il bounding box, dopo aver unito tutte le geometrie: estrae il perimetro (unico per tutte le geometrie), dopo aver unito tutte le geometrie: buffer(collect($geometry),0) concatenate \u21b5 Restituisce tutte le stringhe aggregate da un campo o un'espressione unite da un separatore. Sintassi: concatenate( expression [, group_by ][, filter ][, concatenator ][, order_by ]) Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato concatenator stringa opzionale da usarsi per unire i valori order_by espressione opzionale da usare per ordinare gli elementi usati per calcolare il valore aggregato. Da predefinito, gli elementi verranno restituiti in un ordine non specificato. [ ] indica componenti opzionali Esempi: concatenate(\"town_name\",group_by:=\"state\",concatenator:=',') \u2192 lista separata da virgola di town_names, raggruppata per campo state concatenate_unique \u21b5 Restituisce tutte le stringhe univoche di un campo o di un'espressione unite da un delimitatore. Sintassi: concatenate( expression [, group_by ][, filter ][, concatenator ][, order_by ] ) Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato concatenator stringa opzionale da usarsi per unire i valori order_by espressione opzionale da usare per ordinare gli elementi usati per calcolare il valore aggregato. Da predefinito, gli elementi verranno restituiti in un ordine non specificato. [ ] indica componenti opzionali Esempi: concatenate_unique(\"town_name\",group_by:=\"state\",concatenator:=',') \u2192 lista separata da virgola di town_names univoci, raggruppata per campo state count \u21b5 Restituisce il conteggio degli elementi corrispondenti. Sintassi: count( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: count(\"stations\",group_by:=\"state\") \u2192 conta le stazioni, raggruppate per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); count( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): count( filter:= , expression:= , group_by:= ) count_distinct \u21b5 Restituisce il conteggio dei valori differenti. Sintassi: count_distinct( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: count_distinct(\"stations\",group_by:=\"state\") \u2192 conta i valori differenti delle stazioni, raggruppate per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); count_distinct( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): count_distinct( filter:= , expression:= , group_by:= ) -- count_missing \u21b5 Restituisce il numero di valori nulli (NULL). Sintassi: count_missing( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: count_missing(\"stations\",group_by:=\"state\") \u2192 conta i valori mancanti (NULL) delle stazioni, raggruppati per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); count_missing( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): count_missing( filter:= , expression:= , group_by:= ) iqr \u21b5 Restituisce lo scarto interquartile calcolato da un campo o espressione. Sintassi: iqr( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: iqr(\"population\",group_by:=\"state\") \u2192 scarto interquartile del valore popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); iqr( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): iqr( filter:= , expression:= , group_by:= ) majority \u21b5 Restituisce la maggioranza aggregata di valori (valore pi\u00f9 comunemente presente) da un campo o espressione. Sintassi: majority( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: majority(\"class\",group_by:=\"state\") \u2192 valore di classe pi\u00f9 comunemente presente, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); majority( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): majority( filter:= , expression:= , group_by:= ) max_length \u21b5 Restituisce la lunghezza massima delle stringhe di un campo o espressione. Sintassi: max_length( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: max_length(\"town_name\",group_by:=\"state\") \u2192 lunghezza massima di town_name, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); max_length( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): max_length( filter:= , expression:= , group_by:= ) maximum \u21b5 Restituisce il valore massimo aggregato da un campo o espressione. Sintassi: maximum( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: maximum(\"population\",group_by:=\"state\") \u2192 valore massimo di population, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); maximum( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): maximum( filter:= , expression:= , group_by:= ) mean \u21b5 Restituisce il valore medio aggregato da un campo o espressione. Sintassi: mean( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: mean(\"population\",group_by:=\"state\") \u2192 valore medio di population, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); mean( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): mean( filter:= , expression:= , group_by:= ) median \u21b5 Restituisce il valore mediano aggregato da un campo o espressione. Sintassi: median( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: median(\"population\",group_by:=\"state\") \u2192 mediana della popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); median( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): median( filter:= , expression:= , group_by:= ) min_length \u21b5 Restituisce la lunghezza minima delle stringhe di un campo o espressione. Sintassi: min_length( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: min_length(\"town_name\",group_by:=\"state\") \u2192 lunghezza minima di town_name, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); min_length( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): min_length( filter:= , expression:= , group_by:= ) minimum \u21b5 Restituisce il valore minimo aggregato da un campo o espressione. Sintassi: minimum( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: minimum(\"population\",group_by:=\"state\") \u2192 valore minimo di population, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); minimum( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): minimum( filter:= , expression:= , group_by:= ) Esempio: Selezionare le Province con minor area per ogni Regione $area = minimum(expression:=$area,group_by:=\"COD_REG\") minority \u21b5 Restituisce la minoranza aggregata di valori (valore meno comunemente presente) da un campo o espressione. Sintassi: minority( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: minority(\"class\",group_by:=\"state\") \u2192 valore di classe meno presente, ragguppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); minority( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): minority( filter:= , expression:= , group_by:= ) q1 \u21b5 Restituisce il primo quartile calcolato da un campo o espressione. Sintassi: q1( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: q1(\"population\",group_by:=\"state\") \u2192 primo quartile del valore popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); q1( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): q1( filter:= , expression:= , group_by:= ) q3 \u21b5 Restituisce il terzo quartile calcolato da un campo o espressione. Sintassi: q3( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: q3(\"population\",group_by:=\"state\") \u2192 terzo quartile del valore popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); q3( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): q3( filter:= , expression:= , group_by:= ) range \u21b5 Restituisce l'intervallo aggregato di valori (massimo - minimo) da un campo o espressione. Sintassi: range( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: range(\"population\",group_by:=\"state\") \u2192 intervallo di valori di popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); range( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): range( filter:= , expression:= , group_by:= ) relation_aggregate \u21b5 Restituisce un valore aggregato calcolato usando tutti gli elementi figli corrispondenti da una relazione di layer. Sintassi: relation_aggregate( relation , aggregate , expression [, concatenator ][, order_by ] ) Argomenti: relation una stringa, rappresentante un ID di relazione aggregate una stringa corrispondente all'aggregato da calcolare. Opzioni valide sono: count count_distinct count_missing min max sum mean median stdev stdevsample range minority majority q1: primo quartile q3: terzo quartile iqr: scarto interquartile min_length: minima lunghezza stringa max_length: massima lunghezza stringa concatenate: unisci stringhe con un concatenatore expression sotto espressione o nome campo da aggregare concatenator stringa opzionale da usare per unire i valori per il raggruppamento 'concatenate' order_by espressione filtro opzionale atta ad ordinare gli elementi usati per calcolare il valore aggregato. Campi e geometria provengono dagli elementi del vettore unito. In modo predefinito, gli elementi verranno restituiti senza un ordine specifico. Esempi: relation_aggregate(relation:='my_relation',aggregate:='mean',expression:=\"passengers\") \u2192 valore medio di tutti gli elementi figli corrispondenti usando la relazione 'my_relation' relation_aggregate('my_relation','sum', \"passengers\"/7) \u2192 somma del campo passengers diviso per 7 per tutti gli elementi figli corrispondenti usando la relazione 'my_relation' relation_aggregate('my_relation','concatenate', \"towns\", concatenator:=',') \u2192 elenco separato da virgole del campo towns per tutte le geometrie figlie corrispondenti che usano la relation 'my_relation' relation_aggregate('my_relation','array_agg', \"id\") \u2192 array del campo id derivato da tutti gli elementi figlio corrispondenti usando la relazione 'my_relation' Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); relation_aggregate( relation , aggregate , expression [, concatenator ][, order_by ] ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): relation_aggregate( filter:= , expression:= , group_by:= ) -- stdev \u21b5 Restituisce il valore di deviazione standard aggregato da un campo o espressione. Sintassi: stdev( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: stdev(\"population\",group_by:=\"state\") \u2192 deviazione standard di un valore popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); stdev( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): stdev( filter:= , expression:= , group_by:= ) sum \u21b5 Restituisce il valore sommato aggregato da un campo o espressione. Sintassi: sum( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: sum(\"population\",group_by:=\"state\") \u2192 valore somma di population, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); stdev( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): stdev( filter:= , expression:= , group_by:= )","title":"Aggrega"},{"location":"gr_funzioni/aggrega/aggrega_unico/#gruppo-aggrega","text":"Abstract Contiene funzioni che aggregano valori nei livelli e campi.","title":"Gruppo Aggrega"},{"location":"gr_funzioni/aggrega/aggrega_unico/#aggregate","text":"Restituisce un valore aggregato calcolato usando elementi da un altro vettore. Sintassi: aggregate( layer , aggregate , expression [, filter ][, concatenator='' ][, order_by ) [ ] indica componenti opzionali Argomenti: layer una stringa, rappresentante o un nome di un layer o un ID di layer aggregate una stringa corrispondente all'aggregato da calcolare. Opzioni valide sono: count count_distinct count_missing min max sum mean median stdev stdevsample range minority majority q1: primo quartile q3: terzo quartile iqr: inter quartile range min_length: minima lunghezza stringa max_length: massima lunghezza stringa concatenate: unisce stringhe con un concatenatore collect: crea una geometria multiparte aggregata expression sotto-espressione o nome campo da aggregare filter espressione filtro opzionale per limitare gli elementi usati per calcolare l'aggregato. I campi e la geometria provengono dagli elementi del vettore unito. Si pu\u00f2 accedere all'elemento sorgente con la variabile @parent . concatenator stringa opzionale da usare per unire i valori per il raggruppamento 'concatenate' order_by espressione filtro opzionale per ordinare gli elementi usati per calcolare il valore aggregato. I campi e la geometria provengono dagli elementi del vettore unito. Da predefinito, gli elementi verranno restituiti in un ordine non specificato. Esempi: aggregate(layer:='rail_stations',aggregate:='sum',expression:=\"passengers\") \u2192 somma tutti i valori per il campo passengers nel layer rail_stations aggregate('rail_stations','sum', \"passengers\"/7) \u2192 calcola la media giornaliera di \"passengers\" dividendo il campo \"passengers\" per 7 prima di sommare i valori aggregate(layer:='rail_stations',aggregate:='sum',expression:=\"passengers\",filter:=\"class\">3) \u2192 somma tutti i valori per il campo \"passengers\" soltanto dagli elementi geometrie dove l'attributo \"class\" \u00e8 maggiore di 3 aggregate(layer:='rail_stations',aggregate:='concatenate', expression:=\"name\", concatenator:=',') \u2192 elenco separato da virgole del campo name per tutti gli elementi nel vettore rail_stations aggregate(layer:='countries', aggregate:='max', expression:=\"code\", filter:=intersects( $geometry, geometry(@parent) ) ) \u2192 Il codice Paese di un Paese di intersezione nel vettore 'countries' aggregate(layer:='stazioni_rotaie',aggregate:='sum',expression:=\"viaggiatori\",filter:=contains( @atlas_geometry, $geometry ) ) \u2192 somma tutti i valori del campo viaggiatori in rail_stations all'interno dell'elemento atlante corrente aggregate(layer:='rail_stations', aggregate:='collect', expression:=centroid($geometry), filter:=\"region_name\" = attribute(@parent,'name') ) \u2192 aggrega le geometrie dei centroidi delle stazioni ferroviarie della stessa regione dell'elemento corrente Osservazioni i nomi dei layer vanno scritti tra apici semplici ( 'nome_layer' ) mentre i nomi dei campi con doppi apici ( \"nome_campo\" ) Altri esempi: Come realizzare una spatial-join con aggregazione usando solo il calcolatore di campi qui","title":"aggregate"},{"location":"gr_funzioni/aggrega/aggrega_unico/#array_agg","text":"Restituisce un array di valori aggregati da un campo o espressione. Sintassi: array_agg( expression [, group_by ][, filter ][, order_by ]) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato order_by espressione opzionale da usare per ordinare gli elementi usati per calcolare il valore aggregato. Da predefinito, gli elementi verranno restituiti in un ordine non specificato. Esempi: array_agg( \"DEN_PCM\" ,group_by:= \"COD_REG\" ) \u2192 lista di valori del \"DEN_PCM\", ragguppata per il campo \"COD_REG\" Nota bene Per prendere un valore specifico dell'array: - array_agg(\"z\")[0] \u2192 148,03 \u00e8 il primo valore dell'array, indice 0; - array_agg(\"z\")[1] \u2192 164,21 \u00e8 il secondo valore dell'array, indice 1; - ecc... dove \"z\" \u00e8 un attributo Osservazioni: la funzione array_agg permette di trasformare un attributo (colonna di una tabella) in un array!!! la funzione attributes permette di trasformare una feature (riga di una tabella) in una maps e quindi in un array!!!","title":"array_agg"},{"location":"gr_funzioni/aggrega/aggrega_unico/#collect","text":"Restituisce la geometria a parti multiple di geometrie aggregate da una espressione Sintassi: collect( expression [, group_by ][, filter ]) Argomenti: expression espressione geometria da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: collect( $geometry ) \u2192 geometria a parti multiple delle geometrie aggregate collect( centroid($geometry), group_by:=\"region\", filter:= \"use\" = 'civilian' ) \u2192 centroidi aggregati degli elementi civili basati sul relativo valore regionale -- estrae i bounding box, uno per ogni geometria: estrae il bounding box, dopo aver unito tutte le geometrie: estrae il perimetro (unico per tutte le geometrie), dopo aver unito tutte le geometrie: buffer(collect($geometry),0)","title":"collect"},{"location":"gr_funzioni/aggrega/aggrega_unico/#concatenate","text":"Restituisce tutte le stringhe aggregate da un campo o un'espressione unite da un separatore. Sintassi: concatenate( expression [, group_by ][, filter ][, concatenator ][, order_by ]) Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato concatenator stringa opzionale da usarsi per unire i valori order_by espressione opzionale da usare per ordinare gli elementi usati per calcolare il valore aggregato. Da predefinito, gli elementi verranno restituiti in un ordine non specificato. [ ] indica componenti opzionali Esempi: concatenate(\"town_name\",group_by:=\"state\",concatenator:=',') \u2192 lista separata da virgola di town_names, raggruppata per campo state","title":"concatenate"},{"location":"gr_funzioni/aggrega/aggrega_unico/#concatenate_unique","text":"Restituisce tutte le stringhe univoche di un campo o di un'espressione unite da un delimitatore. Sintassi: concatenate( expression [, group_by ][, filter ][, concatenator ][, order_by ] ) Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato concatenator stringa opzionale da usarsi per unire i valori order_by espressione opzionale da usare per ordinare gli elementi usati per calcolare il valore aggregato. Da predefinito, gli elementi verranno restituiti in un ordine non specificato. [ ] indica componenti opzionali Esempi: concatenate_unique(\"town_name\",group_by:=\"state\",concatenator:=',') \u2192 lista separata da virgola di town_names univoci, raggruppata per campo state","title":"concatenate_unique"},{"location":"gr_funzioni/aggrega/aggrega_unico/#count","text":"Restituisce il conteggio degli elementi corrispondenti. Sintassi: count( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: count(\"stations\",group_by:=\"state\") \u2192 conta le stazioni, raggruppate per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); count( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): count( filter:= , expression:= , group_by:= )","title":"count"},{"location":"gr_funzioni/aggrega/aggrega_unico/#count_distinct","text":"Restituisce il conteggio dei valori differenti. Sintassi: count_distinct( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: count_distinct(\"stations\",group_by:=\"state\") \u2192 conta i valori differenti delle stazioni, raggruppate per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); count_distinct( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): count_distinct( filter:= , expression:= , group_by:= ) --","title":"count_distinct"},{"location":"gr_funzioni/aggrega/aggrega_unico/#count_missing","text":"Restituisce il numero di valori nulli (NULL). Sintassi: count_missing( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: count_missing(\"stations\",group_by:=\"state\") \u2192 conta i valori mancanti (NULL) delle stazioni, raggruppati per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); count_missing( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): count_missing( filter:= , expression:= , group_by:= )","title":"count_missing"},{"location":"gr_funzioni/aggrega/aggrega_unico/#iqr","text":"Restituisce lo scarto interquartile calcolato da un campo o espressione. Sintassi: iqr( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: iqr(\"population\",group_by:=\"state\") \u2192 scarto interquartile del valore popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); iqr( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): iqr( filter:= , expression:= , group_by:= )","title":"iqr"},{"location":"gr_funzioni/aggrega/aggrega_unico/#majority","text":"Restituisce la maggioranza aggregata di valori (valore pi\u00f9 comunemente presente) da un campo o espressione. Sintassi: majority( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: majority(\"class\",group_by:=\"state\") \u2192 valore di classe pi\u00f9 comunemente presente, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); majority( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): majority( filter:= , expression:= , group_by:= )","title":"majority"},{"location":"gr_funzioni/aggrega/aggrega_unico/#max_length","text":"Restituisce la lunghezza massima delle stringhe di un campo o espressione. Sintassi: max_length( expression [, group_by ][, filter ] ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: max_length(\"town_name\",group_by:=\"state\") \u2192 lunghezza massima di town_name, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); max_length( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): max_length( filter:= , expression:= , group_by:= )","title":"max_length"},{"location":"gr_funzioni/aggrega/aggrega_unico/#maximum","text":"Restituisce il valore massimo aggregato da un campo o espressione. Sintassi: maximum( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: maximum(\"population\",group_by:=\"state\") \u2192 valore massimo di population, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); maximum( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): maximum( filter:= , expression:= , group_by:= )","title":"maximum"},{"location":"gr_funzioni/aggrega/aggrega_unico/#mean","text":"Restituisce il valore medio aggregato da un campo o espressione. Sintassi: mean( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: mean(\"population\",group_by:=\"state\") \u2192 valore medio di population, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); mean( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): mean( filter:= , expression:= , group_by:= )","title":"mean"},{"location":"gr_funzioni/aggrega/aggrega_unico/#median","text":"Restituisce il valore mediano aggregato da un campo o espressione. Sintassi: median( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: median(\"population\",group_by:=\"state\") \u2192 mediana della popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); median( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): median( filter:= , expression:= , group_by:= )","title":"median"},{"location":"gr_funzioni/aggrega/aggrega_unico/#min_length","text":"Restituisce la lunghezza minima delle stringhe di un campo o espressione. Sintassi: min_length( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: min_length(\"town_name\",group_by:=\"state\") \u2192 lunghezza minima di town_name, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); min_length( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): min_length( filter:= , expression:= , group_by:= )","title":"min_length"},{"location":"gr_funzioni/aggrega/aggrega_unico/#minimum","text":"Restituisce il valore minimo aggregato da un campo o espressione. Sintassi: minimum( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: minimum(\"population\",group_by:=\"state\") \u2192 valore minimo di population, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); minimum( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): minimum( filter:= , expression:= , group_by:= ) Esempio: Selezionare le Province con minor area per ogni Regione $area = minimum(expression:=$area,group_by:=\"COD_REG\")","title":"minimum"},{"location":"gr_funzioni/aggrega/aggrega_unico/#minority","text":"Restituisce la minoranza aggregata di valori (valore meno comunemente presente) da un campo o espressione. Sintassi: minority( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: minority(\"class\",group_by:=\"state\") \u2192 valore di classe meno presente, ragguppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); minority( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): minority( filter:= , expression:= , group_by:= )","title":"minority"},{"location":"gr_funzioni/aggrega/aggrega_unico/#q1","text":"Restituisce il primo quartile calcolato da un campo o espressione. Sintassi: q1( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: q1(\"population\",group_by:=\"state\") \u2192 primo quartile del valore popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); q1( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): q1( filter:= , expression:= , group_by:= )","title":"q1"},{"location":"gr_funzioni/aggrega/aggrega_unico/#q3","text":"Restituisce il terzo quartile calcolato da un campo o espressione. Sintassi: q3( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: q3(\"population\",group_by:=\"state\") \u2192 terzo quartile del valore popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); q3( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): q3( filter:= , expression:= , group_by:= )","title":"q3"},{"location":"gr_funzioni/aggrega/aggrega_unico/#range","text":"Restituisce l'intervallo aggregato di valori (massimo - minimo) da un campo o espressione. Sintassi: range( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: range(\"population\",group_by:=\"state\") \u2192 intervallo di valori di popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); range( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): range( filter:= , expression:= , group_by:= )","title":"range"},{"location":"gr_funzioni/aggrega/aggrega_unico/#relation_aggregate","text":"Restituisce un valore aggregato calcolato usando tutti gli elementi figli corrispondenti da una relazione di layer. Sintassi: relation_aggregate( relation , aggregate , expression [, concatenator ][, order_by ] ) Argomenti: relation una stringa, rappresentante un ID di relazione aggregate una stringa corrispondente all'aggregato da calcolare. Opzioni valide sono: count count_distinct count_missing min max sum mean median stdev stdevsample range minority majority q1: primo quartile q3: terzo quartile iqr: scarto interquartile min_length: minima lunghezza stringa max_length: massima lunghezza stringa concatenate: unisci stringhe con un concatenatore expression sotto espressione o nome campo da aggregare concatenator stringa opzionale da usare per unire i valori per il raggruppamento 'concatenate' order_by espressione filtro opzionale atta ad ordinare gli elementi usati per calcolare il valore aggregato. Campi e geometria provengono dagli elementi del vettore unito. In modo predefinito, gli elementi verranno restituiti senza un ordine specifico. Esempi: relation_aggregate(relation:='my_relation',aggregate:='mean',expression:=\"passengers\") \u2192 valore medio di tutti gli elementi figli corrispondenti usando la relazione 'my_relation' relation_aggregate('my_relation','sum', \"passengers\"/7) \u2192 somma del campo passengers diviso per 7 per tutti gli elementi figli corrispondenti usando la relazione 'my_relation' relation_aggregate('my_relation','concatenate', \"towns\", concatenator:=',') \u2192 elenco separato da virgole del campo towns per tutte le geometrie figlie corrispondenti che usano la relation 'my_relation' relation_aggregate('my_relation','array_agg', \"id\") \u2192 array del campo id derivato da tutti gli elementi figlio corrispondenti usando la relazione 'my_relation' Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); relation_aggregate( relation , aggregate , expression [, concatenator ][, order_by ] ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): relation_aggregate( filter:= , expression:= , group_by:= ) --","title":"relation_aggregate"},{"location":"gr_funzioni/aggrega/aggrega_unico/#stdev","text":"Restituisce il valore di deviazione standard aggregato da un campo o espressione. Sintassi: stdev( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: stdev(\"population\",group_by:=\"state\") \u2192 deviazione standard di un valore popolazione, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); stdev( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): stdev( filter:= , expression:= , group_by:= )","title":"stdev"},{"location":"gr_funzioni/aggrega/aggrega_unico/#sum","text":"Restituisce il valore sommato aggregato da un campo o espressione. Sintassi: sum( expression , group_by , filter ) [ ] indica componenti opzionali Argomenti: expression sotto espressione o campo da aggregare group_by espressione opzionale da usarsi per raggruppare i calcoli aggregati filter espressione opzionale da usare per filtrare gli elementi usati per calcolare il valore aggregato Esempi: sum(\"population\",group_by:=\"state\") \u2192 valore somma di population, raggruppato per il campo state Nota bene: La sintassi prevede due possibilit\u00e0: quella classica, senza l'uso dei paramentri denominati (l'ordine \u00e8 fondamentale); stdev( expression , group_by , filter ) con i parametri denominati (l'ordine non \u00e8 pi\u00f9 fondamentale): stdev( filter:= , expression:= , group_by:= )","title":"sum"},{"location":"gr_funzioni/array/array_unico/","tags":["gruppo"],"text":"Gruppo Array \u21b5 Abstract Questo gruppo contiene funzioni espressione per la creazione e la manipolazione di array (noti anche come strutture dati ad elenco). L'ordine dei valori all'interno dell'array \u00e8 importante, al contrario della struttura dati 'a mappa', in cui l'ordine delle coppie chiave-valore \u00e8 irrilevante e i valori vengono identificati dalle loro chiavi. array \u21b5 Restituisce un array contenente tutti i valori passati come parametro. Sintassi: array(_ value1 , value2 , \u2026) Argomenti: value un valore Esempi: array(2,10) \u2192 array: 2, 10 array_all \u21b5 Restituisce true se un array contiene tutti i valori di un determinato array. Sintassi: array_all( array_a , array_b , \u2026_) Argomenti: array_a un array array_b un array di valori da cercare Esempi: array_all(array(1,2,3),array(2,3)) \u2192 vero array_all(array(1,2,3),array(1,2,4)) \u2192 falso array_append \u21b5 Restituisce un array con il valore passato aggiunto alla fine. Sintassi: array_append( array , value ) Argomenti: array un array value il valore da aggiungere Esempi: array_append(array(1,2,3),4) \u2192 array: 1,2,3,4 array_cat \u21b5 Restituisce un array contenente tutti gli arrays passati concatenati. Sintassi: array_cat( array1 , array2 , \u2026 ) Argomenti: array un array Esempi: array_cat(array(1,2),array(2,3)) \u2192 array: 1,2,2,3 array_contains \u21b5 Restituisce true se un array contiene il valore specificato. Sintassi: array_contains( array , value ) Argomenti: array un array value il valore da cercare Esempi: array_contains(array(1,2,3),2) \u2192 true array_count \u21b5 Conta il numero di occorrenze di un dato valore in un array. Sintassi: array_count( array , value ) Argomenti: array un array value un valore da contare Esempi: array_count(array('a', 'b', 'c', 'b'), 'b') \u2192 2 array_distinct \u21b5 Restituisce un array contenente valori distinti dell'array dato. Sintassi: array_distinct( array ) Argomenti: array un array Esempi: array_distinct(array(1,2,3,2,1)) \u2192 array: 1,2,3 array_filter \u21b5 Restituisce un array con solo gli elementi per i quali l'espressione restituisce true (vero). Sintassi: array_filter( array , expression [, limit=0 ]) Argomenti: array un array expression un'espressione da valutare su ogni oggetto. La variabile @ element sar\u00e0 sostituita dal valore corrente. limit numero massimo di elementi da restituire. Usa 0 per restituire tutti i valori. Esempi: array_filter(array(1,2,3),@element < 3) \u2192 [ 1, 2 ] array_find \u21b5 Restituisce l'indice (0 per il primo elemento) di un valore all'interno di un array. Restiuisce -1 se il valore non viene trovato Sintassi: array_find( array , value ) Argomenti: array un array value il valore da cercare Esempi: array_find(array(1,2,3),2) \u2192 1 array_first \u21b5 Restituisce il primo valore di un array. Sintassi: array_first( array ) Argomenti: array un array Esempi: array_first(array('a','b','c')) \u2192 'a' array_foreach \u21b5 Restituisce una matrice con l'espressione data valutata su ciascun elemento. Sintassi: array_foreach( array , expression ) Argomenti: array un array expression un'espressione da valutare su ogni oggetto. La variabile @element sar\u00e0 sostituita dal valore corrente. Esempi: array_foreach(array('a','b','c'),upper(@element)) \u2192 [ 'A', 'B', 'C' ] array_foreach(array(1,2,3),@element + 10) \u2192 [ 11, 12, 13 ] Osservazioni Funzione utile, assieme ad altre, nel compositore di stampe o nella decorazione copyright. Tweet array_get \u21b5 Restituisce l'ennesimo valore (0 per il primo) o l'ultimo -Nesimo valore (-1 per l'ultimo) di un array. Aggiornato a QGIS 3.18 Sintassi: array_get( array , index ) Argomenti: array un array index l'indice da estrarre (partendo da 0) Esempi: array_get(array('a','b','c'),-1) \u2192 'c' array_insert \u21b5 Restituisce un array con il valore passato aggiunto nella posizione indicata. Sintassi: array_insert( array , pos , value ) Argomenti: array un array pos la posizione in cui aggiungere (partendo da 0) value il valore da aggiungere Esempi: array_insert(array(1,2,3),1,100) \u2192 [ 1, 100, 2, 3 ] array_intersect \u21b5 Restituisce true (vero) se almeno un elemento dell' array1 esiste in array2 . Sintassi: array_intersect( array1 , array2 ) Argomenti: array1 un array array2 un altro array Esempi: array_intersect(array(1,2,3,4),array(4,0,2,5)) \u2192 true array_last \u21b5 Restituisce l'ultimo valore di un array. Sintassi: array_last( array ) Argomenti: array un array Esempi: array_last(array('a','b','c')) \u2192 'c' array_length \u21b5 Restituisce il numero di elementi di un array. Sintassi: array_length( array ) Argomenti: array un array Esempi: array_length(array(1,2,3)) \u2192 3 array_majority \u21b5 Restituisce i valori pi\u00f9 comuni in un array. Sintassi: array_majority( array [, option='all' ]) Argomenti: array un array option='all' una stringa che specifica la gestione dei valori restituiti. Le opzioni valide sono: all : Predefinito, tutti i valori pi\u00f9 comuni vengono restituiti in un array. any : Restituisce uno dei valori pi\u00f9 comuni. median : Restituisce la mediana dei valori pi\u00f9 comuni. I valori non aritmetici sono ignorati. real_majority : Restituisce il valore che si verifica pi\u00f9 della met\u00e0 delle volte rispetto alla dimensione dell'array. Esempi: array_majority(array(0,1,42,42,43), 'all') \u2192 [ 42 ] array_majority(array(0,1,42,42,43,1), 'all') \u2192 [ 42, 1 ] array_majority(array(0,1,42,42,43,1), 'any') \u2192 1 or 42 array_majority(array(0,1,1,2,2), 'median') \u2192 1.5 array_majority(array(0,1,42,42,43), 'real_majority') \u2192 NULL array_majority(array(0,1,42,42,43,42), 'real_majority') \u2192 NULL array_majority(array(0,1,42,42,43,42,42), 'real_majority') \u2192 42 array_max \u21b5 Restituisce il valore massimo di un array. Sintassi: array_max( array ) Argomenti: array un array o stringa (valori separati da virgola) Esempi: array_max(array(0,42,4,2)) \u2192 42 array_mean \u21b5 Restituisce la media dei valori aritmetici in un array. I valori non-numerici nell'array vengono ignorati. Sintassi: array_mean( array ) Argomenti: array un array Esempi: array_mean(array(0,1,7,66.6,135.4)) \u2192 42.000000 array_mean(array(0,84,'a','b','c')) \u2192 42 array_median \u21b5 Restituisce la mediana dei valori aritmetici in un array. I valori non-numerici nell'array vengono ignorati. Sintassi: array_median( array ) Argomenti: array un array Esempi: array_median(array(0,1,42,42,43)) \u2192 42 array_median(array(0,1,2,42,'a','b')) \u2192 1.5` array_min \u21b5 Restituisce il valore minimo di un array. Sintassi: array_min( array ) Argomenti: array _ un array o stringa (valori separati da virgola) Esempi: array_min(array(43,42,54)) \u2192 42 array_minority \u21b5 Restituisce i valori meno comuni in un array. Sintassi: array_minority( array [, option='all' ]) Argomenti: array un array option='all' una stringa che specifica la gestione dei valori restituiti. Le opzioni valide sono: all : Predefinito, tutti i valori meno comuni vengono restituiti in un array. any : Restituisce uno dei valori meno comuni. median : Restituisce la mediana dei valori meno comuni. I valori non aritmetici sono ignorati. real_minority : Restituisce valori che si verificano meno della met\u00e0 delle volte rispetto alla dimensione dell'array. Esempi: array_minority(array(0,42,42), 'all') \u2192 [ 0 ] array_minority(array(0,1,42,42), 'all') \u2192 [ 0, 1 ] array_minority(array(0,1,42,42,43,1), 'any') \u2192 0 or 43 array_minority(array(1,2,3,3), 'median') \u2192 1.5 array_minority(array(0,1,42,42,43), 'real_minority') \u2192 [ 42, 43, 0, 1 ] array_minority(array(0,1,42,42,43,42), 'real_minority') \u2192 [ 42, 43, 0, 1 ] array_minority(array(0,1,42,42,43,42,42), 'real_minority') \u2192 [ 43, 0, 1 ] array_prepend \u21b5 Restituisce un array con il valore dato aggiunto all'inizio. Sintassi: array_prepend( array , value ) Argomenti: array un array value il valore da aggiungere Esempi: array_prepend(array(1,2,3),0) \u2192 [ 0, 1, 2, 3 ] array_prioritize \u21b5 Restituisce un array ordinato usando l'ordine specificato in un altro array. I valori che sono presenti nel primo array ma assenti nel secondo array saranno aggiunti alla fine del risultato. Sintassi: array_prioritize( array , array_prioritize ) Argomenti: array un array o stringa (valori separati da virgola) array_prioritize array o stringa (valori separati da virgola) contenenti i valori ordinati Esempi: array_prioritize(array(1, 8, 2, 5), array(5, 4, 2, 1, 3, 8)) \u2192 [ 5, 2, 1, 8 ] array_prioritize(array(5, 4, 2, 1, 3, 8), array(1, 8, 6, 5)) \u2192 [ 1, 8, 5, 4, 2, 3 ] array_remove_all \u21b5 Restituisce un array con tutti gli elementi del valore passato rimossi. Sintassi: array_remove_all( array , value ) Argomenti: array un array value i valori da rimuovere Esempi: array_remove_all(array('a','b','c','b'),'b') \u2192 [ 'a', 'c' ] array_remove_at \u21b5 Restituisce un array con l'elemento in corrispondenza dell'indice dato rimosso. Supporta indice positivo (0 per il primo elemento) e negativo (l'ultimo -Nesimo valore, -1 per l'ultimo elemento) da >= QGIS 3.24. Sintassi: array_remove_at( array , pos ) Argomenti: array un array pos la posizione da rimuovere (partendo da 0) Esempi: array_remove_at(array(1,2,3),1) \u2192 [ 1, 3 ] array_replace \u21b5 Restituisce un array con il valore, l'array o la mappa dei valori forniti sostituiti. Valore & variante dell'array \u21b5 Restituisce un array con il valore o con un array di valori forniti sostituito da un altro valore o da un altro array di valori. Sintassi: array_replace( array , before , after ) Argomenti: array l'array in ingresso before il valore o l'array di valori da sostituire after il valore o l'array di valori da utilizzare come sostituzione Esempi: array_replace(array('QGIS','SHOULD','ROCK'),'SHOULD','DOES') \u2192 [ 'QGIS', 'DOES', 'ROCK' ] array_replace(array(3,2,1),array(1,2,3),array(7,8,9)) \u2192 [ 9, 8, 7 ] array_replace(array('Q','G','I','S'),array('Q','S'),'-') \u2192 [ '-', 'G', 'I', '-' ] Variabile mappa \u21b5 Restituisce un array con le chiavi della mappa fornite sostituite dai loro valori abbinati. Sintassi: array_replace( array , map ) Argomenti: array l'array in ingresso map la mappa che contiene le chiavi e i valori Esempi: array_replace(array('APP', 'SHOULD', 'ROCK'),map('APP','QGIS','SHOULD','DOES')) \u2192 [ 'QGIS', 'DOES', 'ROCK' ] array_reverse \u21b5 Restituisce l'array dato con valori dell'array in ordine inverso. Sintassi: array_reverse( array ) Argomenti: array un array Esempi: array_reverse(array(2,4,0,10)) \u2192 [ 10, 0, 4, 2 ] array_slice \u21b5 Restituisce una porzione dell'array. Il taglio \u00e8 definito dagli argomenti start_pos e end_pos . Sintassi: array_slice( array , start_pos , end_pos ) Argomenti: array un array start_pos l'indice della posizione iniziale della fetta (a partire da 0). L'indice start_pos \u00e8 incluso nella fetta. Se si utilizza un valore negativo di start_pos, l'indice \u00e8 contato dalla fine della lista (a partire da -1). end_pos l'indice della posizione finale della fetta (a partire da 0). L'indice end_pos \u00e8 incluso nella fetta. Se si utilizza un valore negativo di start_pos, l'indice \u00e8 contato dalla fine della lista (a partire da -1). Esempi: array_slice(array(1,2,3,4,5),0,3) \u2192 [ 1, 2, 3, 4 ] array_slice(array(1,2,3,4,5),0,-1) \u2192 [ 1, 2, 3, 4, 5 ] array_slice(array(1,2,3,4,5),-5,-1) \u2192 [ 1, 2, 3, 4, 5 ] array_slice(array(1,2,3,4,5),0,0) \u2192 [ 1 ] array_slice(array(1,2,3,4,5),-2,-1) \u2192 [ 4, 5 ] array_slice(array(1,2,3,4,5),-1,-1) \u2192 [ 5 ] array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),1,2) \u2192 [ 'Valmiera', 'Chugiak' ] array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),-2,-1) \u2192 [ 'Chugiak', 'Brighton' ] array_sort \u21b5 Ordina i valori in ordine crescente (usa array_reverse per desc). Sintassi: array_sort( array [, ascending=true ]) Argomenti: array un array o stringa (valori separati da virgola) ascending imposta questo parametro a false per ordinare l'array in modo decrescente Esempi: array_sort(array(3,2,1)) \u2192 [ 1, 2, 3 ] array_sum \u21b5 Restituisce la somma dei valori aritmetici in un array. I valori non-numerici nell'array vengono ignorati. Sintassi: array_sum( array ) Argomenti: array un array Esempi: array_sum(array(0,1,39.4,1.6,'a')) \u2192 42.0 array_to_string \u21b5 Concatena gli elementi di un array in una stringa separata da un delimitatore usando una stringa opzionale per valori mancanti. Sintassi: array_to_string( array [, delimiter ][, empty_value ]) [ ] indica componenti opzionali Argomenti: array l'array in ingresso delimiter il delimitatore stringa usato per separare gli elementi array concatenati empty_value la stringa opzionale da usare come sostituzione per le corrispondenze (lunghezza nulla) mancanti Esempi: array_to_string(array('1','2','3')) \u2192 '1,2,3' array_to_string(array(1,2,3),'-') \u2192 '1-2-3' array_to_string(array('1','','3'),',','0') \u2192 '1,0,3' generate_series \u21b5 La funzione crea una matrice contenente una sequenza di numeri, segue le stesse regole della funzione generate_series () di PostgreSQL. Sintassi: generate_series( start , stop [, step =1] ) [ ] contrassegna componenti opzionali Argomenti: start primo valore della sequenza stop valore che termina la sequenza una volta raggiunta step passo usato come incremento tra i valori Esempi: generate_series(1,5) \u2192 [ 1, 2, 3, 4, 5 ] generate_series(5,1,-1) \u2192 [ 5, 4, 3, 2, 1 ] geometries_to_array \u21b5 Divide una geometria in geometrie pi\u00f9 semplici in un array. Sintassi: geometries_to_array( geometry ) Argomenti: geometry la geometria in ingresso Esempi: - geometries_to_array(geom_from_wkt('GeometryCollection (Polygon ((5 8, 4 1, 3 2, 5 8)),LineString (3 2, 4 2))')) \u2192 un array di geometrie di poligoni e linee - geom_to_wkt(geometries_to_array(geom_from_wkt('GeometryCollection (Polygon ((5 8, 4 1, 3 2, 5 8)),LineString (3 2, 4 2))'))[0]) \u2192 'Polygon ((3 2, 3 4, 1 4, 1 2, 3 2))' - geometries_to_array(geom_from_wkt('MULTIPOLYGON(((5 5,0 0,0 10,5 5)),((5 5,10 10,10 0,5 5))')) \u2192 un array di due geometrie poligonali regexp_matches \u21b5 Restituisce un array di tutte le stringhe catturate dai gruppo, nell'ordine che i gruppi stessi compaiono con l'espressione regolare fornita con una stringa. Sintassi: regexp_matches( string , regex [, empty_value='' ]) [ ] indica componenti opzionali Argomenti: string la stringa con cui catturare i gruppi da un'espressione regolare regex l'espressione regolare usata per catturare gruppi empty_value la stringa opzionale da usare come sostituzione per le corrispondenze (lunghezza nulla) mancanti Esempi: regexp_matches('QGIS=>rocks','(.*)=>(.*)') \u2192 [ 'QGIS', 'rocks' ] regexp_matches('key=>','(.*)=>(.*)','empty value') \u2192 [ 'key', 'empty value' ] string_to_array \u21b5 Divide la stringa in un array usando il delimitatore fornito e la stringa opzionale per valori mancanti. Sintassi: string_to_array( string [, delimiter ][, empty_value='' ]) [ ] indica componenti opzionali Argomenti: string la stringa in ingresso delimiter il delimitatore stringa usato per dividere la stringa in ingresso empty_value la stringa opzionale da usare come sostituzione per le corrispondenze (lunghezza nulla) mancanti Esempi: string_to_array('1,2,3',',') \u2192 [ '1', '2', '3' ] string_to_array('1,,3',',','0') \u2192 [ '1', '0', '3' ]","title":"Array"},{"location":"gr_funzioni/array/array_unico/#gruppo-array","text":"Abstract Questo gruppo contiene funzioni espressione per la creazione e la manipolazione di array (noti anche come strutture dati ad elenco). L'ordine dei valori all'interno dell'array \u00e8 importante, al contrario della struttura dati 'a mappa', in cui l'ordine delle coppie chiave-valore \u00e8 irrilevante e i valori vengono identificati dalle loro chiavi.","title":"Gruppo Array"},{"location":"gr_funzioni/array/array_unico/#array","text":"Restituisce un array contenente tutti i valori passati come parametro. Sintassi: array(_ value1 , value2 , \u2026) Argomenti: value un valore Esempi: array(2,10) \u2192 array: 2, 10","title":"array"},{"location":"gr_funzioni/array/array_unico/#array_all","text":"Restituisce true se un array contiene tutti i valori di un determinato array. Sintassi: array_all( array_a , array_b , \u2026_) Argomenti: array_a un array array_b un array di valori da cercare Esempi: array_all(array(1,2,3),array(2,3)) \u2192 vero array_all(array(1,2,3),array(1,2,4)) \u2192 falso","title":"array_all"},{"location":"gr_funzioni/array/array_unico/#array_append","text":"Restituisce un array con il valore passato aggiunto alla fine. Sintassi: array_append( array , value ) Argomenti: array un array value il valore da aggiungere Esempi: array_append(array(1,2,3),4) \u2192 array: 1,2,3,4","title":"array_append"},{"location":"gr_funzioni/array/array_unico/#array_cat","text":"Restituisce un array contenente tutti gli arrays passati concatenati. Sintassi: array_cat( array1 , array2 , \u2026 ) Argomenti: array un array Esempi: array_cat(array(1,2),array(2,3)) \u2192 array: 1,2,2,3","title":"array_cat"},{"location":"gr_funzioni/array/array_unico/#array_contains","text":"Restituisce true se un array contiene il valore specificato. Sintassi: array_contains( array , value ) Argomenti: array un array value il valore da cercare Esempi: array_contains(array(1,2,3),2) \u2192 true","title":"array_contains"},{"location":"gr_funzioni/array/array_unico/#array_count","text":"Conta il numero di occorrenze di un dato valore in un array. Sintassi: array_count( array , value ) Argomenti: array un array value un valore da contare Esempi: array_count(array('a', 'b', 'c', 'b'), 'b') \u2192 2","title":"array_count"},{"location":"gr_funzioni/array/array_unico/#array_distinct","text":"Restituisce un array contenente valori distinti dell'array dato. Sintassi: array_distinct( array ) Argomenti: array un array Esempi: array_distinct(array(1,2,3,2,1)) \u2192 array: 1,2,3","title":"array_distinct"},{"location":"gr_funzioni/array/array_unico/#array_filter","text":"Restituisce un array con solo gli elementi per i quali l'espressione restituisce true (vero). Sintassi: array_filter( array , expression [, limit=0 ]) Argomenti: array un array expression un'espressione da valutare su ogni oggetto. La variabile @ element sar\u00e0 sostituita dal valore corrente. limit numero massimo di elementi da restituire. Usa 0 per restituire tutti i valori. Esempi: array_filter(array(1,2,3),@element < 3) \u2192 [ 1, 2 ]","title":"array_filter"},{"location":"gr_funzioni/array/array_unico/#array_find","text":"Restituisce l'indice (0 per il primo elemento) di un valore all'interno di un array. Restiuisce -1 se il valore non viene trovato Sintassi: array_find( array , value ) Argomenti: array un array value il valore da cercare Esempi: array_find(array(1,2,3),2) \u2192 1","title":"array_find"},{"location":"gr_funzioni/array/array_unico/#array_first","text":"Restituisce il primo valore di un array. Sintassi: array_first( array ) Argomenti: array un array Esempi: array_first(array('a','b','c')) \u2192 'a'","title":"array_first"},{"location":"gr_funzioni/array/array_unico/#array_foreach","text":"Restituisce una matrice con l'espressione data valutata su ciascun elemento. Sintassi: array_foreach( array , expression ) Argomenti: array un array expression un'espressione da valutare su ogni oggetto. La variabile @element sar\u00e0 sostituita dal valore corrente. Esempi: array_foreach(array('a','b','c'),upper(@element)) \u2192 [ 'A', 'B', 'C' ] array_foreach(array(1,2,3),@element + 10) \u2192 [ 11, 12, 13 ] Osservazioni Funzione utile, assieme ad altre, nel compositore di stampe o nella decorazione copyright. Tweet","title":"array_foreach"},{"location":"gr_funzioni/array/array_unico/#array_get","text":"Restituisce l'ennesimo valore (0 per il primo) o l'ultimo -Nesimo valore (-1 per l'ultimo) di un array. Aggiornato a QGIS 3.18 Sintassi: array_get( array , index ) Argomenti: array un array index l'indice da estrarre (partendo da 0) Esempi: array_get(array('a','b','c'),-1) \u2192 'c'","title":"array_get"},{"location":"gr_funzioni/array/array_unico/#array_insert","text":"Restituisce un array con il valore passato aggiunto nella posizione indicata. Sintassi: array_insert( array , pos , value ) Argomenti: array un array pos la posizione in cui aggiungere (partendo da 0) value il valore da aggiungere Esempi: array_insert(array(1,2,3),1,100) \u2192 [ 1, 100, 2, 3 ]","title":"array_insert"},{"location":"gr_funzioni/array/array_unico/#array_intersect","text":"Restituisce true (vero) se almeno un elemento dell' array1 esiste in array2 . Sintassi: array_intersect( array1 , array2 ) Argomenti: array1 un array array2 un altro array Esempi: array_intersect(array(1,2,3,4),array(4,0,2,5)) \u2192 true","title":"array_intersect"},{"location":"gr_funzioni/array/array_unico/#array_last","text":"Restituisce l'ultimo valore di un array. Sintassi: array_last( array ) Argomenti: array un array Esempi: array_last(array('a','b','c')) \u2192 'c'","title":"array_last"},{"location":"gr_funzioni/array/array_unico/#array_length","text":"Restituisce il numero di elementi di un array. Sintassi: array_length( array ) Argomenti: array un array Esempi: array_length(array(1,2,3)) \u2192 3","title":"array_length"},{"location":"gr_funzioni/array/array_unico/#array_majority","text":"Restituisce i valori pi\u00f9 comuni in un array. Sintassi: array_majority( array [, option='all' ]) Argomenti: array un array option='all' una stringa che specifica la gestione dei valori restituiti. Le opzioni valide sono: all : Predefinito, tutti i valori pi\u00f9 comuni vengono restituiti in un array. any : Restituisce uno dei valori pi\u00f9 comuni. median : Restituisce la mediana dei valori pi\u00f9 comuni. I valori non aritmetici sono ignorati. real_majority : Restituisce il valore che si verifica pi\u00f9 della met\u00e0 delle volte rispetto alla dimensione dell'array. Esempi: array_majority(array(0,1,42,42,43), 'all') \u2192 [ 42 ] array_majority(array(0,1,42,42,43,1), 'all') \u2192 [ 42, 1 ] array_majority(array(0,1,42,42,43,1), 'any') \u2192 1 or 42 array_majority(array(0,1,1,2,2), 'median') \u2192 1.5 array_majority(array(0,1,42,42,43), 'real_majority') \u2192 NULL array_majority(array(0,1,42,42,43,42), 'real_majority') \u2192 NULL array_majority(array(0,1,42,42,43,42,42), 'real_majority') \u2192 42","title":"array_majority"},{"location":"gr_funzioni/array/array_unico/#array_max","text":"Restituisce il valore massimo di un array. Sintassi: array_max( array ) Argomenti: array un array o stringa (valori separati da virgola) Esempi: array_max(array(0,42,4,2)) \u2192 42","title":"array_max"},{"location":"gr_funzioni/array/array_unico/#array_mean","text":"Restituisce la media dei valori aritmetici in un array. I valori non-numerici nell'array vengono ignorati. Sintassi: array_mean( array ) Argomenti: array un array Esempi: array_mean(array(0,1,7,66.6,135.4)) \u2192 42.000000 array_mean(array(0,84,'a','b','c')) \u2192 42","title":"array_mean"},{"location":"gr_funzioni/array/array_unico/#array_median","text":"Restituisce la mediana dei valori aritmetici in un array. I valori non-numerici nell'array vengono ignorati. Sintassi: array_median( array ) Argomenti: array un array Esempi: array_median(array(0,1,42,42,43)) \u2192 42 array_median(array(0,1,2,42,'a','b')) \u2192 1.5`","title":"array_median"},{"location":"gr_funzioni/array/array_unico/#array_min","text":"Restituisce il valore minimo di un array. Sintassi: array_min( array ) Argomenti: array _ un array o stringa (valori separati da virgola) Esempi: array_min(array(43,42,54)) \u2192 42","title":"array_min"},{"location":"gr_funzioni/array/array_unico/#array_minority","text":"Restituisce i valori meno comuni in un array. Sintassi: array_minority( array [, option='all' ]) Argomenti: array un array option='all' una stringa che specifica la gestione dei valori restituiti. Le opzioni valide sono: all : Predefinito, tutti i valori meno comuni vengono restituiti in un array. any : Restituisce uno dei valori meno comuni. median : Restituisce la mediana dei valori meno comuni. I valori non aritmetici sono ignorati. real_minority : Restituisce valori che si verificano meno della met\u00e0 delle volte rispetto alla dimensione dell'array. Esempi: array_minority(array(0,42,42), 'all') \u2192 [ 0 ] array_minority(array(0,1,42,42), 'all') \u2192 [ 0, 1 ] array_minority(array(0,1,42,42,43,1), 'any') \u2192 0 or 43 array_minority(array(1,2,3,3), 'median') \u2192 1.5 array_minority(array(0,1,42,42,43), 'real_minority') \u2192 [ 42, 43, 0, 1 ] array_minority(array(0,1,42,42,43,42), 'real_minority') \u2192 [ 42, 43, 0, 1 ] array_minority(array(0,1,42,42,43,42,42), 'real_minority') \u2192 [ 43, 0, 1 ]","title":"array_minority"},{"location":"gr_funzioni/array/array_unico/#array_prepend","text":"Restituisce un array con il valore dato aggiunto all'inizio. Sintassi: array_prepend( array , value ) Argomenti: array un array value il valore da aggiungere Esempi: array_prepend(array(1,2,3),0) \u2192 [ 0, 1, 2, 3 ]","title":"array_prepend"},{"location":"gr_funzioni/array/array_unico/#array_prioritize","text":"Restituisce un array ordinato usando l'ordine specificato in un altro array. I valori che sono presenti nel primo array ma assenti nel secondo array saranno aggiunti alla fine del risultato. Sintassi: array_prioritize( array , array_prioritize ) Argomenti: array un array o stringa (valori separati da virgola) array_prioritize array o stringa (valori separati da virgola) contenenti i valori ordinati Esempi: array_prioritize(array(1, 8, 2, 5), array(5, 4, 2, 1, 3, 8)) \u2192 [ 5, 2, 1, 8 ] array_prioritize(array(5, 4, 2, 1, 3, 8), array(1, 8, 6, 5)) \u2192 [ 1, 8, 5, 4, 2, 3 ]","title":"array_prioritize"},{"location":"gr_funzioni/array/array_unico/#array_remove_all","text":"Restituisce un array con tutti gli elementi del valore passato rimossi. Sintassi: array_remove_all( array , value ) Argomenti: array un array value i valori da rimuovere Esempi: array_remove_all(array('a','b','c','b'),'b') \u2192 [ 'a', 'c' ]","title":"array_remove_all"},{"location":"gr_funzioni/array/array_unico/#array_remove_at","text":"Restituisce un array con l'elemento in corrispondenza dell'indice dato rimosso. Supporta indice positivo (0 per il primo elemento) e negativo (l'ultimo -Nesimo valore, -1 per l'ultimo elemento) da >= QGIS 3.24. Sintassi: array_remove_at( array , pos ) Argomenti: array un array pos la posizione da rimuovere (partendo da 0) Esempi: array_remove_at(array(1,2,3),1) \u2192 [ 1, 3 ]","title":"array_remove_at"},{"location":"gr_funzioni/array/array_unico/#array_replace","text":"Restituisce un array con il valore, l'array o la mappa dei valori forniti sostituiti.","title":"array_replace"},{"location":"gr_funzioni/array/array_unico/#valore-variante-dellarray","text":"Restituisce un array con il valore o con un array di valori forniti sostituito da un altro valore o da un altro array di valori. Sintassi: array_replace( array , before , after ) Argomenti: array l'array in ingresso before il valore o l'array di valori da sostituire after il valore o l'array di valori da utilizzare come sostituzione Esempi: array_replace(array('QGIS','SHOULD','ROCK'),'SHOULD','DOES') \u2192 [ 'QGIS', 'DOES', 'ROCK' ] array_replace(array(3,2,1),array(1,2,3),array(7,8,9)) \u2192 [ 9, 8, 7 ] array_replace(array('Q','G','I','S'),array('Q','S'),'-') \u2192 [ '-', 'G', 'I', '-' ]","title":"Valore &amp; variante dell'array"},{"location":"gr_funzioni/array/array_unico/#variabile-mappa","text":"Restituisce un array con le chiavi della mappa fornite sostituite dai loro valori abbinati. Sintassi: array_replace( array , map ) Argomenti: array l'array in ingresso map la mappa che contiene le chiavi e i valori Esempi: array_replace(array('APP', 'SHOULD', 'ROCK'),map('APP','QGIS','SHOULD','DOES')) \u2192 [ 'QGIS', 'DOES', 'ROCK' ]","title":"Variabile mappa"},{"location":"gr_funzioni/array/array_unico/#array_reverse","text":"Restituisce l'array dato con valori dell'array in ordine inverso. Sintassi: array_reverse( array ) Argomenti: array un array Esempi: array_reverse(array(2,4,0,10)) \u2192 [ 10, 0, 4, 2 ]","title":"array_reverse"},{"location":"gr_funzioni/array/array_unico/#array_slice","text":"Restituisce una porzione dell'array. Il taglio \u00e8 definito dagli argomenti start_pos e end_pos . Sintassi: array_slice( array , start_pos , end_pos ) Argomenti: array un array start_pos l'indice della posizione iniziale della fetta (a partire da 0). L'indice start_pos \u00e8 incluso nella fetta. Se si utilizza un valore negativo di start_pos, l'indice \u00e8 contato dalla fine della lista (a partire da -1). end_pos l'indice della posizione finale della fetta (a partire da 0). L'indice end_pos \u00e8 incluso nella fetta. Se si utilizza un valore negativo di start_pos, l'indice \u00e8 contato dalla fine della lista (a partire da -1). Esempi: array_slice(array(1,2,3,4,5),0,3) \u2192 [ 1, 2, 3, 4 ] array_slice(array(1,2,3,4,5),0,-1) \u2192 [ 1, 2, 3, 4, 5 ] array_slice(array(1,2,3,4,5),-5,-1) \u2192 [ 1, 2, 3, 4, 5 ] array_slice(array(1,2,3,4,5),0,0) \u2192 [ 1 ] array_slice(array(1,2,3,4,5),-2,-1) \u2192 [ 4, 5 ] array_slice(array(1,2,3,4,5),-1,-1) \u2192 [ 5 ] array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),1,2) \u2192 [ 'Valmiera', 'Chugiak' ] array_slice(array('Dufour','Valmiera','Chugiak','Brighton'),-2,-1) \u2192 [ 'Chugiak', 'Brighton' ]","title":"array_slice"},{"location":"gr_funzioni/array/array_unico/#array_sort","text":"Ordina i valori in ordine crescente (usa array_reverse per desc). Sintassi: array_sort( array [, ascending=true ]) Argomenti: array un array o stringa (valori separati da virgola) ascending imposta questo parametro a false per ordinare l'array in modo decrescente Esempi: array_sort(array(3,2,1)) \u2192 [ 1, 2, 3 ]","title":"array_sort"},{"location":"gr_funzioni/array/array_unico/#array_sum","text":"Restituisce la somma dei valori aritmetici in un array. I valori non-numerici nell'array vengono ignorati. Sintassi: array_sum( array ) Argomenti: array un array Esempi: array_sum(array(0,1,39.4,1.6,'a')) \u2192 42.0","title":"array_sum"},{"location":"gr_funzioni/array/array_unico/#array_to_string","text":"Concatena gli elementi di un array in una stringa separata da un delimitatore usando una stringa opzionale per valori mancanti. Sintassi: array_to_string( array [, delimiter ][, empty_value ]) [ ] indica componenti opzionali Argomenti: array l'array in ingresso delimiter il delimitatore stringa usato per separare gli elementi array concatenati empty_value la stringa opzionale da usare come sostituzione per le corrispondenze (lunghezza nulla) mancanti Esempi: array_to_string(array('1','2','3')) \u2192 '1,2,3' array_to_string(array(1,2,3),'-') \u2192 '1-2-3' array_to_string(array('1','','3'),',','0') \u2192 '1,0,3'","title":"array_to_string"},{"location":"gr_funzioni/array/array_unico/#generate_series","text":"La funzione crea una matrice contenente una sequenza di numeri, segue le stesse regole della funzione generate_series () di PostgreSQL. Sintassi: generate_series( start , stop [, step =1] ) [ ] contrassegna componenti opzionali Argomenti: start primo valore della sequenza stop valore che termina la sequenza una volta raggiunta step passo usato come incremento tra i valori Esempi: generate_series(1,5) \u2192 [ 1, 2, 3, 4, 5 ] generate_series(5,1,-1) \u2192 [ 5, 4, 3, 2, 1 ]","title":"generate_series"},{"location":"gr_funzioni/array/array_unico/#geometries_to_array","text":"Divide una geometria in geometrie pi\u00f9 semplici in un array. Sintassi: geometries_to_array( geometry ) Argomenti: geometry la geometria in ingresso Esempi: - geometries_to_array(geom_from_wkt('GeometryCollection (Polygon ((5 8, 4 1, 3 2, 5 8)),LineString (3 2, 4 2))')) \u2192 un array di geometrie di poligoni e linee - geom_to_wkt(geometries_to_array(geom_from_wkt('GeometryCollection (Polygon ((5 8, 4 1, 3 2, 5 8)),LineString (3 2, 4 2))'))[0]) \u2192 'Polygon ((3 2, 3 4, 1 4, 1 2, 3 2))' - geometries_to_array(geom_from_wkt('MULTIPOLYGON(((5 5,0 0,0 10,5 5)),((5 5,10 10,10 0,5 5))')) \u2192 un array di due geometrie poligonali","title":"geometries_to_array"},{"location":"gr_funzioni/array/array_unico/#regexp_matches","text":"Restituisce un array di tutte le stringhe catturate dai gruppo, nell'ordine che i gruppi stessi compaiono con l'espressione regolare fornita con una stringa. Sintassi: regexp_matches( string , regex [, empty_value='' ]) [ ] indica componenti opzionali Argomenti: string la stringa con cui catturare i gruppi da un'espressione regolare regex l'espressione regolare usata per catturare gruppi empty_value la stringa opzionale da usare come sostituzione per le corrispondenze (lunghezza nulla) mancanti Esempi: regexp_matches('QGIS=>rocks','(.*)=>(.*)') \u2192 [ 'QGIS', 'rocks' ] regexp_matches('key=>','(.*)=>(.*)','empty value') \u2192 [ 'key', 'empty value' ]","title":"regexp_matches"},{"location":"gr_funzioni/array/array_unico/#string_to_array","text":"Divide la stringa in un array usando il delimitatore fornito e la stringa opzionale per valori mancanti. Sintassi: string_to_array( string [, delimiter ][, empty_value='' ]) [ ] indica componenti opzionali Argomenti: string la stringa in ingresso delimiter il delimitatore stringa usato per dividere la stringa in ingresso empty_value la stringa opzionale da usare come sostituzione per le corrispondenze (lunghezza nulla) mancanti Esempi: string_to_array('1,2,3',',') \u2192 [ '1', '2', '3' ] string_to_array('1,,3',',','0') \u2192 [ '1', '0', '3' ]","title":"string_to_array"},{"location":"gr_funzioni/campi_e_valori/campi_e_valori_unico/","tags":["gruppo"],"text":"campi e valori \u21b5 Abstract **Contiene l'elenco dei campi del layer selezionato. Si possono ottenere valori campione con il click del tasto destro del mouse. Seleziona il nome del campo dall'elenco e fai click con il tasto destro per aprire il men\u00f9 con le opzioni per caricare un campione di valori dal campo selezionato. Note Il caricamento dei valori dei campi da fonti online non \u00e8 supportato prima che il layer sia effettivamente inserito, ad esempio durante la creazione delle query note Il caricamento del valore del campo da layer WFS non \u00e9 supportato, prima che il layer venga inserito, ad esempio quando si costruiscono interrogazioni. Nuove funzionalit\u00e0 introdotte in QGIS 3.28 Firenze :","title":"Campi e valori"},{"location":"gr_funzioni/campi_e_valori/campi_e_valori_unico/#campi-e-valori","text":"Abstract **Contiene l'elenco dei campi del layer selezionato. Si possono ottenere valori campione con il click del tasto destro del mouse. Seleziona il nome del campo dall'elenco e fai click con il tasto destro per aprire il men\u00f9 con le opzioni per caricare un campione di valori dal campo selezionato. Note Il caricamento dei valori dei campi da fonti online non \u00e8 supportato prima che il layer sia effettivamente inserito, ad esempio durante la creazione delle query note Il caricamento del valore del campo da layer WFS non \u00e9 supportato, prima che il layer venga inserito, ad esempio quando si costruiscono interrogazioni. Nuove funzionalit\u00e0 introdotte in QGIS 3.28 Firenze :","title":"campi e valori"},{"location":"gr_funzioni/colore/colore_unico/","tags":["gruppo"],"text":"Gruppo Colore \u21b5 Abstract Questo gruppo contiene funzioni per manipolare i colori color_cmyk \u21b5 Restituisce una rappresentazione stringa di un colore basato sui suoi componenti ciano, magenta, giallo e nero Sintassi: color_cmyk( cyan , magenta , yellow , black ) Argomenti: cyan componente ciano del colore, come valore percentuale intero da 0 a 100 magenta componente magenta del colore, come valore percentuale intero da 0 a 100 yellow componente giallo del colore, come valore percentuale intero da 0 a 100 black componente nero del colore, come valore percentuale intero da 0 a 100 Esempi: color_cmyk(100,50,0,10) \u2192 0,115,230 osservazioni: color_cmyk(100,50,0,10) = color_rgb( 0,115,230 ) color_cmyka \u21b5 Restituisce una rappresentazione stringa di un colore basato sui suoi componenti ciano, magenta, giallo, nero e alfa (trasparenza) Sintassi: color_cmyka( cyan , magenta , yellow , black , alpha ) Argomenti: cyan componente ciano del colore, come valore percentuale intero da 0 a 100 magenta componente magenta del colore, come valore percentuale intero da 0 a 100 yellow componente giallo del colore, come valore percentuale intero da 0 a 100 black componente nero del colore, come valore percentuale intero da 0 a 100 alpha componente alfa come valore intero da 0 (completamente trasparente) a 255 (opaco). Esempi: color_cmyka(100,50,0,10,200) \u2192 '0,115,229,200' osservazioni: color_cmyka(100,50,0,10,200) = color_rgba(0,115,230,200)` color_grayscale_average \u21b5 Applica un filtro in scala di grigio e restituisce una rappresentazione di stringa da un colore fornito. Sintassi: color_grayscale_average( color ) Argomenti: color una stringa di colore Esempi: color_grayscale_average('255,100,50') \u2192 '135,135,135,255' color_hsl \u21b5 Restituisce una rappresentazione stringa di un colore basato sui suoi attributi tonalit\u00e0, saturazione e luminosit\u00e0. Sintassi: color_hsl( hue , saturation , lightness ) Argomenti: hue tonalit\u00e0 del colore, come valore intero da 0 a 360 saturation percentuale di saturazione del colore come valore intero da 0 a 100 lightness /span> percentuale di luminosit\u00e0 de _ colore come valore intero da 0 a 100 Esempi: color_hsl(100,50,70) \u2192 166,217,140 osservazioni: color_hsl(100,50,70) = color_rgb( 166,217,140) color_hsla \u21b5 Restituisce una rappresentazione stringa di un colore basato sui suoi attributi tonalit\u00e0, saturazione, luminosit\u00e0 e alfa (trasparenza) Sintassi: color_hsl( hue , saturation , lightness , alpha ) Argomenti: hue tonalit\u00e0 del colore, come valore intero da 0 a 360 saturation percentuale di saturazione del colore come valore intero da 0 a 100 lightness percentuale di luminosit\u00e0 del colore come valore intero da 0 a 100 alpha componente alfa come valore intero da 0 (completamente trasparente) a 255 (opaco). Esempi: color_hsla(100,50,70,200) \u2192 '166,217,140,200' osservazioni: color_hsla(100,50,70,200) = color_rgba( 166,217,140,200) color_hsv \u21b5 Restituisce una rappresentazione stringa di un colore basato sui suoi attributi tonalit\u00e0, saturazione e valore. Sintassi: color_hsv( hue , saturation , value ) Argomenti: hue tonalit\u00e0 del colore, come valore intero da 0 a 360 saturation percentuale di saturazione del colore come valore intero da 0 a 100 value valore percentuale del colore come intero da 0 a 100 Esempi: color_hsv(40,100,100) \u2192 '255,170,0' osservazioni: color_hsv(40,100,100) = color_rgb( 255,170,0 ) color_hsva \u21b5 Restituisce una rappresentazione stringa di un colore basato sui suoi attributi tonalit\u00e0, saturazione, valore e alfa (trasparenza). Sintassi: color_hsva( hue , saturation , value , alpha ) Argomenti: hue tonalit\u00e0 del colore, come valore intero da 0 a 360 saturation percentuale di saturazione del colore come valore intero da 0 a 100 value valore percentuale del colore come intero da 0 a 100 alpha componente alfa come valore intero da 0 (completamente trasparente) a 255 (opaco) Esempi: color_hsva(40,100,100,200) \u2192 '255,170,0,200' osservazioni: color_hsva(40,100,100,200) = color_rgba( 255,170,0,200 ) color_mix_rgb \u21b5 Restituisce una stringa che rappresenta un colore che mescola i valori rosso, verde, blu e alfa di due colori forniti in base a un determinato rapporto. Sintassi: color_mix_rgb( color1 , color2 , ratio ) Argomenti: color1 una stringa di colore color2 una stringa di colore ratio un rapporto Esempi: color_mix_rgb('0,0,0','255,255,255',0.5) \u2192 127,127,127,255 color_part \u21b5 Restituisce uno specifico componente colore da una stringa colore, es. la componente rosso o alfa. Sintassi: color_part( color , component ) Argomenti: color una stringa di colore component una stringa corrispondente al componente colore da restituire. Opzioni valide sono: red: componente rosso RGB (0-255) green: componente verde RGB (0-255) blue: componente blu RGB (0-255) alpha: valore alfa (trasparenza) (0-255) hue: tonalit\u00e0 HSV (0-360) saturation: saturazione HSV (0-100) value: valore HSV (0-100) hsl_hue: tonalit\u00e0 HSL (0-360) hsl_saturation: saturazione HSL (0-100) lightness: luminosit\u00e0 HSL (0-100) cyan: componente ciano CMYK (0-100) magenta: componente magenta CMYK (0-100) yellow: componente giallo CMYK (0-100) black: componente nero CMYK (0-100) Esempi: color_part('200,10,30','green') \u2192 10 color_rgb \u21b5 Restituisce una rappresentazione stringa di un colore basato sui suoi componenti rosso, verde e blu. Sintassi: color_rgb( red , green , blue ) Argomenti: red componente rosso del colore, come valore intero da 0 a 255 green componente verde del colore, come valore intero da 0 a 255 blue componente blu del colore, come valore intero da 0 a 255 Esempi: color_rgb(255,127,0) \u2192 255,127,0 color_rgba \u21b5 Restituisce una rappresentazione stringa di un colore basato sui suoi componenti rosso, verde, blue ed alpha (trasparenza). Sintassi: color_rgba( red , green , blue , alpha ) Argomenti: red componente rosso del colore, come valore intero da 0 a 255 green componente verde del colore, come valore intero da 0 a 255 blue componente blu del colore, come valore intero da 0 a 255 alpha componente alfa come valore intero da 0 (completamente trasparente) a 255 (opaco). Esempi: color_rgba(255,127,0,200) \u2192 '255,127,0,200' create_ramp \u21b5 Restituisce una scala di colori a gradiente per una mappa di colori e passi. Sintassi: create_ramp( map [, discrete=false ]) [ ] indica componenti opzionali Argomenti: map una mappa di colori e passi discrete imposta questo parametro su vero per creare una rampa di colore discreta Esempi: ramp_color(create_ramp(map(0,'0,0,0',1,'255,0,0')),1) \u2192 '255,0,0,255' darker \u21b5 Restituisce una stringa di colore pi\u00f9 scuro (o pi\u00f9 chiaro) Sintassi: darker( color , factor ) Argomenti: color una stringa di colore factor un numero intero corrispondente al fattore scurente: se il fattore \u00e8 pi\u00f9 grande di 100, questa funzione restituisce un colore pi\u00f9 scuro (per es., impostando il fattore a 300 viene restitituito un colore che ha un terzo della luminosit\u00e0); se il fattore \u00e8 minore di 100, il colore restituito \u00e8 pi\u00f9 chiaro, ma per questo scopo si raccomanda l'uso della funzione lighter(); se il fattore \u00e8 0 o negativo, il valore restituito non \u00e8 specificato. Esempi: darker('200,10,30',300) \u2192 '66,3,10,255' lighter \u21b5 Restituisce una stringa di colore pi\u00f9 chiaro (o pi\u00f9 scuro) Sintassi: lighter( color , factor ) Argomenti: color una stringa di colore factor un numero intero corrispondente al fattore schiarente: se il fattore \u00e8 pi\u00f9 grande di 100, questa funzione restituisce un colore pi\u00f9 chiaro (per es., impostando il fattore a 150 viene restitituito un colore al 50% pi\u00f9 luminoso); se il fattore \u00e8 minore di 100, il colore restituito \u00e8 pi\u00f9 scuro, ma per questo scopo si raccomanda l'uso della funzione darker(); se il fattore \u00e8 0 o negativo, il valore restituito non \u00e8 specificato. Esempi: lighter('200,10,30',200) \u2192 '255,158,168,255' project_color \u21b5 Restituisce un colore dallo schema colore del progetto. Sintassi: project_color( name ) Argomenti: name un nome colore Esempi: project_color('Logo color') \u2192 '20,140,50' osservazioni ramp_color \u21b5 Restituisce una stringa rappresentante un colore ottenuto da una scala colore. Variante di scala salvata \u21b5 Restituisce una stringa che rappresenta un colore da una scala salvata Sintassi: ramp_color( ramp_name , value ) Argomenti: ramp_name il nome della scala colore come stringa, peesempi:o 'Spectral' value la posizione nella scala colore da cui selezionare il colore come numero reale fra 0 e 1 Esempi: ramp_color('Spectral',0.3) \u2192 '253,190,115,255' nota Le scale di colore disponibili differiscono fra le varie installazioni di QGIS. Questa funzione potrebbe non restituire il risultato atteso se sposti i tuoi progetti QGIS fra le diverse installazioni. Variante di scala creata con un'espressione \u21b5 Restituisce una stringa che rappresenta un colore da una scala creata con un'espressione Sintassi: ramp_color( ramp , value ) Argomenti: ramp la scala di colori value la posizione nella scala colore da cui selezionare il colore come numero reale fra 0 e 1 Esempi: ramp_color(create_ramp(map(0,'0,0,0',1,'255,0,0')),1) \u2192255,0,0,255 set_color_part \u21b5 Imposta uno specifico componente colore per una stringa colore, es. la componente rosso o alpha. Sintassi: set_color_part( color , component , value ) Argomenti: color una stringa di colore component una stringa corrispondente al componente colore da impostare. Opzioni valide sono: red: componente rosso RGB (0-255) green: componente verde RGB (0-255) blue: componente blu RGB (0-255) alpha: valore alfa (trasparenza) (0-255) hue: tonalit\u00e0 HSV (0-360) saturation: saturazione HSV (0-100) value: valore HSV (0-100) hsl_hue: tonalit\u00e0 HSL (0-360) hsl_saturation:saturazione HSL (0-100) lightness: luminosit\u00e0 HSL (0-100) cyan: componente ciano CMYK (0-100) magenta: componente magente CMYK (0-100) yellow: componente giallo CMYK (0-100) black: componente nero CMYK (0-100) value nuovo valore per il componente colore, rispettando gli intervalli listati sopra Esempi: set_color_part('200,10,30','green',50) \u2192 200,50,30","title":"Colore"},{"location":"gr_funzioni/colore/colore_unico/#gruppo-colore","text":"Abstract Questo gruppo contiene funzioni per manipolare i colori","title":"Gruppo Colore"},{"location":"gr_funzioni/colore/colore_unico/#color_cmyk","text":"Restituisce una rappresentazione stringa di un colore basato sui suoi componenti ciano, magenta, giallo e nero Sintassi: color_cmyk( cyan , magenta , yellow , black ) Argomenti: cyan componente ciano del colore, come valore percentuale intero da 0 a 100 magenta componente magenta del colore, come valore percentuale intero da 0 a 100 yellow componente giallo del colore, come valore percentuale intero da 0 a 100 black componente nero del colore, come valore percentuale intero da 0 a 100 Esempi: color_cmyk(100,50,0,10) \u2192 0,115,230 osservazioni: color_cmyk(100,50,0,10) = color_rgb( 0,115,230 )","title":"color_cmyk"},{"location":"gr_funzioni/colore/colore_unico/#color_cmyka","text":"Restituisce una rappresentazione stringa di un colore basato sui suoi componenti ciano, magenta, giallo, nero e alfa (trasparenza) Sintassi: color_cmyka( cyan , magenta , yellow , black , alpha ) Argomenti: cyan componente ciano del colore, come valore percentuale intero da 0 a 100 magenta componente magenta del colore, come valore percentuale intero da 0 a 100 yellow componente giallo del colore, come valore percentuale intero da 0 a 100 black componente nero del colore, come valore percentuale intero da 0 a 100 alpha componente alfa come valore intero da 0 (completamente trasparente) a 255 (opaco). Esempi: color_cmyka(100,50,0,10,200) \u2192 '0,115,229,200' osservazioni: color_cmyka(100,50,0,10,200) = color_rgba(0,115,230,200)`","title":"color_cmyka"},{"location":"gr_funzioni/colore/colore_unico/#color_grayscale_average","text":"Applica un filtro in scala di grigio e restituisce una rappresentazione di stringa da un colore fornito. Sintassi: color_grayscale_average( color ) Argomenti: color una stringa di colore Esempi: color_grayscale_average('255,100,50') \u2192 '135,135,135,255'","title":"color_grayscale_average"},{"location":"gr_funzioni/colore/colore_unico/#color_hsl","text":"Restituisce una rappresentazione stringa di un colore basato sui suoi attributi tonalit\u00e0, saturazione e luminosit\u00e0. Sintassi: color_hsl( hue , saturation , lightness ) Argomenti: hue tonalit\u00e0 del colore, come valore intero da 0 a 360 saturation percentuale di saturazione del colore come valore intero da 0 a 100 lightness /span> percentuale di luminosit\u00e0 de _ colore come valore intero da 0 a 100 Esempi: color_hsl(100,50,70) \u2192 166,217,140 osservazioni: color_hsl(100,50,70) = color_rgb( 166,217,140)","title":"color_hsl"},{"location":"gr_funzioni/colore/colore_unico/#color_hsla","text":"Restituisce una rappresentazione stringa di un colore basato sui suoi attributi tonalit\u00e0, saturazione, luminosit\u00e0 e alfa (trasparenza) Sintassi: color_hsl( hue , saturation , lightness , alpha ) Argomenti: hue tonalit\u00e0 del colore, come valore intero da 0 a 360 saturation percentuale di saturazione del colore come valore intero da 0 a 100 lightness percentuale di luminosit\u00e0 del colore come valore intero da 0 a 100 alpha componente alfa come valore intero da 0 (completamente trasparente) a 255 (opaco). Esempi: color_hsla(100,50,70,200) \u2192 '166,217,140,200' osservazioni: color_hsla(100,50,70,200) = color_rgba( 166,217,140,200)","title":"color_hsla"},{"location":"gr_funzioni/colore/colore_unico/#color_hsv","text":"Restituisce una rappresentazione stringa di un colore basato sui suoi attributi tonalit\u00e0, saturazione e valore. Sintassi: color_hsv( hue , saturation , value ) Argomenti: hue tonalit\u00e0 del colore, come valore intero da 0 a 360 saturation percentuale di saturazione del colore come valore intero da 0 a 100 value valore percentuale del colore come intero da 0 a 100 Esempi: color_hsv(40,100,100) \u2192 '255,170,0' osservazioni: color_hsv(40,100,100) = color_rgb( 255,170,0 )","title":"color_hsv"},{"location":"gr_funzioni/colore/colore_unico/#color_hsva","text":"Restituisce una rappresentazione stringa di un colore basato sui suoi attributi tonalit\u00e0, saturazione, valore e alfa (trasparenza). Sintassi: color_hsva( hue , saturation , value , alpha ) Argomenti: hue tonalit\u00e0 del colore, come valore intero da 0 a 360 saturation percentuale di saturazione del colore come valore intero da 0 a 100 value valore percentuale del colore come intero da 0 a 100 alpha componente alfa come valore intero da 0 (completamente trasparente) a 255 (opaco) Esempi: color_hsva(40,100,100,200) \u2192 '255,170,0,200' osservazioni: color_hsva(40,100,100,200) = color_rgba( 255,170,0,200 )","title":"color_hsva"},{"location":"gr_funzioni/colore/colore_unico/#color_mix_rgb","text":"Restituisce una stringa che rappresenta un colore che mescola i valori rosso, verde, blu e alfa di due colori forniti in base a un determinato rapporto. Sintassi: color_mix_rgb( color1 , color2 , ratio ) Argomenti: color1 una stringa di colore color2 una stringa di colore ratio un rapporto Esempi: color_mix_rgb('0,0,0','255,255,255',0.5) \u2192 127,127,127,255","title":"color_mix_rgb"},{"location":"gr_funzioni/colore/colore_unico/#color_part","text":"Restituisce uno specifico componente colore da una stringa colore, es. la componente rosso o alfa. Sintassi: color_part( color , component ) Argomenti: color una stringa di colore component una stringa corrispondente al componente colore da restituire. Opzioni valide sono: red: componente rosso RGB (0-255) green: componente verde RGB (0-255) blue: componente blu RGB (0-255) alpha: valore alfa (trasparenza) (0-255) hue: tonalit\u00e0 HSV (0-360) saturation: saturazione HSV (0-100) value: valore HSV (0-100) hsl_hue: tonalit\u00e0 HSL (0-360) hsl_saturation: saturazione HSL (0-100) lightness: luminosit\u00e0 HSL (0-100) cyan: componente ciano CMYK (0-100) magenta: componente magenta CMYK (0-100) yellow: componente giallo CMYK (0-100) black: componente nero CMYK (0-100) Esempi: color_part('200,10,30','green') \u2192 10","title":"color_part"},{"location":"gr_funzioni/colore/colore_unico/#color_rgb","text":"Restituisce una rappresentazione stringa di un colore basato sui suoi componenti rosso, verde e blu. Sintassi: color_rgb( red , green , blue ) Argomenti: red componente rosso del colore, come valore intero da 0 a 255 green componente verde del colore, come valore intero da 0 a 255 blue componente blu del colore, come valore intero da 0 a 255 Esempi: color_rgb(255,127,0) \u2192 255,127,0","title":"color_rgb"},{"location":"gr_funzioni/colore/colore_unico/#color_rgba","text":"Restituisce una rappresentazione stringa di un colore basato sui suoi componenti rosso, verde, blue ed alpha (trasparenza). Sintassi: color_rgba( red , green , blue , alpha ) Argomenti: red componente rosso del colore, come valore intero da 0 a 255 green componente verde del colore, come valore intero da 0 a 255 blue componente blu del colore, come valore intero da 0 a 255 alpha componente alfa come valore intero da 0 (completamente trasparente) a 255 (opaco). Esempi: color_rgba(255,127,0,200) \u2192 '255,127,0,200'","title":"color_rgba"},{"location":"gr_funzioni/colore/colore_unico/#create_ramp","text":"Restituisce una scala di colori a gradiente per una mappa di colori e passi. Sintassi: create_ramp( map [, discrete=false ]) [ ] indica componenti opzionali Argomenti: map una mappa di colori e passi discrete imposta questo parametro su vero per creare una rampa di colore discreta Esempi: ramp_color(create_ramp(map(0,'0,0,0',1,'255,0,0')),1) \u2192 '255,0,0,255'","title":"create_ramp"},{"location":"gr_funzioni/colore/colore_unico/#darker","text":"Restituisce una stringa di colore pi\u00f9 scuro (o pi\u00f9 chiaro) Sintassi: darker( color , factor ) Argomenti: color una stringa di colore factor un numero intero corrispondente al fattore scurente: se il fattore \u00e8 pi\u00f9 grande di 100, questa funzione restituisce un colore pi\u00f9 scuro (per es., impostando il fattore a 300 viene restitituito un colore che ha un terzo della luminosit\u00e0); se il fattore \u00e8 minore di 100, il colore restituito \u00e8 pi\u00f9 chiaro, ma per questo scopo si raccomanda l'uso della funzione lighter(); se il fattore \u00e8 0 o negativo, il valore restituito non \u00e8 specificato. Esempi: darker('200,10,30',300) \u2192 '66,3,10,255'","title":"darker"},{"location":"gr_funzioni/colore/colore_unico/#lighter","text":"Restituisce una stringa di colore pi\u00f9 chiaro (o pi\u00f9 scuro) Sintassi: lighter( color , factor ) Argomenti: color una stringa di colore factor un numero intero corrispondente al fattore schiarente: se il fattore \u00e8 pi\u00f9 grande di 100, questa funzione restituisce un colore pi\u00f9 chiaro (per es., impostando il fattore a 150 viene restitituito un colore al 50% pi\u00f9 luminoso); se il fattore \u00e8 minore di 100, il colore restituito \u00e8 pi\u00f9 scuro, ma per questo scopo si raccomanda l'uso della funzione darker(); se il fattore \u00e8 0 o negativo, il valore restituito non \u00e8 specificato. Esempi: lighter('200,10,30',200) \u2192 '255,158,168,255'","title":"lighter"},{"location":"gr_funzioni/colore/colore_unico/#project_color","text":"Restituisce un colore dallo schema colore del progetto. Sintassi: project_color( name ) Argomenti: name un nome colore Esempi: project_color('Logo color') \u2192 '20,140,50' osservazioni","title":"project_color"},{"location":"gr_funzioni/colore/colore_unico/#ramp_color","text":"Restituisce una stringa rappresentante un colore ottenuto da una scala colore.","title":"ramp_color"},{"location":"gr_funzioni/colore/colore_unico/#variante-di-scala-salvata","text":"Restituisce una stringa che rappresenta un colore da una scala salvata Sintassi: ramp_color( ramp_name , value ) Argomenti: ramp_name il nome della scala colore come stringa, peesempi:o 'Spectral' value la posizione nella scala colore da cui selezionare il colore come numero reale fra 0 e 1 Esempi: ramp_color('Spectral',0.3) \u2192 '253,190,115,255' nota Le scale di colore disponibili differiscono fra le varie installazioni di QGIS. Questa funzione potrebbe non restituire il risultato atteso se sposti i tuoi progetti QGIS fra le diverse installazioni.","title":"Variante di scala salvata"},{"location":"gr_funzioni/colore/colore_unico/#variante-di-scala-creata-con-unespressione","text":"Restituisce una stringa che rappresenta un colore da una scala creata con un'espressione Sintassi: ramp_color( ramp , value ) Argomenti: ramp la scala di colori value la posizione nella scala colore da cui selezionare il colore come numero reale fra 0 e 1 Esempi: ramp_color(create_ramp(map(0,'0,0,0',1,'255,0,0')),1) \u2192255,0,0,255","title":"Variante di scala creata con un'espressione"},{"location":"gr_funzioni/colore/colore_unico/#set_color_part","text":"Imposta uno specifico componente colore per una stringa colore, es. la componente rosso o alpha. Sintassi: set_color_part( color , component , value ) Argomenti: color una stringa di colore component una stringa corrispondente al componente colore da impostare. Opzioni valide sono: red: componente rosso RGB (0-255) green: componente verde RGB (0-255) blue: componente blu RGB (0-255) alpha: valore alfa (trasparenza) (0-255) hue: tonalit\u00e0 HSV (0-360) saturation: saturazione HSV (0-100) value: valore HSV (0-100) hsl_hue: tonalit\u00e0 HSL (0-360) hsl_saturation:saturazione HSL (0-100) lightness: luminosit\u00e0 HSL (0-100) cyan: componente ciano CMYK (0-100) magenta: componente magente CMYK (0-100) yellow: componente giallo CMYK (0-100) black: componente nero CMYK (0-100) value nuovo valore per il componente colore, rispettando gli intervalli listati sopra Esempi: set_color_part('200,10,30','green',50) \u2192 200,50,30","title":"set_color_part"},{"location":"gr_funzioni/condizioni/condizioni_unico/","tags":["gruppo"],"text":"Gruppo Condizioni \u21b5 Abstract Questo gruppo contiene funzioni per gestire controlli condizionali nelle espressioni. CASE \u21b5 Valuta un'espressione e restituisce un risultato diverso, sia esso vero o falso. Puoi testare pi\u00f9 condizioni Sintassi: CASE WHEN condizione THEN risultato [ ...n ] [ ELSE risultato ] END [ ] indica componenti opzionali Argomenti: WHEN condizione - L'espressione di condizione da valutare. THEN risultato - Se condizione valutata a True (vero) allora risultato viene valutato e restituito. ELSE risultato - Se nessuna delle condizioni valutate sopra restituisce True (vero) allora risultato viene valutato e restituito. Esempi: CASE WHEN \"column\" IS NULL THEN 'None' END CASE WHEN \"COD_REG\" =19 or \"COD_REG\" = 20 THEN \"DEN_REG\" ELSE 'NON SONO ISOLE' END CASE WHEN length( \"DEN_REG\") >15 THEN 'LUNGO' WHEN length( \"DEN_REG\") <15 AND length( \"DEN_REG\") >10 THEN 'MEDIO' ELSE 'CORTA' END Altri Esempi: popolare un campo un funzione di un altro CASE WHEN \"livello3\" ILIKE 'A%' THEN 'ciao' WHEN \"livello3\" ILIKE 'B%' THEN 'arrivederci' WHEN \"livello3\" ILIKE 'C%' THEN 'ciaone' ELSE 'CUCU' END In questo Esempio viene popolato un campo (dove \u00e8 usata l'espressione) in funzione del campo livello3 : se il campo contiene un valore che inizia per A allora scriver\u00e0 ciao , se contiene un valore che inizia con B scriver\u00e0 arrivederci ; se contiene un valore che inizia per C scriver\u00e0 ciaone in tutti gli altri casi scriver\u00e0 CUCU -- posizionamento etichetta coalesce \u21b5 Restituisce il primo valore non NULL dalla lista delle espressioni. Questa funzione pu\u00f2 usare qualsiasi numero di Argomenti:. Sintassi: coalesce( expression1 , expression2 , \u2026 ) Argomenti: expression qualsiasi valore o espressione valida, senza tener conto del tipo. Esempi: coalesce(NULL, 2) \u2192 2 coalesce(NULL, 2, 3) \u2192 2 coalesce(7, NULL, 3*2) \u2192 7 coalesce(\"fieldA\", \"fallbackField\", 'ERRORE') \u2192 valore di \"fieldA\" se non \u00e8 NULL, altrimenti il valore di \"fallbackField\" o la stringa 'ERRORE' se sono entrambi NULL Osservazioni: Questa funzione \u00e8 utile all'interno di una espressione che prevede l'uso di pi\u00f9 campi ed uno o pi\u00f9 di essi ha valore NULL, questo valore penalizza l'intera stringa e rende non visibile il risultato. Esempio senza l'uso della funzione coalesce : Esempio con l'uso della funzione coalesce : if \u21b5 Testa una condizione e restituisce un risultato diverso a seconda della verifica. Sintassi: if( condition , result_when_true , result_when_false ) Argomenti: condition la condizione che deve essere controllata result_when_true il risultato che viene restituito quando la condizione \u00e8 vera o un altro valore non si trasforma in falso. result_when_false il risultato che viene restituito quando la condizione \u00e8 falsa o un altro valore si trasforma in falso come 0 o ''. NULL sar\u00e0 inoltre convertito in falso. Esempi: if( 1+1=2, 'S\u00ec', 'No' ) \u2192 'S\u00ec' if( 1+1=3, 'S\u00ec', 'No' ) \u2192 'No' if( 5 > 3, 1, 0) \u2192 1 if( '', 'It is true (not empty)', 'It is false (empty)' ) \u2192 'It is false (empty)' if( ' ', 'It is true (not empty)', 'It is false (empty)' ) \u2192 'It is true (not empty)' if( 0, 'One', 'Zero' ) \u2192 'Zero' if( 10, 'One', 'Zero' ) \u2192 'One' Osservazioni: -- nullif \u21b5 Restituisce un valore nullo se value1 \u00e8 uguale a value2 ; altrimenti restituisce value1 . Questo pu\u00f2 essere usato per sostituire in modo condizionale i valori con NULL . Sintassi: nullif( value1 , value2 ) Argomenti: value1 Il valore che dovrebbe essere utilizzato o sostituito con NULL . value2 Il valore di controllo che attiver\u00e0 la sostituzione NULL . Esempi: nullif('(none)', '(none)') \u2192 NULL nullif('text', '(none)') \u2192 'text' nullif(\"name\", '') \u2192 NULL, se \"name\" \u00e8 una stringa vuota (o gi\u00e0 NULL), \"name\" in qualsiasi altro caso. regexp_match \u21b5 Restituisce la prima posizione di corrispondenza che soddisfa un'espressione regolare all'interno di una stringa, o 0 se la sottostringa non viene trovata. Sintassi: regexp_match( input_string , regex ) Argomenti: _input_string _ la stringa da confrontare con l'espressione regolare _regex _ L'espressione regolare da confrontare. I caratteri backslash devono essere doppiamente escaped (es \"\\s\" per selezionare un carattere spazio bianco). Esempi: regexp_match('QGIS ROCKS','\\\\sROCKS') \u2192 5 Osservazioni: -- In questo Esempio la prima lettere di Fiandaca si trova alla posizione 10 regexp_match('Salvatore Fiandaca','\\\\sFiandaca') \u2192 10 try \u21b5 Prova un'espressione e restituisce il suo valore se priva di errori. Se l'espressione restituisce un errore, verr\u00e0 restituito un valore alternativo se fornito altrimenti la funzione restituir\u00e0 null. Sintassi: try( expression [, alternative ]) [ ] contrassegna componenti opzionali Argomenti: expression l'espressione che dovrebbe essere eseguita alternative il risultato che verr\u00e0 restituito se l'espressione restituisce un errore Esempi: try( to_int( '1' ), 0 ) \u2192 1 try( to_int( 'a' ), 0 ) \u2192 0 try( to_date( 'invalid_date' ) ) \u2192 NULL","title":"Condizioni"},{"location":"gr_funzioni/condizioni/condizioni_unico/#gruppo-condizioni","text":"Abstract Questo gruppo contiene funzioni per gestire controlli condizionali nelle espressioni.","title":"Gruppo Condizioni"},{"location":"gr_funzioni/condizioni/condizioni_unico/#case","text":"Valuta un'espressione e restituisce un risultato diverso, sia esso vero o falso. Puoi testare pi\u00f9 condizioni Sintassi: CASE WHEN condizione THEN risultato [ ...n ] [ ELSE risultato ] END [ ] indica componenti opzionali Argomenti: WHEN condizione - L'espressione di condizione da valutare. THEN risultato - Se condizione valutata a True (vero) allora risultato viene valutato e restituito. ELSE risultato - Se nessuna delle condizioni valutate sopra restituisce True (vero) allora risultato viene valutato e restituito. Esempi: CASE WHEN \"column\" IS NULL THEN 'None' END CASE WHEN \"COD_REG\" =19 or \"COD_REG\" = 20 THEN \"DEN_REG\" ELSE 'NON SONO ISOLE' END CASE WHEN length( \"DEN_REG\") >15 THEN 'LUNGO' WHEN length( \"DEN_REG\") <15 AND length( \"DEN_REG\") >10 THEN 'MEDIO' ELSE 'CORTA' END Altri Esempi: popolare un campo un funzione di un altro CASE WHEN \"livello3\" ILIKE 'A%' THEN 'ciao' WHEN \"livello3\" ILIKE 'B%' THEN 'arrivederci' WHEN \"livello3\" ILIKE 'C%' THEN 'ciaone' ELSE 'CUCU' END In questo Esempio viene popolato un campo (dove \u00e8 usata l'espressione) in funzione del campo livello3 : se il campo contiene un valore che inizia per A allora scriver\u00e0 ciao , se contiene un valore che inizia con B scriver\u00e0 arrivederci ; se contiene un valore che inizia per C scriver\u00e0 ciaone in tutti gli altri casi scriver\u00e0 CUCU -- posizionamento etichetta","title":"CASE"},{"location":"gr_funzioni/condizioni/condizioni_unico/#coalesce","text":"Restituisce il primo valore non NULL dalla lista delle espressioni. Questa funzione pu\u00f2 usare qualsiasi numero di Argomenti:. Sintassi: coalesce( expression1 , expression2 , \u2026 ) Argomenti: expression qualsiasi valore o espressione valida, senza tener conto del tipo. Esempi: coalesce(NULL, 2) \u2192 2 coalesce(NULL, 2, 3) \u2192 2 coalesce(7, NULL, 3*2) \u2192 7 coalesce(\"fieldA\", \"fallbackField\", 'ERRORE') \u2192 valore di \"fieldA\" se non \u00e8 NULL, altrimenti il valore di \"fallbackField\" o la stringa 'ERRORE' se sono entrambi NULL Osservazioni: Questa funzione \u00e8 utile all'interno di una espressione che prevede l'uso di pi\u00f9 campi ed uno o pi\u00f9 di essi ha valore NULL, questo valore penalizza l'intera stringa e rende non visibile il risultato. Esempio senza l'uso della funzione coalesce : Esempio con l'uso della funzione coalesce :","title":"coalesce"},{"location":"gr_funzioni/condizioni/condizioni_unico/#if","text":"Testa una condizione e restituisce un risultato diverso a seconda della verifica. Sintassi: if( condition , result_when_true , result_when_false ) Argomenti: condition la condizione che deve essere controllata result_when_true il risultato che viene restituito quando la condizione \u00e8 vera o un altro valore non si trasforma in falso. result_when_false il risultato che viene restituito quando la condizione \u00e8 falsa o un altro valore si trasforma in falso come 0 o ''. NULL sar\u00e0 inoltre convertito in falso. Esempi: if( 1+1=2, 'S\u00ec', 'No' ) \u2192 'S\u00ec' if( 1+1=3, 'S\u00ec', 'No' ) \u2192 'No' if( 5 > 3, 1, 0) \u2192 1 if( '', 'It is true (not empty)', 'It is false (empty)' ) \u2192 'It is false (empty)' if( ' ', 'It is true (not empty)', 'It is false (empty)' ) \u2192 'It is true (not empty)' if( 0, 'One', 'Zero' ) \u2192 'Zero' if( 10, 'One', 'Zero' ) \u2192 'One' Osservazioni: --","title":"if"},{"location":"gr_funzioni/condizioni/condizioni_unico/#nullif","text":"Restituisce un valore nullo se value1 \u00e8 uguale a value2 ; altrimenti restituisce value1 . Questo pu\u00f2 essere usato per sostituire in modo condizionale i valori con NULL . Sintassi: nullif( value1 , value2 ) Argomenti: value1 Il valore che dovrebbe essere utilizzato o sostituito con NULL . value2 Il valore di controllo che attiver\u00e0 la sostituzione NULL . Esempi: nullif('(none)', '(none)') \u2192 NULL nullif('text', '(none)') \u2192 'text' nullif(\"name\", '') \u2192 NULL, se \"name\" \u00e8 una stringa vuota (o gi\u00e0 NULL), \"name\" in qualsiasi altro caso.","title":"nullif"},{"location":"gr_funzioni/condizioni/condizioni_unico/#regexp_match","text":"Restituisce la prima posizione di corrispondenza che soddisfa un'espressione regolare all'interno di una stringa, o 0 se la sottostringa non viene trovata. Sintassi: regexp_match( input_string , regex ) Argomenti: _input_string _ la stringa da confrontare con l'espressione regolare _regex _ L'espressione regolare da confrontare. I caratteri backslash devono essere doppiamente escaped (es \"\\s\" per selezionare un carattere spazio bianco). Esempi: regexp_match('QGIS ROCKS','\\\\sROCKS') \u2192 5 Osservazioni: -- In questo Esempio la prima lettere di Fiandaca si trova alla posizione 10 regexp_match('Salvatore Fiandaca','\\\\sFiandaca') \u2192 10","title":"regexp_match"},{"location":"gr_funzioni/condizioni/condizioni_unico/#try","text":"Prova un'espressione e restituisce il suo valore se priva di errori. Se l'espressione restituisce un errore, verr\u00e0 restituito un valore alternativo se fornito altrimenti la funzione restituir\u00e0 null. Sintassi: try( expression [, alternative ]) [ ] contrassegna componenti opzionali Argomenti: expression l'espressione che dovrebbe essere eseguita alternative il risultato che verr\u00e0 restituito se l'espressione restituisce un errore Esempi: try( to_int( '1' ), 0 ) \u2192 1 try( to_int( 'a' ), 0 ) \u2192 0 try( to_date( 'invalid_date' ) ) \u2192 NULL","title":"try"},{"location":"gr_funzioni/conversioni/conversioni_unico/","tags":["gruppo"],"text":"Gruppo Conversioni \u21b5 Abstract Questo gruppo contiene funzioni per convertire i dati da un tipo ad un altro, es. da stringa a intero, da intero a stringa. from_base64 \u21b5 Decodifica una stringa Base64 in un valore binario. Sintassi: from_base64( string ) Argomenti: string stringa da decodificare Esempi: from_base64('UUdJUw==') \u2192 'QGIS' hash \u21b5 Crea un hash da una stringa con un determinato metodo. Sintassi: hash( string , method ) Argomenti: string stringa di hash method Il metodo hash tra 'md4', 'md5', 'sha1', 'sha224', 'sha384', 'sha512', 'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512', 'keccak_224', 'keccak_256 ',' keccak_384 ',' keccak_512 ' Esempi: hash('QGIS', 'md4') \u2192 'c0fc71c241cdebb6e888cbac0e2b68eb' hash('QGIS', 'md5') \u2192 '57470aaa9e22adaefac7f5f342f1c6da' hash('QGIS', 'sha1') \u2192 'f87cfb2b74cdd5867db913237024e7001e62b114' hash('QGIS', 'sha224') \u2192 '4093a619ada631c770f44bc643ead18fb393b93d6a6af1861fcfece0' hash('QGIS', 'sha256') \u2192 'eb045cba7a797aaa06ac58830846e40c8e8c780bc0676d3393605fae50c05309' hash('QGIS', 'sha384') \u2192 '91c1de038cc3d09fdd512e99f9dd9922efadc39ed21d3922e69a4305cc25506033aee388e554b78714c8734f9cd7e610' hash('QGIS', 'sha512') \u2192 'c2c092f2ab743bf8edbeb6d028a745f30fc720408465ed369421f0a4e20fa5e27f0c90ad72d3f1d836eaa5d25cd39897d4cf77e19984668ef58da6e3159f18ac' hash('QGIS', 'sha3_224') \u2192 '467f49a5039e7280d5d42fd433e80d203439e338eaabd701f0d6c17d' hash('QGIS', 'sha3_256') \u2192 '540f7354b6b8a6e735f2845250f15f4f3ba4f666c55574d9e9354575de0e980f' hash('QGIS', 'sha3_384') \u2192 '96052da1e77679e9a65f60d7ead961b287977823144786386eb43647b0901fd8516fa6f1b9d243fb3f28775e6dde6107' hash('QGIS', 'sha3_512') \u2192 '900d079dc69761da113980253aa8ac0414a8bd6d09879a916228f8743707c4758051c98445d6b8945ec854ff90655005e02aceb0a2ffc6a0ebf818745d665349' hash('QGIS', 'keccak_224') \u2192 '5b0ce6acef8b0a121d4ac4f3eaa8503c799ad4e26a3392d1fb201478' hash('QGIS', 'keccak_256') \u2192 '991c520aa6815392de24087f61b2ae0fd56abbfeee4a8ca019c1011d327c577e' hash('QGIS', 'keccak_384') \u2192 'c57a3aed9d856fa04e5eeee9b62b6e027cca81ba574116d3cc1f0d48a1ef9e5886ff463ea8d0fac772ee473bf92f810d' hash('QGIS', 'keccak_512') \u2192 '6f0f751776b505e317de222508fa5d3ed7099d8f07c74fed54ccee6e7cdc\u2026' md5 \u21b5 Crea un hash md5 da una stringa. Sintassi: md5( string ) Argomenti: string stringa di md5 Esempi: md5('QGIS') \u2192 '57470aaa9e22adaefac7f5f342f1c6da' sha256 \u21b5 Crea un hash sha256 da una stringa. Sintassi: sha256( string ) Argomenti: string stringa di sha256 Esempi: sha256('QGIS') \u2192 'eb045cba7a797aaa06ac58830846e40c8e8c780bc0676d3393605fae50c05309' to_base64 \u21b5 Decodifica una stringa Base64 in un valore binario. Sintassi: to_base64( value ) Argomenti: value il valore binario da codificare Esempi: to_base64('QGIS') \u2192 'UUdJUw==' In un layer di un GeoPackage aggiungere un campo BLOB e popolarlo con delle immagini; per visualizzarle, per esempio come Simbolo Immagine Raster , utilizzare l'espressione: 'base64:' || to_base64(\"fieldBLOB\") to_date \u21b5 Converte una stringa in un oggetto data. Sintassi: to_date( string ) Argomenti: string stringa rappresentante il valore data Esempi: to_date('2012-05-04') \u2192 2012-05-04 to_datetime \u21b5 Converte una stringa in un oggetto datetime. Sintassi: to_datetime( string ) Argomenti: string stringa rappresentante il valore datatime Esempi: to_datetime( '2018-05-06 12:02:00') \u2192 2018-05-06T12:02:00 to_decimal \u21b5 Converte una coordinata in gradi, minuti e secondi nel suo equivalente decimale. Sintassi: to_decimal( value ) Argomenti: value Una stringa di gradi, minuti, secondi Esempi: to_decimal('6\u00b09\u203216.445\u2033')) \u2192 6.154568055555556 to_dm \u21b5 Converte una coordinata in gradi, minuti Sintassi: to_dm( coordinate , axis , precision [, formatting ] ) [ ] indica componenti opzionali Argomenti: coordinate Un valore di latitudine o longitudine axis L'asse della coordinata 'x' o 'y' precision Numero di decimali formatting Designa il tipo di formattazione. I valori accettabili sono NULL, 'aligned' o 'suffix' Esempi: to_dm(6.3545681, 'x', 3) \u2192 6\u00b021.274\u2032 to_dm(6.3545681, 'y', 4, 'suffix') \u2192 6\u00b021.2741\u2032N to_dms \u21b5 Converte una coordinata in gradi, minuti e secondi Sintassi: to_dms( coordinate , axis , precision [, formatting ] ) [ ] indica componenti opzionali Argomenti: coordinate Un valore di latitudine o longitudine axis L'asse della coordinata 'x' o 'y' precision Numero di decimali formatting Designa il tipo di formattazione. I valori accettabili sono NULL, 'aligned' o 'suffix' Esempi: to_dms(6.3545681, 'x', 3) \u2192 6\u00b021\u203216.445\u2033 to_dms(6.3545681, 'y', 4, 'suffix') \u2192 6\u00b021\u203216.4452\u2033N to_int \u21b5 Converte una stringa in un numero intero. Non viene restituito nulla se un valore non pu\u00f2 essere convertito ad intero (es. '123asd' non \u00e8 valido) Sintassi: to_int( string ) Argomenti: string stringa da convertine i n numero intero Esempi: to_int('123') \u2192 123 Nota bene: un testo va scritto sempre tra apici semplici es: '123' to_interval \u21b5 Converte una stringa in un tipo intervallo. Pu\u00f2 essere usata per estrarre giorni, ore, mese, etc. da una data. Sintassi: to_interval( string ) Argomenti: string una stringa rappresentante un intervallo. I formati ammessi includono {n} giorni {n} ore {n} mesi. Esempi: to_datetime('2018-05-04 12:23:00') - to_interval('1 day 2 hours') \u2192 2018-05-03T10:23:00 to_real \u21b5 Converte una stringa in un numero reale. Non viene restituito nulla se un valore non pu\u00f2 essere convertito a reale (es. '123.56asd' non \u00e8 valido). I numeri sono arrotondati dopo aver salvato le modifiche se la precisione \u00e8 minore del risultato della conversione. Sintassi: to_real( string ) Argomenti: string stringa da convertire in numero reale Esempi: to_real('123.45') \u2192 123.45 Nota bene: Il punto ( . ) \u00e8 il separatore decimale. to_string \u21b5 Converte una stringa in un numero reale. Non viene restituito nulla se un valore non pu\u00f2 essere convertito a reale (es. '123.56asd' non \u00e8 valido). I numeri sono arrotondati dopo aver salvato le modifiche se la precisione \u00e8 minore del risultato della conversione. Sintassi: to_string( number ) Argomenti: number Valore intero o reale. Il numero da convertire in stringa. Esempi: to_string(123.45) \u2192 '123.45' to_string(123) \u2192 '123' Nota bene: Il punto ( . ) \u00e8 il separatore decimale; una stringa \u00e8 sempre tra apici semplici es: '123'. to_time \u21b5 Converti una stringa in un oggetto time. Sintassi: to_time( string ) Argomenti: string stringa rappresentante un valore time Esempi: to_time('12:30:01') \u2192 12:30:0","title":"Conversioni"},{"location":"gr_funzioni/conversioni/conversioni_unico/#gruppo-conversioni","text":"Abstract Questo gruppo contiene funzioni per convertire i dati da un tipo ad un altro, es. da stringa a intero, da intero a stringa.","title":"Gruppo Conversioni"},{"location":"gr_funzioni/conversioni/conversioni_unico/#from_base64","text":"Decodifica una stringa Base64 in un valore binario. Sintassi: from_base64( string ) Argomenti: string stringa da decodificare Esempi: from_base64('UUdJUw==') \u2192 'QGIS'","title":"from_base64"},{"location":"gr_funzioni/conversioni/conversioni_unico/#hash","text":"Crea un hash da una stringa con un determinato metodo. Sintassi: hash( string , method ) Argomenti: string stringa di hash method Il metodo hash tra 'md4', 'md5', 'sha1', 'sha224', 'sha384', 'sha512', 'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512', 'keccak_224', 'keccak_256 ',' keccak_384 ',' keccak_512 ' Esempi: hash('QGIS', 'md4') \u2192 'c0fc71c241cdebb6e888cbac0e2b68eb' hash('QGIS', 'md5') \u2192 '57470aaa9e22adaefac7f5f342f1c6da' hash('QGIS', 'sha1') \u2192 'f87cfb2b74cdd5867db913237024e7001e62b114' hash('QGIS', 'sha224') \u2192 '4093a619ada631c770f44bc643ead18fb393b93d6a6af1861fcfece0' hash('QGIS', 'sha256') \u2192 'eb045cba7a797aaa06ac58830846e40c8e8c780bc0676d3393605fae50c05309' hash('QGIS', 'sha384') \u2192 '91c1de038cc3d09fdd512e99f9dd9922efadc39ed21d3922e69a4305cc25506033aee388e554b78714c8734f9cd7e610' hash('QGIS', 'sha512') \u2192 'c2c092f2ab743bf8edbeb6d028a745f30fc720408465ed369421f0a4e20fa5e27f0c90ad72d3f1d836eaa5d25cd39897d4cf77e19984668ef58da6e3159f18ac' hash('QGIS', 'sha3_224') \u2192 '467f49a5039e7280d5d42fd433e80d203439e338eaabd701f0d6c17d' hash('QGIS', 'sha3_256') \u2192 '540f7354b6b8a6e735f2845250f15f4f3ba4f666c55574d9e9354575de0e980f' hash('QGIS', 'sha3_384') \u2192 '96052da1e77679e9a65f60d7ead961b287977823144786386eb43647b0901fd8516fa6f1b9d243fb3f28775e6dde6107' hash('QGIS', 'sha3_512') \u2192 '900d079dc69761da113980253aa8ac0414a8bd6d09879a916228f8743707c4758051c98445d6b8945ec854ff90655005e02aceb0a2ffc6a0ebf818745d665349' hash('QGIS', 'keccak_224') \u2192 '5b0ce6acef8b0a121d4ac4f3eaa8503c799ad4e26a3392d1fb201478' hash('QGIS', 'keccak_256') \u2192 '991c520aa6815392de24087f61b2ae0fd56abbfeee4a8ca019c1011d327c577e' hash('QGIS', 'keccak_384') \u2192 'c57a3aed9d856fa04e5eeee9b62b6e027cca81ba574116d3cc1f0d48a1ef9e5886ff463ea8d0fac772ee473bf92f810d' hash('QGIS', 'keccak_512') \u2192 '6f0f751776b505e317de222508fa5d3ed7099d8f07c74fed54ccee6e7cdc\u2026'","title":"hash"},{"location":"gr_funzioni/conversioni/conversioni_unico/#md5","text":"Crea un hash md5 da una stringa. Sintassi: md5( string ) Argomenti: string stringa di md5 Esempi: md5('QGIS') \u2192 '57470aaa9e22adaefac7f5f342f1c6da'","title":"md5"},{"location":"gr_funzioni/conversioni/conversioni_unico/#sha256","text":"Crea un hash sha256 da una stringa. Sintassi: sha256( string ) Argomenti: string stringa di sha256 Esempi: sha256('QGIS') \u2192 'eb045cba7a797aaa06ac58830846e40c8e8c780bc0676d3393605fae50c05309'","title":"sha256"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_base64","text":"Decodifica una stringa Base64 in un valore binario. Sintassi: to_base64( value ) Argomenti: value il valore binario da codificare Esempi: to_base64('QGIS') \u2192 'UUdJUw==' In un layer di un GeoPackage aggiungere un campo BLOB e popolarlo con delle immagini; per visualizzarle, per esempio come Simbolo Immagine Raster , utilizzare l'espressione: 'base64:' || to_base64(\"fieldBLOB\")","title":"to_base64"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_date","text":"Converte una stringa in un oggetto data. Sintassi: to_date( string ) Argomenti: string stringa rappresentante il valore data Esempi: to_date('2012-05-04') \u2192 2012-05-04","title":"to_date"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_datetime","text":"Converte una stringa in un oggetto datetime. Sintassi: to_datetime( string ) Argomenti: string stringa rappresentante il valore datatime Esempi: to_datetime( '2018-05-06 12:02:00') \u2192 2018-05-06T12:02:00","title":"to_datetime"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_decimal","text":"Converte una coordinata in gradi, minuti e secondi nel suo equivalente decimale. Sintassi: to_decimal( value ) Argomenti: value Una stringa di gradi, minuti, secondi Esempi: to_decimal('6\u00b09\u203216.445\u2033')) \u2192 6.154568055555556","title":"to_decimal"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_dm","text":"Converte una coordinata in gradi, minuti Sintassi: to_dm( coordinate , axis , precision [, formatting ] ) [ ] indica componenti opzionali Argomenti: coordinate Un valore di latitudine o longitudine axis L'asse della coordinata 'x' o 'y' precision Numero di decimali formatting Designa il tipo di formattazione. I valori accettabili sono NULL, 'aligned' o 'suffix' Esempi: to_dm(6.3545681, 'x', 3) \u2192 6\u00b021.274\u2032 to_dm(6.3545681, 'y', 4, 'suffix') \u2192 6\u00b021.2741\u2032N","title":"to_dm"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_dms","text":"Converte una coordinata in gradi, minuti e secondi Sintassi: to_dms( coordinate , axis , precision [, formatting ] ) [ ] indica componenti opzionali Argomenti: coordinate Un valore di latitudine o longitudine axis L'asse della coordinata 'x' o 'y' precision Numero di decimali formatting Designa il tipo di formattazione. I valori accettabili sono NULL, 'aligned' o 'suffix' Esempi: to_dms(6.3545681, 'x', 3) \u2192 6\u00b021\u203216.445\u2033 to_dms(6.3545681, 'y', 4, 'suffix') \u2192 6\u00b021\u203216.4452\u2033N","title":"to_dms"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_int","text":"Converte una stringa in un numero intero. Non viene restituito nulla se un valore non pu\u00f2 essere convertito ad intero (es. '123asd' non \u00e8 valido) Sintassi: to_int( string ) Argomenti: string stringa da convertine i n numero intero Esempi: to_int('123') \u2192 123 Nota bene: un testo va scritto sempre tra apici semplici es: '123'","title":"to_int"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_interval","text":"Converte una stringa in un tipo intervallo. Pu\u00f2 essere usata per estrarre giorni, ore, mese, etc. da una data. Sintassi: to_interval( string ) Argomenti: string una stringa rappresentante un intervallo. I formati ammessi includono {n} giorni {n} ore {n} mesi. Esempi: to_datetime('2018-05-04 12:23:00') - to_interval('1 day 2 hours') \u2192 2018-05-03T10:23:00","title":"to_interval"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_real","text":"Converte una stringa in un numero reale. Non viene restituito nulla se un valore non pu\u00f2 essere convertito a reale (es. '123.56asd' non \u00e8 valido). I numeri sono arrotondati dopo aver salvato le modifiche se la precisione \u00e8 minore del risultato della conversione. Sintassi: to_real( string ) Argomenti: string stringa da convertire in numero reale Esempi: to_real('123.45') \u2192 123.45 Nota bene: Il punto ( . ) \u00e8 il separatore decimale.","title":"to_real"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_string","text":"Converte una stringa in un numero reale. Non viene restituito nulla se un valore non pu\u00f2 essere convertito a reale (es. '123.56asd' non \u00e8 valido). I numeri sono arrotondati dopo aver salvato le modifiche se la precisione \u00e8 minore del risultato della conversione. Sintassi: to_string( number ) Argomenti: number Valore intero o reale. Il numero da convertire in stringa. Esempi: to_string(123.45) \u2192 '123.45' to_string(123) \u2192 '123' Nota bene: Il punto ( . ) \u00e8 il separatore decimale; una stringa \u00e8 sempre tra apici semplici es: '123'.","title":"to_string"},{"location":"gr_funzioni/conversioni/conversioni_unico/#to_time","text":"Converti una stringa in un oggetto time. Sintassi: to_time( string ) Argomenti: string stringa rappresentante un valore time Esempi: to_time('12:30:01') \u2192 12:30:0","title":"to_time"},{"location":"gr_funzioni/corrispondenza_fuzzy/corrispondenza_fuzzy_unico/","tags":["gruppo"],"text":"Gruppo corrispondenza fuzzy \u21b5 Abstract Questo gruppo contiene funzioni per confronti fuzzy fra valori. hamming_distance \u21b5 Restituisce la distanza di Hamming tra due stringhe. Questa equivale al numero di caratteri nelle corrispondenti posizioni delle stringhe in ingresso dove i caratteri sono diversi. Le stringhe in ingresso devono avere la stessa lunghezza, e il confronto \u00e8 sensibile alle lettere maiuscole. Sintassi: hamming_distance( string1 , string2 ) Argomenti: string1 una stringa string2 una stringa Esempi: hamming_distance('abc','xec') \u2192 2 hamming_distance('abc','ABc') \u2192 2 hamming_distance(upper('abc'),upper('ABC')) \u2192 0 levenshtein \u21b5 Restituisce la distanza di Levenshtein tra due stringhe. Questa equivale al minimo numero di modifiche di caratterere (inserimenti, cancellazioni o sostituzione) richieste per cambiare una stringa in un'altra. La distanza di Levenshtein \u00e8 una misura della somiglianza tra due stringhe. Distanze pi\u00f9 piccole corrispondono a stringhe pi\u00f9 simili, e distanze pi\u00f9 grandi corrispondono a stringhe pi\u00f9 differenti. La distanza \u00e8 sensibile alle lettere maiuscole. Sintassi: levenshtein( string1 , string2 ) Argomenti: string1 una stringa string2 una stringa Esempi: levenshtein('kittens','mitten') \u2192 2 levenshtein('Kitten','kitten') \u2192 1 levenshtein(upper('Kitten'),upper('kitten')) \u2192 0 longest_common_substring \u21b5 Restituisce la sottostringa in comune pi\u00f9 lunga tra due stringhe. Questa sottostringa \u00e8 la stringa pi\u00f9 lunga che \u00e8 una sottostringa delle due stringhe in ingresso. Es: la sottostringa in comune pi\u00f9 lunga di \"ABABC\" e \"BABCA\" \u00e8 \"ABC\". La sottostringa \u00e8 sensibile alle lettere maiuscole Sintassi: longest_common_substring( string1 , string2 ) Argomenti: string1 una stringa string2 una stringa Esempi: longest_common_substring('ABABC','BABCA') \u2192 'ABC' longest_common_substring('abcDeF','abcdef') \u2192 'abc' longest_common_substring(upper('abcDeF'),upper('abcdex')) \u2192 'ABCDE' soundex \u21b5 Restituisce la rappresentazione Soundex di una stringa. Soundex \u00e8 un algoritmo di abbinamento fonetico, per cui le stringhe con suoni simili dovrebbero essere rappresentate dallo stesso codice Soundex. Sintassi: soundex( string ) Argomenti: string una stringa Esempi: soundex('robert') \u2192 'R163' soundex('rupert') \u2192 'R163' soundex('rubin') \u2192 'R150' secondo questo algoritmo Sicilia bedda e Sicilia bella hanno stesso suono","title":"Corrispondenza fuzzy"},{"location":"gr_funzioni/corrispondenza_fuzzy/corrispondenza_fuzzy_unico/#gruppo-corrispondenza-fuzzy","text":"Abstract Questo gruppo contiene funzioni per confronti fuzzy fra valori.","title":"Gruppo corrispondenza fuzzy"},{"location":"gr_funzioni/corrispondenza_fuzzy/corrispondenza_fuzzy_unico/#hamming_distance","text":"Restituisce la distanza di Hamming tra due stringhe. Questa equivale al numero di caratteri nelle corrispondenti posizioni delle stringhe in ingresso dove i caratteri sono diversi. Le stringhe in ingresso devono avere la stessa lunghezza, e il confronto \u00e8 sensibile alle lettere maiuscole. Sintassi: hamming_distance( string1 , string2 ) Argomenti: string1 una stringa string2 una stringa Esempi: hamming_distance('abc','xec') \u2192 2 hamming_distance('abc','ABc') \u2192 2 hamming_distance(upper('abc'),upper('ABC')) \u2192 0","title":"hamming_distance"},{"location":"gr_funzioni/corrispondenza_fuzzy/corrispondenza_fuzzy_unico/#levenshtein","text":"Restituisce la distanza di Levenshtein tra due stringhe. Questa equivale al minimo numero di modifiche di caratterere (inserimenti, cancellazioni o sostituzione) richieste per cambiare una stringa in un'altra. La distanza di Levenshtein \u00e8 una misura della somiglianza tra due stringhe. Distanze pi\u00f9 piccole corrispondono a stringhe pi\u00f9 simili, e distanze pi\u00f9 grandi corrispondono a stringhe pi\u00f9 differenti. La distanza \u00e8 sensibile alle lettere maiuscole. Sintassi: levenshtein( string1 , string2 ) Argomenti: string1 una stringa string2 una stringa Esempi: levenshtein('kittens','mitten') \u2192 2 levenshtein('Kitten','kitten') \u2192 1 levenshtein(upper('Kitten'),upper('kitten')) \u2192 0","title":"levenshtein"},{"location":"gr_funzioni/corrispondenza_fuzzy/corrispondenza_fuzzy_unico/#longest_common_substring","text":"Restituisce la sottostringa in comune pi\u00f9 lunga tra due stringhe. Questa sottostringa \u00e8 la stringa pi\u00f9 lunga che \u00e8 una sottostringa delle due stringhe in ingresso. Es: la sottostringa in comune pi\u00f9 lunga di \"ABABC\" e \"BABCA\" \u00e8 \"ABC\". La sottostringa \u00e8 sensibile alle lettere maiuscole Sintassi: longest_common_substring( string1 , string2 ) Argomenti: string1 una stringa string2 una stringa Esempi: longest_common_substring('ABABC','BABCA') \u2192 'ABC' longest_common_substring('abcDeF','abcdef') \u2192 'abc' longest_common_substring(upper('abcDeF'),upper('abcdex')) \u2192 'ABCDE'","title":"longest_common_substring"},{"location":"gr_funzioni/corrispondenza_fuzzy/corrispondenza_fuzzy_unico/#soundex","text":"Restituisce la rappresentazione Soundex di una stringa. Soundex \u00e8 un algoritmo di abbinamento fonetico, per cui le stringhe con suoni simili dovrebbero essere rappresentate dallo stesso codice Soundex. Sintassi: soundex( string ) Argomenti: string una stringa Esempi: soundex('robert') \u2192 'R163' soundex('rupert') \u2192 'R163' soundex('rubin') \u2192 'R150' secondo questo algoritmo Sicilia bedda e Sicilia bella hanno stesso suono","title":"soundex"},{"location":"gr_funzioni/custom/custom_unico/","tags":["gruppo"],"text":"Gruppo Custom \u21b5 Abstract Questo gruppo contiene funzioni Python create dall'utente. Le funzioni vanno salvate in file *.py nella cartella espression presente nel profilo utente QGIS (C:\\Users\\nomeUtente\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\expressions) Un ringraziamento particolare a Giulio Fattori , autore di molte di queste funzioni personalizzate fattoriale \u21b5 Calcola il fattoriale di un numero definito come il prodotto di tutti i numeri tra 1 e n. Per convenzione il fattoriale di 0 = 1 la notazione matematica per fattoriale \u00e8 n! La funzione \u00e8 compresa nel modulo math NB: valore massimo memorizzabile in un campo numerico \u00e8 20! (2432902008176640000) Sintassi: fact( numero ) Argomenti: numero un numero intero Esempio: fact(10)\u2192 3628800 Codice Python: from qgis.core import * from qgis.gui import * import math @qgsfunction ( args = 'auto' , group = 'Custom' ) def fact ( n , feature , parent ): \"\"\" Calcola il fattoriale di un numero definito come il prodotto di tutti i numeri tra 1 e n.<ul> </ul> Per convenzione il fattoriale di 0 = 1 la notazione matematica per fattoriale \u00e8 n! La funzione \u00e8 compresa nel modulo math NB: valore massimo memorizzabile 20! <ul> </ul> <h2>Example usage:</h2> <ul> <li>Fattoriale(5) -> 120</li> <li>in simboli 5! = 120</li> </ul> \"\"\" return math . factorial ( n ) Lo script Python \u00e8 stato realizzato da Giulio Fattori my_sum \u21b5 Calcola la somma dei due parametri valore1 e valore2. Sintassi: my_sum( numero1 , numero2 ) Argomenti: numero1 _ un valore numerico o un campo numero2 un valore numerico o un campo Esempio: my_sum(5, 8) -> 13 my_sum(\"fiel1\", \"field2\") -> 42 Codice Python: from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' ) def my_sum ( value1 , value2 , feature , parent ): \"\"\" Calcola la somma dei due parametri valore1 e valore2. <h2>Esempio di utilizzo:</h2> <ul> <li>my_sum(5, 8) -> 13</li> <li>my_sum(\"fiel1\", \"field2\") -> 42</li> </ul> \"\"\" return value1 + value2 perimetro_km \u21b5 Questa funzione ritorna il valore del perimetro della geometria in km Sintassi: perimetro_km() Argomenti: senza argomenti Esempio: perimetro_km() - > 25 Codice Python: from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' ) def perimetro_km ( feature , parent ): \"\"\" Questa funzione ritorna il valore del perimetro della geometria in km <ul> <li>perimetro_km() - > 25</li> </ul> \"\"\" geom_perimetro_km = feature . geometry () . length () / 1000 return geom_perimetro_km reverse_string \u21b5 Questa funzione ritorna il valore rovesciato di un testo Sintassi: reverse_string( stringa ) Argomenti: stringa una stringa di testo Esempio: reverse_string('Pigrecoinfinito) - > 'otinifniocergiP' ` Codice Python: from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' ) def reverse_string ( string_to_reverse , feature , parent ): \"\"\" Questa funzione ritorna il valore rovesciato di un testo <ul> <li>reverse_string('Pigrecoinfinito) - > 'otinifniocergiP'</li> </ul> \"\"\" return string_to_reverse [:: - 1 ] get_parcel_info \u21b5 WMS Catasto Agenzia delle Entrate CC BY 4.0 : La funzione, tramite una richiesta GetFeatureInfo , restituisce le informazioni utili sulla particella che ricade sotto il pixel di mio interesse: Sintassi: get_parcel_info( x , y ) Argomenti: x coordinata x di un punto y coordinata x di un punto Esempio: get_parcel_info(355461.5,4222490.7) \u2192 'IT.AGE.PLA.G273_0033A0.673' codice Python: # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** WMS Catasto Agenzia delle Entrate CC BY 4.0 ------------------- copyright : (C) 2020 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * import requests @qgsfunction ( args = 'auto' , group = 'Custom' ) def get_parcel_info ( xx , yy , feature , parent ): \"\"\" <h1>WMS Catasto Agenzia delle Entrate CC BY 4.0:</h1><br> La funzione, tramite una richiesta GetFeatureInfo, restituisce le informazioni utili sulla particella che ricade sotto il pixel di mio interesse: <h2>Esempio:</h2> <ul> <li>get_parcel_info(355461.5,4222490.7) -> 'IT.AGE.PLA.G273_0033A0.673'</li> <li>get_parcel_info(\"fieldX\", \"fieldY\") -> 'IT.AGE.PLA.G273_0033A0.673'</li> </ul> <h2>NB: le coordinate X e Y devono essere in EPSG 3045</h2> \"\"\" req = \"https://wms.cartografia.agenziaentrate.gov.it/inspire/wms/ows01.php?REQUEST=GetFeatureInfo&SERVICE=WMS&SRS=EPSG:3045&STYLES=&VERSION=1.1&FORMAT=image/png&BBOX=\" + str ( xx - 1 ) + \",\" + str ( yy - 1 ) + \",\" + str ( xx + 1 ) + \",\" + str ( yy + 1 ) + \"&HEIGHT=9&WIDTH=9&LAYERS=CP.CadastralParcel&QUERY_LAYERS=CP.CadastralParcel&INFO_FORMAT=text/html&X=5&Y=5\" r = requests . get ( req , auth = ( 'user' , 'pass' )) a = r . text . partition ( \"InspireId localId</th><td>\" )[ 2 ] b = a . partition ( \"</td>\" )[ 0 ] return b Lo script Python \u00e8 stato realizzato da Giulio Fattori get_catastal_info \u21b5 Catasto Agenzia delle Entrate CC BY 4.0 : La funzione, tramite una richiesta ajax.php, restituisce le informazioni disponibili su quel che ricade sotto il punto selezionato. Sintassi: get_catastal_info( longitudine , latitudine , chiave ) Argomenti: longitudine coordinata x del punto latitudine coordinata y del punto chiave per le Particelle: SIGLA_PROV COD_COMUNE DENOM SEZIONE FOGLIO ALLEGATO SVILUPPO NUM_PART TIPOLOGIA Per Acque e Strade: TIPOLOGIA COMUNI Esempio: get_catastal_info(12.567315,37.914197, 'TIPOLOGIA') -> 'ACQUA' codice Python: # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** WMS Catasto Agenzia delle Entrate CC BY 4.0 ------------------- copyright : (C) 2020 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * import requests , json @qgsfunction ( args = 'auto' , group = 'Custom' ) def get_catastal_info ( xx , yy , chiave , feature , parent ): \"\"\" <h1>Catasto Agenzia delle Entrate CC BY 4.0:</h1> La funzione, tramite una richiesta ajax.php, restituisce le informazioni disponibili su quel che ricade sotto il punto selezionato. <p style=\"color:Olive\"><b>Sintassi</b></p> <p style=\"color:blue\"><b>get_catastal_info</b><mark style=\"color:black\">(</mark> <mark style=\"color:red\">x</mark> <mark style=\"color:black\">,</mark> <mark style=\"color:red\">y</mark> <mark style=\"color:black\">,</mark> <mark style=\"color:red\">chiave</mark> <mark style=\"color:black\">)</mark><br> <br><mark style=\"color:black\"><b>Le possibili chiavi sono: <ul> Per le particelle: <li>SIGLA_PROV</li> <li>COD_COMUNE</li> <li>DENOM</li> <li>SEZIONE</li> <li>FOGLIO</li> <li>ALLEGATO</li> <li>SVILUPPO</li> <li>NUM_PART</li> <li>TIPOLOGIA</li> </ul> <ul>Per Acque e Strade: <li>TIPOLOGIA</li> <li>COMUNI</li> </ul></b> <h2>Esempio:</h2> <ul> <li>get_catastal_info(12.567315,37.914197, 'TIPOLOGIA') -> 'ACQUA'</li> </ul> <h2><b>Le coordinate X e Y devono essere espresse nel sistema WGS84 (EPSG:4326)</h2> <h2><b>Il campo risultante deve essere di tipo string di adeguata lunghezza</h2> <h2><b>Se la chiave non \u00e8 presente risulter\u00e0 ND</h2> \"\"\" req = \"https://wms.cartografia.agenziaentrate.gov.it/inspire/ajax/ajax.php?op=getDatiOggetto&lon=\" + str ( xx ) + \"&lat=\" + str ( yy ) r = requests . get ( req , auth = ( 'user' , 'pass' )) res = json . loads ( r . text ) try : b = str ( res [ chiave ]) except : b = 'ND' return b Lo script Python \u00e8 stato realizzato da Giulio Fattori fill-down \u21b5 Restituisce un valore dal campo specificato, dove il valore del campo della riga precedente viene propagato ai campi con valori NULL successivi. Opera in base all'id dei record. Sintassi: fill_down( attibuto ) -> popola le celle sottostanti Argomenti: attributo un campo Esempio: fill-down(\"attributo\") from qgis.core import * from qgis.gui import * mem = 'NULL' @qgsfunction ( args = 'auto' , group = 'Custom' , handlesnull = True ) def fill_down ( value1 , feature , parent ): \"\"\" Restituisce un valore dal campo specificato, dove il valore del campo della riga precedente viene propagato ai campi con valori Null successivi <p> Returns a value from the specified field, where the value of the field of the previous row it is propagated to subsequent null fields <h2>Example usage:</h2> <ul> <li>fill_down(\"Dato\") -> Fill_Data</li> <table> <thead> <tr> <th>Dato</th> <th>Fill_Data</th> </tr> </thead> <tbody> <tr> <td style=\"text-align:right\">a</td> <td style=\"text-align:right\">a</td> </tr> <tr> <td>&nbsp;</td> <td style=\"text-align:right\">a</td> </tr> <tr> <td>&nbsp;</td> <td style=\"text-align:right\">a</td> </tr> <tr> <td style=\"text-align:right\">b</td> <td style=\"text-align:right\">b</td> </tr> <tr> <td></td> <td style=\"text-align:right\">b</td> </tr> </tbody> </table> </ul> Opera in base all'id dei record <p> Operate based on the ID of the records \"\"\" global mem res = str ( value1 ) if res in ( 'NULL' , '' ): res = mem else : mem = str ( value1 ) return res Lo script Python \u00e8 stato realizzato da Giulio Fattori random_points_in_polygon \u21b5 Genera 'n' di punti all'interno della geometria del poligono corrente. Sintassi: random_points_in_polygon( numero ) Argomenti: numero numero di punti da tracciare from qgis.core import * from qgis.gui import * import random # Needed for generating pseudo random numbers @qgsfunction ( args = 'auto' , group = 'Custom' ) def random_points_in_polygon ( number_of_points , feature , parent ): \"\"\" <i>random_points_in_polygon( n )</i><br><br> Generates 'n' number of points inside the current polygon geometry.<br><br> <b>Requires</b><br> <i>n</i> (Integer)<br><br> <b>Example</b><br> <i>random_points_in_polygon( 25 )</i><br> <br> &lt;geometry: MultiPoint&gt; with 25 points \"\"\" points = list () # Create an empty list for the points # Until there's the required points in the list, loop (not the best way probably) while len ( points ) < number_of_points : # Create random x and y coordinates inside feature geometry bounding box rnd_x = random . uniform ( feature . geometry () . boundingBox () . xMinimum (), feature . geometry () . boundingBox () . xMaximum ()) rnd_y = random . uniform ( feature . geometry () . boundingBox () . yMinimum (), feature . geometry () . boundingBox () . yMaximum ()) # Use the coordinates to create a point rnd_point = QgsPointXY ( rnd_x , rnd_y ) # Test if the point is inside the feature geometry if QgsGeometry . fromPointXY ( rnd_point ) . within ( feature . geometry ()): # If it is inside, add it to the list (increasing the length of the list) points . append ( rnd_point ) # Return a multipoint geometry return QgsGeometry . fromMultiPointXY ( points ) Lo script Python \u00e8 stato realizzato da randomize \u21b5 Calcola un valore random intero univoco compreso tra start e stop. ATTENZIONE A NON IMPOSTARE L'INTERVALLO MINORE DEL NUMERO DI FEATURE Sintassi: randomize( start , stop ) Argomenti: start un numero intero stop un numero intero Esempi: randomize( 0, 1000 ) -> 13 Osservazione: La funzione \u00e8 particolarmente utile se si volessero generare, tra start e stop , enne valori casuali univoci (senza ripetizioni) from qgis.core import * from qgis.gui import * import random random_list = [] @qgsfunction ( args = 'auto' , group = 'Custom' ) def randomize ( start , stop , feature , parent ): \"\"\" Calcola un valore random intero univoco compreso tra start e stop <ul>ATTENZIONE A NON IMPOSTARE L'INTERVALLO MINORE DEL NUMERO DI FEATURE </ul> <h2>Example usage:</h2> <ul> <li>randomize( 0, 1000 ) -> 13</li> </ul> \"\"\" a = random . randint ( start , stop ) while a in random_list : a = random . randint ( start , stop ) random_list . append ( a ) return a Lo script Python \u00e8 stato realizzato da Giulio Fattori get_catg_color \u21b5 Restituisce il colore RGBA (stringa [r,g,b,a] come intero 0-255) dell'elemento categorizzato: il campo in input \u00e8 quello utilizzato per la categorizzazione. Per i campi della categorizzazione numerici formattatarli opportunamente e utilizzare la stessa espressione per catturarne il colore. Sintassi: get_catg_color( nomeCampoCategoria ) Argomenti: nomeCampoCategoria nome del campo con cui si \u00e8 effettuata la categorizzazione Esempi: get_catg_color(\"nomeCampoCategoria\") \u2192 '228,52,199,255' get_catg_color(to_string(format_number(\"nomeCampoCategoria\",2))) \u2192 '228,52,199,255' from qgis.core import * from qgis.gui import * from qgis.utils import iface @qgsfunction ( args = 'auto' , group = 'Custom' ) def get_catg_color ( value , feature , parent ): \"\"\" Restituisce il colore RGBA (stringa [r,g,b,a] come intero 0-255) dell'elemento categorizzato: il campo in input \u00e8 quello utilizzato per la categorizzazione Per i campi della categorizzazione numerici formattatarli opportunamente e utilizzare la stessa espressione per catturarne il colore <h2>Example usage:</h2> <ul> <li>get_color(\"nomeCampoCategoria\") -> '228,52,199,255'</li> <li>get_color(to_string(format_number(\"nomeCampoCategoria\",2))) -> '228,52,199,255'</li> </ul> \"\"\" layer = iface . activeLayer () renderer = layer . renderer () if layer . renderer () . type () == \"categorizedSymbol\" : campo = renderer . legendClassificationAttribute () for cat in renderer . categories (): if str ( value ) == cat . value (): colorato = cat . symbol () . symbolLayer ( 0 ) . properties ()[ 'color' ] break return colorato Osservazioni: La funzione \u00e8 utile nel Plugin DataPlotly per associare i colori ai grafici. Lo script Python \u00e8 stato realizzato da Giulio Fattori svg_pie \u21b5 Genera un grafico a torta inseribile in una cornice HTML nel compositore di stampe. Sintassi: svg_pie( array(values) , donut , array(colors) , array(descriptions) , legenda ) Argomenti: array(val) - array percentuali donut - raggio del vuoto al centro [0-1] array(colors) - array colori array(descriptions) - array descrizioni legenda - legenda [-1] - percentuali interne[0] - legenda [1] Esempi: svg_Pie(array(.5,.1,.3),.8,array('red','cyan','gray'),array('uno','due','tre'),0) La somma delle percentuali deve essere pari a 1 o inferiore Se la somma delle percentuali e' inferiore al 100% ci sara' un settore vuoto. Elenco dei colori desiderati, se vuoto o in numero insufficiente saranno utilizzati quelli di default. Elenco delle descrizioni, se vuoto o in numero insufficiente sara' utilizzato il carattere spazio. Colori di default in ordine di utilizzo Red, Aquamarine, Orange, Cyan, Yellow, Green, Grey, Beige, Gold, DarkKhaki, Royalblue, Fucsia \u00e8 comunque possibile utilizzare qualsiasi colore CSS inserendone il nome. #Korto19 2021 from qgis.core import * from qgis.gui import * import math @qgsfunction ( args = 'auto' , group = 'Custom' ) def svg_pie ( value , donut , pcol , flipper , legenda , feature , parent ): \"\"\" Genera un grafico a torta inseribile in una cornice HTML nel compositore di stampe <p style=\"color:Olive\"><b>Sintassi</b></p> <p style=\"color:blue\"><b>svg_pie</b><mark style=\"color:black\">(</mark> <mark style=\"color:red\">array(values)</mark><mark style=\"color:black\">,</mark> <mark style=\"color:red\">donut</mark><mark style=\"color:black\">,</mark> <mark style=\"color:red\">array(colors)</mark><mark style=\"color:black\">,</mark> <mark style=\"color:red\">array(descriptions)</mark><mark style=\"color:black\">,</mark> <mark style=\"color:red\">legenda</mark><mark style=\"color:black\">)</mark> <p style=\"color:Olive\"><b>Argomenti</b></p> <p style=\"color:red\"><b>array(val)</b><mark style=\"color:black\"> - array percentuali </mark><br> <mark style=\"color:red\"><b>donut </b><mark style=\"color:black\"> - raggio del vuoto al centro [0-1]</mark><br> <mark style=\"color:red\"><b>array(colors) </b><mark style=\"color:black\"> - array colori</mark><br> <mark style=\"color:red\"><b>array(descriptions) </b><mark style=\"color:black\"> - array descrizioni</mark><br> <mark style=\"color:red\"><b>legenda</b><mark style=\"color:black\"> - legenda [-1] - percentuali interne[0] - legenda [1]</mark></p> <h2><strong>Example usage:</strong></h2> <ul> <li>svg_Pie(array(.5,.1,.3),.8,array('red','cyan','gray'),array('uno','due','tre'),0)<li> </ul> <br> <strong> La somma delle percentuali deve essere pari a 1 o inferiore</strong><br> <strong> Se la somma delle percentuali e' inferiore al 100% ci sara' un settore vuoto</strong><br> <strong> Elenco dei colori desiderati, se vuoto o in numero insufficiente saranno utilizzati quelli di default</strong><br> <strong> Elenco delle descrizioni, se vuoto o in numero insufficiente sara' utilizzato il carattere spazio</strong><br><br> Colori di default in ordine di utilizzo<br> Red, Aquamarine, Orange, Cyan, Yellow, Green, Grey, Beige, Gold, DarkKhaki, Royalblue, Fucsia<br> e' comunque possibile utilizzare qualsiasi colore CSS inserendone il nome \"\"\" dcol = [ 'red' , 'Aquamarine' , 'orange' , 'cyan' , 'yellow' , 'green' , 'grey' , 'beige' , 'Gold' , 'DarkKhaki' , 'royalblue' , 'fucsia' ] #aggiunge colori mancanti if len ( pcol ) < len ( value ): for j in range ( 0 , len ( value ) - len ( pcol ) + 1 ): if dcol [ j ] not in pcol : pcol . append ( dcol [ j ]) #aggiunge vuoti se non ci son testi if len ( flipper ) < len ( value ): for j in range ( 0 , len ( value ) - len ( flipper ) + 1 ): flipper . append ( '' ) vc = 0.85 vt = - 0.81 xi = '1' yi = '0' if legenda : riq = '''viewBox=\"-1.2 -1.2 4 4\"''' else : riq = '''viewBox=\"-1.1 -1.1 2.2 2.2\"''' svg_text = '''<svg width=\"100%\" heigth=\"100%\"''' + riq + '''\" > <style> #legend{ text-anchor: middle; font-weight: bold; font-size: .008em; fill: purple; } text{ font-weight: light; font-size: .006em; font-family: Arial; transform: rotate(90deg); } #perc{ fill: black; font-weight: bold; font-size: .006em; font-family: Arial; text-anchor: middle; } path{ stroke: white; stroke-width: 0.01; } </style> <g transform=\"translate(0,0) rotate(-90)\">''' if sum ( value [ 0 :]) > 1 : svg_text = 'Somma valori maggiore del 100%' else : for i in range ( 0 , len ( value )): pr = sum ( value [ 0 : i + 1 ]) vx = str ( math . cos ( 2 * 3.14 * pr )) vy = str ( math . sin ( 2 * 3.14 * pr )) if value [ i ] > 0.5 : larc = '1' else : larc = '0' svg_text = svg_text + '''<path d= \"M ''' + xi + ''' ''' + yi + ''' A 1 1 0 ''' + larc + ''' 1 ''' + vx + ''' ''' + vy + ''' L 0 0\" fill=\"''' + pcol [ i ] + '''\"/>''' xi = vx yi = vy if legenda == - 1 : svg_text = svg_text + '''<circle r=\"0.06\" cx=\"''' + str ( vc ) + '''\" cy=\"1.4\" fill=\"''' + pcol [ i ] + '''\"/> <text x=\"1.5\" y=\"''' + str ( vt ) + '''\" >''' + \" {:.2%} \" . format ( value [ i ]) + \" \" + flipper [ i ] + '''</text>''' vc = vc - .2 vt = vt + .2 if legenda == 1 : svg_text = svg_text + '''<circle r=\"0.06\" cx=\"''' + str ( vc ) + '''\" cy=\"1.4\" fill=\"''' + pcol [ i ] + '''\"/> <text x=\"1.5\" y=\"''' + str ( vt ) + '''\" >''' + \" \" + flipper [ i ] + '''</text>''' vc = vc - .2 vt = vt + .2 if pr > 0.5 : larc = '0' else : larc = '1' if donut : svg_text = svg_text + '''<circle r=\"''' + str ( donut ) + '''\" cx=\"0\" cy=\"0\" fill=\"white\" />''' if legenda : svg_text = svg_text + '''<text id=\"legend\" x=\"1.9\" y=\"-1\">Legenda</text>''' #scrive percentuali entro torta if legenda >= 0 : pr = 0 for i in range ( 0 , len ( value )): pr = sum ( value [ 0 : i + 1 ]) - value [ i ] / 2 vx = 0.8 * math . cos ( 2 * 3.14 * ( pr - .25 )) vy = 0.8 * math . sin ( 2 * 3.14 * ( pr - .25 )) svg_text = svg_text + '''<text id=\"perc\" x=\"''' + str ( vx ) + '''\" y=\"''' + str ( vy ) + '''\">''' + \" {:.2%} \" . format ( value [ i ]) + '''</text>''' svg_text = svg_text + '''</g></svg>''' return svg_text Lo script Python \u00e8 stato realizzato da Giulio Fattori MinMaxValueFieldName \u21b5 Restituisce il nome/valore della colonna col minimo o massimo valore nella riga. Sintassi: MinMaxValueFieldName ( attrmap , esclusion , minmax , vresult ) Argomenti: attrmap deve essere la funzione attributes() che restituisce tutti i nomi dei campi array() contiene l'elenco dei campi da escludere delimitati da apici minmax per considerare il minimo vmin o massimo vmax vresult per ottenere il nome fname o valore fval del campo Avvertenze: La funzione va in errore se non esclusi tutti i campi testo. Esempi: MinMaxValueFieldName( attributes(),array('fid','PRO_COM','COMUNE'),'vmax','fname') -> '2012' MinMaxValueFieldName( attributes(),array( fid','PRO_COM','COMUNE'),'vmax','fval') -> '19250' #Korto19 2021 from qgis.core import * from qgis.gui import * import json @qgsfunction ( args = 'auto' , group = 'Custom' ) def MinMaxValueFieldName ( attrmap , esclusion , minmax , vresult , feature , parent ): \"\"\" Restituisce il nome della colonna col minimo o massimo valore nella riga<p> La funzione <b>MinMaxValueFieldName(attrmap, esclusion, minmax, vresult)</b> richiede quattro parametri: <ul> <li> <b>attrmap</b> deve essere la funzione <b>attributes()</b> che restituisce tutti i nomi dei campi</li> <li> <b>array()</b> contiene l'elenco dei campi da escludere delimitati da apici</li> <li> <b>minmax</b> per considerare il minimo <b>vmin</b> o massimo <b>vmax</b></li> <li> <b>vresult</b> per ottenere il nome <b>fname</b> o valore <b>fval</b> del campo</li> </ul> <h2>Esempi d'uso:</h2> <ul> <li>MinMaxValueFieldName( attributes(),array( 'fid' , 'PRO_COM' , 'COMUNE' ), 'vmax', 'fname') -> '2012'</li> <li>MinMaxValueFieldName( attributes(),array( 'fid' , 'PRO_COM' , 'COMUNE' ), 'vmax', 'fval') -> '19250'</li> </ul> <b><h2>AVVERTENZE:</h2> <ul> <li>La funzione va in errore se non esclusi tutti i campi testo</li> </ul></b> \"\"\" #Trasformo in array l'elenco dei campi esclusion = json . dumps ( esclusion ) #Recupero i valori numerici della riga _attrmap = { key : attrmap [ key ] for key in attrmap . keys () if key not in esclusion and attrmap [ key ] is not None } # exclude not needed fields #Discrimino per vmin o vmax if vresult == 'fname' : if minmax == 'vmax' : result = [ k for k , v in _attrmap . items () if v == max ( _attrmap . values ())][ 0 ] elif minmax == 'vmin' : result = [ k for k , v in _attrmap . items () if v == min ( _attrmap . values ())][ 0 ] elif vresult == 'fval' : if minmax == 'vmax' : result = [ v for k , v in _attrmap . items () if v == max ( _attrmap . values ())][ 0 ] elif minmax == 'vmin' : result = [ v for k , v in _attrmap . items () if v == min ( _attrmap . values ())][ 0 ] return result Lo script \u00e8 stato riscritto da Giulio Fattori , la fonte \u00e8 qui , grazie Taras Ordina array alfanumerico in modo numerico \u21b5 # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** Ordina array alfanumerico in modo numerico ------------------- copyright : (C) 2021 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' , referenced_columns = []) def array_sort_special ( value1 , feature , parent ): \"\"\" Ordina un array alfanumerico numericamente <h2>Esempio:</h2> <ul> <li>array_sort_special('5/A-5-4-8-3-6-9-7-1-10-7/B-2-7/A') -> ['1','2','3','4','5','5/A','6','7','7/A','7/B','8','9','10']</li> </ul> \"\"\" data = value1 . split ( '-' ) r = sorted ( data , key = lambda item : ( int ( item . partition ( '/' )[ 0 ]) if item [ 0 ] . isdigit () else float ( 'inf' ), item )) #return (','.join(r)) return r Lo script \u00e8 stato riscritto da Giulio Fattori Natural sorting \u21b5 from qgis.core import * from qgis.gui import * import re def natural_sort_key ( s ): ns = re . compile ( '([0-9]+)' ) return [ int ( t ) if t . isdigit () else t . lower () for t in re . split ( ns , s )] @qgsfunction ( args = 'auto' , group = 'Custom' , usesgeometry = False ) def sort_my_list ( field , feature , parent ): \"\"\" Ordina un array secondo la Natural sorting <h2>Esempio:</h2> <ul> <li>sort_my_list('field') -> 'elementi ordinati'</li> </ul> Nota: il nome del parametro del campo (field) per sort_my_addresses deve essere compreso tra virgolette singole ('), non virgolette doppie (\"). Ad esempio 'field', non \"field\" <ul> by Kadir \u015eahbaz </ul> Commentare decomentare le ulti due righe per avere una array o una stringa \"\"\" _list = feature [ field ] . split ( \"-\" ) _list . sort ( key = natural_sort_key ) return _list #return ','.join(_list) Lo script \u00e8 stato riscritto da Kadir \u015eahbaz Dimensioni immagini \u21b5 Estrae le dimensioni delle immagini in pixel nei casi di immagine con link assoluto o memorizzate come BLOB: # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** Dimensioni immagini ------------------- copyright : (C) 2022 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * from PyQt5.QtGui import QImage , QImageReader @qgsfunction ( args = 'auto' , group = 'Custom' , referenced_columns = []) def get_blob_sizes ( img_blob , feature , parent ): \"\"\" Calculate blob image dimension (W x H) <h2>Example usage:</h2> <ul> <li>get_blob_sizes(\"img_blob\") -> '1024 x 512 px'</li> </ul> \"\"\" image = QImage () . fromData ( img_blob ) sizeOfImage = image . size () img_height = sizeOfImage . height () img_width = sizeOfImage . width () dim_blob = str ( img_width ) + ' x ' + str ( img_height ) + ' px ' return dim_blob @qgsfunction ( args = 'auto' , group = 'Custom' , referenced_columns = []) def get_image_sizes ( img_shape , feature , parent ): \"\"\" Calculate blob image size <h2>Example usage:</h2> <ul> <li>get_image_sizes(img_shape) -> '1024 x 512 px'</li> </ul> NEED ABSOLUTE IMAGE LINK \"\"\" reader = QImageReader ( img_shape ) sizeOfImage = reader . size () img_height = sizeOfImage . height () img_width = sizeOfImage . width () dim_image = str ( img_width ) + ' x ' + str ( img_height ) + ' px ' return dim_image Lo script \u00e8 stato realizzato da Giulio Fattori Ordina i punti lungo una linea orientata \u21b5 Restituisce l'ordinamento di elementi puntuali rispetto ad una linea orientata # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** Ordina i punti lungo una linea orientata ------------------- copyright : (C) 2022 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' , usesgeometry = True ) def order_point_along_line ( r_layer , v_reverse , feature , parent , context ): \"\"\" Restituisce l'ordinamento di elementi puntuali rispetto ad una linea orientata <p style=\"color:Red\">Va eseguita su di un layer puntuale aggiungendo un campo numerico</p> <p style=\"color:Red\">Il parametro v_layer \u00e8 il nome del vettore lineare</p> <p style=\"color:Red\">Il parametro v_reverse \u00e8 un booleano 0/1 permette l'inversione della linea</p> <p> <h2>Example usage:</h2> <ul> <li>order_point_along_line('r_layer', v_reverse)</li> <li>da come risultato il numero d'ordine progressivo del punto</li> </ul> <p>Tratto da:</p> <p style=\"color:blue\">https://pigrecoinfinito.com/2022/03/14/ordinare-i-punti-lungo-una-linea</p> \"\"\" if v_reverse == 0 : expression = QgsExpression ( \"with_variable ('nearest', \\ overlay_nearest( \\' \" + r_layer + \" \\' ,$geometry)[0], \\ array_find( \\ array_sort( \\ array_foreach( \\ array_agg($geometry, group_by:=@nearest), \\ line_locate_point(@nearest,@element))), \\ line_locate_point(@nearest,$geometry))+1 \\ )\" ) else : expression = QgsExpression ( \"with_variable ('nearest', \\ overlay_nearest( \\' \" + r_layer + \" \\' ,reverse($geometry))[0], \\ array_find( \\ array_sort( \\ array_foreach( \\ array_agg($geometry, group_by:=@nearest), \\ line_locate_point(@nearest,@element))), \\ line_locate_point(@nearest,$geometry))+1 \\ )\" ) n_point = expression . evaluate ( context ) return n_point Lo script \u00e8 stato realizzato da Giulio Fattori Estrarre testo da legenda categorizzata \u21b5 Estrarre il testo decodifica dalla legenda # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** Ordina i punti lungo una linea orientata ------------------- copyright : (C) 2022 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * from qgis.utils import iface @qgsfunction ( args = 'auto' , group = 'Custom' ) def get_catg_label ( value_in , feature , parent ): \"\"\" Restituisce il testo della legenda dell'elemento categorizzato: <br> <p><b>il campo in input e' quello utilizzato per la categorizzazione</b> <br> <h2>Example usage:</h2> <ul> <li>get_catg_label(\"Area\") -> 'Parcheggio'</li> </ul> \"\"\" layer = iface . activeLayer () renderer = layer . renderer () if layer . renderer () . type () == \"categorizedSymbol\" : for cat in renderer . categories (): #print('val ', type(cat.value()), type(value_in)) if str ( value_in ) == str ( cat . value ()): #print('res ',cat.value(), value_in) cat_label_out = cat . label () break else : cat_label_out = '' return cat_label_out Lo script \u00e8 stato realizzato da Giulio Fattori","title":"Custom"},{"location":"gr_funzioni/custom/custom_unico/#gruppo-custom","text":"Abstract Questo gruppo contiene funzioni Python create dall'utente. Le funzioni vanno salvate in file *.py nella cartella espression presente nel profilo utente QGIS (C:\\Users\\nomeUtente\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\expressions) Un ringraziamento particolare a Giulio Fattori , autore di molte di queste funzioni personalizzate","title":"Gruppo Custom"},{"location":"gr_funzioni/custom/custom_unico/#fattoriale","text":"Calcola il fattoriale di un numero definito come il prodotto di tutti i numeri tra 1 e n. Per convenzione il fattoriale di 0 = 1 la notazione matematica per fattoriale \u00e8 n! La funzione \u00e8 compresa nel modulo math NB: valore massimo memorizzabile in un campo numerico \u00e8 20! (2432902008176640000) Sintassi: fact( numero ) Argomenti: numero un numero intero Esempio: fact(10)\u2192 3628800 Codice Python: from qgis.core import * from qgis.gui import * import math @qgsfunction ( args = 'auto' , group = 'Custom' ) def fact ( n , feature , parent ): \"\"\" Calcola il fattoriale di un numero definito come il prodotto di tutti i numeri tra 1 e n.<ul> </ul> Per convenzione il fattoriale di 0 = 1 la notazione matematica per fattoriale \u00e8 n! La funzione \u00e8 compresa nel modulo math NB: valore massimo memorizzabile 20! <ul> </ul> <h2>Example usage:</h2> <ul> <li>Fattoriale(5) -> 120</li> <li>in simboli 5! = 120</li> </ul> \"\"\" return math . factorial ( n ) Lo script Python \u00e8 stato realizzato da Giulio Fattori","title":"fattoriale"},{"location":"gr_funzioni/custom/custom_unico/#my_sum","text":"Calcola la somma dei due parametri valore1 e valore2. Sintassi: my_sum( numero1 , numero2 ) Argomenti: numero1 _ un valore numerico o un campo numero2 un valore numerico o un campo Esempio: my_sum(5, 8) -> 13 my_sum(\"fiel1\", \"field2\") -> 42 Codice Python: from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' ) def my_sum ( value1 , value2 , feature , parent ): \"\"\" Calcola la somma dei due parametri valore1 e valore2. <h2>Esempio di utilizzo:</h2> <ul> <li>my_sum(5, 8) -> 13</li> <li>my_sum(\"fiel1\", \"field2\") -> 42</li> </ul> \"\"\" return value1 + value2","title":"my_sum"},{"location":"gr_funzioni/custom/custom_unico/#perimetro_km","text":"Questa funzione ritorna il valore del perimetro della geometria in km Sintassi: perimetro_km() Argomenti: senza argomenti Esempio: perimetro_km() - > 25 Codice Python: from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' ) def perimetro_km ( feature , parent ): \"\"\" Questa funzione ritorna il valore del perimetro della geometria in km <ul> <li>perimetro_km() - > 25</li> </ul> \"\"\" geom_perimetro_km = feature . geometry () . length () / 1000 return geom_perimetro_km","title":"perimetro_km"},{"location":"gr_funzioni/custom/custom_unico/#reverse_string","text":"Questa funzione ritorna il valore rovesciato di un testo Sintassi: reverse_string( stringa ) Argomenti: stringa una stringa di testo Esempio: reverse_string('Pigrecoinfinito) - > 'otinifniocergiP' ` Codice Python: from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' ) def reverse_string ( string_to_reverse , feature , parent ): \"\"\" Questa funzione ritorna il valore rovesciato di un testo <ul> <li>reverse_string('Pigrecoinfinito) - > 'otinifniocergiP'</li> </ul> \"\"\" return string_to_reverse [:: - 1 ]","title":"reverse_string"},{"location":"gr_funzioni/custom/custom_unico/#get_parcel_info","text":"WMS Catasto Agenzia delle Entrate CC BY 4.0 : La funzione, tramite una richiesta GetFeatureInfo , restituisce le informazioni utili sulla particella che ricade sotto il pixel di mio interesse: Sintassi: get_parcel_info( x , y ) Argomenti: x coordinata x di un punto y coordinata x di un punto Esempio: get_parcel_info(355461.5,4222490.7) \u2192 'IT.AGE.PLA.G273_0033A0.673' codice Python: # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** WMS Catasto Agenzia delle Entrate CC BY 4.0 ------------------- copyright : (C) 2020 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * import requests @qgsfunction ( args = 'auto' , group = 'Custom' ) def get_parcel_info ( xx , yy , feature , parent ): \"\"\" <h1>WMS Catasto Agenzia delle Entrate CC BY 4.0:</h1><br> La funzione, tramite una richiesta GetFeatureInfo, restituisce le informazioni utili sulla particella che ricade sotto il pixel di mio interesse: <h2>Esempio:</h2> <ul> <li>get_parcel_info(355461.5,4222490.7) -> 'IT.AGE.PLA.G273_0033A0.673'</li> <li>get_parcel_info(\"fieldX\", \"fieldY\") -> 'IT.AGE.PLA.G273_0033A0.673'</li> </ul> <h2>NB: le coordinate X e Y devono essere in EPSG 3045</h2> \"\"\" req = \"https://wms.cartografia.agenziaentrate.gov.it/inspire/wms/ows01.php?REQUEST=GetFeatureInfo&SERVICE=WMS&SRS=EPSG:3045&STYLES=&VERSION=1.1&FORMAT=image/png&BBOX=\" + str ( xx - 1 ) + \",\" + str ( yy - 1 ) + \",\" + str ( xx + 1 ) + \",\" + str ( yy + 1 ) + \"&HEIGHT=9&WIDTH=9&LAYERS=CP.CadastralParcel&QUERY_LAYERS=CP.CadastralParcel&INFO_FORMAT=text/html&X=5&Y=5\" r = requests . get ( req , auth = ( 'user' , 'pass' )) a = r . text . partition ( \"InspireId localId</th><td>\" )[ 2 ] b = a . partition ( \"</td>\" )[ 0 ] return b Lo script Python \u00e8 stato realizzato da Giulio Fattori","title":"get_parcel_info"},{"location":"gr_funzioni/custom/custom_unico/#get_catastal_info","text":"Catasto Agenzia delle Entrate CC BY 4.0 : La funzione, tramite una richiesta ajax.php, restituisce le informazioni disponibili su quel che ricade sotto il punto selezionato. Sintassi: get_catastal_info( longitudine , latitudine , chiave ) Argomenti: longitudine coordinata x del punto latitudine coordinata y del punto chiave per le Particelle: SIGLA_PROV COD_COMUNE DENOM SEZIONE FOGLIO ALLEGATO SVILUPPO NUM_PART TIPOLOGIA Per Acque e Strade: TIPOLOGIA COMUNI Esempio: get_catastal_info(12.567315,37.914197, 'TIPOLOGIA') -> 'ACQUA' codice Python: # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** WMS Catasto Agenzia delle Entrate CC BY 4.0 ------------------- copyright : (C) 2020 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * import requests , json @qgsfunction ( args = 'auto' , group = 'Custom' ) def get_catastal_info ( xx , yy , chiave , feature , parent ): \"\"\" <h1>Catasto Agenzia delle Entrate CC BY 4.0:</h1> La funzione, tramite una richiesta ajax.php, restituisce le informazioni disponibili su quel che ricade sotto il punto selezionato. <p style=\"color:Olive\"><b>Sintassi</b></p> <p style=\"color:blue\"><b>get_catastal_info</b><mark style=\"color:black\">(</mark> <mark style=\"color:red\">x</mark> <mark style=\"color:black\">,</mark> <mark style=\"color:red\">y</mark> <mark style=\"color:black\">,</mark> <mark style=\"color:red\">chiave</mark> <mark style=\"color:black\">)</mark><br> <br><mark style=\"color:black\"><b>Le possibili chiavi sono: <ul> Per le particelle: <li>SIGLA_PROV</li> <li>COD_COMUNE</li> <li>DENOM</li> <li>SEZIONE</li> <li>FOGLIO</li> <li>ALLEGATO</li> <li>SVILUPPO</li> <li>NUM_PART</li> <li>TIPOLOGIA</li> </ul> <ul>Per Acque e Strade: <li>TIPOLOGIA</li> <li>COMUNI</li> </ul></b> <h2>Esempio:</h2> <ul> <li>get_catastal_info(12.567315,37.914197, 'TIPOLOGIA') -> 'ACQUA'</li> </ul> <h2><b>Le coordinate X e Y devono essere espresse nel sistema WGS84 (EPSG:4326)</h2> <h2><b>Il campo risultante deve essere di tipo string di adeguata lunghezza</h2> <h2><b>Se la chiave non \u00e8 presente risulter\u00e0 ND</h2> \"\"\" req = \"https://wms.cartografia.agenziaentrate.gov.it/inspire/ajax/ajax.php?op=getDatiOggetto&lon=\" + str ( xx ) + \"&lat=\" + str ( yy ) r = requests . get ( req , auth = ( 'user' , 'pass' )) res = json . loads ( r . text ) try : b = str ( res [ chiave ]) except : b = 'ND' return b Lo script Python \u00e8 stato realizzato da Giulio Fattori","title":"get_catastal_info"},{"location":"gr_funzioni/custom/custom_unico/#fill-down","text":"Restituisce un valore dal campo specificato, dove il valore del campo della riga precedente viene propagato ai campi con valori NULL successivi. Opera in base all'id dei record. Sintassi: fill_down( attibuto ) -> popola le celle sottostanti Argomenti: attributo un campo Esempio: fill-down(\"attributo\") from qgis.core import * from qgis.gui import * mem = 'NULL' @qgsfunction ( args = 'auto' , group = 'Custom' , handlesnull = True ) def fill_down ( value1 , feature , parent ): \"\"\" Restituisce un valore dal campo specificato, dove il valore del campo della riga precedente viene propagato ai campi con valori Null successivi <p> Returns a value from the specified field, where the value of the field of the previous row it is propagated to subsequent null fields <h2>Example usage:</h2> <ul> <li>fill_down(\"Dato\") -> Fill_Data</li> <table> <thead> <tr> <th>Dato</th> <th>Fill_Data</th> </tr> </thead> <tbody> <tr> <td style=\"text-align:right\">a</td> <td style=\"text-align:right\">a</td> </tr> <tr> <td>&nbsp;</td> <td style=\"text-align:right\">a</td> </tr> <tr> <td>&nbsp;</td> <td style=\"text-align:right\">a</td> </tr> <tr> <td style=\"text-align:right\">b</td> <td style=\"text-align:right\">b</td> </tr> <tr> <td></td> <td style=\"text-align:right\">b</td> </tr> </tbody> </table> </ul> Opera in base all'id dei record <p> Operate based on the ID of the records \"\"\" global mem res = str ( value1 ) if res in ( 'NULL' , '' ): res = mem else : mem = str ( value1 ) return res Lo script Python \u00e8 stato realizzato da Giulio Fattori","title":"fill-down"},{"location":"gr_funzioni/custom/custom_unico/#random_points_in_polygon","text":"Genera 'n' di punti all'interno della geometria del poligono corrente. Sintassi: random_points_in_polygon( numero ) Argomenti: numero numero di punti da tracciare from qgis.core import * from qgis.gui import * import random # Needed for generating pseudo random numbers @qgsfunction ( args = 'auto' , group = 'Custom' ) def random_points_in_polygon ( number_of_points , feature , parent ): \"\"\" <i>random_points_in_polygon( n )</i><br><br> Generates 'n' number of points inside the current polygon geometry.<br><br> <b>Requires</b><br> <i>n</i> (Integer)<br><br> <b>Example</b><br> <i>random_points_in_polygon( 25 )</i><br> <br> &lt;geometry: MultiPoint&gt; with 25 points \"\"\" points = list () # Create an empty list for the points # Until there's the required points in the list, loop (not the best way probably) while len ( points ) < number_of_points : # Create random x and y coordinates inside feature geometry bounding box rnd_x = random . uniform ( feature . geometry () . boundingBox () . xMinimum (), feature . geometry () . boundingBox () . xMaximum ()) rnd_y = random . uniform ( feature . geometry () . boundingBox () . yMinimum (), feature . geometry () . boundingBox () . yMaximum ()) # Use the coordinates to create a point rnd_point = QgsPointXY ( rnd_x , rnd_y ) # Test if the point is inside the feature geometry if QgsGeometry . fromPointXY ( rnd_point ) . within ( feature . geometry ()): # If it is inside, add it to the list (increasing the length of the list) points . append ( rnd_point ) # Return a multipoint geometry return QgsGeometry . fromMultiPointXY ( points ) Lo script Python \u00e8 stato realizzato da","title":"random_points_in_polygon"},{"location":"gr_funzioni/custom/custom_unico/#randomize","text":"Calcola un valore random intero univoco compreso tra start e stop. ATTENZIONE A NON IMPOSTARE L'INTERVALLO MINORE DEL NUMERO DI FEATURE Sintassi: randomize( start , stop ) Argomenti: start un numero intero stop un numero intero Esempi: randomize( 0, 1000 ) -> 13 Osservazione: La funzione \u00e8 particolarmente utile se si volessero generare, tra start e stop , enne valori casuali univoci (senza ripetizioni) from qgis.core import * from qgis.gui import * import random random_list = [] @qgsfunction ( args = 'auto' , group = 'Custom' ) def randomize ( start , stop , feature , parent ): \"\"\" Calcola un valore random intero univoco compreso tra start e stop <ul>ATTENZIONE A NON IMPOSTARE L'INTERVALLO MINORE DEL NUMERO DI FEATURE </ul> <h2>Example usage:</h2> <ul> <li>randomize( 0, 1000 ) -> 13</li> </ul> \"\"\" a = random . randint ( start , stop ) while a in random_list : a = random . randint ( start , stop ) random_list . append ( a ) return a Lo script Python \u00e8 stato realizzato da Giulio Fattori","title":"randomize"},{"location":"gr_funzioni/custom/custom_unico/#get_catg_color","text":"Restituisce il colore RGBA (stringa [r,g,b,a] come intero 0-255) dell'elemento categorizzato: il campo in input \u00e8 quello utilizzato per la categorizzazione. Per i campi della categorizzazione numerici formattatarli opportunamente e utilizzare la stessa espressione per catturarne il colore. Sintassi: get_catg_color( nomeCampoCategoria ) Argomenti: nomeCampoCategoria nome del campo con cui si \u00e8 effettuata la categorizzazione Esempi: get_catg_color(\"nomeCampoCategoria\") \u2192 '228,52,199,255' get_catg_color(to_string(format_number(\"nomeCampoCategoria\",2))) \u2192 '228,52,199,255' from qgis.core import * from qgis.gui import * from qgis.utils import iface @qgsfunction ( args = 'auto' , group = 'Custom' ) def get_catg_color ( value , feature , parent ): \"\"\" Restituisce il colore RGBA (stringa [r,g,b,a] come intero 0-255) dell'elemento categorizzato: il campo in input \u00e8 quello utilizzato per la categorizzazione Per i campi della categorizzazione numerici formattatarli opportunamente e utilizzare la stessa espressione per catturarne il colore <h2>Example usage:</h2> <ul> <li>get_color(\"nomeCampoCategoria\") -> '228,52,199,255'</li> <li>get_color(to_string(format_number(\"nomeCampoCategoria\",2))) -> '228,52,199,255'</li> </ul> \"\"\" layer = iface . activeLayer () renderer = layer . renderer () if layer . renderer () . type () == \"categorizedSymbol\" : campo = renderer . legendClassificationAttribute () for cat in renderer . categories (): if str ( value ) == cat . value (): colorato = cat . symbol () . symbolLayer ( 0 ) . properties ()[ 'color' ] break return colorato Osservazioni: La funzione \u00e8 utile nel Plugin DataPlotly per associare i colori ai grafici. Lo script Python \u00e8 stato realizzato da Giulio Fattori","title":"get_catg_color"},{"location":"gr_funzioni/custom/custom_unico/#svg_pie","text":"Genera un grafico a torta inseribile in una cornice HTML nel compositore di stampe. Sintassi: svg_pie( array(values) , donut , array(colors) , array(descriptions) , legenda ) Argomenti: array(val) - array percentuali donut - raggio del vuoto al centro [0-1] array(colors) - array colori array(descriptions) - array descrizioni legenda - legenda [-1] - percentuali interne[0] - legenda [1] Esempi: svg_Pie(array(.5,.1,.3),.8,array('red','cyan','gray'),array('uno','due','tre'),0) La somma delle percentuali deve essere pari a 1 o inferiore Se la somma delle percentuali e' inferiore al 100% ci sara' un settore vuoto. Elenco dei colori desiderati, se vuoto o in numero insufficiente saranno utilizzati quelli di default. Elenco delle descrizioni, se vuoto o in numero insufficiente sara' utilizzato il carattere spazio. Colori di default in ordine di utilizzo Red, Aquamarine, Orange, Cyan, Yellow, Green, Grey, Beige, Gold, DarkKhaki, Royalblue, Fucsia \u00e8 comunque possibile utilizzare qualsiasi colore CSS inserendone il nome. #Korto19 2021 from qgis.core import * from qgis.gui import * import math @qgsfunction ( args = 'auto' , group = 'Custom' ) def svg_pie ( value , donut , pcol , flipper , legenda , feature , parent ): \"\"\" Genera un grafico a torta inseribile in una cornice HTML nel compositore di stampe <p style=\"color:Olive\"><b>Sintassi</b></p> <p style=\"color:blue\"><b>svg_pie</b><mark style=\"color:black\">(</mark> <mark style=\"color:red\">array(values)</mark><mark style=\"color:black\">,</mark> <mark style=\"color:red\">donut</mark><mark style=\"color:black\">,</mark> <mark style=\"color:red\">array(colors)</mark><mark style=\"color:black\">,</mark> <mark style=\"color:red\">array(descriptions)</mark><mark style=\"color:black\">,</mark> <mark style=\"color:red\">legenda</mark><mark style=\"color:black\">)</mark> <p style=\"color:Olive\"><b>Argomenti</b></p> <p style=\"color:red\"><b>array(val)</b><mark style=\"color:black\"> - array percentuali </mark><br> <mark style=\"color:red\"><b>donut </b><mark style=\"color:black\"> - raggio del vuoto al centro [0-1]</mark><br> <mark style=\"color:red\"><b>array(colors) </b><mark style=\"color:black\"> - array colori</mark><br> <mark style=\"color:red\"><b>array(descriptions) </b><mark style=\"color:black\"> - array descrizioni</mark><br> <mark style=\"color:red\"><b>legenda</b><mark style=\"color:black\"> - legenda [-1] - percentuali interne[0] - legenda [1]</mark></p> <h2><strong>Example usage:</strong></h2> <ul> <li>svg_Pie(array(.5,.1,.3),.8,array('red','cyan','gray'),array('uno','due','tre'),0)<li> </ul> <br> <strong> La somma delle percentuali deve essere pari a 1 o inferiore</strong><br> <strong> Se la somma delle percentuali e' inferiore al 100% ci sara' un settore vuoto</strong><br> <strong> Elenco dei colori desiderati, se vuoto o in numero insufficiente saranno utilizzati quelli di default</strong><br> <strong> Elenco delle descrizioni, se vuoto o in numero insufficiente sara' utilizzato il carattere spazio</strong><br><br> Colori di default in ordine di utilizzo<br> Red, Aquamarine, Orange, Cyan, Yellow, Green, Grey, Beige, Gold, DarkKhaki, Royalblue, Fucsia<br> e' comunque possibile utilizzare qualsiasi colore CSS inserendone il nome \"\"\" dcol = [ 'red' , 'Aquamarine' , 'orange' , 'cyan' , 'yellow' , 'green' , 'grey' , 'beige' , 'Gold' , 'DarkKhaki' , 'royalblue' , 'fucsia' ] #aggiunge colori mancanti if len ( pcol ) < len ( value ): for j in range ( 0 , len ( value ) - len ( pcol ) + 1 ): if dcol [ j ] not in pcol : pcol . append ( dcol [ j ]) #aggiunge vuoti se non ci son testi if len ( flipper ) < len ( value ): for j in range ( 0 , len ( value ) - len ( flipper ) + 1 ): flipper . append ( '' ) vc = 0.85 vt = - 0.81 xi = '1' yi = '0' if legenda : riq = '''viewBox=\"-1.2 -1.2 4 4\"''' else : riq = '''viewBox=\"-1.1 -1.1 2.2 2.2\"''' svg_text = '''<svg width=\"100%\" heigth=\"100%\"''' + riq + '''\" > <style> #legend{ text-anchor: middle; font-weight: bold; font-size: .008em; fill: purple; } text{ font-weight: light; font-size: .006em; font-family: Arial; transform: rotate(90deg); } #perc{ fill: black; font-weight: bold; font-size: .006em; font-family: Arial; text-anchor: middle; } path{ stroke: white; stroke-width: 0.01; } </style> <g transform=\"translate(0,0) rotate(-90)\">''' if sum ( value [ 0 :]) > 1 : svg_text = 'Somma valori maggiore del 100%' else : for i in range ( 0 , len ( value )): pr = sum ( value [ 0 : i + 1 ]) vx = str ( math . cos ( 2 * 3.14 * pr )) vy = str ( math . sin ( 2 * 3.14 * pr )) if value [ i ] > 0.5 : larc = '1' else : larc = '0' svg_text = svg_text + '''<path d= \"M ''' + xi + ''' ''' + yi + ''' A 1 1 0 ''' + larc + ''' 1 ''' + vx + ''' ''' + vy + ''' L 0 0\" fill=\"''' + pcol [ i ] + '''\"/>''' xi = vx yi = vy if legenda == - 1 : svg_text = svg_text + '''<circle r=\"0.06\" cx=\"''' + str ( vc ) + '''\" cy=\"1.4\" fill=\"''' + pcol [ i ] + '''\"/> <text x=\"1.5\" y=\"''' + str ( vt ) + '''\" >''' + \" {:.2%} \" . format ( value [ i ]) + \" \" + flipper [ i ] + '''</text>''' vc = vc - .2 vt = vt + .2 if legenda == 1 : svg_text = svg_text + '''<circle r=\"0.06\" cx=\"''' + str ( vc ) + '''\" cy=\"1.4\" fill=\"''' + pcol [ i ] + '''\"/> <text x=\"1.5\" y=\"''' + str ( vt ) + '''\" >''' + \" \" + flipper [ i ] + '''</text>''' vc = vc - .2 vt = vt + .2 if pr > 0.5 : larc = '0' else : larc = '1' if donut : svg_text = svg_text + '''<circle r=\"''' + str ( donut ) + '''\" cx=\"0\" cy=\"0\" fill=\"white\" />''' if legenda : svg_text = svg_text + '''<text id=\"legend\" x=\"1.9\" y=\"-1\">Legenda</text>''' #scrive percentuali entro torta if legenda >= 0 : pr = 0 for i in range ( 0 , len ( value )): pr = sum ( value [ 0 : i + 1 ]) - value [ i ] / 2 vx = 0.8 * math . cos ( 2 * 3.14 * ( pr - .25 )) vy = 0.8 * math . sin ( 2 * 3.14 * ( pr - .25 )) svg_text = svg_text + '''<text id=\"perc\" x=\"''' + str ( vx ) + '''\" y=\"''' + str ( vy ) + '''\">''' + \" {:.2%} \" . format ( value [ i ]) + '''</text>''' svg_text = svg_text + '''</g></svg>''' return svg_text Lo script Python \u00e8 stato realizzato da Giulio Fattori","title":"svg_pie"},{"location":"gr_funzioni/custom/custom_unico/#minmaxvaluefieldname","text":"Restituisce il nome/valore della colonna col minimo o massimo valore nella riga. Sintassi: MinMaxValueFieldName ( attrmap , esclusion , minmax , vresult ) Argomenti: attrmap deve essere la funzione attributes() che restituisce tutti i nomi dei campi array() contiene l'elenco dei campi da escludere delimitati da apici minmax per considerare il minimo vmin o massimo vmax vresult per ottenere il nome fname o valore fval del campo Avvertenze: La funzione va in errore se non esclusi tutti i campi testo. Esempi: MinMaxValueFieldName( attributes(),array('fid','PRO_COM','COMUNE'),'vmax','fname') -> '2012' MinMaxValueFieldName( attributes(),array( fid','PRO_COM','COMUNE'),'vmax','fval') -> '19250' #Korto19 2021 from qgis.core import * from qgis.gui import * import json @qgsfunction ( args = 'auto' , group = 'Custom' ) def MinMaxValueFieldName ( attrmap , esclusion , minmax , vresult , feature , parent ): \"\"\" Restituisce il nome della colonna col minimo o massimo valore nella riga<p> La funzione <b>MinMaxValueFieldName(attrmap, esclusion, minmax, vresult)</b> richiede quattro parametri: <ul> <li> <b>attrmap</b> deve essere la funzione <b>attributes()</b> che restituisce tutti i nomi dei campi</li> <li> <b>array()</b> contiene l'elenco dei campi da escludere delimitati da apici</li> <li> <b>minmax</b> per considerare il minimo <b>vmin</b> o massimo <b>vmax</b></li> <li> <b>vresult</b> per ottenere il nome <b>fname</b> o valore <b>fval</b> del campo</li> </ul> <h2>Esempi d'uso:</h2> <ul> <li>MinMaxValueFieldName( attributes(),array( 'fid' , 'PRO_COM' , 'COMUNE' ), 'vmax', 'fname') -> '2012'</li> <li>MinMaxValueFieldName( attributes(),array( 'fid' , 'PRO_COM' , 'COMUNE' ), 'vmax', 'fval') -> '19250'</li> </ul> <b><h2>AVVERTENZE:</h2> <ul> <li>La funzione va in errore se non esclusi tutti i campi testo</li> </ul></b> \"\"\" #Trasformo in array l'elenco dei campi esclusion = json . dumps ( esclusion ) #Recupero i valori numerici della riga _attrmap = { key : attrmap [ key ] for key in attrmap . keys () if key not in esclusion and attrmap [ key ] is not None } # exclude not needed fields #Discrimino per vmin o vmax if vresult == 'fname' : if minmax == 'vmax' : result = [ k for k , v in _attrmap . items () if v == max ( _attrmap . values ())][ 0 ] elif minmax == 'vmin' : result = [ k for k , v in _attrmap . items () if v == min ( _attrmap . values ())][ 0 ] elif vresult == 'fval' : if minmax == 'vmax' : result = [ v for k , v in _attrmap . items () if v == max ( _attrmap . values ())][ 0 ] elif minmax == 'vmin' : result = [ v for k , v in _attrmap . items () if v == min ( _attrmap . values ())][ 0 ] return result Lo script \u00e8 stato riscritto da Giulio Fattori , la fonte \u00e8 qui , grazie Taras","title":"MinMaxValueFieldName"},{"location":"gr_funzioni/custom/custom_unico/#ordina-array-alfanumerico-in-modo-numerico","text":"# -*- coding: utf-8 -*- \"\"\" /*************************************************************************** Ordina array alfanumerico in modo numerico ------------------- copyright : (C) 2021 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' , referenced_columns = []) def array_sort_special ( value1 , feature , parent ): \"\"\" Ordina un array alfanumerico numericamente <h2>Esempio:</h2> <ul> <li>array_sort_special('5/A-5-4-8-3-6-9-7-1-10-7/B-2-7/A') -> ['1','2','3','4','5','5/A','6','7','7/A','7/B','8','9','10']</li> </ul> \"\"\" data = value1 . split ( '-' ) r = sorted ( data , key = lambda item : ( int ( item . partition ( '/' )[ 0 ]) if item [ 0 ] . isdigit () else float ( 'inf' ), item )) #return (','.join(r)) return r Lo script \u00e8 stato riscritto da Giulio Fattori","title":"Ordina array alfanumerico in modo numerico"},{"location":"gr_funzioni/custom/custom_unico/#natural-sorting","text":"from qgis.core import * from qgis.gui import * import re def natural_sort_key ( s ): ns = re . compile ( '([0-9]+)' ) return [ int ( t ) if t . isdigit () else t . lower () for t in re . split ( ns , s )] @qgsfunction ( args = 'auto' , group = 'Custom' , usesgeometry = False ) def sort_my_list ( field , feature , parent ): \"\"\" Ordina un array secondo la Natural sorting <h2>Esempio:</h2> <ul> <li>sort_my_list('field') -> 'elementi ordinati'</li> </ul> Nota: il nome del parametro del campo (field) per sort_my_addresses deve essere compreso tra virgolette singole ('), non virgolette doppie (\"). Ad esempio 'field', non \"field\" <ul> by Kadir \u015eahbaz </ul> Commentare decomentare le ulti due righe per avere una array o una stringa \"\"\" _list = feature [ field ] . split ( \"-\" ) _list . sort ( key = natural_sort_key ) return _list #return ','.join(_list) Lo script \u00e8 stato riscritto da Kadir \u015eahbaz","title":"Natural sorting"},{"location":"gr_funzioni/custom/custom_unico/#dimensioni-immagini","text":"Estrae le dimensioni delle immagini in pixel nei casi di immagine con link assoluto o memorizzate come BLOB: # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** Dimensioni immagini ------------------- copyright : (C) 2022 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * from PyQt5.QtGui import QImage , QImageReader @qgsfunction ( args = 'auto' , group = 'Custom' , referenced_columns = []) def get_blob_sizes ( img_blob , feature , parent ): \"\"\" Calculate blob image dimension (W x H) <h2>Example usage:</h2> <ul> <li>get_blob_sizes(\"img_blob\") -> '1024 x 512 px'</li> </ul> \"\"\" image = QImage () . fromData ( img_blob ) sizeOfImage = image . size () img_height = sizeOfImage . height () img_width = sizeOfImage . width () dim_blob = str ( img_width ) + ' x ' + str ( img_height ) + ' px ' return dim_blob @qgsfunction ( args = 'auto' , group = 'Custom' , referenced_columns = []) def get_image_sizes ( img_shape , feature , parent ): \"\"\" Calculate blob image size <h2>Example usage:</h2> <ul> <li>get_image_sizes(img_shape) -> '1024 x 512 px'</li> </ul> NEED ABSOLUTE IMAGE LINK \"\"\" reader = QImageReader ( img_shape ) sizeOfImage = reader . size () img_height = sizeOfImage . height () img_width = sizeOfImage . width () dim_image = str ( img_width ) + ' x ' + str ( img_height ) + ' px ' return dim_image Lo script \u00e8 stato realizzato da Giulio Fattori","title":"Dimensioni immagini"},{"location":"gr_funzioni/custom/custom_unico/#ordina-i-punti-lungo-una-linea-orientata","text":"Restituisce l'ordinamento di elementi puntuali rispetto ad una linea orientata # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** Ordina i punti lungo una linea orientata ------------------- copyright : (C) 2022 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * @qgsfunction ( args = 'auto' , group = 'Custom' , usesgeometry = True ) def order_point_along_line ( r_layer , v_reverse , feature , parent , context ): \"\"\" Restituisce l'ordinamento di elementi puntuali rispetto ad una linea orientata <p style=\"color:Red\">Va eseguita su di un layer puntuale aggiungendo un campo numerico</p> <p style=\"color:Red\">Il parametro v_layer \u00e8 il nome del vettore lineare</p> <p style=\"color:Red\">Il parametro v_reverse \u00e8 un booleano 0/1 permette l'inversione della linea</p> <p> <h2>Example usage:</h2> <ul> <li>order_point_along_line('r_layer', v_reverse)</li> <li>da come risultato il numero d'ordine progressivo del punto</li> </ul> <p>Tratto da:</p> <p style=\"color:blue\">https://pigrecoinfinito.com/2022/03/14/ordinare-i-punti-lungo-una-linea</p> \"\"\" if v_reverse == 0 : expression = QgsExpression ( \"with_variable ('nearest', \\ overlay_nearest( \\' \" + r_layer + \" \\' ,$geometry)[0], \\ array_find( \\ array_sort( \\ array_foreach( \\ array_agg($geometry, group_by:=@nearest), \\ line_locate_point(@nearest,@element))), \\ line_locate_point(@nearest,$geometry))+1 \\ )\" ) else : expression = QgsExpression ( \"with_variable ('nearest', \\ overlay_nearest( \\' \" + r_layer + \" \\' ,reverse($geometry))[0], \\ array_find( \\ array_sort( \\ array_foreach( \\ array_agg($geometry, group_by:=@nearest), \\ line_locate_point(@nearest,@element))), \\ line_locate_point(@nearest,$geometry))+1 \\ )\" ) n_point = expression . evaluate ( context ) return n_point Lo script \u00e8 stato realizzato da Giulio Fattori","title":"Ordina i punti lungo una linea orientata"},{"location":"gr_funzioni/custom/custom_unico/#estrarre-testo-da-legenda-categorizzata","text":"Estrarre il testo decodifica dalla legenda # -*- coding: utf-8 -*- \"\"\" /*************************************************************************** Ordina i punti lungo una linea orientata ------------------- copyright : (C) 2022 by Giulio Fattori email : xxxxxxxxxxxxx ***************************************************************************/ \"\"\" from qgis.core import * from qgis.gui import * from qgis.utils import iface @qgsfunction ( args = 'auto' , group = 'Custom' ) def get_catg_label ( value_in , feature , parent ): \"\"\" Restituisce il testo della legenda dell'elemento categorizzato: <br> <p><b>il campo in input e' quello utilizzato per la categorizzazione</b> <br> <h2>Example usage:</h2> <ul> <li>get_catg_label(\"Area\") -> 'Parcheggio'</li> </ul> \"\"\" layer = iface . activeLayer () renderer = layer . renderer () if layer . renderer () . type () == \"categorizedSymbol\" : for cat in renderer . categories (): #print('val ', type(cat.value()), type(value_in)) if str ( value_in ) == str ( cat . value ()): #print('res ',cat.value(), value_in) cat_label_out = cat . label () break else : cat_label_out = '' return cat_label_out Lo script \u00e8 stato realizzato da Giulio Fattori","title":"Estrarre testo da legenda categorizzata"},{"location":"gr_funzioni/data_ora/data_ora_unico/","tags":["gruppo"],"text":"Gruppo Data e Ora \u21b5 Abstract Questo gruppo contiene funzioni per gestire dati con date e ore. age \u21b5 Restituisce la differenza fra due date o datetimes. La differenza \u00e8 restituita come Interval e deve essere usata con una della seguenti funzioni per estrarre informazioni utili: year month week day hour minute second Sintassi: age( datetime1 , datetime2 ) Argomenti: datetime1 una stringa, in formato data o data/ora rappresentante la meno recente datetime2 una stringa, in formato data o data/ora rappresentante la data pi\u00f9 recente Esempi: age('2012-05-12','2012-05-02') \u2192 intervallo (usa day per estrarre il numero di giorni) day(age('2012-05-12','2012-05-02')) \u2192 10 datetime_from_epoch \u21b5 Restituisce un datetime il cui data e ora sono il numero di millisecondi, msec, che sono passati dal 1970-01-01T00: 00: 00.000, Coordinated Universal Time (Qt.UTC) e convertiti in Qt.LocalTime. Sintassi: datetime_from_epoch( int ) Argomenti: int numero (millisecondi) Esempi: datetime_from_epoch(1483225200000) \u2192 2017-01-01T00:00:00 Feature introdotta a partire da QGIS 3.12 day \u21b5 Estrae il giorno da una data, o il numero dei giorni da un intervallo. Variabile data \u21b5 Estrae il giorno da una data o un data/ora. Sintassi: day( date ) Argomenti: date un valore data o data/ora Variabile intervallo \u21b5 Calcola la lunghezza in giorni di un intervallo. Sintassi: day( interval ) Argomenti: interval valore intervallo da cui restituire il numero di giorni Esempi: day(to_interval('3 days')) \u2192 3 day(to_interval('3 weeks 2 days')) \u2192 23 day(age('2012-01-01','2010-01-01')) \u2192 730 day_of_week \u21b5 Restituisce il giorno della settimana per una data o un datetime. L'intervallo del valore restituito v\u00e0 da 0 a 6, dove 0 corrisponde a Domenica e 6 a Sabato. Sintassi: day_of_week( date ) Argomenti: date valore data o datetime Esempi: day_of_week(todate('2018-05-09')) \u2192 3 (Mercoled\u00ec) Osservazioni: 0 \u2192 Domenica 1 \u2192 Luned\u00ec 2 \u2192 Marted\u00ec 3 \u2192 Mercoled\u00ec 4 \u2192 Gioved\u00ec 5 \u2192 Venerd\u00ec 6 \u2192 Sabato epoch \u21b5 Restituisce l'intervallo in millisecondi fra l' epoca unix e la data inserita. Sintassi: epoch( date ) Argomenti: date un valore data o data/ora Esempi: epoch(to_date('2017-01-01')) \u2192 1483203600000 format_date \u21b5 Formatta un tipo di data o stringa in un formato stringa personalizzato. Usa stringhe nel formato data/ora Qt. Vedi QDateTime::toString . Sintassi: format_date( datetime , format [, language ]_) Argomenti: datetime valora data, ora, o data/ora format Modello di stringhe usato per formattare la stringa. Espressione In uscita d il giorno in numero senza lo zero iniziale (da 1 a 31) dd il giorno in numero con lo zero iniziale (da 01 a 31) ddd il nome locale del giorno abbreviato (es. da 'Mon' a 'Sun') dddd il nome locale del giorno per esteso (es. da 'Monday' a 'Sunday') M il mese in numero senza lo zero iniziale (1-12) MM il mese in numero con lo zero iniziale (01-12) MMM il nome locale del mese abbreviato (es. da 'Jan' a 'Dec') MMMM il nome locale del mese per esteso (es. da 'January' a 'December') yy l'anno come un numero a due cifre (00-99) yyyy l'anno come un numero a quattro cifre Queste espressioni possono essere usate per la parte time della stringa da formattare: Espressione In uscita h l'ora senza lo zero iniziale (da 0 a 23 o da 1 a 12 se visualizzi AM/PM) hh l'ora con lo zero iniziale (da 00 a 23 o da 01 a 12 se visualizzi AM/PM) H l'ora senza lo zero iniziale (da 0 a 23, anche se visualizzi AM/PM) HH l'ora con lo zero iniziale (da 00 a 23, anche se visualizzi AM/PM) m il minuto senza lo zero iniziale (da 0 a 59) mm il minuto con lo zero iniziale (da 00 a 59) s il secondo senza lo zero iniziale (da 0 a 59) ss il secondo con lo zero iniziale (da 00 a 59) z i millisecondi senza gli zeri iniziali (da 0 a 999) zzz i millisecondi con gli zeri iniziali (da 000 a 999) AP o A interpretato come un orario nel formato AM/PM. AP deve essere \"AM\" oppure \"PM\". ap o a interpretato come un orario nel formato AM/PM. ap deve essere \"am\" oppure \"pm\". language linguaggio (minuscolo, due o tre lettere, codice ISO 639 ) utilizzato per formattare la data in una stringa personalizzata ( >= QGIS 3.12 ) Esempi: format_date('2012-05-15','dd.MM.yyyy') \u2192 '15.05.2012' format_date('2012-05-15','d MMMM yyyy','fr') \u2192 '15 mai 2012' format_date('2012-05-15','dddd') \u2192 'Tuesday', se la lingua corrente \u00e8 una variante inglese format_date('2012-05-15 13:54:20','dd.MM.yy') \u2192 '15.05.12' format_date('13:54:20','hh:mm AP') \u2192 '01:54 PM' hour \u21b5 Estrae la parte ore da una data/ora o orario, o il numero delle ore da un intervallo. Variabile ora \u21b5 Estrae la parte ore da un orario o data/ora. Sintassi: hour( datetime ) Argomenti: datetime un valore data o data/ora Esempi: hour(to_datetime('2018-05-09T11:58:57')) \u2192 11 Variabile intervallo \u21b5 Calcola la lunghezza in ore di un intervallo. Sintassi: hour( interval ) Argomenti: interval valore intervallo da cui restituire il numero di ore Esempi: hour(tointerval('3 hours')) \u2192 3 hour(age('2012-07-22T13:00:00','2012-07-22T10:00:00')) \u2192 3 hour(age('2012-01-01','2010-01-01')) \u2192 17520 make_date \u21b5 Crea un valore di data dai numeri di anno, mese e giorno. Sintassi: make_date( year , month , day ) Argomenti: year Numero dell'anno. Gli anni da 1 a 99 vengono interpretati cos\u00ec come sono. L'anno 0 non \u00e8 valido. month Numero del mese, dove 1 = gennaio day Day Numero del giorno, che inizia con 1 per il primo giorno del mese. Esempi: make_date(2020,5,4) \u2192 date value 2020-05-04` make_datetime \u21b5 Crea un valore datetime da anno, mese, giorno, ora, minuti e secondi numeri. Sintassi: make_datetime( year , month , day , hour , minute , second ) Argomenti: year Numero dell'anno. Gli anni da 1 a 99 vengono interpretati cos\u00ec come sono. L'anno 0 non \u00e8 valido. month Numero del mese, dove 1 = gennaio day Day Numero del giorno, che inizia con 1 per il primo giorno del mese; hour numero ore; minute minuti; second secondi (i valori frazionari includono millisecondi). Esempi: make_datetime(2020,5,4,13,45,30.5) \u2192 datetime value 2020-05-04 13:45:30.500 Osservazioni: make_interval \u21b5 Crea un valore di intervallo dai valori di anno, mese, settimane, giorni, ore, minuti e secondi. Sintassi: make_interval( _years=0 ][, months=0 ][, weeks=0 ][, days=0 ][, hours=0 ][, minutes=0 ][,_ seconds=0 ]) [ ] indica componenti opzionali Argomenti: year Numero di anni (presuppone una durata di 365,25 giorni). month Numero di mesi (presuppone una durata del mese di 30 giorni) weeks numero settimane; day Numero di giorno; hour numero ore; minute minuti; second secondi. Esempi: make_interval(2020,5,4,13,45,30.5) \u2192 datetime value 2020-05-04 13:45:30.500 make_time \u21b5 Crea un valore temporale da ore, minuti e secondi numeri. Sintassi: make_time( hour , minute , second _) Argomenti: hour numero ore minute minuti second secondi (le frazioni includono i millisecondi) Esempi: make_time(13,45,30.5) \u2192 time value 13:45:30.500 minute \u21b5 Estrae la parte minuti da un data/ora o ora, o il numero dei minuti da un intervallo. Variabile ora \u21b5 Estrae la parte minuti da una time o una datetime. Sintassi: minute( datetime ) Argomenti: datetime un valore data o data/ora Esempi: minute('2012-07-22T13:24:57') \u2192 24 Variabile intervallo \u21b5 Calcola la lunghezza in minuti di un intervallo. Sintassi: minute( interval ) Argomenti: interval valore intervallo da cui restituire il numero di minuti Esempi: minute(tointerval('3 minutes')) \u2192 3 minute(age('2012-07-22T00:20:00','2012-07-22T00:00:00')) \u2192 20 minute(age('2012-01-01','2010-01-01')) \u2192 1051200 month \u21b5 Estrae la parte mese da una data, o il numero di mesi da un intervallo. Variabile data \u21b5 Estrae la parte mese da una data o datetime. Sintassi: month( date ) Argomenti: date un valore data o data/ora Esempi: month('2012-05-12') \u2192 05 Variabile intervallo \u21b5 Calcola la lunghezza in mesi di un intervallo. Sintassi: month( interval ) Argomenti: interval valore intervallo da cui restituire il numero di mesi Esempi: month(to_interval('3 months')) \u2192 3 month(age('2012-01-01','2010-01-01')) \u2192 24.3333 now \u21b5 Restituisce la data e l'ora correnti. La funzione \u00e8 statica e restituir\u00e0 risultati coerenti durante la valutazione. Il tempo restituito \u00e8 il momento in cui viene preparata l'espressione. Sintassi: now() Esempi: now() \u2192 2018-05-09 12:18:38` second \u21b5 Estrae la parte secondi da un datetime o time, o il numero dei secondi da un intervallo. Variabile ora \u21b5 Estrae la parte secondi da una time o una datetime. Sintassi: second( datetime ) Argomenti: datetime un valore data o data/ora Esempi: second('2012-07-22T13:24:57') \u2192 57 Variabile intervallo \u21b5 Calcola la lunghezza in secondi di un intervallo. Sintassi: second( interval ) Argomenti: interval valore intervallo da cui restituire il numero di secondi Esempi: second(age('2012-07-22T00:20:00','2012-07-22T00:00:00')) \u2192 1200 second(age('2012-01-01','2010-01-01')) \u2192 63072000 to_date \u21b5 Converte una stringa in un oggetto data. \u00c8 possibile fornire una stringa di formato opzionale per analizzare la stringa; vedi QDate::fromString o la documentazione della funzione format_date per ulteriore documentazione sul formato. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Sintassi: to_date( string ,[ format ][, language ]) [ ] indica componenti opzionali Argomenti: string stringa rappresentante il valore data format formato usato per convertire la stringa in una data language lingua (minuscolo, due o tre lettere, codice lingua ISO 639) utilizzata per convertire la stringa in una data. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Esempi: to_date('2012-05-04') \u2192 2012-05-04 to_date('June 29, 2019','MMMM d, yyyy') \u2192 2019-06-29, se la locale corrente utilizza il nome 'June' per il sesto mese, altrimenti si verifica un errore to_date('29 juin, 2019','d MMMM, yyyy','fr') \u2192 2019-06-29 to_datetime \u21b5 Converte una stringa in un oggetto datetime. \u00c8 possibile fornire una stringa di formato opzionale per analizzare la stringa; vedi QDate::fromString , QTime::fromString o la documentazione della funzione format_date per ulteriore documentazione sul formato. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Sintassi: to_datetime( string ,[ format ][, language ]) [ ] indica componenti opzionali Argomenti: string stringa rappresentante il valore data format formato usato per convertire la stringa in una data language lingua (minuscolo, due o tre lettere, codice lingua ISO 639) utilizzata per convertire la stringa in una data. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Esempi: to_datetime('2012-05-04 12:50:00') \u2192 2012-05-04T12:50:00 to_datetime('June 29, 2019 @ 12:34','MMMM d, yyyy @ HH:mm') \u2192 2019-06-29T12:34, se la locale corrente utilizza il nome 'June' per il sesto mese, altrimenti si verifica un errore to_datetime('29 juin, 2019 @ 12:34','d MMMM, yyyy @ HH:mm','fr') \u2192 2019-06-29T12:3 to_interval \u21b5 Converte una stringa in un tipo intervallo. Pu\u00f2 essere usata per estrarre giorni, ore, mese, etc. da una data. Sintassi: to_interval( string ) Argomenti: string una stringa rappresentante un intervallo. I formati ammessi includono {n} giorni {n} ore {n} mesi. Esempi: to_interval('1 day 2 hours') \u2192 interval: 1.08333 days to_interval( '0.5 hours' ) \u2192 intervallo: 30 minuti to_datetime('2012-05-05 12:00:00') - to_interval('1 day 2 hours') \u2192 2012-05-04T10:00:00 to_time \u21b5 Converte un stringa in un oggetto ora. Una stringa opzionale di formato pu\u00f2 essere fornita per valutare la stringa; Vedi QTime::fromString per documentazione aggiuntiva sul formato. Sintassi: to_time( string ,[ format ][, language ]) [ ] indica componenti opzionali Argomenti: string stringa rappresentante il valore ora format formato usato per convertire la stringa in orario language lingua (minuscolo, due o tre lettere, codice lingua ISO 639) utilizzata per convertire la stringa in un orario. Esempi: to_time('12:30:01') \u2192 12:30:01 to_time('12:34','HH:mm') \u2192 12:34:00 to_time('12:34','HH:mm','fr') \u2192 12:34:00 week \u21b5 Estrae il numero della settimana da una data, o il numero di settimane da un intervallo. Variabile data \u21b5 Estrae il numero della settimana da una data o un datetime. Sintassi: week( date ) Argomenti: date un valore data o data/ora Esempi: week('2018-05-09') \u2192 19 Variabile intervallo \u21b5 Calcola la lunghezza in settimane di un intervallo. Sintassi: week( interval ) Argomenti: interval valore intervallo da cui restituire il numero di mesi Esempi: week(tointerval('3 weeks')) \u2192 3 week(age('2012-01-01','2010-01-01')) \u2192 104.285 year \u21b5 Estrae la parte anno da una data, o il numero di anni da un intervallo. Variabile data \u21b5 Estrae la parte anno da una data o datetime. Sintassi: year( date ) Argomenti: date un valore data o data/ora Esempi: week('2018-05-09') \u2192 19 Variabile intervallo \u21b5 Calcola la lunghezza in anni di un intervallo. Sintassi: year( interval ) Argomenti: interval valore intervallo da cui restituire il numero di anni Esempi: year(to_interval('3 years')) \u2192 3 year(age('2012-01-01','2010-01-01')) \u2192 1.9986","title":"Data ora"},{"location":"gr_funzioni/data_ora/data_ora_unico/#gruppo-data-e-ora","text":"Abstract Questo gruppo contiene funzioni per gestire dati con date e ore.","title":"Gruppo Data e Ora"},{"location":"gr_funzioni/data_ora/data_ora_unico/#age","text":"Restituisce la differenza fra due date o datetimes. La differenza \u00e8 restituita come Interval e deve essere usata con una della seguenti funzioni per estrarre informazioni utili: year month week day hour minute second Sintassi: age( datetime1 , datetime2 ) Argomenti: datetime1 una stringa, in formato data o data/ora rappresentante la meno recente datetime2 una stringa, in formato data o data/ora rappresentante la data pi\u00f9 recente Esempi: age('2012-05-12','2012-05-02') \u2192 intervallo (usa day per estrarre il numero di giorni) day(age('2012-05-12','2012-05-02')) \u2192 10","title":"age"},{"location":"gr_funzioni/data_ora/data_ora_unico/#datetime_from_epoch","text":"Restituisce un datetime il cui data e ora sono il numero di millisecondi, msec, che sono passati dal 1970-01-01T00: 00: 00.000, Coordinated Universal Time (Qt.UTC) e convertiti in Qt.LocalTime. Sintassi: datetime_from_epoch( int ) Argomenti: int numero (millisecondi) Esempi: datetime_from_epoch(1483225200000) \u2192 2017-01-01T00:00:00 Feature introdotta a partire da QGIS 3.12","title":"datetime_from_epoch"},{"location":"gr_funzioni/data_ora/data_ora_unico/#day","text":"Estrae il giorno da una data, o il numero dei giorni da un intervallo.","title":"day"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-data","text":"Estrae il giorno da una data o un data/ora. Sintassi: day( date ) Argomenti: date un valore data o data/ora","title":"Variabile data"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-intervallo","text":"Calcola la lunghezza in giorni di un intervallo. Sintassi: day( interval ) Argomenti: interval valore intervallo da cui restituire il numero di giorni Esempi: day(to_interval('3 days')) \u2192 3 day(to_interval('3 weeks 2 days')) \u2192 23 day(age('2012-01-01','2010-01-01')) \u2192 730","title":"Variabile intervallo"},{"location":"gr_funzioni/data_ora/data_ora_unico/#day_of_week","text":"Restituisce il giorno della settimana per una data o un datetime. L'intervallo del valore restituito v\u00e0 da 0 a 6, dove 0 corrisponde a Domenica e 6 a Sabato. Sintassi: day_of_week( date ) Argomenti: date valore data o datetime Esempi: day_of_week(todate('2018-05-09')) \u2192 3 (Mercoled\u00ec) Osservazioni: 0 \u2192 Domenica 1 \u2192 Luned\u00ec 2 \u2192 Marted\u00ec 3 \u2192 Mercoled\u00ec 4 \u2192 Gioved\u00ec 5 \u2192 Venerd\u00ec 6 \u2192 Sabato","title":"day_of_week"},{"location":"gr_funzioni/data_ora/data_ora_unico/#epoch","text":"Restituisce l'intervallo in millisecondi fra l' epoca unix e la data inserita. Sintassi: epoch( date ) Argomenti: date un valore data o data/ora Esempi: epoch(to_date('2017-01-01')) \u2192 1483203600000","title":"epoch"},{"location":"gr_funzioni/data_ora/data_ora_unico/#format_date","text":"Formatta un tipo di data o stringa in un formato stringa personalizzato. Usa stringhe nel formato data/ora Qt. Vedi QDateTime::toString . Sintassi: format_date( datetime , format [, language ]_) Argomenti: datetime valora data, ora, o data/ora format Modello di stringhe usato per formattare la stringa. Espressione In uscita d il giorno in numero senza lo zero iniziale (da 1 a 31) dd il giorno in numero con lo zero iniziale (da 01 a 31) ddd il nome locale del giorno abbreviato (es. da 'Mon' a 'Sun') dddd il nome locale del giorno per esteso (es. da 'Monday' a 'Sunday') M il mese in numero senza lo zero iniziale (1-12) MM il mese in numero con lo zero iniziale (01-12) MMM il nome locale del mese abbreviato (es. da 'Jan' a 'Dec') MMMM il nome locale del mese per esteso (es. da 'January' a 'December') yy l'anno come un numero a due cifre (00-99) yyyy l'anno come un numero a quattro cifre Queste espressioni possono essere usate per la parte time della stringa da formattare: Espressione In uscita h l'ora senza lo zero iniziale (da 0 a 23 o da 1 a 12 se visualizzi AM/PM) hh l'ora con lo zero iniziale (da 00 a 23 o da 01 a 12 se visualizzi AM/PM) H l'ora senza lo zero iniziale (da 0 a 23, anche se visualizzi AM/PM) HH l'ora con lo zero iniziale (da 00 a 23, anche se visualizzi AM/PM) m il minuto senza lo zero iniziale (da 0 a 59) mm il minuto con lo zero iniziale (da 00 a 59) s il secondo senza lo zero iniziale (da 0 a 59) ss il secondo con lo zero iniziale (da 00 a 59) z i millisecondi senza gli zeri iniziali (da 0 a 999) zzz i millisecondi con gli zeri iniziali (da 000 a 999) AP o A interpretato come un orario nel formato AM/PM. AP deve essere \"AM\" oppure \"PM\". ap o a interpretato come un orario nel formato AM/PM. ap deve essere \"am\" oppure \"pm\". language linguaggio (minuscolo, due o tre lettere, codice ISO 639 ) utilizzato per formattare la data in una stringa personalizzata ( >= QGIS 3.12 ) Esempi: format_date('2012-05-15','dd.MM.yyyy') \u2192 '15.05.2012' format_date('2012-05-15','d MMMM yyyy','fr') \u2192 '15 mai 2012' format_date('2012-05-15','dddd') \u2192 'Tuesday', se la lingua corrente \u00e8 una variante inglese format_date('2012-05-15 13:54:20','dd.MM.yy') \u2192 '15.05.12' format_date('13:54:20','hh:mm AP') \u2192 '01:54 PM'","title":"format_date"},{"location":"gr_funzioni/data_ora/data_ora_unico/#hour","text":"Estrae la parte ore da una data/ora o orario, o il numero delle ore da un intervallo.","title":"hour"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-ora","text":"Estrae la parte ore da un orario o data/ora. Sintassi: hour( datetime ) Argomenti: datetime un valore data o data/ora Esempi: hour(to_datetime('2018-05-09T11:58:57')) \u2192 11","title":"Variabile ora"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-intervallo_1","text":"Calcola la lunghezza in ore di un intervallo. Sintassi: hour( interval ) Argomenti: interval valore intervallo da cui restituire il numero di ore Esempi: hour(tointerval('3 hours')) \u2192 3 hour(age('2012-07-22T13:00:00','2012-07-22T10:00:00')) \u2192 3 hour(age('2012-01-01','2010-01-01')) \u2192 17520","title":"Variabile intervallo"},{"location":"gr_funzioni/data_ora/data_ora_unico/#make_date","text":"Crea un valore di data dai numeri di anno, mese e giorno. Sintassi: make_date( year , month , day ) Argomenti: year Numero dell'anno. Gli anni da 1 a 99 vengono interpretati cos\u00ec come sono. L'anno 0 non \u00e8 valido. month Numero del mese, dove 1 = gennaio day Day Numero del giorno, che inizia con 1 per il primo giorno del mese. Esempi: make_date(2020,5,4) \u2192 date value 2020-05-04`","title":"make_date"},{"location":"gr_funzioni/data_ora/data_ora_unico/#make_datetime","text":"Crea un valore datetime da anno, mese, giorno, ora, minuti e secondi numeri. Sintassi: make_datetime( year , month , day , hour , minute , second ) Argomenti: year Numero dell'anno. Gli anni da 1 a 99 vengono interpretati cos\u00ec come sono. L'anno 0 non \u00e8 valido. month Numero del mese, dove 1 = gennaio day Day Numero del giorno, che inizia con 1 per il primo giorno del mese; hour numero ore; minute minuti; second secondi (i valori frazionari includono millisecondi). Esempi: make_datetime(2020,5,4,13,45,30.5) \u2192 datetime value 2020-05-04 13:45:30.500 Osservazioni:","title":"make_datetime"},{"location":"gr_funzioni/data_ora/data_ora_unico/#make_interval","text":"Crea un valore di intervallo dai valori di anno, mese, settimane, giorni, ore, minuti e secondi. Sintassi: make_interval( _years=0 ][, months=0 ][, weeks=0 ][, days=0 ][, hours=0 ][, minutes=0 ][,_ seconds=0 ]) [ ] indica componenti opzionali Argomenti: year Numero di anni (presuppone una durata di 365,25 giorni). month Numero di mesi (presuppone una durata del mese di 30 giorni) weeks numero settimane; day Numero di giorno; hour numero ore; minute minuti; second secondi. Esempi: make_interval(2020,5,4,13,45,30.5) \u2192 datetime value 2020-05-04 13:45:30.500","title":"make_interval"},{"location":"gr_funzioni/data_ora/data_ora_unico/#make_time","text":"Crea un valore temporale da ore, minuti e secondi numeri. Sintassi: make_time( hour , minute , second _) Argomenti: hour numero ore minute minuti second secondi (le frazioni includono i millisecondi) Esempi: make_time(13,45,30.5) \u2192 time value 13:45:30.500","title":"make_time"},{"location":"gr_funzioni/data_ora/data_ora_unico/#minute","text":"Estrae la parte minuti da un data/ora o ora, o il numero dei minuti da un intervallo.","title":"minute"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-ora_1","text":"Estrae la parte minuti da una time o una datetime. Sintassi: minute( datetime ) Argomenti: datetime un valore data o data/ora Esempi: minute('2012-07-22T13:24:57') \u2192 24","title":"Variabile ora"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-intervallo_2","text":"Calcola la lunghezza in minuti di un intervallo. Sintassi: minute( interval ) Argomenti: interval valore intervallo da cui restituire il numero di minuti Esempi: minute(tointerval('3 minutes')) \u2192 3 minute(age('2012-07-22T00:20:00','2012-07-22T00:00:00')) \u2192 20 minute(age('2012-01-01','2010-01-01')) \u2192 1051200","title":"Variabile intervallo"},{"location":"gr_funzioni/data_ora/data_ora_unico/#month","text":"Estrae la parte mese da una data, o il numero di mesi da un intervallo.","title":"month"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-data_1","text":"Estrae la parte mese da una data o datetime. Sintassi: month( date ) Argomenti: date un valore data o data/ora Esempi: month('2012-05-12') \u2192 05","title":"Variabile data"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-intervallo_3","text":"Calcola la lunghezza in mesi di un intervallo. Sintassi: month( interval ) Argomenti: interval valore intervallo da cui restituire il numero di mesi Esempi: month(to_interval('3 months')) \u2192 3 month(age('2012-01-01','2010-01-01')) \u2192 24.3333","title":"Variabile intervallo"},{"location":"gr_funzioni/data_ora/data_ora_unico/#now","text":"Restituisce la data e l'ora correnti. La funzione \u00e8 statica e restituir\u00e0 risultati coerenti durante la valutazione. Il tempo restituito \u00e8 il momento in cui viene preparata l'espressione. Sintassi: now() Esempi: now() \u2192 2018-05-09 12:18:38`","title":"now"},{"location":"gr_funzioni/data_ora/data_ora_unico/#second","text":"Estrae la parte secondi da un datetime o time, o il numero dei secondi da un intervallo.","title":"second"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-ora_2","text":"Estrae la parte secondi da una time o una datetime. Sintassi: second( datetime ) Argomenti: datetime un valore data o data/ora Esempi: second('2012-07-22T13:24:57') \u2192 57","title":"Variabile ora"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-intervallo_4","text":"Calcola la lunghezza in secondi di un intervallo. Sintassi: second( interval ) Argomenti: interval valore intervallo da cui restituire il numero di secondi Esempi: second(age('2012-07-22T00:20:00','2012-07-22T00:00:00')) \u2192 1200 second(age('2012-01-01','2010-01-01')) \u2192 63072000","title":"Variabile intervallo"},{"location":"gr_funzioni/data_ora/data_ora_unico/#to_date","text":"Converte una stringa in un oggetto data. \u00c8 possibile fornire una stringa di formato opzionale per analizzare la stringa; vedi QDate::fromString o la documentazione della funzione format_date per ulteriore documentazione sul formato. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Sintassi: to_date( string ,[ format ][, language ]) [ ] indica componenti opzionali Argomenti: string stringa rappresentante il valore data format formato usato per convertire la stringa in una data language lingua (minuscolo, due o tre lettere, codice lingua ISO 639) utilizzata per convertire la stringa in una data. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Esempi: to_date('2012-05-04') \u2192 2012-05-04 to_date('June 29, 2019','MMMM d, yyyy') \u2192 2019-06-29, se la locale corrente utilizza il nome 'June' per il sesto mese, altrimenti si verifica un errore to_date('29 juin, 2019','d MMMM, yyyy','fr') \u2192 2019-06-29","title":"to_date"},{"location":"gr_funzioni/data_ora/data_ora_unico/#to_datetime","text":"Converte una stringa in un oggetto datetime. \u00c8 possibile fornire una stringa di formato opzionale per analizzare la stringa; vedi QDate::fromString , QTime::fromString o la documentazione della funzione format_date per ulteriore documentazione sul formato. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Sintassi: to_datetime( string ,[ format ][, language ]) [ ] indica componenti opzionali Argomenti: string stringa rappresentante il valore data format formato usato per convertire la stringa in una data language lingua (minuscolo, due o tre lettere, codice lingua ISO 639) utilizzata per convertire la stringa in una data. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Esempi: to_datetime('2012-05-04 12:50:00') \u2192 2012-05-04T12:50:00 to_datetime('June 29, 2019 @ 12:34','MMMM d, yyyy @ HH:mm') \u2192 2019-06-29T12:34, se la locale corrente utilizza il nome 'June' per il sesto mese, altrimenti si verifica un errore to_datetime('29 juin, 2019 @ 12:34','d MMMM, yyyy @ HH:mm','fr') \u2192 2019-06-29T12:3","title":"to_datetime"},{"location":"gr_funzioni/data_ora/data_ora_unico/#to_interval","text":"Converte una stringa in un tipo intervallo. Pu\u00f2 essere usata per estrarre giorni, ore, mese, etc. da una data. Sintassi: to_interval( string ) Argomenti: string una stringa rappresentante un intervallo. I formati ammessi includono {n} giorni {n} ore {n} mesi. Esempi: to_interval('1 day 2 hours') \u2192 interval: 1.08333 days to_interval( '0.5 hours' ) \u2192 intervallo: 30 minuti to_datetime('2012-05-05 12:00:00') - to_interval('1 day 2 hours') \u2192 2012-05-04T10:00:00","title":"to_interval"},{"location":"gr_funzioni/data_ora/data_ora_unico/#to_time","text":"Converte un stringa in un oggetto ora. Una stringa opzionale di formato pu\u00f2 essere fornita per valutare la stringa; Vedi QTime::fromString per documentazione aggiuntiva sul formato. Sintassi: to_time( string ,[ format ][, language ]) [ ] indica componenti opzionali Argomenti: string stringa rappresentante il valore ora format formato usato per convertire la stringa in orario language lingua (minuscolo, due o tre lettere, codice lingua ISO 639) utilizzata per convertire la stringa in un orario. Esempi: to_time('12:30:01') \u2192 12:30:01 to_time('12:34','HH:mm') \u2192 12:34:00 to_time('12:34','HH:mm','fr') \u2192 12:34:00","title":"to_time"},{"location":"gr_funzioni/data_ora/data_ora_unico/#week","text":"Estrae il numero della settimana da una data, o il numero di settimane da un intervallo.","title":"week"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-data_2","text":"Estrae il numero della settimana da una data o un datetime. Sintassi: week( date ) Argomenti: date un valore data o data/ora Esempi: week('2018-05-09') \u2192 19","title":"Variabile data"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-intervallo_5","text":"Calcola la lunghezza in settimane di un intervallo. Sintassi: week( interval ) Argomenti: interval valore intervallo da cui restituire il numero di mesi Esempi: week(tointerval('3 weeks')) \u2192 3 week(age('2012-01-01','2010-01-01')) \u2192 104.285","title":"Variabile intervallo"},{"location":"gr_funzioni/data_ora/data_ora_unico/#year","text":"Estrae la parte anno da una data, o il numero di anni da un intervallo.","title":"year"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-data_3","text":"Estrae la parte anno da una data o datetime. Sintassi: year( date ) Argomenti: date un valore data o data/ora Esempi: week('2018-05-09') \u2192 19","title":"Variabile data"},{"location":"gr_funzioni/data_ora/data_ora_unico/#variabile-intervallo_6","text":"Calcola la lunghezza in anni di un intervallo. Sintassi: year( interval ) Argomenti: interval valore intervallo da cui restituire il numero di anni Esempi: year(to_interval('3 years')) \u2192 3 year(age('2012-01-01','2010-01-01')) \u2192 1.9986","title":"Variabile intervallo"},{"location":"gr_funzioni/espressione_utente/espressione_utente_unico/","tags":["gruppo"],"text":"Gruppo Espressione utente \u21b5 Abstract Questo gruppo contiene espressioni personalizzate memorizzate nel profilo utente. Espressioni Utente \u21b5 scarica file con le espressioni create da Pigreco Per installarle nel proprio profilo cliccare su (1) e selezionare il file espressioni_pigreco.json","title":"Espressioni utente"},{"location":"gr_funzioni/espressione_utente/espressione_utente_unico/#gruppo-espressione-utente","text":"Abstract Questo gruppo contiene espressioni personalizzate memorizzate nel profilo utente.","title":"Gruppo Espressione utente"},{"location":"gr_funzioni/espressione_utente/espressione_utente_unico/#espressioni-utente","text":"scarica file con le espressioni create da Pigreco Per installarle nel proprio profilo cliccare su (1) e selezionare il file espressioni_pigreco.json","title":"Espressioni Utente"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/","tags":["gruppo"],"text":"Gruppo File e Percorsi \u21b5 Abstract Contiene funzioni che manipolano nomi di file e di percorsi. base_file_name \u21b5 Restituisce il nome del file senza la cartella o il suffisso del file. Sintassi: base_file_name( path ) Argomenti: path Percorso file Esempi: base_file_name('/home/qgis/data/country_boundaries.shp') \u2192 'country_boundaries' exif \u21b5 Recupera i valori dei tag exif da un file immagine. Sintassi: exif( path [,tag] ) [ ] indica componenti opzionali Argomenti path Un percorso di file immagine. tag Il tag da restituire. Se vuoto, verr\u00e0 restituita una mappa con tutti i valori dei tag exif. elenco completo dei tag: Exif.GPSInfo.GPSAltitude Exif.GPSInfo.GPSAltitudeRef Exif.GPSInfo.GPSDateStamp Exif.GPSInfo.GPSLatitude Exif.GPSInfo.GPSLatitudeRef Exif.GPSInfo.GPSLongitude Exif.GPSInfo.GPSLongitudeRef Exif.GPSInfo.GPSProcessingMethod Exif.GPSInfo.GPSTimeStamp Exif.GPSInfo.GPSVersionID Exif.Image.0xea1c Exif.Image.Artist Exif.Image.DateTime Exif.Image.ExifTag Exif.Image.GPSTag Exif.Image.ImageLength Exif.Image.ImageWidth Exif.Image.Make Exif.Image.Model Exif.Image.ResolutionUnit Exif.Image.Software Exif.Image.XPKeywords Exif.Image.XResolution Exif.Image.YCbCrPositioning Exif.Image.YResolution Exif.Iop.InteroperabilityVersion Exif.Iop.RelatedImageLength Exif.Iop.RelatedImageWidth Exif.Photo.0xea1c Exif.Photo.ColorSpace Exif.Photo.ComponentsConfiguration Exif.Photo.Contrast Exif.Photo.DateTimeDigitized Exif.Photo.DateTimeOriginal Exif.Photo.DigitalZoomRatio Exif.Photo.ExifVersion Exif.Photo.ExposureBiasValue Exif.Photo.ExposureMode Exif.Photo.ExposureProgram Exif.Photo.ExposureTime Exif.Photo.FNumber Exif.Photo.Flash Exif.Photo.FlashpixVersion Exif.Photo.FocalLength Exif.Photo.GainControl Exif.Photo.ISOSpeedRatings Exif.Photo.ImageUniqueID Exif.Photo.InteroperabilityTag Exif.Photo.LightSource Exif.Photo.MaxApertureValue Exif.Photo.MeteringMode Exif.Photo.PixelXDimension Exif.Photo.PixelYDimension Exif.Photo.Saturation Exif.Photo.SceneCaptureType Exif.Photo.Sharpness Exif.Photo.UserComment Exif.Photo.WhiteBalance Exif.Thumbnail.Compression Exif.Thumbnail.JPEGInterchangeFormat Exif.Thumbnail.JPEGInterchangeFormatLength Exif.Thumbnail.ResolutionUnit Exif.Thumbnail.XResolution Exif.Thumbnail.YResolution Esempi exif('/my/photo.jpg','Exif.Image.Orientation') \u2192 0 file_exists \u21b5 Restituisce vero se un percorso del file esiste. Sintassi: file_exists( path ) Argomenti: path Percorso file Esempi: file_exists('/home/qgis/data/country_boundaries.shp') \u2192 vero file_name \u21b5 Restituisce il nome di un file (compresa l'estensione del file), esclusa la directory. Sintassi: file_name( path ) Argomenti: path Percorso file Esempi: file_name('/home/qgis/data/country_boundaries.shp') \u2192 'country_boundaries.shp' file_path \u21b5 Restituisce il componente della cartella del un percorso di un file. Questo non include il nome del file. Sintassi: file_path( path ) Argomenti: path Percorso file Esempi: file_path('/home/qgis/data/country_boundaries.shp') \u2192 '/home/qgis/data' file_size \u21b5 Restituisce la dimensione (in bites) di un file. Sintassi: file_size( path ) Argomenti: path Percorso file Esempi: file_size('/home/qgis/data/country_boundaries.geojson') \u2192 5674 file_suffix \u21b5 Restituisce il suffisso (estensione) dal percorso di un file. Sintassi: file_suffix( path ) Argomenti: path Percorso file Esempi: file_suffix('/home/qgis/data/country_boundaries.shp') \u2192 'shp' is_directory \u21b5 Restituisce vero se un percorso corrisponde ad una directory. Sintassi: is_directory( path ) Argomenti: path Percorso file Esempi: is_directory('/home/qgis/data/country_boundaries.shp') \u2192 falso is_directory('/home/qgis/data/') \u2192 vero is_file \u21b5 Restituisce vero se un percorso corrisponde ad un file. Sintassi: is_file( path ) Argomenti: path Percorso file Esempi: is_file('/home/qgis/data/country_boundaries.shp') \u2192 vero is_file('/home/qgis/data/') \u2192 falso","title":"File e percorsi"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#gruppo-file-e-percorsi","text":"Abstract Contiene funzioni che manipolano nomi di file e di percorsi.","title":"Gruppo File e Percorsi"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#base_file_name","text":"Restituisce il nome del file senza la cartella o il suffisso del file. Sintassi: base_file_name( path ) Argomenti: path Percorso file Esempi: base_file_name('/home/qgis/data/country_boundaries.shp') \u2192 'country_boundaries'","title":"base_file_name"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#exif","text":"Recupera i valori dei tag exif da un file immagine. Sintassi: exif( path [,tag] ) [ ] indica componenti opzionali Argomenti path Un percorso di file immagine. tag Il tag da restituire. Se vuoto, verr\u00e0 restituita una mappa con tutti i valori dei tag exif. elenco completo dei tag: Exif.GPSInfo.GPSAltitude Exif.GPSInfo.GPSAltitudeRef Exif.GPSInfo.GPSDateStamp Exif.GPSInfo.GPSLatitude Exif.GPSInfo.GPSLatitudeRef Exif.GPSInfo.GPSLongitude Exif.GPSInfo.GPSLongitudeRef Exif.GPSInfo.GPSProcessingMethod Exif.GPSInfo.GPSTimeStamp Exif.GPSInfo.GPSVersionID Exif.Image.0xea1c Exif.Image.Artist Exif.Image.DateTime Exif.Image.ExifTag Exif.Image.GPSTag Exif.Image.ImageLength Exif.Image.ImageWidth Exif.Image.Make Exif.Image.Model Exif.Image.ResolutionUnit Exif.Image.Software Exif.Image.XPKeywords Exif.Image.XResolution Exif.Image.YCbCrPositioning Exif.Image.YResolution Exif.Iop.InteroperabilityVersion Exif.Iop.RelatedImageLength Exif.Iop.RelatedImageWidth Exif.Photo.0xea1c Exif.Photo.ColorSpace Exif.Photo.ComponentsConfiguration Exif.Photo.Contrast Exif.Photo.DateTimeDigitized Exif.Photo.DateTimeOriginal Exif.Photo.DigitalZoomRatio Exif.Photo.ExifVersion Exif.Photo.ExposureBiasValue Exif.Photo.ExposureMode Exif.Photo.ExposureProgram Exif.Photo.ExposureTime Exif.Photo.FNumber Exif.Photo.Flash Exif.Photo.FlashpixVersion Exif.Photo.FocalLength Exif.Photo.GainControl Exif.Photo.ISOSpeedRatings Exif.Photo.ImageUniqueID Exif.Photo.InteroperabilityTag Exif.Photo.LightSource Exif.Photo.MaxApertureValue Exif.Photo.MeteringMode Exif.Photo.PixelXDimension Exif.Photo.PixelYDimension Exif.Photo.Saturation Exif.Photo.SceneCaptureType Exif.Photo.Sharpness Exif.Photo.UserComment Exif.Photo.WhiteBalance Exif.Thumbnail.Compression Exif.Thumbnail.JPEGInterchangeFormat Exif.Thumbnail.JPEGInterchangeFormatLength Exif.Thumbnail.ResolutionUnit Exif.Thumbnail.XResolution Exif.Thumbnail.YResolution Esempi exif('/my/photo.jpg','Exif.Image.Orientation') \u2192 0","title":"exif"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#file_exists","text":"Restituisce vero se un percorso del file esiste. Sintassi: file_exists( path ) Argomenti: path Percorso file Esempi: file_exists('/home/qgis/data/country_boundaries.shp') \u2192 vero","title":"file_exists"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#file_name","text":"Restituisce il nome di un file (compresa l'estensione del file), esclusa la directory. Sintassi: file_name( path ) Argomenti: path Percorso file Esempi: file_name('/home/qgis/data/country_boundaries.shp') \u2192 'country_boundaries.shp'","title":"file_name"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#file_path","text":"Restituisce il componente della cartella del un percorso di un file. Questo non include il nome del file. Sintassi: file_path( path ) Argomenti: path Percorso file Esempi: file_path('/home/qgis/data/country_boundaries.shp') \u2192 '/home/qgis/data'","title":"file_path"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#file_size","text":"Restituisce la dimensione (in bites) di un file. Sintassi: file_size( path ) Argomenti: path Percorso file Esempi: file_size('/home/qgis/data/country_boundaries.geojson') \u2192 5674","title":"file_size"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#file_suffix","text":"Restituisce il suffisso (estensione) dal percorso di un file. Sintassi: file_suffix( path ) Argomenti: path Percorso file Esempi: file_suffix('/home/qgis/data/country_boundaries.shp') \u2192 'shp'","title":"file_suffix"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#is_directory","text":"Restituisce vero se un percorso corrisponde ad una directory. Sintassi: is_directory( path ) Argomenti: path Percorso file Esempi: is_directory('/home/qgis/data/country_boundaries.shp') \u2192 falso is_directory('/home/qgis/data/') \u2192 vero","title":"is_directory"},{"location":"gr_funzioni/file_e_percorsi/file_e_percorsi_unico/#is_file","text":"Restituisce vero se un percorso corrisponde ad un file. Sintassi: is_file( path ) Argomenti: path Percorso file Esempi: is_file('/home/qgis/data/country_boundaries.shp') \u2192 vero is_file('/home/qgis/data/') \u2192 falso","title":"is_file"},{"location":"gr_funzioni/form/form_unico/","tags":["gruppo"],"text":"Form \u21b5 Questo gruppo contiene funzioni che sono disponibili nel contesto modulo attributi. Per esempio, in impostazioni campo widget. Il gruppo \u00e8 visibile solo per il Filtro del Tipo Widget Relazione Valore . GUI/UI/Forms \u21b5 a partire da >= QGIS 3.14 form: https://github.com/qgis/QGIS/pull/34827 current_feature; current_geometry; current_parent_feature; current_parent_geometry; currente_parent_value; current_value; Form drill-down \u21b5 a partire da >= QGIS 3.2 WIDGET Value Relation (Relazione valore): consente l'implementazione di filtri complessi e dinamici all'interno di moduli di attributo QGIS. La funzionalit\u00e0 pu\u00f2 essere utilizzata per implementare moduli \"drill-down\" all'interno di QGIS, in cui i valori disponibili in un campo dipendono dai valori di altri campi: Questa funzionalit\u00e0 consente agli utenti di creare espressioni \"value-relation\" basate sul valore corrente di un altro campo nella stessa form. Quando l'utente modifica il valore di un campo, le scelte disponibili in tutti i campi correlati vengono filtrate in modo che corrispondano al nuovo valore, consentendo una strategia di filtraggio gerarchica (drill down o cascading) all'interno di un modulo o nella tabella degli attributi. qui un video di Alessandro Pasotti Le espressioni implementate per realizzare quanto descritto sopra sono tre, una funzione e due variabili: current_value() ; Restituisce il valore corrente non salvato di un campo nel modulo o riga della tabella attualmente in fase di modifica. Questo sar\u00e0 diverso dai valori attuali dell'attributo della funzione per le funzioni che sono attualmente in fase di modifica o che non sono ancora state aggiunte a un livello. currente_feature ; Rappresenta la funzione attualmente in fase di modifica nel modulo o nella riga della tabella. Pu\u00f2 essere utilizzato in un contesto modulo / riga per filtrare le funzionalit\u00e0 correlate. current_geometry ; Rappresenta la geometria della feature attualmente in fase di modifica nel modulo o nella riga della tabella. Pu\u00f2 essere utilizzato in un contesto modulo / riga per filtrare le funzionalit\u00e0 correlate. intersects( buffer(@current_geometry ,1000),$geometry) NB: nella cartella esempi trovate un geopackage con i dati e un progetto esempio video:","title":"Form"},{"location":"gr_funzioni/form/form_unico/#form","text":"Questo gruppo contiene funzioni che sono disponibili nel contesto modulo attributi. Per esempio, in impostazioni campo widget. Il gruppo \u00e8 visibile solo per il Filtro del Tipo Widget Relazione Valore .","title":"Form"},{"location":"gr_funzioni/form/form_unico/#guiuiforms","text":"a partire da >= QGIS 3.14 form: https://github.com/qgis/QGIS/pull/34827 current_feature; current_geometry; current_parent_feature; current_parent_geometry; currente_parent_value; current_value;","title":"GUI/UI/Forms"},{"location":"gr_funzioni/form/form_unico/#form-drill-down","text":"a partire da >= QGIS 3.2 WIDGET Value Relation (Relazione valore): consente l'implementazione di filtri complessi e dinamici all'interno di moduli di attributo QGIS. La funzionalit\u00e0 pu\u00f2 essere utilizzata per implementare moduli \"drill-down\" all'interno di QGIS, in cui i valori disponibili in un campo dipendono dai valori di altri campi: Questa funzionalit\u00e0 consente agli utenti di creare espressioni \"value-relation\" basate sul valore corrente di un altro campo nella stessa form. Quando l'utente modifica il valore di un campo, le scelte disponibili in tutti i campi correlati vengono filtrate in modo che corrispondano al nuovo valore, consentendo una strategia di filtraggio gerarchica (drill down o cascading) all'interno di un modulo o nella tabella degli attributi. qui un video di Alessandro Pasotti Le espressioni implementate per realizzare quanto descritto sopra sono tre, una funzione e due variabili: current_value() ; Restituisce il valore corrente non salvato di un campo nel modulo o riga della tabella attualmente in fase di modifica. Questo sar\u00e0 diverso dai valori attuali dell'attributo della funzione per le funzioni che sono attualmente in fase di modifica o che non sono ancora state aggiunte a un livello. currente_feature ; Rappresenta la funzione attualmente in fase di modifica nel modulo o nella riga della tabella. Pu\u00f2 essere utilizzato in un contesto modulo / riga per filtrare le funzionalit\u00e0 correlate. current_geometry ; Rappresenta la geometria della feature attualmente in fase di modifica nel modulo o nella riga della tabella. Pu\u00f2 essere utilizzato in un contesto modulo / riga per filtrare le funzionalit\u00e0 correlate. intersects( buffer(@current_geometry ,1000),$geometry) NB: nella cartella esempi trovate un geopackage con i dati e un progetto esempio video:","title":"Form drill-down"},{"location":"gr_funzioni/generale/generale_unico/","tags":["gruppo"],"text":"Gruppo Generale \u21b5 Abstract Questo gruppo contiene un assortimento di funzioni generiche. env \u21b5 Ottiene una variabile di ambiente e restituisce il suo contenuto come stringa. Se non \u00e8 possibile trovare la variabile, sar\u00e0 restituito NULL . Questo \u00e8 utile per specifiche configurazioni di sistema come lettere del disco o prefissi di percorso. La definizione di variabili di ambiente dipende dal sistema operativo, per favore verifica con il tuo amministratore di sistema o con la documentazione del sistema operativo come ci\u00f2 possa essere impostato. Sintassi: env( name ) Argomento: name Nome della variabile d'ambiente che deve essere richiamata Esempi: env( 'LANG' ) \u2192 'en_US.UTF-8' env( 'MIO_PREFISSO_VARIABILE' ) \u2192 'Z:' env( 'I_DO_NOT_EXIST' ) \u2192 NULL env( 'COMPUTERNAME') \u2192 LENOVO_PC (\u00e8 il mio notebook) env('home') \u2192 'C:\\Users\\Salvatore' alcune varibili li trovate qui: Impostazioni | Opzioni | Sistema eval \u21b5 Valuta una espressione che viene passata in una stringa. Molto utile per espandere parametri dinamici passati come variabili contestuali o campi. Sintassi: eval( expression ) Argomento: expression una stringa espressione Esempi: eval(''nice'') \u2192 'nice' eval(@expression_var) \u2192 [qualsiasi risultato che dalla valutazione di @expression_var potrebbe assumere...] eval( '@row_number +10') \u2192 11 eval_template \u21b5 Valuta un modello che viene passato in una stringa. Molto utile per espandere parametri dinamici passati come variabili contestuali o campi. Sintassi: eval_template( template ) Argomento: template una stringa modello Esempi: eval_template('QGIS [% upper(\\'rocks\\') %]') \u2192 QGIS ROCKS mime_type \u21b5 Restituisce il tipo mime dei dati binari. Sintassi: mime_type( bytes ) Argomento: bytes I dati binari Esempi: mime_type('<html><body></body></html>') \u2192 text/html mime_type(from_base64('R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAIAOw==')) \u2192 image/gif var \u21b5 Restituisce il valore memorizzato in una variabile specificata. Sintassi: var( name ) Argomento: name un nome variabile Esempi: var('qgis_version') \u2192 '3.0.2-Girona' var('user_account_name') \u2192 'Salvatore' Osservazioni Come argomento va usato il nome della variabile senza la chioccila altrimenti non funziona. with_variable \u21b5 Questa funzione imposta una variabile per qualunque codice di espressione che sar\u00e0 fornita come argomento terzo. Questo \u00e8 utile solamente per espressioni complicate, in cui lo stesso valore calcolato deve essere usato in posti differenti. Sintassi: with_variable( name , value , expression ) Argomento: name il nome della variabile da impostare value il valore da impostare expression l'espressione per la quale la variabile sar\u00e0 disponibile Esempi: with_variable('my_sum', 1 + 2 + 3, @my_sum * 2 + @my_sum * 5) \u2192 42 with_variable('duepigreco',2*3.1415, @duepigreco * 2 +@duepigreco*5 ) \u2192 43.981","title":"Generale"},{"location":"gr_funzioni/generale/generale_unico/#gruppo-generale","text":"Abstract Questo gruppo contiene un assortimento di funzioni generiche.","title":"Gruppo Generale"},{"location":"gr_funzioni/generale/generale_unico/#env","text":"Ottiene una variabile di ambiente e restituisce il suo contenuto come stringa. Se non \u00e8 possibile trovare la variabile, sar\u00e0 restituito NULL . Questo \u00e8 utile per specifiche configurazioni di sistema come lettere del disco o prefissi di percorso. La definizione di variabili di ambiente dipende dal sistema operativo, per favore verifica con il tuo amministratore di sistema o con la documentazione del sistema operativo come ci\u00f2 possa essere impostato. Sintassi: env( name ) Argomento: name Nome della variabile d'ambiente che deve essere richiamata Esempi: env( 'LANG' ) \u2192 'en_US.UTF-8' env( 'MIO_PREFISSO_VARIABILE' ) \u2192 'Z:' env( 'I_DO_NOT_EXIST' ) \u2192 NULL env( 'COMPUTERNAME') \u2192 LENOVO_PC (\u00e8 il mio notebook) env('home') \u2192 'C:\\Users\\Salvatore' alcune varibili li trovate qui: Impostazioni | Opzioni | Sistema","title":"env"},{"location":"gr_funzioni/generale/generale_unico/#eval","text":"Valuta una espressione che viene passata in una stringa. Molto utile per espandere parametri dinamici passati come variabili contestuali o campi. Sintassi: eval( expression ) Argomento: expression una stringa espressione Esempi: eval(''nice'') \u2192 'nice' eval(@expression_var) \u2192 [qualsiasi risultato che dalla valutazione di @expression_var potrebbe assumere...] eval( '@row_number +10') \u2192 11","title":"eval"},{"location":"gr_funzioni/generale/generale_unico/#eval_template","text":"Valuta un modello che viene passato in una stringa. Molto utile per espandere parametri dinamici passati come variabili contestuali o campi. Sintassi: eval_template( template ) Argomento: template una stringa modello Esempi: eval_template('QGIS [% upper(\\'rocks\\') %]') \u2192 QGIS ROCKS","title":"eval_template"},{"location":"gr_funzioni/generale/generale_unico/#mime_type","text":"Restituisce il tipo mime dei dati binari. Sintassi: mime_type( bytes ) Argomento: bytes I dati binari Esempi: mime_type('<html><body></body></html>') \u2192 text/html mime_type(from_base64('R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAIAOw==')) \u2192 image/gif","title":"mime_type"},{"location":"gr_funzioni/generale/generale_unico/#var","text":"Restituisce il valore memorizzato in una variabile specificata. Sintassi: var( name ) Argomento: name un nome variabile Esempi: var('qgis_version') \u2192 '3.0.2-Girona' var('user_account_name') \u2192 'Salvatore' Osservazioni Come argomento va usato il nome della variabile senza la chioccila altrimenti non funziona.","title":"var"},{"location":"gr_funzioni/generale/generale_unico/#with_variable","text":"Questa funzione imposta una variabile per qualunque codice di espressione che sar\u00e0 fornita come argomento terzo. Questo \u00e8 utile solamente per espressioni complicate, in cui lo stesso valore calcolato deve essere usato in posti differenti. Sintassi: with_variable( name , value , expression ) Argomento: name il nome della variabile da impostare value il valore da impostare expression l'espressione per la quale la variabile sar\u00e0 disponibile Esempi: with_variable('my_sum', 1 + 2 + 3, @my_sum * 2 + @my_sum * 5) \u2192 42 with_variable('duepigreco',2*3.1415, @duepigreco * 2 +@duepigreco*5 ) \u2192 43.981","title":"with_variable"},{"location":"gr_funzioni/geometria/geometria_unico/","tags":["gruppo"],"text":"Gruppo Geometria \u21b5 Abstract Questo gruppo contiene funzioni che operano sugli oggetti geometrici es: lunghezza , area . affine_transform \u21b5 Restituisce la geometria dopo una trasformazione affine. I calcoli sono nel sistema di riferimento spaziale di questa geometria. Le operazioni vengono eseguite in un ordine di scala, rotazione, traslazione. Se c'\u00e8 un offset Z o M ma la coordinata non \u00e8 presente nella geometria, verr\u00e0 aggiunta. Sintassi affine_transform( geometry , deltaX , deltaY , rotationZ , scaleX , scaleY [, deltaZ=0 ][, deltaM=0 ][, scaleZ=1 ][, scaleM=1 ]) [ ] indica componenti opzionali Argomenti geometry una geometria deltaX x-axis traslazione deltaY y-axis traslazione rotationZ rotation around z-axis in degrees counter-clockwise scaleX _ x-axis fattore di scala scaleY y-axis fattore di scala deltaZ z-axis traslazione deltaM m-axis traslazione scaleZ z-axis fattore di scala scaleM m-axis fattore di scala Esempi geom_to_wkt(affine_transform(geom_from_wkt('LINESTRING(1 1, 2 2)'), 2, 2, 0, 1, 1)) \u2192 'LineString (3 3, 4 4)' geom_to_wkt(affine_transform(geom_from_wkt('POLYGON((0 0, 0 3, 2 2, 0 0))'), 0, 0, -90, 1, 2)) \u2192 'Polygon ((0 0, 6 0, 4 -2, 0 0))' geom_to_wkt(affine_transform(geom_from_wkt('POINT(3 1)'), 0, 0, 0, 1, 1, 5, 0)) \u2192 'PointZ (3 1 5)' Osservazione La funzione trasforma le geometrie a partire dall'origine delle coordinate del sistema di riferimento del layer, sotto un esempio: affine_transform( geometry:= $geometry, deltaX:=0, deltaY:=0, rotationZ:=45, scaleX:=1, scaleY:=1) $area \u21b5 Restituisce l'area della geometria corrente. L'area calcolata da questa funzione rispetta sia le impostazioni dell'ellissoide del progetto corrente sia delle unit\u00e0 di misura. Per esempio, se \u00e8 stato impostato un ellissoide per il progetto allora l'area calcolata sar\u00e0 ellisoidica altrimenti se non \u00e8 stato impostato alcun ellissoide l'area calcolata sar\u00e0 planimetrica. Sintassi: $area Esempi: $area \u2192 131196498,619546 Nota bene: Se il SR del progetto in cui si sta calcolando l'area ( $area ) fosse un sistema proiettato (es:EPSG 3003/4; 32632/33/34 ecc..) allora l'unit\u00e0 di misura sarebbe il metro, invece se il SR del progetto fosse EPSG 4326, cio\u00e8 un sistema geografico, allora l'unit\u00e0 di misura dell'area sarebbe gradi e quindi poco comprensibile e valori piccoli (0.00001). Osservazione: in generale $area <> area($geometry) da >= QGIS 3.20 le misure legate all'uso degli ellissoidi, per esempio $area e $length , utilizzano lo stesso metodo di PostGIS ( le routine GeographicLib ) quindi le misure risulteranno pi\u00f9 'precise' rispetto alle versioni precedenti di QGIS. (vedi: discussione , feature request , pull request ). $geometry \u21b5 Restituisce la geometria dell'elemento attuale. Pu\u00f2 essere usato per il processamento con altre funzioni. ATTENZIONE : Questa funzione \u00e8 deprecata (a partire da QGIS 3.28.0 Firenze ). Si consiglia di utilizzare la variabile sostitutiva @geometry NB: $geometry richiama l'attributo geometria!!! Sintassi: $geometry Esempi: geomToWKT( $geometry ) \u2192 POINT(6 50) area($geoamtry) \u2192 1234567.89 perimeter($geometry) \u2192 25689.25 area(@geoamtry) \u2192 1234567.89 Osservazioni: il $ indica che \u00e8 relativo all'elemento corrente e non ha bisogno di argomenti. $length \u21b5 Restituisce la lunghezza di una linestring. Se hai bisogno della lunghezza del bordo di un poligono, utilizza invece $perimeter . La lunghezza calcolata da questa funzione rispetta le impostazioni sia dell'ellissoide sia delle unit\u00e0 di misura del progetto corrente. Per esempio, se \u00e8 stato impostato un ellissoide per il progetto allora la lunghezza calcolata sar\u00e0 ellisoidica altrimenti se non \u00e8 stato impostato alcun ellissoide la lunghezza calcolata sar\u00e0 planimetrica. Sintassi: $length Esempi: $length \u2192 42.4711 Osservazione: Come evidenziano nella definizione della funzione, $length calcola la lunghezza rispettando le impostazioni di progetto: Occorre cambiare entrambe le impostazioni, sia quelle dell'ellissoide \u2192 'None/Planimetric' sia le Unit\u00e0 di misura per le distanze' \u2192 Gradi Queste modofiche non valgono per l'etichettatura, la lunghezza sar\u00e0 quella relativa alla geometria e quindi al suo SR. da >= QGIS 3.20 le misure legate all'uso degli ellissoidi, per esempio $area e $length , utilizzano lo stesso metodo di PostGIS ( le routine GeographicLib ) quindi le misure risulteranno pi\u00f9 'precise' rispetto alle versioni precedenti di QGIS. (vedi: discussione , feature request , pull request ). Nota: il $ indica che \u00e8 relativo all'elemento corrente e non ha bisogno di argomenti. $perimeter \u21b5 Restituisce la lunghezza del perimetro della geometria corrente. Il perimetro calcolato da questa funzione rispetta le impostazioni sia dell'ellissoide sia delle unit\u00e0 di misura del progetto corrente. Per esempio, se \u00e8 stato impostato un ellissoide per il progetto allora il perimetro calcolato sar\u00e0 ellisoidico altrimenti se non \u00e8 stato impostato alcun ellissoide il perimetro calcolato sar\u00e0 planimetrico. Sintassi: $perimeter Esempi: $perimeter \u2192 2545897.26 Osservazione: Si utilizza SOLO per i poligoni, nel caso di feature lineari $length da >= QGIS 3.20 le misure legate all'uso degli ellissoidi, per esempio $area e $length , utilizzano lo stesso metodo di PostGIS ( le routine GeographicLib ) quindi le misure risulteranno pi\u00f9 'precise' rispetto alle versioni precedenti di QGIS. (vedi: discussione , feature request , pull request ). Nota: il $ indica che \u00e8 relativo all'elemento corrente e non ha bisogno di argomenti. $x \u21b5 Restituisce la coordinata x della geometria corrente. Sintassi: $x Esempi: $x \u2192 12.2568971 Osservazione: La funzione $x restituisce la coordinata x della geometria corrente purch\u00e8 sia un POINT altrimenti restituisce NULL (vedi screenshot) Per ottenere le coordinate x o y occorre utilizzare una combinazione di funzioni ed: x($geometry) che vale per qualunque tipologia di geometria (point, linestring, polygon) $x_at \u21b5 Recupera una coordinata x per la geometria dell'elemento corrente. Sintassi: $x_at( i ) Argomenti: i indice del punto di una linea (indici partono da 0; valori negativi si applicano dall'ultimo indice, partendo da -1) Esempi: $x_at(1) \u2192 12.6882843 Osservazioni: Le lineastring hanno un verso e quindi l'indice 0 indica il primo vertice mentre indici negativi significano che la conta inizia dalla l'ultimo vertice: -10 significa il 10-mo vertice partendo dall'ultimo vertice. $y \u21b5 Restituisce la coordinata y della geometria corrente. Sintassi: $y Esempi: $y \u2192 12.2568971 Osservazione: La funzione $y restituisce la coordinata y della geometria corrente purch\u00e8 sia un POINT altrimenti restituisce NULL (vedi screenshot) Per ottenere le coordinate x o y occorre utilizzare una combinazione di funzioni es: y($geometry) che vale per qualunque tipologia di geometria (point, linestring, polygon) $y_at \u21b5 Recupera una coordinata y per la geometria dell'elemento corrente. Sintassi: $y_at( i ) Argomenti: i indice del punto di una linea (indici partono da 0; valori negativi si applicano dall'ultimo indice, partendo da -1) Esempi: $y_at(1) \u2192 2 Osservazioni: Le lineastring hanno un verso e quindi l'indice 0 indica il primo vertice mentre indici negativi significano che la conta inizia dalla l'ultimo vertice: -10 significa il 10-mo vertice partendo dall'ultimo vertice. angle_at_vertex \u21b5 Restituisce l'angolo della bisettrice (angolo medio) della geometria per un vertice specifico di una geometria di tipo linestring. Gli angoli sono in gradi in senso orario dal nord. Sintassi: angle_at_vertex( geometry , vertex ) Argomenti: geometry una geometria di tipo linestring vertex indice vertice, partendo da 0 Esempi: angle_at_vertex(geometry:=geom_from_wkt('LineString(0 0, 10 0, 10 10)'),vertex:=1) \u2192 45.0 Osservazione: Il primo ed ultimo vertice di una lineastring aperta la funzione restituisce il valore dell'angolo e non la bisettrice. apply_dash_pattern \u21b5 Applica un modello di trattino ad una geometria, restituendo una geometria MultiLineString che \u00e8 la geometria di input rappresentata lungo ogni linea/anello con il modello specificato. Sintassi: apply_dash_pattern( geometry , pattern , [, start_rule=no_rule ] , [, end_rule=no_rule ] , [, adjustment=both ] , [, pattern_offset=0 ] ) Argomenti: geometry una geometria (accetta (multi)linee o (multi)poligoni). pattern modello di trattino, come un array di numeri che rappresentano la lunghezza dei trattini e degli spazi. Deve contenere un numero pari di elementi. start_rule regola opzionale per vincolare l'inizio del modello. I valori validi sono 'no_rule', 'full_dash', 'half_dash', 'full_gap', 'half_gap'. end_rule regola facoltativa per vincolare la fine del pattern. I valori validi sono 'no_rule', 'full_dash', 'half_dash', 'full_gap', 'half_gap'. adjustment regola opzionale atta a specificare quale parte dei modelli sono adattate alle regole del modello desiderato. I valori validi sono 'both', 'dash', 'gap'. pattern_offset Distanza opzionale che indica una distanza specifica lungo il modello da cui iniziare. Esempi: geom_to_wkt(apply_dash_pattern(geom_from_wkt('LINESTRING(1 1, 10 1)'), array(3, 1))) \u2192 MultiLineString ((1 1, 4 1),(5 1, 8 1),(9 1, 10 1, 10 1)) geom_to_wkt(apply_dash_pattern(geom_from_wkt('LINESTRING(1 1, 10 1)'), array(3, 1), start_rule:='half_dash')) \u2192 MultiLineString ((1 1, 2.5 1),(3.5 1, 6.5 1),(7.5 1, 10 1, 10 1)) area \u21b5 Restituisce l'area di un oggetto a geometria poligonale. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di detta geometria, e l'unit\u00e0 di misura dell'area restituita \u00e8 conforme all'unit\u00e0 di misura del SR. Ci\u00f2 differisce dal calcolo eseguito dalla funzione $area, la quale esegue calcoli ellisoidici basati sull'ellissoide del progetto e sulle impostazioni delle unit\u00e0 di misura dell'area. Sintassi: area( geometry ) Argomenti: geometry oggetto geometria poligono Esempi: area($geometry) \u2192 1234.567 Nota bene: Se il SR del layer in cui si sta calcolando l'area ( area() ) fosse un sistema proiettato (es:EPSG 3003/4; 32632/33/34 ecc..) l'unit\u00e0 di misura sarebbe il metro, invece se il SR del layer fosse EPSG 4326, cio\u00e8 un sistema geografico, allora l'unit\u00e0 di misura dell'area sarebbe in gradi e quindi poco comprensibile e valori piccoli. Osservazioni: in generale area($geometry) <> $area Azimuth \u21b5 Restituisce l'azimut dal nord quale angolo in radianti misurato in senso orario dalla verticale del punto_a al punto_b. Sintassi: azimuth( point_a , point_b ) Argomenti: point_a geometria punto point_b geometria punto Esempi: degrees( azimuth( make_point(25, 45), make_point(75, 100) ) ) \u2192 42.273689 degrees( azimuth( make_point(75, 100), make_point(25,45) ) ) \u2192 222.273689 Osservazione: Azimuth per definizione restituisce un angolo in radianti, per trasformarlo in gradi usare la funzione degrees() boundary \u21b5 Restituisce l'area minima della combinazione dei confini della geometria (cio\u00e8 il confine topologico della geometria). Per esempio, una geometria poligonale avr\u00e0 un confine costituito dalle linee di ogni anello nel poligono. Alcuni tipi di geometrie non hanno confini, es collezioni di punti o geometrie e pertanto verr\u00e0 restituito NULL . Sintassi: boundary( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt(boundary(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))'))) \u2192 'LineString(1 1,0 0,-1 1,1 1)' geom_to_wkt(boundary(geom_from_wkt('LineString(1 1,0 0,-1 1)'))) \u2192 'MultiPoint ((1 1),(-1 1))' Osservazioni: funzione molto utile per la tematizzazione aggiungendo un nuovo layer con geometry generator bounds \u21b5 Restituisce la geometria che rappresenta il perimetro di delimitazione di una geometria in ingresso. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: bounds( geometry ) Argomenti: geometry una geometria Esempi: bounds($geometry) \u2192 perimetro di delimitazione dell'elemento geometrico corrente geom_to_wkt(bounds(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))'))) \u2192 'Polygon ((-1 0, 1 0, 1 1, -1 1, -1 0))' Osservazioni: funzione molto utile per la tematizzazione aggiungendo un nuovo layer con geometry generator bounds_height \u21b5 Restituisce l'altezza del perimetro di delimitazione di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: bounds_height( geometry ) Argomenti: geometry una geometria Esempi: bounds_height($geometry) \u2192 altezza del perimetro di delimitazione dell'elemento geometrico corrente bounds_height(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))')) \u2192 1 Osservazioni: La funzione restituisce un numero che corrisponde all'altezza del rettangolo di ingombro di una geometria. bounds_width \u21b5 Restituisce la larghezza del perimetro di delimitazione di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: bounds_width( geometry ) Argomenti: geometry una geometria Esempi: bounds_width($geometry) \u2192 larghezza del perimetro di delimitazione di $geometry Osservazioni: La funzione restituisce un numero che corrisponde alla larghezza del rettangolo di ingombro di una geometria. buffer \u21b5 Restituisce una geometria che rappresenta tutti i punti la cui distanza dalla geometria \u00e8 minore o uguale alla distanza inserita. I calcoli vengono effettuati nel sistema di riferimento spaziale della geometria. Sintassi: buffer( geometry , distance [, segments=8 ]) Argomenti: geometry una geometria distance distanza buffer nelle unit\u00e0 del layer segments numero di segmenti da usare per rappresentare un quarto di cerchio quando \u00e8 utilizzato uno stile di unione arrotondato. Un numero grande risulta in un buffer pi\u00f9 morbido, con pi\u00f9 nodi. Esempi: buffer($geometry, 10.5) \u2192 poligono di $geometry bufferizzato di 10.5 unit\u00e0 Danger Utilizzando SR proiettati l'unit\u00e0 di misura \u00e8 il metro, mentre, per SR geografici \u00e8 il grado, quindi attenzione al valore della distanza. Nota bene: La Funzione restituisce SEMPRE un poligono sia per geometry POINT , LINESTRING o **POLYGON buffer_by_m \u21b5 Crea un buffer lungo una geometria linestring in cui il diametro del buffer varia in base ai valori m nei vertici della linea. Sintassi: buffer_by_m( geometry , segments ) Argomenti: geometry la geometria deve essere una (multi) geometria linestring con valori m. segments numero di segmenti per approssimare le curve del quarto di cerchio nel buffer Esempi: buffer_by_m(geometry:=geom_from_wkt('LINESTRINGM(1 2 0.5, 4 2 0.2)'),segments:=8) \u2192 Un buffer di larghezza variabile che inizia con un diametro di 0,5 e termina con un diametro di 0,2 lungo la linea. relativa all'esempio di sopra: Osservazioni: QGIS - feature centroid \u21b5 Restituisce il centro geometrico di una geometria. Sintassi: centroid( geometry ) Argomenti: geometry una geometria Esempi: centroid($geometry) \u2192 una geometria punto Osservazioni: La Funzione restituisce SEMPRE una geometry **POINT close_line \u21b5 Restituisce una linestring chiusa della linestring di input aggiungendo il primo punto alla fine della linea, se non \u00e8 gi\u00e0 chiusa. Se la geometria non \u00e8 una linestring o una MultiLinestring, il risultato sar\u00e0 NULL. Sintassi: close_line( geometry ) Argomenti: geometry una geometria linestring Esempi: geom_to_wkt(close_line(geom_from_wkt('LINESTRING(0 0, 1 0, 1 1)'))) \u2192 LineString (0 0, 1 0, 1 1, 0 0) geom_to_wkt(close_line(geom_from_wkt('LINESTRING(0 0, 1 0, 1 1, 0 0)'))) \u2192 LineString (0 0, 1 0, 1 1, 0 0) closest_point \u21b5 Restituisce il punto sulla geometria1 che \u00e8 pi\u00f9 vicino alla geometria2. Sintassi: closest_point( geometry1 , _ geometry2 ) Argomenti: geometry1 geometria sulla quale cercare il punto pi\u00f9 vicino geometry geometria dalla quale cercare il punto pi\u00f9 vicino Esempi: geom_to_wkt(closest_point(geom_from_wkt('LINESTRING (20 80, 98 190, 110 180, 50 75 )'),geom_from_wkt('POINT(100 100)'))) \u2192 Point(73.0769 115.384) Osservazioni: Utilizzando il geometry generator per i temi (il layer strade \u00e8 una unica feature): closest_point( geometry(get_feature('strade', 'reg',19)),$geometry) Gif animata: geometry 1 \u00e8 la rete stradale; geometry 2 sono i punti; in rosso i closestpoint collect_geometries \u21b5 Raccoglie un set di geometrie in un oggetto geometria multiparte. Variante geometry \u21b5 Sintassi: collect_geometries( geometry1 , geometry2 ...) Argomenti: geometry geometria sulla quale cercare il punto pi\u00f9 vicino Esempi: geom_to_wkt(collect_geometries(make_point(1,2), make_point(3,4), make_point(5,6))) \u2192 'MultiPoint ((1 2),(3 4),(5 6))' Variante con array \u21b5 Sintassi: collect_geometries( array ) Argomenti: array array con oggetti geometrici Esempi: geom_to_wkt(collect_geometries(array(make_point(1,2), make_point(3,4), make_point(5,6)))) \u2192 'MultiPoint ((1 2),(3 4),(5 6))' Osservazioni: combine \u21b5 Restituisce la combinazione di due geometrie. Sintassi: combine( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( combine( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 2 1)' ) ) ) \u2192 MULTILINESTRING((4 4, 2 1), (3 3, 4 4), (4 4, 5 5)) geom_to_wkt( combine( geom_from_wkt( 'LINESTRING(3 3, 4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 6 6, 2 1)' ) ) ) \u2192 LINESTRING(3 3, 4 4, 6 6, 2 1) concave_hull \u21b5 >= QGIS 3.18 Firenze e Geos 3.11+ Restituisce un poligono possibilmente concavo che contiene tutti i punti della geometria Sintassi: concave_hull( geometry , target_percent [, allow_holes ]) [ ] indica componenti opzionali Argomenti: geometry una geometria target_percent la percentuale di area del poligono convesso a cui la soluzione cerca di avvicinarsi. Una percentuale-obbiettivo di 1 d\u00e0 lo stesso risultato del poligono convesso. Una percentuale_obbiettivo compresa tra 0 e 0.99 produce un risultato che dovrebbe avere un'area inferiore a quella del poligono convesso. allow_holes argomento opzionale che specifica se consentire i buchi nella geometria di output. L'impostazione predefinita \u00e8 FALSE; impostare TRUE per evitare di includere i buchi nella geometria di output. Esempi: geom_to_wkt(concave_hull(geom_from_wkt('MULTILINESTRING((106 164,30 112,74 70,82 112,130 94,130 62,122 40,156 32,162 76,172 88),(132 178,134 148,128 136,96 128,132 108,150 130,170 142,174 110,156 96,158 90,158 88),(22 64,66 28,94 38,94 68,114 76,112 30,132 10,168 18,178 34,186 52,184 74,190 100,190 122,182 148,178 170,176 184,156 164,146 178,132 186,92 182,56 158,36 150,62 150,76 128,88 118))'), 0.99)) \u2192 'Polygon ((30 112, 36 150, 92 182, 132 186, 176 184, 190 122, 190 100, 186 52, 178 34, 168 18, 132 10, 112 30, 66 28, 22 64, 30 112))' \u21b5 contains \u21b5 Verifica se una geometria ne contiene un'altra. Restituisce vero se e solo se nessun punto di geometry2 giace all'esterno di geometry1 e almeno un punto dell'interno di geometry2 si trova all'interno di geometry1. Sintassi: contains( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: contains( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ), geom_from_wkt( 'POINT(0.5 0.5 )' ) ) \u2192 vero contains( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 falso Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): contains(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry) dove: geometry1 \u00e8 geometry(get_feature( 'province_rt_rt','pk_uid','46')) geometry2 \u00e8 $geometry seleziono tutti i comuni contains (contenuti) nella provincia con pk_uid 46 (Lucca) PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli contenuti nella provincia di Lucca). NOT contains(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry) convex_hull \u21b5 Restituisce il poligono convesso di una geometria. Rappresenta la minima geometria convessa che racchiude tutte le geometria contenute nell'insieme. Sintassi: convex_hull( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt( convex_hull( geom_from_wkt( 'LINESTRING(3 3, 4 4, 4 10)' ) ) ) \u2192 POLYGON((3 3,4 10,4 4,3 3)) Osservazioni: La funzione restituisce sempre un poligono. crosses \u21b5 Verifica se una geometria interseca un'altra. Restituisce vero (1) se le geometrie interessate hanno qualche, ma non tutti, punto interno in comune. Sintassi: crosses( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: crosses( geom_from_wkt( 'LINESTRING(3 5, 4 4, 5 3)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 vero crosses( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 falso Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): crosses(geometry(get_feature( 'fiume_arno','nome','ARNO')), $geometry) dove: geometry1 \u00e8 geometry(get_feature( 'fiume_arno','nome','ARNO')) geometry2 \u00e8 $geometry seleziono tutti i comuni crosses (attraversati) dal fiume ARNO PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli attraversati dal fiume ARNO). NOT crosses(geometry(get_feature( 'fiume_arno','nome','ARNO')), $geometry) densify_by_count \u21b5 Prende una geometria di un livello poligonale o lineare e ne genera una nuova in cui le geometrie hanno un numero di vertici maggiore di quella originale. Sintassi: densify_by_count( geometry , _ vertices ) Argomenti: geometry una geometria (accetta (multi)linee o (multi)poligoni). vertices numero di vertici da aggiungere (per segmento) Esempi: geom_to_wkt(densify_by_count(geom_from_wkt('LINESTRING(1 1, 10 1)'), 3)) \u2192 LineString (1 1, 3.25 1, 5.5 1, 7.75 1, 10 1) densify_by_distance \u21b5 Prende una geometria di un livello poligono o lineare e ne genera una nuova in cui le geometrie sono densificate aggiungendo ulteriori vertici sui bordi che hanno una distanza massima dell'intervallo di distanza specificato. Sintassi: densify_by_distance( geometry , _ distance ) Argomenti: geometry una geometria (accetta (multi)linee o (multi)poligoni). distance distanza massima dell'intervallo tra i vertici nella geometria in uscita Esempi: geom_to_wkt(densify_by_distance(geom_from_wkt('LINESTRING(1 1, 10 1)'), 4)) \u2192 LineString (1 1, 4 1, 7 1, 10 1) difference \u21b5 Restituisce una geometria che rappresenta la porzione della geometry_a che non interseca la geometry_b . Sintassi: difference( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( difference( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4)' ) ) ) \u2192 LINESTRING(4 4, 5 5) Espressione: Espressione -- differenza linea a - linea b difference( make_line( -- linea a start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))), make_line( -- linea b start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)) ) -- NB: -- \u00e8 importante ordine delle geometrie -- a - b \u00e8 diverso da b - a Espressione -- differenza linea b - linea a difference( make_line( -- linea b start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)), make_line( -- linea a start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))) ) -- NB: -- \u00e8 importante ordine delle geometrie -- a - b \u00e8 diverso da b - a Prova tu Dati e progetto qgz Esempio di sopra: disjoint \u21b5 Controlla qualora una geometria non ne interseca spazialmente un'altra. Restituisce true (1) se le geometrie non condividono nessuno spazio comune. Sintassi: disjoint( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria * geometry2 una geometria Esempi: disjoint( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0 ))' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 vero disjoint( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'POINT(4 4)' )) \u2192 falso Osservazione: Vero = 1; Falso= 0 Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): disjoint(geometry(get_feature( 'fiume_arno','nome','ARNO')), $geometry) dove: geometry1 \u00e8 geometry(get_feature( 'fiume_arno','nome','ARNO')) geometry2 \u00e8 $geometry seleziono tutti i comuni disjoint (disgiunti) dal fiume ARNO distance \u21b5 Restituisce la distanza minima (basata su riferimento spaziale) tra due geometrie in unit\u00e0 proiettate. Sintassi: distance( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: distance( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(4 8)' ) ) \u2192 4 -- distance_to_vertex \u21b5 Restituisce la distanza lungo una geometria ad un vertice specificato. Sintassi: distance_to_vertex( geometry , vertex ) Argomenti: geometry una geometria di tipo linestring vertex indice vertice, partendo da 0; se il valore \u00e8 negativo, l'indice del vertice selezionato sar\u00e0 il suo conteggio totale meno il valore assoluto Esempi: distance_to_vertex(geometry:=geom_from_wkt('LineString(0 0, 10 0, 10 10)'),vertex:=1) \u2192 10.0 -- esempio di sopra: end_point \u21b5 Restituisce l'ultimo nodo di una geometria. Sintassi: end_point( geometry ) Argomenti: geometry oggetto geometria Esempi: geom_to_wkt(end_point(geom_from_wkt('LINESTRING(4 0, 4 2, 0 2)'))) \u2192 'Point (0 2)' -- End_point di geometria poligonale: End_point di geometria lineare: exif_geotag \u21b5 Crea una geometria puntuale dai geotag dell'exif di un file di immagine. Sintassi exif_geotag( path ) Descrizione path Un percorso di file immagine. Esempi geom_to_wkt(exif_geotag('/my/photo.jpg')) \u2192 'Point (2 4)' extend \u21b5 Estende l'inizio e la fine di una geometria di tipo linestring di una quantit\u00e0 specificata. Le linee sono estese usando la direzione di immersione del primo e dell'ultimo segmento nella linea. Le distanze sono espresse nel SR di tale geometria. Sintassi: extend( geometry , start_distance , end_distance ) Argomenti: geometry una geometria (multi)linestring start_distance distanza alla quale estendere l' inizio della linea end_distance distanza alla quale estendere la fine della linea. Esempi: geom_to_wkt(extend(geom_from_wkt('LineString(0 0, 1 0, 1 1)'),1,2)) \u2192 'LineString (-1 0, 1 0, 1 3)' geom_to_wkt(extend(geom_from_wkt('MultiLineString((0 0, 1 0, 1 1), (2 2, 0 2, 0 5))'),1,2)) \u2192 'MultiLineString ((-1 0, 1 0, 1 3),(3 2, 0 2, 0 7))' -- exterior_ring \u21b5 Restituisce una linestring che rappresenta l'anello esterno di una geometria poligonale. Se la geometria non \u00e8 un poligono, il risultato sar\u00e0 NULL. Sintassi: exterior_ring( geometry ) Argomenti: geometry una geometria poligono Esempi: geom_to_wkt(exterior_ring(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),( 0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2, 0.1, 0.1 0.1))'))) \u2192 'LineString (-1 -1, 4 0, 4 2, 0 2, -1 -1)' -- extrude \u21b5 Restituisce una versione estrusa della geometria (Multi-)Curve o (Multi-)Linestring in ingresso, con un'estensione specificata da x e y. Sintassi: extrude( geometry , x , y ) Argomenti: geometry una geometria poligono x estensione x, valore numerico y estensione y, valore numerico Esempi: extrude(geom_from_wkt('LineString(1 2, 3 2, 4 3)'), 1, 2) \u2192 Polygon ((1 2, 3 2, 4 3, 5 5, 4 4, 2 4, 1 2)) extrude(geom_from_wkt('MultiLineString((1 2, 3 2), (4 3, 8 3)'), 1, 2) \u2192 MultiPolygon (((1 2, 3 2, 4 4, 2 4, 1 2)),((4 3, 8 3, 9 5, 5 5, 4 3))) Osservazioni: Nell'esempio ho utilizzato la funzione [boundary()](boundary.md) perch\u00e9 la geometria di ingresso deve essere lineare. flip_coordinates \u21b5 Restituisce una copia della geometria con le coordinate x e y scambiate. Utile per riparare le geometrie che hanno invertito i valori di latitudine e longitudine. Sintassi: flip_coordinates( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt(flip_coordinates(make_point(1, 2))) \u2192 Point (2 1) -- Esempio con vettore poligonale (aggiorno la geometry): il flip \u00e8 da usare con cautela perch\u00e9 cambia radicalemnte la posizione del vettore force_polygon_ccw \u21b5 Forza una geometria a rispettare la convenzione per cui gli anelli esterni sono in senso antiorario, quelli interni in senso orario. Sintassi: force_polygon_ccw( geometry ) Argomenti: geometry una geometria. Qualunque geometria non poligonale \u00e8 restituita non modificata Esempi: geom_to_wkt(force_polygon_ccw(geometry:=geom_from_wkt('Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1)))'))) \u2192 'Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1))' force_polygon_cw \u21b5 Forza una geometria a rispettare la convenzione per cui gli anelli esterni sono in senso orario, quelli interni in senso antiorario. Sintassi: force_polygon_cw( geometry ) Argomenti: geometry una geometria. Qualunque geometria non poligonale \u00e8 restituita non modificata Esempi: geom_to_wkt(force_polygon_cw(geometry:=geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))'))) \u2192 'Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1))' force_rhr \u21b5 Forza una geometria a rispettare la regola della mano destra, in cui l'area delimitata da un poligono si trova a destra del limite. In particolare, l'anello esterno \u00e8 orientato in senso orario e l'interno in senso antiorario. Sintassi: force_rhr( geometry ) Argomenti: geometry una geometria. Qualsiasi geometria non poligonale viene restituita invariata. Esempi: geom_to_wkt(force_rhr(geometry:=geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))'))) \u2192 Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1)) Osservazioni: Ecco un esempio pratico della funzione (presente anche nelgli strumenti fi processing) ovvero un poligono disegnato in senso antiorario viene forzato in senso orario e l'etichettature \u00e8 visibile correttamente. geom_from_gml \u21b5 Restituisce una geometria da una rappresentazione GML di una geometria. Sintassi: geom_from_gml( _gml ) Argomenti: gml Rappresentazione GML di una geometria come stringa Esempi: geom_to_wkt(geom_from_gml('<gml:LineString srsName=\"EPSG:4326\"><gml:coordinates>4,4 5,5 6,6</gml:coordinates></gml:LineString>') ) \u2192 'LineString (4 4, 5 5, 6 6)' geom_from_wkb \u21b5 Restituisce una geometria creata da una rappresentazione binaria ben nota (WKB). Sintassi: geom_from_wkb( binari ) Argomenti: binari Rappresentazione binaria ben nota (WKB) di una geometria (come BLOB binario) Esempi: geom_from_wkb( geom_to_wkb( make_point(4,5) ) ) \u2192 un oggetto geometria punto geom_from_wkt \u21b5 Restituisce una geometria creata da una rappresentazione Well-Known Text (WKT). Sintassi: geom_from_wkt( text ) Argomenti: text Rappresentazione Well-Known Text (WKT) di una geometria Esempi: geom_from_wkt( 'POINT(4 5)' ) \u2192 un oggetto geometria geom_to_wkb \u21b5 Restituisce la rappresentazione binaria ben nota (WKB) di una geometria come BLOB binario. Sintassi: geom_to_wkb( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkb( $geometry ) \u2192 BLOB binario contenente un oggetto geometria geom_to_wkt \u21b5 Restituisce la rappresentazione Well-Known Text (WKT) della geometria senza metadati del SR Sintassi: geom_to_wkt( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt( make_point(6, 50) ) \u2192 'POINT(6 50)' geom_to_wkt(centroid(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))'))) \u2192 'POINT(0 0.66666667)' geom_to_wkt(centroid(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))')), 2) \u2192 'POINT(0 0.67)' geometry \u21b5 Restituisce la geometria di un elemento con geometria Sintassi: geometry( feature ) Argomenti: feature un oggetto elemento con geometria Esempi: geom_to_wkt( geometry( get_feature( layer, attributeField, value ) ) ) \u2192 'POINT(6 50)'` intersects( $geometry, geometry( get_feature( layer, attributeField, value ) ) ) \u2192 vero` -- Usando il Select by Expression : selezionare le feature di un layer (quartieri) in funzione di altro layer (test): geometry_n \u21b5 Restituisce una geometria specifica da una collezione di geometrie, o NULL se la geometria in ingresso non \u00e8 una collezione. Restituisce anche una parte da una geometria a pi\u00f9 parti. Sintassi: geometry_n( geometry , index ) Argomenti: geometry raccolta di geometrie index indice della geometria da restituire, dove 1 \u00e8 la prima geometria nella raccolta Esempi: geom_to_wkt(geometry_n(geom_from_wkt('GEOMETRYCOLLECTION(POINT(0 1), POINT(0 0), POINT(1 0), POINT(1 1))'),3)) \u2192 'Point (1 0)' geometry_type \u21b5 Restituisce un valore stringa che descrive il tipo di una geometria (Punto, Linea o Poligono) Sintassi: geometry_type( geometry ) Argomenti: geometry una geometria Esempi: geometry_type( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 'Line' geometry_type( geom_from_wkt( 'MULTILINESTRING((2 5, 3 6, 4 8), (1 1, 0 0))') ) \u2192 'Line' geometry_type( geom_from_wkt( 'POINT(2 5)') ) \u2192 'Point' geometry_type( geom_from_wkt( 'POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))') ) \u2192 'Polygon' hausdorff_distance \u21b5 Restituisce la distanza di Hausdorff tra due geometrie. Questa \u00e8 in sostanza una misura di come le 2 geometrie sono simili o dissimili: una distanza pi\u00f9 bassa indica geometrie pi\u00f9 simili. La funzione pu\u00f2 essere eseguita con un argomento opzionale di densificazione della frazione. Se non viene specificato, viene utilizzata una approssimazione alla distanza standard di Hausdorff. Questa approssimazione \u00e8 esatta o abbastanza vicina per un grande sottoinsieme di casi utili. Esempi di questi sono: calcolare la distanza tra Linestrings che sono approssimativamente paralleli tra loro e sono sostanzialmente uguali in lunghezza. Ci\u00f2 si verifica nelle verifica di reti lineari. testare la somiglianza di geometrie. Se l'approssimazione predefinita fornita da questo metodo \u00e8 insufficiente, specifica l'argomento opzionale di densificazione della frazione. Specificando questo argomento si esegue una densificazione del segmento prima di calcolare la distanza Hausdorff discreta. Il parametro imposta la frazione con cui densificare ogni segmento. Ogni segmento sar\u00e0 suddiviso in un numero di subsegmenti di uguale lunghezza, la cui frazione della lunghezza totale \u00e8 la pi\u00f9 vicina alla frazione data. Riducendo il parametro di densificazione della frazione, la distanza restituita si avviciner\u00e0 alla vera distanza Hausdorff per le geometrie. Sintassi: hausdorff_distance( geometry1 , geometry2 , densify_fraction ) Argomenti: geometry1 una geometria geometry2 una geometria densify_fraction quantit\u00e0 di densificazione della frazione Esempi: hausdorff_distance( geometry1:= geom_from_wkt('LINESTRING (0 0, 2 1)'),geometry2:=geom_from_wkt('LINESTRING (0 0, 2 0)')) \u2192 2 hausdorff_distance( geom_from_wkt('LINESTRING (130 0, 0 0, 0 150)'),geom_from_wkt('LINESTRING (10 10, 10 150, 130 10)')) \u2192 14.142135623 hausdorff_distance( geom_from_wkt('LINESTRING (130 0, 0 0, 0 150)'),geom_from_wkt('LINESTRING (10 10, 10 150, 130 10)'),0.5) \u2192 70.0 -- Nel caso di geometrie puntuali la hausdorff_distance coincide con la funzione distance , segue un esempio: Espressione format_number( hausdorff_distance( transform($geometry,'EPSG:4326','EPSG:3004'), transform(geometry(get_feature('fontanelle','n',1)),'EPSG:4326','EPSG:3004'))/1000,4) || ' km' || '\\n'|| format_number( distance( transform($geometry,'EPSG:4326','EPSG:3004'), transform(geometry(get_feature('fontanelle','n',1)),'EPSG:4326','EPSG:3004'))/1000,4) || ' km' -- In questo esempio confronto due layer: il numero pi\u00f9 piccolo indica il poligono pi\u00f9 simile a al poligono pi\u00f9 grande. inclination \u21b5 Restituisce l'inclinazione misurata dallo zenit (0) al nadir (180) del punto_a al punto_b . Sintassi: inclination( point_a , point_b ) Argomenti: point_a geometria punto point_b geometria punto Esempi: inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 5 ) ) \u2192 0.0 inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 0 ) ) \u2192 90.0 inclination( make_point( 5, 10, 0 ), make_point( 50, 100, 0 ) ) \u2192 90.0 inclination( make_point( 5, 10, 0 ), make_point( 5, 10, -5 ) ) \u2192 180.0 -- interior_ring_n \u21b5 Restituisce un anello interno specifico da una geometria poligonale, o null se la geometria non \u00e8 un poligono. Sintassi: interior_ring_n( geometry , index ) Argomenti: geometry geometria poligono index Indice dell'anello interno da restituire, dove 1 \u00e8 il primo anello interno Esempi: geom_to_wkt(interior_ring_n(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1),(-1 -1, 4 0, 4 2, 0 2, -1 -1))'),1)) \u2192 'LineString (-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))' Osservazioni: Restituisce una lineastring!!! intersection \u21b5 Restituisce una geometria che rappresenta la porzione condivisa fra le due geometrie. Sintassi: intersection( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( intersection( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4)' ) ) ) \u2192 'LINESTRING(3 3, 4 4)' geom_to_wkt( intersection( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'MULTIPOINT(3.5 3.5, 4 5)' ) ) ) \u2192 'POINT(3.5 3.5)' Espressione -- intersezione tra le due linee intersection( make_line( -- linea a start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)), make_line( -- linea b start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))) ) -- NB: -- l' ordine delle geometrie \u00e8 indifferente Prova tu Dati e progetto qgz -- intersects \u21b5 Controlla qualora una geometria ne interseca un'altra. Restituisce true (1) se la geometrie si intersecano spazialmente (condividono una porzione di spazio) altrimenti da false (0). Sintassi: intersects( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: intersects( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 vero intersects( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'POINT(5 5)' ) ) \u2192 falso Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): intersects(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry) dove: geometry1 \u00e8 geometry(get_feature( 'province_rt_rt','pk_uid','46')) geometry2 \u00e8 $geometry seleziono tutti i comuni intersects (interseca) nella provincia con pk_uid 46 (Lucca) PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli intersecati con la provincia di Lucca). NOT intersects(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry) intersects_bbox \u21b5 Controlla se il perimetro di delimitazione della geometria si sovrappone a quello di un'altra geometria. Restituisce vero (1) se le geometrie intersecano spazialmente il perimetro di delimitazione definito e falso (0) se non lo intersecano. Sintassi: intersects_bbox( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: intersects_bbox( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 vero intersects_bbox( geom_from_wkt( 'POINT(6 5)' ), geom_from_wkt( 'POLYGON((3 3, 4 4, 5 5, 3 3))' ) ) \u2192 falso is_closed \u21b5 Restituisce vero (true) se una linestring \u00e8 chiusa (i punti di inizio e di fine coincidono), o falso (false) se una linestring non \u00e8 chiusa. Se la geometria non \u00e8 una linestring, il risultato sar\u00e0 NULL. Sintassi: is_closed( geometry ) Argomenti: geometry una geometria linestring Esempi: is_closed(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')) \u2192 falso is_closed(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2, 0 0)')) \u2192 vero -- is_empty \u21b5 Restituisce vero se una geometria \u00e8 vuota (senza coordinate), falso se la geometria non \u00e8 vuota e NULL se non c'\u00e8 geometria. Vedi anche is_empty_or_null . Sintassi: is_empty( geometry ) Argomenti: geometry una geometria Esempi: is_empty(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')) \u2192 falso is_empty(geom_from_wkt('LINESTRING EMPTY')) \u2192 vero is_empty(geom_from_wkt('POINT(7 4)')) \u2192 falso is_empty(geom_from_wkt('POINT EMPTY')) \u2192 vero is_empty_or_null \u21b5 Restituisce vero se una geometria \u00e8 vuota (senza coordinate), falso se la geometria non \u00e8 vuota e NULL se non c'\u00e8 geometria. Vedi anche is_empty . Sintassi: is_empty_or_null( geometry ) Argomenti: geometry una geometria Esempi: is_empty_or_null(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')) \u2192 falso iis_empty_or_null(geom_from_wkt('POINT(7 4)')) \u2192 falso is_empty_or_null(geom_from_wkt('POINT EMPTY')) \u2192 vero is_multipart \u21b5 Restituisce vero se la geometria \u00e8 di tipo Multi. Sintassi: is_multipart( geometry ) Argomenti: geometry una geometria Esempi: is_multipart(geom_from_wkt('MULTIPOINT ((0 0),(1 1),(2 2))')) \u2192 vero is_multipart(geom_from_wkt('POINT (0 0)')) \u2192 falso is_valid \u21b5 Restituisce vero se una geometria \u00e8 valida; se \u00e8 ben formato in 2D secondo le regole OGC Sintassi: is_valid( geometry ) Argomenti: geometry una geometria Esempi: is_valid(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2, 0 0)')) \u2192 vero is_valid(geom_from_wkt('LINESTRING(0 0)')) \u2192 falso length \u21b5 Restituisce il numero di caratteri in una stringa o la lunghezza di una geometria di tipo linestring. Variabile stringa \u21b5 Restituisce il numero di caratteri contenuti in una stringa. Sintassi: length( string ) Argomenti: string stringa della quale calcolare la lunghezza Esempi: length('hello') \u2192 5 Variabile geometria \u21b5 Calcola la lunghezza di un oggetto a geometria lineare. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di detta geometria, e l'unit\u00e0 di misura della lunghezza restituita \u00e8 conforme all'unit\u00e0 di misura del SR. Ci\u00f2 differisce dal calcolo eseguito dalla funzione $length , la quale esegue calcoli ellissoidici basati sull'ellissoide del progetto e sulle impostazioni delle unit\u00e0 di distanza. Sintassi: length( geometry ) Argomenti: geometry oggetto geometria linea Esempi: length(geom_from_wkt('LINESTRING(0 0, 4 0)')) \u2192 4.0 length3D \u21b5 Calcola la lunghezza 3D di un oggetto linea geometrica. Se la geometria non \u00e8 un oggetto linea 3D, restituisce la sua lunghezza 2D. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di questa geometria, e le unit\u00e0 della lunghezza restituita corrisponderanno alle unit\u00e0 per l'SR. Questo differisce dai calcoli eseguiti dalla funzione $length , che eseguir\u00e0 calcoli ellissoidali basati sulle impostazioni dell'ellissoide e dell'unit\u00e0 di distanza del progetto. Sintassi: length3D( geometry ) Argomenti: geometry oggetto geometria linea Esempi: length3D(geom_from_wkt('LINESTRINGZ(0 0 0, 3 0 4)')) \u2192 5.0 line_interpolate_angle \u21b5 Restituisce l'angolo parallelo alla geometria ad una distanza specifica lungo una geometria di tipo linestring. Gli angoli sono in gradi in senso orario dal nord. Sintassi: line_interpolate_angle( geometry , distance ) Argomenti: geometry una geometria di tipo linestring distance distanza lungo la linea a cui interpolare l'angolo Esempi: line_interpolate_angle(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),distance:=5) \u2192 90.0 -- line_interpolate_point \u21b5 Restituisce il punto interpolato ad una specifica distanza lungo una geometria di tipo linestring. Sintassi: line_interpolate_point( geometry , distance ) Argomenti: geometry una geometria di tipo linestring distance distanza lungo la linea Esempi: geom_to_wkt(line_interpolate_point(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),distance:=5)) \u2192 'Point (4 0)' -- line_locate_point \u21b5 Restituisce la distanza lungo una linestring corrispondente alla posizione pi\u00f9 vicina alla linestring di una geometria puntuale specificata. Sintassi: line_locate_point( geometry , point ) Argomenti: geometry una geometria di tipo linestring point geometria puntuale per cui ricercare la posizione pi\u00f9 vicina sulla linestring Esempi: line_locate_point(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),point:=geom_from_wkt('Point(5 1)')) \u2192 5.0 line_merge \u21b5 Restituisce una geometria di tipo LineString o MultiLineString, dove qualsiasi LineString connessa dalla geometria in ingresso \u00e8 stata fusa (merge) in una linestring singola. Questa funzione restituir\u00e0 NULL se la geometria considerata non \u00e8 una LineString/MultiLineString. Sintassi: line_merge( geometry ) Argomenti: geometry una geometria di tipo LineString/MultiLineString Esempi: geom_to_wkt(line_merge(geom_from_wkt('MULTILINESTRING((0 0, 1 1),(1 1, 2 2))'))) \u2192 'LineString(0 0,1 1,2 2)' geom_to_wkt(line_merge(geom_from_wkt('MULTILINESTRING((0 0, 1 1),(11 1, 21 2))'))) \u2192 'MultiLineString((0 0, 1 1),(11 1, 21 2)' -- line_substring \u21b5 Restituisce la porzione di una geometria di linea (o curva) che rientra tra le distanze iniziale e finale specificate (misurata dall'inizio della linea). I valori Z e M sono linearmente interpolati dai valori esistenti. Sintassi: line_substring( geometry , start_distance , end_distance ) Argomenti: geometry una geometria lineare o curva start_distance distanza all'inizio della sottostringa end_distance distanza alla fine della sottostringa Esempi: geom_to_wkt(line_substring(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),start_distance:=2,end_distance:=6)) \u2192 'LineString (2 0,6 0)' line_substring( $geometry, $length *.1,$length *.6) \u2192 <geometria: LineString> -- Funzione utile per la tematizzazione m \u21b5 Restituisce il valore m di una geometria puntuale. Sintassi: m( geometry ) Argomenti: geometry una geometria punto Esempi: ( geom_from_wkt( 'POINTM(2 5 4)' ) ) \u2192 4 m_max \u21b5 Restituisce il valore minimo m (misura) di una geometria. Sintassi: m_max( geometry ) Argomenti: geometry una geometria contenente m valori Esempi: m_max( make_point_m( 0,0,1 ) ) \u2192 1 m_max(make_line( make_point_m( 0,0,1 ), make_point_m( -1,-1,2 ), make_point_m( -2,-2,0 ) ) ) \u2192 2 m_min \u21b5 Restituisce il valore minimo m (misura) di una geometria. Sintassi: m_min( geometry ) Argomenti: geometry una geometria contenente m valori Esempi: m_min( make_point_m( 0,0,1 ) ) \u2192 1 m_min(make_line( make_point_m( 0,0,1 ), make_point_m( -1,-1,2 ), make_point_m( -2,-2,0 ) ) ) \u2192 0 main_angle \u21b5 Restituisce l'angolo principale di una geometria (senso orario, in gradi dal Nord), il quale rappresenta l'angolo dell'orientamento del rettangolo minimo che copre completamente la geometria. Sintassi: main_angle( geometry ) Argomenti: geometry una geometria poligono Esempi: main_angle(geom_from_wkt('Polygon ((321577 129614, 321581 129618, 321585 129615, 321581 129610, 321577 129614))')) \u2192 38.66 Osservazioni: make_circle \u21b5 Crea un poligono circolare. Sintassi: make_circle( center , radius [, segments=36 ]) [ ] indica componenti opzionali Argomenti: center centro del cerchio radius raggio del cerchio segments argomento opzionale per la segmentazione del poligono. Valore predefinito pari a 36 Esempi: geom_to_wkt(make_circle(make_point(10,10), 5, 4)) \u2192 'Polygon ((10 15, 15 10, 10 5, 5 10, 10 15))' geom_to_wkt(make_circle(make_point(10,10,5), 5, 4)) \u2192 'PolygonZ ((10 15 5, 15 10 5, 10 5 5, 5 10 5, 10 15 5))'' geom_to_wkt(make_circle(make_point(10,10,5,30), 5, 4)) \u2192 'PolygonZM ((10 15 5 30, 15 10 5 30, 10 5 5 30, 5 10 5 30, 10 15 5 30))' make_ellipse \u21b5 Crea un poligono ellittico. Sintassi: make_ellipse( center , semi_major_axis , semi_minor_axis , azimuth [, segments=36 ]) Argomenti: center centro dell'ellisse semi_major_axis semi-asse maggiore dell'ellisse semi_minor_axis semi-asse minore dell'ellisse azimuth orientazione dell'ellisse segments argomento opzionale per la segmentazione del poligono. Valore predefinito pari a 36 Esempi: geom_to_wkt(make_ellipse(make_point(10,10), 5, 2, 90, 4)) \u2192 'Polygon ((15 10, 10 8, 5 10, 10 12, 15 10)) geom_to_wkt(make_ellipse(make_point(10,10,5), 5, 2, 90, 4)) \u2192 'PolygonZ ((15 10 5, 10 8 5, 5 10 5, 10 12 5, 15 10 5))' geom_to_wkt(make_circle(make_point(10,10,5,30), 5, 2, 90, 4)) \u2192 'PolygonZM ((15 10 5 30, 10 8 5 30, 5 10 5 30, 10 12 5 30, 15 10 5 30))' make_line \u21b5 Crea una geometria linea da una serie di geometrie punto. Sintassi: make_line( point1 , point2 , \u2026_) Argomenti: point una geometria punto Esempi: geom_to_wkt(make_line(make_point(2,4),make_point(3,5))) \u2192 'LineString (2 4, 3 5)' geom_to_wkt(make_line(make_point(2,4),make_point(3,5),make_point(9,7))) \u2192 'LineString (2 4, 3 5, 9 7)' Array variant \u21b5 I vertici di linea sono specificati come una matrice di punti. Sintassi: make_line( array ) Argomenti: array Matrice di punti Esempi: geom_to_wkt(make_line(array(make_point(2,4),make_point(3,5),make_point(9,7)))) \u2192 'LineString (2 4, 3 5, 9 7)' Espressione make_line( array(geometry( get_feature_by_id('fontanelle_Palermo',$id))), array(geometry( get_feature_by_id('fontanelle_Palermo',not $id%2))) ) make_point \u21b5 Crea una geometria punto da valori x ed y (e opzionalmente z ed m). Sintassi: make_point( x , y , z , m ) Argomenti: x coordinata x del punto y coordinata y del punto z coordinata opzionale z del punto m valore m del punto Esempi: geom_to_wkt(make_point(2,4,6,8)) \u2192 'PointZM (2 4 6 8)' make_point_m \u21b5 Crea una geometria punto da una coordinata x, y ed un valore m. Sintassi: make_point_m_( x , y , m ) Argomenti: x coordinata x del punto y coordinata y del punto m valore m del punto Esempi: geom_to_wkt(make_point_m(2,4,6)) \u2192 'PointM (2 4 6)' make_polygon \u21b5 Crea una geometria poligono da un'anello esterno e opzionalmente da geometrie ad anello interne. Sintassi: make_polygon( outerRing [, innerRing1 ][, innerRing2 ] \u2026_) [ ] indica componenti opzionali Argomenti: outerRing geometria a linea chiusa per l'anello esterno del poligono innerRing geometria a linea chiusa opzionale per anello interno Esempi: geom_to_wkt(make_polygon(geom_from_wkt('LINESTRING( 0 0, 0 1, 1 1, 1 0, 0 0 )'))) \u2192 'Polygon ((0 0, 0 1, 1 1, 1 0, 0 0))' geom_to_wkt(make_polygon(geom_from_wkt('LINESTRING( 0 0, 0 1, 1 1, 1 0, 0 0 )'),geom_from_wkt('LINESTRING( 0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2 0.1, 0.1 0.1 )'),geom_from_wkt('LINESTRING( 0.8 0.8, 0.8 0.9, 0.9 0.9, 0.9 0.8, 0.8 0.8 )'))) \u2192 'Polygon ((0 0, 0 1, 1 1, 1 0, 0 0),(0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2 0.1, 0.1 0.1),(0.8 0.8, 0.8 0.9, 0.9 0.9, 0.9 0.8, 0.8 0.8))' make_rectangle_3points \u21b5 Crea un rettangolo da 3 punti. Sintassi: make_rectangle_3points( point1 , point2 , point3 [,option=0]\u2026) Argomenti: point1 Primo punto point2 Secondo punto point3 Terzo punto option Un argomento facoltativo per costruire il rettangolo. Di default questo valore \u00e8 0. Il valore pu\u00f2 essere 0 (distanza) o 1 (proiettato). Distanza opzione: la seconda distanza \u00e8 uguale alla distanza tra il 2 \u00b0 e il 3 \u00b0 punto. Opzione proiettata: la seconda distanza \u00e8 uguale alla distanza della proiezione perpendicolare del terzo punto sul segmento o della sua estensione. Esempi: geom_to_wkt(make_rectangle_3points(make_point(0, 0), make_point(0,5), make_point(5, 5), 0))) \u2192 'Polygon ((0 0, 0 5, 5 5, 5 0, 0 0))' geom_to_wkt(make_rectangle_3points(make_point(0, 0), make_point(0,5),make_point(5, 3), 1))) \u2192 'Polygon ((0 0, 0 5, 5 5, 5 0, 0 0))' -- make_regular_polygon \u21b5 Crea un poligono regolare. Sintassi: make_regular_polygon( center , radius , number_sides [, circle=0 ]) [ ] indica componenti opzionali Argomenti: center centro del poligono regolare radius secondo punto. Il primo se il poligono regolare \u00e8 inscritto. Il punto intermedio del primo lato se il poligono regolare \u00e8 circoscritto. number_sides Numero di lati del poligono regolare circle Argomento opzionale per la costruzione del poligono regolare. Il valore predefinito \u00e8 0. Il valore pu\u00f2 essere 0 (poligono iscritto) o 1 (poligono circoscritto) Esempi: geom_to_wkt(make_regular_polygon(make_point(0,0), make_point(0,5), 5)) \u2192 'Polygon ((0 5, 4.76 1.55, 2.94 -4.05, -2.94 -4.05, -4.76 1.55, 0 5))' geom_to_wkt(make_regular_polygon(make_point(0,0), project(make_point(0,0), 4.0451, radians(36)), 5)) \u2192 'Polygon ((0 5, 4.76 1.55, 2.94 -4.05, -2.94 -4.05, -4.76 1.55, 0 5))' make_square \u21b5 Crea un quadrato da una diagonale. Sintassi: make_square( point1 , point2 ) Argomenti: point1 Primo punto della diagonale point2 Secondo punto della diagonale Esempi: geom_to_wkt(make_square( make_point(0,0), make_point(5,5))) \u2192 'Polygon ((0 0, -0 5, 5 5, 5 0, 0 0))' geom_to_wkt(make_square( make_point(5,0), make_point(5,5))) \u2192 'Polygon ((5 0, 2.5 2.5, 5 5, 7.5 2.5, 5 0))' make_triangle \u21b5 Crea un poligono triangolare Sintassi: make_triangle( point1 , point2 , point3 ) Argomenti: point1 Primo punto del triangolo point2 Secondo punto del triangolo point3 Secondo punto del triangolo Esempi: geom_to_wkt(make_triangle(make_point(0,0), make_point(5,5), make_point(0,10))) \u2192 'Triangle ((0 0, 5 5, 0 10, 0 0))' geom_to_wkt(boundary(make_triangle(make_point(0,0), make_point(5,5), make_point(0,10)))) \u2192 'LineString (0 0, 5 5, 0 10, 0 0)' make_valid \u21b5 >=QGIS 3.28 Firenze Restituisce una geometria valida o una geometria vuota se non \u00e8 stato possibile renderla valida. Sintassi: make_triangle( geometry [, method=structure ][, keep_collapsed=false ]) [ ] indica componenti opzionali Argomenti: geometry Una geometria method algoritmo di riparazione. Pu\u00f2 essere 'struttura' o 'tracciato'. L'opzione 'tracciato' combina tutti gli anelli in un insieme di linee con nodi e quindi estrae poligoni validi da tale tracciato. Il metodo 'struttura' rende prima validi tutti gli anelli e poi unisce le conchiglie e sottrae i fori dalle conchiglie per generare risultati validi. Si presuppone che i fori e le conchiglie siano classificati correttamente. keep_collapsed se impostato a true, i componenti che sono collassati in una dimensione inferiore saranno mantenuti. Ad esempio, un anello che collassa in una linea o una linea che collassa in un punto. Esempi: - geom_to_wkt(make_valid(geom_from_wkt('POLYGON((3 2, 4 1, 5 8, 3 2, 4 2))'))) \u2192 'Polygon ((3 2, 3 4, 1 4, 1 2, 3 2))' - geom_to_wkt(make_valid(geom_from_wkt('POLYGON((3 2, 4 1, 5 8, 3 2, 4 2))'), 'linework')) \u2192 'GeometryCollection (Polygon ((5 8, 4 1, 3 2, 5 8)),LineString (3 2, 4 2))' - geom_to_wkt(make_valid(geom_from_wkt('POLYGON((3 2, 4 1, 5 8))'), method:='linework')) \u2192 'Polygon ((3 2, 3 4, 1 4, 1 2, 3 2))' - make_valid(geom_from_wkt('LINESTRING(0 0)')) \u2192 Una geometria vuota \u21b5 minimal_circle \u21b5 Restituisce la circonferenza circoscritta minima di una geometria. Rappresenta il cerchio minimo che circoscrive tutte le geometrie presenti in un dataset. Sintassi: minimal_circle( geometry [, segments=36 ]) [ ] indica componenti opzionali Argomenti: geometry una geometria segments argomento opzionale per la segmentazione del poligono. Valore predefinito pari a 36 Esempi: geom_to_wkt( minimal_circle( geom_from_wkt( 'LINESTRING(0 5, 0 -5, 2 1)' ), 4 ) ) \u2192 Polygon ((0 5, 5 -0, -0 -5, -5 0, 0 5)) geom_to_wkt( minimal_circle( geom_from_wkt( 'MULTIPOINT(1 2, 3 4, 3 2)' ), 4 ) ) \u2192 Polygon ((3 4, 3 2, 1 2, 1 4, 3 4)) -- nodes_to_points \u21b5 Restituisce una geometria multi-punti costituita da ogni nodo della geometria in ingresso. Sintassi: nodes_to_points( geometry [, ignore_closing_nodes=false ]) Argomenti: geometry oggetto geometria ignore_closing_nodes argomento opzionale che specifica se includere i nodi duplicati che chiudono linee o poligoni ad anello. Normalmente false, impostare a true per evitare di includere questi nodi duplicati nella raccolta in uscita. Esempi: geom_to_wkt(nodes_to_points(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))) \u2192 'MultiPoint ((0 0),(1 1),(2 2))' geom_to_wkt(nodes_to_points(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))'),true)) \u2192 'MultiPoint ((-1 -1),(4 0),(4 2),(0 2))' -- num_geometries \u21b5 Restituisce il numero di geometrie in una raccolta di geometrie, o il numero di parti in una geometria multiparte. La funzione restituisce NULL se la geometria di input non \u00e8 una raccolta. Sintassi: num_geometries( geometry ) Argomenti: geometry raccolta di geometrie Esempi: num_geometries(geom_from_wkt('GEOMETRYCOLLECTION(POINT(0 1), POINT(0 0), POINT(1 0), POINT(1 1))')) \u2192 4 num_interior_rings \u21b5 Restituisce il numero di anelli interni in un poligono o in una raccolta di geometrie, o null se la geometria in ingresso non \u00e8 un poligono o una raccolta. Sintassi: num_interior_rings( geometry ) Argomenti: geometry geometria in ingresso Esempi: num_interior_rings(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))')) \u2192 1 num_points \u21b5 Restituisce il numero di vertici in una geometria. Sintassi: num_points( geometry ) Argomenti: geometry una geometria Esempi: num_points($geometry) \u2192 numero di vertici in $geometry num_rings \u21b5 Restituisce il numero di anelli (includendo anche anelli esterni) in un poligono o in una raccolta di geometrie, o null se la geometria in ingresso non \u00e8 un poligono o una raccolta. Sintassi: num_rings( geometry ) Argomenti: geometry geometria in ingresso Esempi: num_rings(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))')) \u2192 2 -- offset_curve \u21b5 Restituisce una geometria formata facendo l'offset di una geometria di tipo linestring a lato. Le distanze sono espresse nel SR di tale geometria. Sintassi: offset_curve( geometry , distance [, segments=8 ][, join=1 ][, miter_limit=2.0 ]) [ ] indica componenti opzionali Argomenti: geometry una geometria (multi)linestring distance distanza di offset. Valori positivi saranno bufferizzati a sinistra delle linee, valori negativi a destra segments numero di segmenti da usare per rappresentare un quarto di cerchio quando \u00e8 utilizzato uno stile di unione arrotondato. Un numero grande risulta in una linea pi\u00f9 morbida, con pi\u00f9 nodi. join stile di unione per gli angoli, dove 1 = arrotondato, 2 = seghettato e 3 = smussato miter_limit limite sul rapporto di seghettatura usato per angoli molto appuntiti (solamente quando si usano le unioni seghettate) Esempi: offset_curve($geometry, 10.5) \u2192 linea scostata a sinistra di 10.5 unit\u00e0 offset_curve($geometry, -10.5) \u2192 linea scostata a destra di 10.5 unit\u00e0 offset_curve($geometry, 10.5, segments=16, join=1) \u2192 linea scostata a sinistra di 10.5 unit\u00e0, usando pi\u00f9 segmenti per risultare in una curva pi\u00f9 morbida offset_curve($geometry, 10.5, join=3) \u2192 linea scostata a sinistra di 10.5 unit\u00e0, usando un'unione smussata Osservazioni: La linea \u00e8 scostata a sinistra o destra rispetto al verso della linea: order_parts \u21b5 Ordina le parti di una MultiGeometria secondo un dato criterio Sintassi: order_parts( geometry , orderby [, ascending=true ]) [ ] indica componenti opzionali Argomenti: geometry una geometria multi-tipo orderby un espressione stringa che definisce il criterio di ordinamento ascending booleano, True per ascendente, False per discendente Esempi: order_parts(geom_from_wkt('MultiPolygon (((1 1, 5 1, 5 5, 1 5, 1 1)),((1 1, 9 1, 9 9, 1 9, 1 1)))'), 'area($geometry)', False) \u2192 MultiPolygon (((1 1, 9 1, 9 9, 1 9, 1 1)),((1 1, 5 1, 5 5, 1 5, 1 1))) order_parts(geom_from_wkt('LineString(1 2, 3 2, 4 3)'), '1', True) \u2192 LineString(1 2, 3 2, 4 3) oriented_bbox \u21b5 Restituisce una geometria che rappresenta il perimetro di delimitazione minimo orientato di una geometria. Sintassi: oriented_bbox( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt(oriented_bbox(geom_from_wkt('MULTIPOINT(1 2, 3 4, 3 2)'))) \u2192 'Polygon ((1 2, 2 1, 4 3, 3 4, 1 2))' overlaps \u21b5 Controlla qualora una geometria si sovrapponga ad un'altra. Restituisce true (1) se le geometrie condividono aree, ma non sono completamente contenute una nell'altra. Sintassi: overlaps( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: overlaps( geom_from_wkt( 'LINESTRING(3 5, 4 4, 5 5, 5 3)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 1 overlaps( geom_from_wkt( 'LINESTRING(0 0, 1 1)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 0 Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): overlaps(geometry(get_feature( 'cerchio','id','1')), $geometry) dove: geometry1 \u00e8 geometry(get_feature('cerchio','id','1')) geometry2 \u00e8 $geometry seleziono tutti i comuni overlaps (sovrapposti) al cerchio in figura. PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli sovrapposti con il cerchio). NOT overlaps(geometry(get_feature('cerchio','id','1')),$geometry) overlay_contains \u21b5 Restituisce se l'elemento corrente contiene spazialmente almeno un elemento da un layer target o un array di risultati basati su espressioni per gli elementi nel layer target contenuti nell'elemento corrente. Ulteriori informazioni sul predicato GEOS \"Contains\" sottostante, come descritto nella funzione PostGIS ST_CONTAINS . Sintassi: overlay_contains( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_contains('regions') \u2192 true se l'elemento corrente contiene spazialmente una regione overlay_contains('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente contiene spazialmente una regione con una popolazione maggiore di 10000 overlay_contains('regions', name) \u2192 un array di nomi, per le regioni contenute nell'elemento corrente array_to_string(overlay_contains('regions', name)) \u2192 una stringa come una lista di nomi separata da virgola, per le regioni contenute nell'elemento corrente overlay_contains('regions', name)[0] \u2192 una stringa con il nome della regione contenuta nell'elemento corrente array_sort(overlay_contains(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni contenute nell'elemento corrente e con una popolazione superiore a 10000 overlay_contains(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni contenute nell'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti! overlay_crosses \u21b5 Restituisce se l'elemento corrente attraversa spazialmente almeno un elemento di un layer target o un array di risultati basati su espressioni per gli elementi nel layer target attraversati dall'elemento corrente. Ulteriori informazioni sul predicato GEOS \"Crosses\" sottostante, come descritto nella funzione PostGIS ST_Crosses . Sintassi: overlay_crosses( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_crosses('regions') \u2192 true se l'elemento corrente attraversa spazialmente una regione overlay_crosses('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente attraversa spazialmente una regione con una popolazione maggiore di 10000 overlay_crosses('regions', name) \u2192 un array di nomi, per le regioni attraversate dall'elemento corrente array_to_string(overlay_crosses('regions', name)) \u2192 una stringa come una lista di nomi separata da virgola, per le regioni attraversate dall'elemento corrente overlay_crosses('regions', name)[0] \u2192 una stringa con il nome della prima regioni attraversata dall'elemento corrente array_sort(overlay_crosses(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni attraversate dall'elemento corrente e con una popolazione superiore a 10000 overlay_crosses(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni attraversate dall'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti! overlay_disjoint \u21b5 Restituisce se l'elemento corrente \u00e8 spazialmente disgiunto da tutti gli elementi di un layer target, o un array di risultati basati su espressione per gli elementi nel layer target che sono disgiunti dall'elemento corrente. Ulteriori informazioni sul sottostante predicato GEOS \"Disjoint\", come descritto nella funzione PostGIS ST_Disjoint . Sintassi: overlay_disjoint( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_disjoint('regions') \u2192 true se l'elemento corrente \u00e8 spazialmente disgiunto da tutte le regioni overlay_disjoint('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente \u00e8 spazialmente disgiunto da tutte le regioni con una popolazione maggiore di 10000 overlay_disjoint('regions', name) \u2192 un array di nomi, per le regioni spazialmente disgiunte dall'elemento corrente array_to_string(overlay_disjoint('regions', name)) \u2192 una stringa come una lista di nomi separata da virgola, per le regioni spazialmente disgiunte dall'elemento corrente overlay_disjoint('regions', name)[0] \u2192 una stringa con il nome della regione spazialmente disgiunte dall'elemento corrente array_sort(overlay_disjoint(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni spazialmente disgiunte dall'elemento corrente e con una popolazione superiore a 10000 overlay_disjoint(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni spazialmente disgiunte dall'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti! overlay_equals \u21b5 Restituisce se l'elemento corrente \u00e8 spazialmente uguale ad almeno un elemento da un layer target o un array di risultati basati su espressioni per gli elementi nel layer target che sono spazialmente uguali all'elemento corrente. Ulteriori informazioni sul predicato GEOS \"Equals\" sottostante, come descritto nella funzione PostGIS ST_Equals . Sintassi: overlay_equals( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_equals('regions') \u2192 true se l'elemento corrente \u00e8 spazialmente uguale ad una regione overlay_equals('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente \u00e8 spazialmente uguale ad una regione con una popolazione maggiore di 10000 overlay_equals('regions', name) \u2192 un array di nomi, per le regioni spazialmente uguali all'elemento corrente array_to_string(overlay_equals('regions', name)) \u2192 una stringa come lista di nomi separati da virgole, per le regioni spazialmente uguali all'elemento corrente overlay_equals('regions', name)[0] \u2192 una stringa con il nome della regione spazialmente uguale all'elemento corrente array_sort(overlay_equals(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni spazialmente uguali all'elemento corrente e con una popolazione superiore a 10000 overlay_equals(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni spazialmente uguali all'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti! overlay_intersects \u21b5 aggiornato a QGIS 3.24 Tisler Restituisce se l'elemento corrente interseca spazialmente almeno un elemento da un layer target o un array di risultati basati su espressioni per gli elementi nel layer target intersecati dall'elemento corrente. Ulteriori informazioni sul predicato GEOS \"Intersects\" sottostante, come descritto nella funzione PostGIS ST_INTERSECTS . Sintassi <= QGIS 3.22.x overlay_intersects( layer [, expression ][, filter ][, limit ][, cache=false ]) Sintassi >= QGIS 3.24.x overlay_intersects( layer [, expression ][, filter ][, limit ][, cache=false ][, min_overlap ][, min_inscribed_circle_radius ][, return_details ][, sort_by_intersection_size ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); min_overlap definisce un filtro opzionale di esclusione: per i poligoni un'area minima in unit\u00e0 quadrate dell'elemento corrente per l'intersezione (se l'intersezione risulta in pi\u00f9 poligoni l'intersezione sar\u00e0 restituita se almeno uno dei poligoni ha un'area maggiore o uguale al valore), per le linee una lunghezza minima in unit\u00e0 dell'elemento corrente (se l'intersezione risulta in pi\u00f9 linee l'intersezione sar\u00e0 restituita se almeno una delle linee ha una lunghezza maggiore o uguale al valore). min_inscribed_circle_radius definisce un filtro opzionale di esclusione (solo per i poligoni): raggio minimo in unit\u00e0 dell'elemento corrente per il cerchio massimo inscritto dell'intersezione (se l'intersezione risulta in pi\u00f9 poligoni l'intersezione sar\u00e0 restituita se almeno uno dei poligoni ha un raggio per il cerchio massimo inscritto maggiore o uguale al valore). Leggi di pi\u00f9 sul predicato GEOS sottostante, come descritto nella funzione PostGIS ST_MaximumInscribedCircle . Questo argomento richiede GEOS >= 3.9. return_details Imposta questo a true per restituire una lista di mappe contenenti (nomi chiave tra virgolette) l'elemento 'id', l'espressione 'result' e il valore 'overlap'. Il 'raggio' del cerchio massimo inscritto viene anche restituito quando il layer di destinazione \u00e8 un poligono. Valido solo se usato con il parametro espressione. sort_by_intersection_size valido solo se usato con un'espressione, impostalo a 'des' per restituire i risultati ordinati dal valore di sovrapposizione in ordine decrescente o impostalo a 'asc' per un ordine crescente. [ ] indica componenti opzionali Esempi: overlay_intersects('regions') \u2192 vero se l'elemento corrente interseca spazialmente una regione overlay_intersects('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente interseca spazialmente una regione con una popolazione maggiore di 10000 overlay_intersects('regions', name) \u2192 un array di nomi, per le regioni intersecate dall'elemento corrente array_to_string(overlay_intersects('regions', name)) \u2192 una stringa come una lista di nomi separata da virgola, per le regioni intersecate dall'elemento corrente array_sort(overlay_intersects(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni intersecate dall'elemento corrente e con una popolazione maggiore di 10000 overlay_intersects(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni intersecate dall'elemento corrente overlay_intersects(layer:='regions', min_overlap:=0.54) \u2192 true se l'elemento corrente interseca spazialmente una regione e l'area di intersezione (di almeno una delle parti in caso di multipoligoni) \u00e8 maggiore o uguale a 0.54 overlay_intersects(layer:='regions', min_inscribed_circle_radius:=0.54) \u2192 true se l'elemento corrente interseca spazialmente una regione e il raggio massimo del cerchio inscritto nell'area di intersezione (di almeno una delle parti in caso di parti multiple) \u00e8 maggiore o uguale a 0.54 overlay_intersects(layer:='regions', expression:= geom_to_wkt($geometry), return_details:=true) \u2192 un array di mappe contenente 'id', 'result', 'overlap' e 'radius' overlay_intersects(layer:='regions', expression:= geom_to_wkt($geometry), sort_by_intersection_size:='des') \u2192 un array di geometrie (in WKT) ordinate per il valore di sovrapposizione in ordine decrescente Esempio pratico: Assegnare l'ID del poligono sovrapposto con maggiore area intersecata: overlay_intersects( 'Reg01012022_G_Wgs84', \"cod_reg\", sort_by_intersection_size:='des')[0] -- sort_by_intersection_size Nuovo parametro Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti! overlay_nearest \u21b5 Restituisce se l'elemento corrente ha elementi da un layer target entro una data distanza o un array di risultati basati su espressioni per gli elementi nel layer di target entro una distanza dall'elemento corrente. Nota: questa funzione pu\u00f2 essere lenta e consuma molta memoria per layer con molte feature. Sintassi: overlay_nearest( layer [, expression ][, filter ][, limit=1 ][, max_distance ][, cache ]) NB: per QGIS >= 3.22.x , il parametro filter \u00e8 dimanico, vedi qui . [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); max_distance una distanza opzionale per limitare la ricerca di elementi corrispondenti. Se non impostato, verranno usati tutti gli elementi nel layer di destinazione, (misurata in maniera cartesiana nel sistema di riferimento dal layer sorgente) cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_nearest('airports') \u2192 true se il layer \"airports\" ha almeno un elemento overlay_nearest('airports', max_distance:= 5000) \u2192 vero se \u00e8 presente un aeroporto entro una distanza di 5000 unit\u00e0 dall'elemento corrente (misurata in maniera cartesiana nel sistema di riferimento dal layer sorgente) overlay_nearest('airports', name) \u2192 il nome dell'aereoporto pi\u00f9 vicino all'elemento corrente, come array array_to_string(overlay_nearest('airports', name)) \u2192 il nome dell'aereoporto pi\u00f9 vicino all'elemento corrente, come stringa overlay_nearest(layer:='airports', expression:= name, max_distance:= 5000) \u2192 il nome dell'aereoporto pi\u00f9 vicino entro una distanza di 5000 unit\u00e0 dall'elemento corrente, come array overlay_nearest(layer:='airports', expression:=\"name\", filter:= \"Use\"='Civilian', limit:=3) \u2192 un array di nomi, per un massimo di tre aeroeporti civili pi\u00f9 vicini ordinati per distanza overlay_nearest(layer:='airports', expression:=\"name\", limit:= -1, max_distance:= 5000) \u2192 un array di nomi, per tutti gli aeroporti entro una distanza di 5000 unit\u00e0 dall'elemento corrente, ordinato per distanza. Esempio 45 Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti! Non documentato: La funzione, usata su uno stesso layer, esclude i casi banali, ovvero: se dovessi ricercare il punto pi\u00f9 vicino appartenente allo stesso layer. Chiaramente il punto pi\u00f9 vicino appartenente allo stesso layer \u00e8 il punto stesso, ma il codice \u00e8 fatto in modo che in questo caso venga escluso il punto stesso (che sarebbe un risultato banale) e cerca il secondo punto pi\u00f9 vicino nello stesso layer. overlay_nearest(@layer_name, $geometry) overlay_touches \u21b5 Restituisce se l'elemento corrente tocca spazialmente almeno un elemento da un layer target o un array di risultati basati su espressioni per gli elementi nel layer target toccati dall'elemento corrente. Leggi ulteriori informazioni sul predicato GEOS \"Touches\", come descritto nella funzione PostGIS ST_TOUCHES . Sintassi: overlay_touches( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_touches('regions') \u2192 true se l'elemento corrente tocca spazialmente una regione overlay_touches('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente tocca spazialmente una regione con una popolazione maggiore di 10000 overlay_touches('regions', name) \u2192 un array di nomi, per le regioni tocacte dall'elemento corrente string_to_array(overlay_touches('regions', name)) \u2192 una stringa come lista di nomi separati da virgole, per le regioni toccate dall'elemento corrente overlay_touches('regions', name)[0] \u2192 una stringa con il nome della regione toccata dall'elemento corrente array_sort(overlay_touches(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni toccate dall'elemento attuale e con una popolazione superiore a 10000 overlay_touches(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni toccate dall'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti! overlay_within \u21b5 Restituisce se l'elemento corrente \u00e8 spazialmente all'interno di almeno un elemento da layer destinazione, o un array di risultati basati su espressione per gli elementi nel layer destinazione che contengono l'elemento corrente. Ulteriori informazioni sul sottostante predicato GEOS \"Within\", come descritto nella funzione PostGIS ST_WITHIN . Sintassi: overlay_within( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_within('regions') \u2192 true se l'elemento corrente \u00e8 spazialmente all'interno di una regione overlay_within('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente \u00e8 spazialmente all'interno di una regione con una popolazione maggiore di 10000 overlay_within('regions', name) \u2192 un array di nomi, per le regioni contenenti l'elemento corrente array_to_string(overlay_within('regions', name)) \u2192 una stringa come lista di nomi separati da virgole, per le regioni che contengono l'elemento corrente overlay_within('regions', name)[0] \u2192 una stringa con il nome della regione che contengono l'elemento corrente array_sort(overlay_within(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni contenenti l'elemento corrente e con una popolazione superiore a 10000 overlay_within(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni contenenti l'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti! perimeter \u21b5 Calcola il perimetro di un oggetto a geometria poligonale. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di detta geometria, e l'unit\u00e0 di misura della lunghezza restituita \u00e8 conforme all'unit\u00e0 di misura del SR. Ci\u00f2 differisce dal calcolo eseguito dalla funzione $perimeter , la quale esegue calcoli ellissoidali basati sull'ellissoide del progetto e sulle impostazioni delle unit\u00e0 di misura della distanza. Sintassi: perimeter( geometry ) Argomenti: geometry oggetto geometria poligono Esempi: perimeter(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))')) \u2192 12.0 point_n \u21b5 Restituisce un nodo specifico da una geometria. Sintassi: point_n( geometry , index ) Argomenti: geometry oggetto geometria index indice del nodo da restituire, dove 1 \u00e8 il primo nodo; se il valore \u00e8 negativo, l'indice del vertice selezionato sar\u00e0 il suo conteggio totale meno il valore assoluto Esempi: geom_to_wkt(point_n(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))'),2)) \u2192 'Point (4 0)' -- Esempi correlati: esempio nro 4 - Come aggiungere la quota Z alla tabella attributi point_on_surface \u21b5 Restituisce un punto garantendo che sia giacente sulla superficie della geometria. Sintassi: point_on_surface( geometry ) Argomenti: geometry una geometria Esempi: point_on_surface($geometry) \u2192 una geometria punto -- pole_of_inaccessibility \u21b5 Calcola il polo dell'inaccessibilit\u00e0 approssimato per una superficie, che \u00e8 il punto interno pi\u00f9 distante dal contorno della superficie. Questa funzione usa l'algoritmo 'polylabel' (Vladimir Agafonkin, 2016), che \u00e8 un approccio iterativo garantito per trovare il vero polo dell'inaccessibilit\u00e0 all'interno di una tolleranza specificata. Tolleranze pi\u00f9 precise richiedono pi\u00f9 iterazioni e sar\u00e0 necessario pi\u00f9 tempo per il calcolo. Sintassi: pole_of_inaccessibility( geometry , tolerance ) Argomenti: geometry una geometria tolerance distanza massima tra il punto restituito e la vera posizione del polo Esempi: geom_to_wkt(pole_of_inaccessibility( geom_from_wkt('POLYGON((0 1,0 9,3 10,3 3, 10 3, 10 1, 0 1))'), 0.1)) \u2192 'Point(1.55, 1.55)' -- project \u21b5 Restituisce un punto proiettato da un punto di partenza usando una distanza e una direzione di immersione (azimut) in radianti. Sintassi: project( point , distance , azimuth [, elevation ]) [ ] indica componenti opzionali Argomenti: point punto di partenza point distanza da proiettare azimuth azimuth in radianti in senso orario, dove 0 corrisponde a nord elevation angolo di inclinazione in radianti Esempi: project(make_point(1, 2), 3, radians(270)) \u2192 Point(-2, 2) -- relate \u21b5 Testa la rappresentazione Dimensional Extended 9 Intersection Model (DE-9IM) della relazione tra due geometrie. Variabile di relazione \u21b5 Restituisce la rappresentazione Dimensional Extended 9 Intersection Model (DE-9IM) della relazione tra due geometrie. Sintassi: relate( geometry , geometry ) ) Argomenti: geometry una geometria geometry una geometria Esempi: relate( geom_from_wkt( 'LINESTRING(40 40,120 120)' ), geom_from_wkt( 'LINESTRING(40 40,60 120)' ) ) \u2192 'FF1F00102' Variabile di corrispondenza del modello \u21b5 Testa se la relazione DE-9IM tra due geometrie corrisponde a un pattern specificato: restituisc true Vero, false Falso. Sintassi: relate( geometry , geometry , pattern ) Argomenti: geometry una geometria geometry una geometria pattern Tratteggio DE-9IM da far corrispondere Esempi: relate( geom_from_wkt( 'LINESTRING(40 40,120 120)' ), geom_from_wkt( 'LINESTRING(40 40,60 120)' ), '**1F001**' ) \u2192 Vero Link utili: Wikipedia OpenGeo reverse \u21b5 Inverte il verso di una linestring invertendo l'ordine dei sui vertici. Sintassi: reverse( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt(reverse(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))) \u2192 'LINESTRING(2 2, 1 1, 0 0)' -- rotate \u21b5 Restituisce una versione ruotata di una geometria. I calcoli si trovano nel sistema di riferimento spaziale di questa geometria. Sintassi: rotate( geometry , rotation [, center ][, per_part=false ]) [ ] indica componenti opzionali Argomenti: geometry una geometria rotation rotazione oraria in gradi center punto centrale di rotazione. Se non specificato, viene utilizzato il centro del perimetro di delimitazione della geometria. per_part applica la rotazione per parte. Se true, la rotazione verr\u00e0 applicata attorno al centro del riquadro di delimitazione di ciascuna parte quando la geometria di input \u00e8 multiparte e non \u00e8 specificato un punto centrale di rotazione esplicito. Esempi: rotate($geometry, 45, make_point(4, 5)) \u2192 la geometria ruotava di 45 gradi in senso orario attorno al punto (4, 5) rotate($geometry, 45) \u2192 la geometria ruotava di 45 gradi in senso orario attorno al centro del riquadro di delimitazione >=QGIS 3.24 roundness \u21b5 Calcola quanto una forma di poligono \u00e8 quasi un cerchio. La funzione restituisce 1 quando la forma del poligono \u00e8 un cerchio perfetto e 0 quando \u00e8 completamente piatta. La definizione usata: Roundness = (4 * pi * Area) / Perimeter^2 Sintassi: roundness( geometry ) Argomenti: geometry un poligono Esempi: round(roundness(geom_from_wkt('POLYGON(( 0 0, 0 1, 1 1, 1 0, 0 0))')), 3) \u2192 0.785 round(roundness(geom_from_wkt('POLYGON(( 0 0, 0 0.1, 1 0.1, 1 0, 0 0))')), 3) \u2192 0.260 scale \u21b5 Restituisce una versione scalata di una geometria. I calcoli sono nel sistema di riferimento spaziale di questa geometria. Sintassi: scale( geometry , x_scale , y_scale , [, center ] ) Argomenti: geometry una geometria x_scale Fattore di scala asse-x y_scale Fattore di scala asse-y center punto centrale della scalatura. Se non specificato, viene utilizzato il centro del rettangolo di delimitazione della geometria. Esempi: scale($geometry, 2, 0.5, make_point(4, 5)) \u2192 geometria scalata di due volte in orizzontale e dimezzata in verticale, intorno al punto (4, 5) scale($geometry, 2, 0.5) \u2192 geometria scalata di due volte in orizzontale e dimezzata in verticale, intorno al centro del suo riquadro di delimitazione geometria scalata del 75% (in x e y) rispetto il centroide della stessa geometria di partenza: scale($geometry,.75,.75, centroid($geometry)) segments_to_lines \u21b5 Restituisce una geometria multi linea consistente in una linea per ogni segmento nella geometria in ingresso. Sintassi: segments_to_lines( geometry ) Argomenti: geometry oggetto geometria Esempi: geom_to_wkt(segments_to_lines(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))) \u2192 'MultiLineString ((0 0, 1 1),(1 1, 2 2))' shared_paths \u21b5 Restituisce un insieme contenente i percorsi condivisi dalle due geometrie in ingresso. Quelli che vanno nella stessa direzione sono nel primo elemento della collezione, quelli che vanno nella direzione opposta sono nel secondo elemento. I percorsi di per se stessi sono dati nella direzione della prima geometria. Sintassi: shared_paths( geometry1 , geometry2 ) Argomenti: geometry1 una geometria di tipo LineString/MultiLineString geometry2 una geometria di tipo LineString/MultiLineString Esempi: - geom_to_wkt(shared_paths(geom_from_wkt('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)))'),geom_from_wkt('LINESTRING(151 100,126 156.25,126 125,90 161, 76 175)'))) \u2192 'GeometryCollection (MultiLineString ((126 156.25, 126 125),(101 150, 90 161),(90 161, 76 175)),MultiLineString EMPTY)' - geom_to_wkt(shared_paths(geom_from_wkt('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),geom_from_wkt('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'))) \u2192 'GeometryCollection (MultiLineString EMPTY,MultiLineString ((76 175, 90 161),(90 161, 101 150),(126 125, 126 156.25)))' shortest_line \u21b5 Restituisce la linea pi\u00f9 corta che unisce la geometria 1 alla geometria 2. La linea risultante partir\u00e0 dalla geometria 1 e finir\u00e0 nella geometria 2. Sintassi: shortest_line( geometry1 , geometry2 ) Argomenti: geometry1 geometria dalla quale cercare la linea pi\u00f9 corta geometry2 geometria verso la quale cercare la linea pi\u00f9 corta Esempi: geom_to_wkt(shortest_line(geom_from_wkt('LINESTRING (20 80, 98 190, 110 180, 50 75 )'),geom_from_wkt('POINT(100 100)'))) \u2192 LineString(73.0769 115.384, 100 100) -- simplify \u21b5 Semplifica una geometria rimuovendo nodi usando una soglia basata sulla distanza (cio\u00e8, l'algoritmo Douglas Peucker). L'algoritmo mantiene grandi deviazioni nelle geometrie e riduce il numero di vertici in segmenti quasi rettilinei. Sintassi: simplify(simplify_vw( geometry , tolerance ) Argomenti: geometry una geometria tolerance deviazione massima dai segmenti rettilinei per i punti da rimuovere Esempi: geom_to_wkt(simplify(geometry:=geom_from_wkt('LineString(0 0, 5 0.1, 10 0)'),tolerance:=5)) \u2192 'LineString(0 0, 10 0)' simplify_vw \u21b5 Semplifica una geometria rimuovendo nodi usando una soglia basata sull'area (cio\u00e8, l'algoritmo Visvalingam-Whyatt ). L'algoritmo rimuove i vertici che creano piccole aree nelle geometrie, ad esempio picchi stretti o segmenti quasi rettilinei. Sintassi: simplify_vw( geometry , tolerance ) Argomenti: geometry una geometria tolerance una misura dell'area massima creata da un nodo per il nodo da rimuovere Esempi: geom_from_wkt('LineString(0 0, 5 0, 5.01 10, 5.02 0, 10 0)'),tolerance:=5)) \u2192 'LineString(0 0, 10 0)' -- single_sided_buffer \u21b5 Restituisce una geometria formata facendo un buffer solo da un lato di una geometria di tipo linestring. Le distanze sono espresse nel SR di tale geometria. Sintassi: single_sided_buffer( geometry , distance [, segments=8 ][, join=1 ][, miter_limit=2.0 ]) [ ] indica componenti opzionali Argomenti: geometry una geometria (multi)linestring distance distanza di buffer. Valori positivi saranno bufferizzati a sinistra delle linee, valori negativi a destra segments numero di segmenti da usare per rappresentare un quarto di cerchio quando \u00e8 utilizzato uno stile di unione arrotondato. Un numero grande risulta in un buffer pi\u00f9 morbido, con pi\u00f9 nodi. join stile di unione per gli angoli, dove 1 = arrotondato, 2 = seghettato e 3 = smussato miter_limit limite sul rapporto di seghettatura usato per angoli molto appuntiti (solamente quando si usano le unioni seghettate) Esempi: single_sided_buffer($geometry, 10.5) \u2192 linea bufferizzata a sinistra di 10.5 unit\u00e0 single_sided_buffer($geometry, -10.5) \u2192 linea bufferizzata a destra di 10.5 unit\u00e0 single_sided_buffer($geometry, 10.5, segments:=16, join:=1) \u2192 linea bufferizzata a sinistra di 10.5 unit\u00e0, usando pi\u00f9 segmenti per risultare in un buffer pi\u00f9 morbido single_sided_buffer($geometry, 10.5, join:=3) \u2192 linea bufferizzata a sinistra di 10.5 unit\u00e0, usando un'unione smussata -- sinuosity \u21b5 Restituisce la sinuosit\u00e0 di una curva che \u00e8 il rapporto tra la lunghezza della curva e la distanza diretta (2D) tra i suoi punti iniziali e finali. Sintassi sinuosity( geometry ) Argomenti geometry Curva in ingresso (circularstring, linestring) Esempi round(sinuosity(geom_from_wkt('LINESTRING(2 0, 2 2, 3 2, 3 3)')), 3) \u2192 1.265 sinuosity(geom_from_wkt('LINESTRING( 3 1, 5 1)')) \u2192 1.0 smooth \u21b5 Smussa una geometria con l'aggiunta di ulteriori nodi che arrotondano gli angoli nella geometria. Sintassi: smooth( geometry , iterations=1 , offset=0.25 , min_length=1 , max_angle=180 ) Argomenti: geometry una geometria iterations Numero di iterazioni di smussatura da applicare. Valori pi\u00f9 alti fanno risultare geometria pi\u00f9 morbide, ma pi\u00f9 complesse. offset valore tra 0 e 0.5 che controlla quanto la geometria smussata segua strettamente la geometria originale. Valori pi\u00f9 piccoli risultano in una lisciatura pi\u00f9 stretta, valori pi\u00f9 grandi risultano in una lisciatura pi\u00f9 larga. min_length lunghezza minima dei segmenti ai quali applicare la smussatura. Questo parametro pu\u00f2 essere usato per evitare di posizionare nodi aggiuntivi eccessivi nei segmenti pi\u00f9 corti della geometria. max_angle angolo massimo (0-180) da applicare al nodo per la smussatura. Abbassando intenzionalmente l'angolo massimo si abbassa l'arrotondamento sugli angoli della geometria. Per esempio, un valore di 80 gradi preserver\u00e0 l'angolo nella geometria. Esempi: geom_to_wkt(smooth(geometry:=geom_from_wkt('LineString(0 0, 5 0, 5 5)'),iterations:=1,offset:=0.2,min_length:=-1,max_angle:=180)) \u2192 'LineString (0 0, 4 0, 5 1, 5 5)' square_wave \u21b5 Costruisce onde quadrate/rettangolari lungo il confine di una geometria. Sintassi: square_wave( geometry , wavelength , amplitude , [, strict ] ) Argomenti: geometry una geometria wavelength lunghezza d'onda di un'onda di forma quadra amplitude ampiezza di un'onda di forma triangolare strict Per valore predefinito l'argomento lunghezza d'onda \u00e8 trattato come una \"lunghezza d'onda massima\", dove la lunghezza d'onda effettiva sar\u00e0 regolata dinamicamente in modo che un numero esatto di onde quadrate sia creato lungo i confini della geometria. Se l'argomento strict \u00e8 impostato a true allora la lunghezza d'onda sar\u00e0 usata esattamente e una forma incompleta potrebbe essere usata per la forma d'onda finale. Esempi: square_wave(geom_from_wkt('LineString(0 0, 10 0)'), 3, 1) \u2192 Onde quadrate con lunghezza d'onda 3 e ampiezza 1 lungo la linea square_wave_randomized \u21b5 Costruisce onde quadrate/rettangolari casuali lungo il confine di una geometria. Sintassi: square_wave_randomized( geometry , min_wavelength , max_wavelength , min_amplitude , max_amplitude [, seed=0 ] ) Argomenti: geometry una geometria min_wavelength lunghezza d'onda minima delle onde max_wavelength lunghezza d'onda massima delle onde min_amplitude ampiezza minima delle onde max_amplitude ampiezza massima delle onde seed specifica un seme casuale per la generazione delle onde. Se il seme \u00e8 0, allora verr\u00e0 generato un insieme completamente casuale di onde. Esempi: square_wave_randomized(geom_from_wkt('LineString(0 0, 10 0)'), 2, 3, 0.1, 0.2) \u2192 Onde quadrate di dimensioni casuali con lunghezze d'onda tra 2 e 3 e ampiezze tra 0,1 e 0,2 lungo la linea start_point \u21b5 Restituisce il primo nodo di una geometria. Sintassi: start_point( geometry ) Argomenti: geometry oggetto geometria Esempi: geom_to_wkt(start_point(geom_from_wkt('LINESTRING(4 0, 4 2, 0 2)'))) \u2192 'Point (4 0)' Start_point di geometria poligonale: Start_point di geometria lineare: straight_distance_2d \u21b5 Restituisce la distanza diretta/euclidea tra il primo e l'ultimo vertice di una geometria. La geometria deve essere una curva (circularstring, linestring). Sintassi straight_distance_2d( geometry ) Argomenti geometry una geometria (circularstring, linestring) Esempi straight_distance_2d(geom_from_wkt('LINESTRING(1 0, 1 1)')) \u2192 1 round(straight_distance_2d(geom_from_wkt('LINESTRING(1 4, 3 5, 5 0)')), 3) \u2192 5.657 sym_difference \u21b5 Restituisce una geometria che rappresenta la porzione di due geometrie che non si interseca. Sintassi: sym_difference( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( sym_difference( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 8 8)' ) ) ) \u2192 LINESTRING(5 5, 8 8) Espressione -- differenza simmetrica tra le due linee sym_difference( make_line( -- linea a start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))), make_line( -- linea b start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)) ) -- NB: -- l' ordine delle geometrie \u00e8 indifferente Prova tu Dati e progetto qgz -- tapered_buffer \u21b5 Crea un buffer lungo una geometria della linea in cui il diametro del buffer varia in modo uniforme sulla lunghezza della linea. Sintassi: tapered_buffer( geometry , start_width , end_width [, segments=8 ]_) [ ] contrassegna componenti opzionali Argomenti: geometry input geometry. Deve essere una (multi) geometria della linea. start_width larghezza del buffer all'inizio della linea, end_width larghezza del buffer alla fine della riga. segments numero di segmenti per approssimare le curve del quarto di cerchio nel buffer Esempi: tapered_buffer(geometry:=geom_from_wkt('LINESTRING(1 2, 4 2)'),start_width:=1,end_width:=2,segments:=8) \u2192 Un buffer rastremato che inizia con un diametro di 1 e termina con un diametro di 2 lungo la geometria della linea. -- QGIS - feature touches \u21b5 Verifica se una geometria tocca un'altra. Restituisce vero (1) se le geometrie hanno almeno un punto in comune, ma i loro interni non si intersecano. Sintassi: touches( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: touches( geom_from_wkt( 'LINESTRING(5 3, 4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 1 touches( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(5 5)' ) ) \u2192 0 Nota bene: -- Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): touches(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry) dove: geometry1 \u00e8 geometry(get_feature( 'province_rt_rt','pk_uid','52')) geometry2 \u00e8 $geometry seleziono tutti i comuni touches (toccati) dalla provincia con pk_uid 46 (Siena) PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli toccati dalla provincia di Siena). NOT touches(geometry(get_feature( 'province_rt_rt','pk_uid','52')),$geometry) transform \u21b5 Restituisce la geometria trasformata da un SR sorgente ad un SR di destinazione. Sintassi: transform( geometry , source_auth_id , dest_auth_id ) Argomenti: geometry una geometria source_auth_id ID del SR sorgente dest_auth_id ID del SR destinazione Esempi: geom_to_wkt( transform( $geometry, 'EPSG:2154', 'EPSG:4326' ) ) \u2192 POINT(0 51) -- translate \u21b5 Restituisce una versione traslata di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: translate( geometry , dx , dy ) Argomenti: geometry una geometria dx delta x geomdyetry delta y Esempi: translate($geometry, 5, 10) \u2192 una geometria dello stesso tipo come l'originale -- triangular_wave \u21b5 Costruisce onde triangolari lungo il confine di una geometria. Sintassi: triangular_wave( geometry , wavelength , amplitude , [, strict ] ) Argomenti: geometry una geometria wavelength lunghezza d'onda di un'onda di forma triangolare amplitude ampiezza di un'onda di forma triangolare strict Costruisce onde triangolari lungo i confini di una geometria. Per default l'argomento lunghezza d'onda \u00e8 trattato come una \"lunghezza d'onda massima\", dove la lunghezza d'onda effettiva sar\u00e0 regolata dinamicamente in modo da creare un numero esatto di onde triangolari lungo i confini della geometria. Se l'argomento strict \u00e8 impostato a true, allora la lunghezza d'onda sar\u00e0 usata esattamente e una forma incompleta potrebbe essere usato per la forma d'onda finale. Esempi: triangular_wave(geom_from_wkt('LineString(0 0, 10 0)'), 3, 1) \u2192 Onde triangolari con lunghezza d'onda 3 e ampiezza 1 lungo la linea triangular_wave_randomized \u21b5 Costruisce onde triangolari casuali lungo il confine di una geometria. Sintassi: triangular_wave_randomized( geometry , min_wavelength , max_wavelength , min_amplitude , max_amplitude [, seed=0 ] ) Argomenti: geometry una geometria min_wavelength lunghezza d'onda minima delle onde max_wavelength lunghezza d'onda massima delle onde min_amplitude ampiezza minima delle onde max_amplitude ampiezza massima delle onde seed specifica un seme casuale per la generazione delle onde. Se il seme \u00e8 0, allora verr\u00e0 generato un insieme completamente casuale di onde. Esempi: triangular_wave_randomized(geom_from_wkt('LineString(0 0, 10 0)'), 2, 3, 0.1, 0.2) \u2192 Onde triangolari di dimensioni casuali con lunghezze d'onda tra 2 e 3 e ampiezze tra 0,1 e 0,2 lungo la linea union \u21b5 Restituisce una geometria che rappresenta l'insieme dei punti dell'unione delle geometrie. Sintassi: union( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( union( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(5 5)' ) ) ) \u2192 MULTIPOINT(4 4, 5 5) Espressione -- unione delle due linee union( make_line( -- linea a start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))), make_line( -- linea b start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)) ) -- NB: -- l' ordine delle geometrie \u00e8 indifferente Prova tu Dati e progetto qgz -- wave \u21b5 Costruisce onde arrotondate (sinusoidali) lungo il confine di una geometria. Sintassi: wave( geometry , wavelength , amplitude , [, strict ] ) Argomenti: geometry una geometria wavelength lunghezza d'onda di un'onda di forma sinusoidale amplitude ampiezza di un'onda di forma sinusoidale strict Per valore predefinito l'argomento lunghezza d'onda \u00e8 trattato come una \"lunghezza d'onda massima\", dove la lunghezza d'onda effettiva sar\u00e0 regolata dinamicamente in modo che un numero esatto di onde quadrate sia creato lungo i confini della geometria. Se l'argomento strict \u00e8 impostato a true allora la lunghezza d'onda sar\u00e0 usata esattamente e una forma incompleta potrebbe essere usata per la forma d'onda finale. Esempi: wave(geom_from_wkt('LineString(0 0, 10 0)'), 3, 1) \u2192 Onde sinusoidali con lunghezza d'onda 3 e ampiezza 1 lungo la linea wave_randomized \u21b5 Costruisce onde curve casuali (sinusoidali) lungo il confine di una geometria. Sintassi: wave_randomized( geometry , min_wavelength , max_wavelength , min_amplitude , max_amplitude [, seed=0 ] ) Argomenti: geometry una geometria min_wavelength lunghezza d'onda minima delle onde max_wavelength lunghezza d'onda massima delle onde min_amplitude ampiezza minima delle onde max_amplitude ampiezza massima delle onde seed specifica un seme casuale per la generazione delle onde. Se il seme \u00e8 0, allora verr\u00e0 generato un insieme completamente casuale di onde. Esempi: wave_randomized(geom_from_wkt('LineString(0 0, 10 0)'), 2, 3, 0.1, 0.2) \u2192 Onde curve di dimensioni casuali con lunghezze d'onda tra 2 e 3 e ampiezze tra 0,1 e 0,2 lungo la stringa wedge_buffer \u21b5 Restituisce un buffer a forma di cuneo che origina da una geometria del punto. Sintassi: wedge_buffer( geometry , azimuth , width , outer_radius [, inner_radius=0.0 ]) [ ] contrassegna componenti opzionali Argomenti: geometry punto centrale (origine) del buffer. Deve essere una geometria puntuale. azimuth (in gradi) per il centro del cuneo da puntare. width buffer w larghezza (in gradi). Si noti che il cuneo si estender\u00e0 fino a met\u00e0 della larghezza angolare su entrambi i lati della direzione dell'azimut. outer_radius raggio esterno per i buffers inner_radius raggio interno opzionale per i buffers Esempi: wedge_buffer(center:=geom_from_wkt('POINT(1 2)'),azimuth:=90,width:=180,outer_radius:=1) \u2192 Un buffer a forma di cuneo centrato sul punto (1,2), rivolto verso est, con una larghezza di 180 gradi e raggio esterno di 1. -- within \u21b5 Controlla qualora una geometria sia interna ad un'altra. Restituisce 1 (vero) se la geometria1 \u00e8 completamente contenuta nella_ geometria2_. Sintassi: within( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: within( geom_from_wkt( 'POINT( 0.5 0.5)' ), geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ) ) \u2192 1 within( geom_from_wkt( 'POINT( 5 5 )' ), geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0 ))' ) ) \u2192 0 Osservazioni: Usando algoritmo `Seleziona per espressione` presente in strumenti di processing oppure ![icona](https://docs.qgis.org/2.18/en/_images/mIconExpressionSelect.png) (Ctrl+F3): - within($geometry,geometry(get_feature( 'province_rt_rt','pk_uid','53'))) dove: geometry1 \u00e8 $geometry geometry2 \u00e8 geometry(get_feature( 'province_rt_rt','pk_uid','53')) seleziono tutti i comuni within (contenuti) nella provincia con pk_uid 53 (Grosseto) PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli contenuti nella provincia di Grosseto). NOT within($geometry,geometry(get_feature( 'province_rt_rt','pk_uid','53'))) Altro esempio con condizione sulle etichette Espressione CASE WHEN within( $geometry, geometry(get_feature('poligono','id',1))) = 1 THEN 'INTERNO' ELSE 'NON INTERNO' END x \u21b5 Restituisce la minima coordinata x di una geometria punto, o la coordinata x del centroide di una geometria non puntuale. Sintassi: x( geometry ) Argomenti: geometry una geometria Esempi: x( geom_from_wkt( 'POINT(2 5)' ) ) \u2192 2 x( $geometry ) \u2192 coordinata x del centroide dell'elemento corrente -- x_max \u21b5 Restituisce la coordinata x massima di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: x_max( geometry ) Argomenti: geometry una geometria Esempi: x_max( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 4 -- x_min \u21b5 Restituisce la coordinata x minima di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: x_min( geometry ) Argomenti: geometry una geometria Esempi: x_min( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 2 -- y \u21b5 Restituisce la coordinata y minima di una geometria puntuale, o la coordinata y del centroide di una geometria non puntuale. Sintassi: y( geometry ) Argomenti: geometry una geometria Esempi: y( geom_from_wkt( 'POINT(2 5)' ) ) \u2192 5 y( $geometry ) \u2192 coordinata y del centroide dell'elemento corrente -- y_max \u21b5 Restituisce la coordinata y massima di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: y_max( geometry ) Argomenti: geometry una geometria Esempi: y_max( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 8 -- y_min \u21b5 Restituisce la coordinata y minima di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: y_min( geometry ) Argomenti: geometry una geometria Esempi: y_min( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 5 -- z \u21b5 Restituisce la coordinata z di una geometria puntuale. Sintassi: z( geometry ) Argomenti: geometry una geometria punto Esempi: z( geom_from_wkt( 'POINTZ(2 5 7)' ) ) \u2192 7 $z \u21b5 Restituisce il valore z del punto corrente se \u00e8 3D. Se la feature \u00e8 una feature multipunto, verr\u00e0 restituito il valore z del primo punto. Sintassi $z Esempi $z \u2192 123 z_max \u21b5 Restituisce la coordinata z massima di una geometria. Sintassi: z_max( geometry ) Argomenti: geometry una geometria con z coordinata Esempi: z_max( geom_from_wkt( 'POINT ( 0 0 1 )' ) ) \u2192 1 z_max( geom_from_wkt( 'MULTIPOINT ( 0 0 1 , 1 1 3 )' ) ) \u2192 3 z_max( make_line( make_point( 0,0,0 ), make_point( -1,-1,-2 ) ) ) \u2192 0 z_max( geom_from_wkt( 'LINESTRING( 0 0 0, 1 0 2, 1 1 -1 )' ) ) \u2192 2 z_max( geom_from_wkt( 'POINT ( 0 0 )' ) ) \u2192 NULL z_min \u21b5 Restituisce la coordinata z minima di una geometria. Sintassi: z_min( geometry ) Argomenti: geometry una geometria con z coordinata Esempi: z_min( geom_from_wkt( 'POINT ( 0 0 1 )' ) ) \u2192 1 z_min( geom_from_wkt( 'MULTIPOINT ( 0 0 1 , 1 1 3 )' ) ) \u2192 1 z_min( make_line( make_point( 0,0,0 ), make_point( -1,-1,-2 ) ) ) \u2192 -2 z_min( geom_from_wkt( 'LINESTRING( 0 0 0, 1 0 2, 1 1 -1 )' ) ) \u2192 -1 z_min( geom_from_wkt( 'POINT ( 0 0 )' ) ) \u2192 NULL","title":"Geometria"},{"location":"gr_funzioni/geometria/geometria_unico/#gruppo-geometria","text":"Abstract Questo gruppo contiene funzioni che operano sugli oggetti geometrici es: lunghezza , area .","title":"Gruppo Geometria"},{"location":"gr_funzioni/geometria/geometria_unico/#affine_transform","text":"Restituisce la geometria dopo una trasformazione affine. I calcoli sono nel sistema di riferimento spaziale di questa geometria. Le operazioni vengono eseguite in un ordine di scala, rotazione, traslazione. Se c'\u00e8 un offset Z o M ma la coordinata non \u00e8 presente nella geometria, verr\u00e0 aggiunta. Sintassi affine_transform( geometry , deltaX , deltaY , rotationZ , scaleX , scaleY [, deltaZ=0 ][, deltaM=0 ][, scaleZ=1 ][, scaleM=1 ]) [ ] indica componenti opzionali Argomenti geometry una geometria deltaX x-axis traslazione deltaY y-axis traslazione rotationZ rotation around z-axis in degrees counter-clockwise scaleX _ x-axis fattore di scala scaleY y-axis fattore di scala deltaZ z-axis traslazione deltaM m-axis traslazione scaleZ z-axis fattore di scala scaleM m-axis fattore di scala Esempi geom_to_wkt(affine_transform(geom_from_wkt('LINESTRING(1 1, 2 2)'), 2, 2, 0, 1, 1)) \u2192 'LineString (3 3, 4 4)' geom_to_wkt(affine_transform(geom_from_wkt('POLYGON((0 0, 0 3, 2 2, 0 0))'), 0, 0, -90, 1, 2)) \u2192 'Polygon ((0 0, 6 0, 4 -2, 0 0))' geom_to_wkt(affine_transform(geom_from_wkt('POINT(3 1)'), 0, 0, 0, 1, 1, 5, 0)) \u2192 'PointZ (3 1 5)' Osservazione La funzione trasforma le geometrie a partire dall'origine delle coordinate del sistema di riferimento del layer, sotto un esempio: affine_transform( geometry:= $geometry, deltaX:=0, deltaY:=0, rotationZ:=45, scaleX:=1, scaleY:=1)","title":"affine_transform"},{"location":"gr_funzioni/geometria/geometria_unico/#area","text":"Restituisce l'area della geometria corrente. L'area calcolata da questa funzione rispetta sia le impostazioni dell'ellissoide del progetto corrente sia delle unit\u00e0 di misura. Per esempio, se \u00e8 stato impostato un ellissoide per il progetto allora l'area calcolata sar\u00e0 ellisoidica altrimenti se non \u00e8 stato impostato alcun ellissoide l'area calcolata sar\u00e0 planimetrica. Sintassi: $area Esempi: $area \u2192 131196498,619546 Nota bene: Se il SR del progetto in cui si sta calcolando l'area ( $area ) fosse un sistema proiettato (es:EPSG 3003/4; 32632/33/34 ecc..) allora l'unit\u00e0 di misura sarebbe il metro, invece se il SR del progetto fosse EPSG 4326, cio\u00e8 un sistema geografico, allora l'unit\u00e0 di misura dell'area sarebbe gradi e quindi poco comprensibile e valori piccoli (0.00001). Osservazione: in generale $area <> area($geometry) da >= QGIS 3.20 le misure legate all'uso degli ellissoidi, per esempio $area e $length , utilizzano lo stesso metodo di PostGIS ( le routine GeographicLib ) quindi le misure risulteranno pi\u00f9 'precise' rispetto alle versioni precedenti di QGIS. (vedi: discussione , feature request , pull request ).","title":"$area"},{"location":"gr_funzioni/geometria/geometria_unico/#geometry","text":"Restituisce la geometria dell'elemento attuale. Pu\u00f2 essere usato per il processamento con altre funzioni. ATTENZIONE : Questa funzione \u00e8 deprecata (a partire da QGIS 3.28.0 Firenze ). Si consiglia di utilizzare la variabile sostitutiva @geometry NB: $geometry richiama l'attributo geometria!!! Sintassi: $geometry Esempi: geomToWKT( $geometry ) \u2192 POINT(6 50) area($geoamtry) \u2192 1234567.89 perimeter($geometry) \u2192 25689.25 area(@geoamtry) \u2192 1234567.89 Osservazioni: il $ indica che \u00e8 relativo all'elemento corrente e non ha bisogno di argomenti.","title":"$geometry"},{"location":"gr_funzioni/geometria/geometria_unico/#length","text":"Restituisce la lunghezza di una linestring. Se hai bisogno della lunghezza del bordo di un poligono, utilizza invece $perimeter . La lunghezza calcolata da questa funzione rispetta le impostazioni sia dell'ellissoide sia delle unit\u00e0 di misura del progetto corrente. Per esempio, se \u00e8 stato impostato un ellissoide per il progetto allora la lunghezza calcolata sar\u00e0 ellisoidica altrimenti se non \u00e8 stato impostato alcun ellissoide la lunghezza calcolata sar\u00e0 planimetrica. Sintassi: $length Esempi: $length \u2192 42.4711 Osservazione: Come evidenziano nella definizione della funzione, $length calcola la lunghezza rispettando le impostazioni di progetto: Occorre cambiare entrambe le impostazioni, sia quelle dell'ellissoide \u2192 'None/Planimetric' sia le Unit\u00e0 di misura per le distanze' \u2192 Gradi Queste modofiche non valgono per l'etichettatura, la lunghezza sar\u00e0 quella relativa alla geometria e quindi al suo SR. da >= QGIS 3.20 le misure legate all'uso degli ellissoidi, per esempio $area e $length , utilizzano lo stesso metodo di PostGIS ( le routine GeographicLib ) quindi le misure risulteranno pi\u00f9 'precise' rispetto alle versioni precedenti di QGIS. (vedi: discussione , feature request , pull request ). Nota: il $ indica che \u00e8 relativo all'elemento corrente e non ha bisogno di argomenti.","title":"$length"},{"location":"gr_funzioni/geometria/geometria_unico/#perimeter","text":"Restituisce la lunghezza del perimetro della geometria corrente. Il perimetro calcolato da questa funzione rispetta le impostazioni sia dell'ellissoide sia delle unit\u00e0 di misura del progetto corrente. Per esempio, se \u00e8 stato impostato un ellissoide per il progetto allora il perimetro calcolato sar\u00e0 ellisoidico altrimenti se non \u00e8 stato impostato alcun ellissoide il perimetro calcolato sar\u00e0 planimetrico. Sintassi: $perimeter Esempi: $perimeter \u2192 2545897.26 Osservazione: Si utilizza SOLO per i poligoni, nel caso di feature lineari $length da >= QGIS 3.20 le misure legate all'uso degli ellissoidi, per esempio $area e $length , utilizzano lo stesso metodo di PostGIS ( le routine GeographicLib ) quindi le misure risulteranno pi\u00f9 'precise' rispetto alle versioni precedenti di QGIS. (vedi: discussione , feature request , pull request ). Nota: il $ indica che \u00e8 relativo all'elemento corrente e non ha bisogno di argomenti.","title":"$perimeter"},{"location":"gr_funzioni/geometria/geometria_unico/#x","text":"Restituisce la coordinata x della geometria corrente. Sintassi: $x Esempi: $x \u2192 12.2568971 Osservazione: La funzione $x restituisce la coordinata x della geometria corrente purch\u00e8 sia un POINT altrimenti restituisce NULL (vedi screenshot) Per ottenere le coordinate x o y occorre utilizzare una combinazione di funzioni ed: x($geometry) che vale per qualunque tipologia di geometria (point, linestring, polygon)","title":"$x"},{"location":"gr_funzioni/geometria/geometria_unico/#x_at","text":"Recupera una coordinata x per la geometria dell'elemento corrente. Sintassi: $x_at( i ) Argomenti: i indice del punto di una linea (indici partono da 0; valori negativi si applicano dall'ultimo indice, partendo da -1) Esempi: $x_at(1) \u2192 12.6882843 Osservazioni: Le lineastring hanno un verso e quindi l'indice 0 indica il primo vertice mentre indici negativi significano che la conta inizia dalla l'ultimo vertice: -10 significa il 10-mo vertice partendo dall'ultimo vertice.","title":"$x_at"},{"location":"gr_funzioni/geometria/geometria_unico/#y","text":"Restituisce la coordinata y della geometria corrente. Sintassi: $y Esempi: $y \u2192 12.2568971 Osservazione: La funzione $y restituisce la coordinata y della geometria corrente purch\u00e8 sia un POINT altrimenti restituisce NULL (vedi screenshot) Per ottenere le coordinate x o y occorre utilizzare una combinazione di funzioni es: y($geometry) che vale per qualunque tipologia di geometria (point, linestring, polygon)","title":"$y"},{"location":"gr_funzioni/geometria/geometria_unico/#y_at","text":"Recupera una coordinata y per la geometria dell'elemento corrente. Sintassi: $y_at( i ) Argomenti: i indice del punto di una linea (indici partono da 0; valori negativi si applicano dall'ultimo indice, partendo da -1) Esempi: $y_at(1) \u2192 2 Osservazioni: Le lineastring hanno un verso e quindi l'indice 0 indica il primo vertice mentre indici negativi significano che la conta inizia dalla l'ultimo vertice: -10 significa il 10-mo vertice partendo dall'ultimo vertice.","title":"$y_at"},{"location":"gr_funzioni/geometria/geometria_unico/#angle_at_vertex","text":"Restituisce l'angolo della bisettrice (angolo medio) della geometria per un vertice specifico di una geometria di tipo linestring. Gli angoli sono in gradi in senso orario dal nord. Sintassi: angle_at_vertex( geometry , vertex ) Argomenti: geometry una geometria di tipo linestring vertex indice vertice, partendo da 0 Esempi: angle_at_vertex(geometry:=geom_from_wkt('LineString(0 0, 10 0, 10 10)'),vertex:=1) \u2192 45.0 Osservazione: Il primo ed ultimo vertice di una lineastring aperta la funzione restituisce il valore dell'angolo e non la bisettrice.","title":"angle_at_vertex"},{"location":"gr_funzioni/geometria/geometria_unico/#apply_dash_pattern","text":"Applica un modello di trattino ad una geometria, restituendo una geometria MultiLineString che \u00e8 la geometria di input rappresentata lungo ogni linea/anello con il modello specificato. Sintassi: apply_dash_pattern( geometry , pattern , [, start_rule=no_rule ] , [, end_rule=no_rule ] , [, adjustment=both ] , [, pattern_offset=0 ] ) Argomenti: geometry una geometria (accetta (multi)linee o (multi)poligoni). pattern modello di trattino, come un array di numeri che rappresentano la lunghezza dei trattini e degli spazi. Deve contenere un numero pari di elementi. start_rule regola opzionale per vincolare l'inizio del modello. I valori validi sono 'no_rule', 'full_dash', 'half_dash', 'full_gap', 'half_gap'. end_rule regola facoltativa per vincolare la fine del pattern. I valori validi sono 'no_rule', 'full_dash', 'half_dash', 'full_gap', 'half_gap'. adjustment regola opzionale atta a specificare quale parte dei modelli sono adattate alle regole del modello desiderato. I valori validi sono 'both', 'dash', 'gap'. pattern_offset Distanza opzionale che indica una distanza specifica lungo il modello da cui iniziare. Esempi: geom_to_wkt(apply_dash_pattern(geom_from_wkt('LINESTRING(1 1, 10 1)'), array(3, 1))) \u2192 MultiLineString ((1 1, 4 1),(5 1, 8 1),(9 1, 10 1, 10 1)) geom_to_wkt(apply_dash_pattern(geom_from_wkt('LINESTRING(1 1, 10 1)'), array(3, 1), start_rule:='half_dash')) \u2192 MultiLineString ((1 1, 2.5 1),(3.5 1, 6.5 1),(7.5 1, 10 1, 10 1))","title":"apply_dash_pattern"},{"location":"gr_funzioni/geometria/geometria_unico/#area_1","text":"Restituisce l'area di un oggetto a geometria poligonale. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di detta geometria, e l'unit\u00e0 di misura dell'area restituita \u00e8 conforme all'unit\u00e0 di misura del SR. Ci\u00f2 differisce dal calcolo eseguito dalla funzione $area, la quale esegue calcoli ellisoidici basati sull'ellissoide del progetto e sulle impostazioni delle unit\u00e0 di misura dell'area. Sintassi: area( geometry ) Argomenti: geometry oggetto geometria poligono Esempi: area($geometry) \u2192 1234.567 Nota bene: Se il SR del layer in cui si sta calcolando l'area ( area() ) fosse un sistema proiettato (es:EPSG 3003/4; 32632/33/34 ecc..) l'unit\u00e0 di misura sarebbe il metro, invece se il SR del layer fosse EPSG 4326, cio\u00e8 un sistema geografico, allora l'unit\u00e0 di misura dell'area sarebbe in gradi e quindi poco comprensibile e valori piccoli. Osservazioni: in generale area($geometry) <> $area","title":"area"},{"location":"gr_funzioni/geometria/geometria_unico/#azimuth","text":"Restituisce l'azimut dal nord quale angolo in radianti misurato in senso orario dalla verticale del punto_a al punto_b. Sintassi: azimuth( point_a , point_b ) Argomenti: point_a geometria punto point_b geometria punto Esempi: degrees( azimuth( make_point(25, 45), make_point(75, 100) ) ) \u2192 42.273689 degrees( azimuth( make_point(75, 100), make_point(25,45) ) ) \u2192 222.273689 Osservazione: Azimuth per definizione restituisce un angolo in radianti, per trasformarlo in gradi usare la funzione degrees()","title":"Azimuth"},{"location":"gr_funzioni/geometria/geometria_unico/#boundary","text":"Restituisce l'area minima della combinazione dei confini della geometria (cio\u00e8 il confine topologico della geometria). Per esempio, una geometria poligonale avr\u00e0 un confine costituito dalle linee di ogni anello nel poligono. Alcuni tipi di geometrie non hanno confini, es collezioni di punti o geometrie e pertanto verr\u00e0 restituito NULL . Sintassi: boundary( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt(boundary(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))'))) \u2192 'LineString(1 1,0 0,-1 1,1 1)' geom_to_wkt(boundary(geom_from_wkt('LineString(1 1,0 0,-1 1)'))) \u2192 'MultiPoint ((1 1),(-1 1))' Osservazioni: funzione molto utile per la tematizzazione aggiungendo un nuovo layer con geometry generator","title":"boundary"},{"location":"gr_funzioni/geometria/geometria_unico/#bounds","text":"Restituisce la geometria che rappresenta il perimetro di delimitazione di una geometria in ingresso. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: bounds( geometry ) Argomenti: geometry una geometria Esempi: bounds($geometry) \u2192 perimetro di delimitazione dell'elemento geometrico corrente geom_to_wkt(bounds(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))'))) \u2192 'Polygon ((-1 0, 1 0, 1 1, -1 1, -1 0))' Osservazioni: funzione molto utile per la tematizzazione aggiungendo un nuovo layer con geometry generator","title":"bounds"},{"location":"gr_funzioni/geometria/geometria_unico/#bounds_height","text":"Restituisce l'altezza del perimetro di delimitazione di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: bounds_height( geometry ) Argomenti: geometry una geometria Esempi: bounds_height($geometry) \u2192 altezza del perimetro di delimitazione dell'elemento geometrico corrente bounds_height(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))')) \u2192 1 Osservazioni: La funzione restituisce un numero che corrisponde all'altezza del rettangolo di ingombro di una geometria.","title":"bounds_height"},{"location":"gr_funzioni/geometria/geometria_unico/#bounds_width","text":"Restituisce la larghezza del perimetro di delimitazione di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: bounds_width( geometry ) Argomenti: geometry una geometria Esempi: bounds_width($geometry) \u2192 larghezza del perimetro di delimitazione di $geometry Osservazioni: La funzione restituisce un numero che corrisponde alla larghezza del rettangolo di ingombro di una geometria.","title":"bounds_width"},{"location":"gr_funzioni/geometria/geometria_unico/#buffer","text":"Restituisce una geometria che rappresenta tutti i punti la cui distanza dalla geometria \u00e8 minore o uguale alla distanza inserita. I calcoli vengono effettuati nel sistema di riferimento spaziale della geometria. Sintassi: buffer( geometry , distance [, segments=8 ]) Argomenti: geometry una geometria distance distanza buffer nelle unit\u00e0 del layer segments numero di segmenti da usare per rappresentare un quarto di cerchio quando \u00e8 utilizzato uno stile di unione arrotondato. Un numero grande risulta in un buffer pi\u00f9 morbido, con pi\u00f9 nodi. Esempi: buffer($geometry, 10.5) \u2192 poligono di $geometry bufferizzato di 10.5 unit\u00e0 Danger Utilizzando SR proiettati l'unit\u00e0 di misura \u00e8 il metro, mentre, per SR geografici \u00e8 il grado, quindi attenzione al valore della distanza. Nota bene: La Funzione restituisce SEMPRE un poligono sia per geometry POINT , LINESTRING o **POLYGON","title":"buffer"},{"location":"gr_funzioni/geometria/geometria_unico/#buffer_by_m","text":"Crea un buffer lungo una geometria linestring in cui il diametro del buffer varia in base ai valori m nei vertici della linea. Sintassi: buffer_by_m( geometry , segments ) Argomenti: geometry la geometria deve essere una (multi) geometria linestring con valori m. segments numero di segmenti per approssimare le curve del quarto di cerchio nel buffer Esempi: buffer_by_m(geometry:=geom_from_wkt('LINESTRINGM(1 2 0.5, 4 2 0.2)'),segments:=8) \u2192 Un buffer di larghezza variabile che inizia con un diametro di 0,5 e termina con un diametro di 0,2 lungo la linea. relativa all'esempio di sopra: Osservazioni: QGIS - feature","title":"buffer_by_m"},{"location":"gr_funzioni/geometria/geometria_unico/#centroid","text":"Restituisce il centro geometrico di una geometria. Sintassi: centroid( geometry ) Argomenti: geometry una geometria Esempi: centroid($geometry) \u2192 una geometria punto Osservazioni: La Funzione restituisce SEMPRE una geometry **POINT","title":"centroid"},{"location":"gr_funzioni/geometria/geometria_unico/#close_line","text":"Restituisce una linestring chiusa della linestring di input aggiungendo il primo punto alla fine della linea, se non \u00e8 gi\u00e0 chiusa. Se la geometria non \u00e8 una linestring o una MultiLinestring, il risultato sar\u00e0 NULL. Sintassi: close_line( geometry ) Argomenti: geometry una geometria linestring Esempi: geom_to_wkt(close_line(geom_from_wkt('LINESTRING(0 0, 1 0, 1 1)'))) \u2192 LineString (0 0, 1 0, 1 1, 0 0) geom_to_wkt(close_line(geom_from_wkt('LINESTRING(0 0, 1 0, 1 1, 0 0)'))) \u2192 LineString (0 0, 1 0, 1 1, 0 0)","title":"close_line"},{"location":"gr_funzioni/geometria/geometria_unico/#closest_point","text":"Restituisce il punto sulla geometria1 che \u00e8 pi\u00f9 vicino alla geometria2. Sintassi: closest_point( geometry1 , _ geometry2 ) Argomenti: geometry1 geometria sulla quale cercare il punto pi\u00f9 vicino geometry geometria dalla quale cercare il punto pi\u00f9 vicino Esempi: geom_to_wkt(closest_point(geom_from_wkt('LINESTRING (20 80, 98 190, 110 180, 50 75 )'),geom_from_wkt('POINT(100 100)'))) \u2192 Point(73.0769 115.384) Osservazioni: Utilizzando il geometry generator per i temi (il layer strade \u00e8 una unica feature): closest_point( geometry(get_feature('strade', 'reg',19)),$geometry) Gif animata: geometry 1 \u00e8 la rete stradale; geometry 2 sono i punti; in rosso i closestpoint","title":"closest_point"},{"location":"gr_funzioni/geometria/geometria_unico/#collect_geometries","text":"Raccoglie un set di geometrie in un oggetto geometria multiparte.","title":"collect_geometries"},{"location":"gr_funzioni/geometria/geometria_unico/#variante-geometry","text":"Sintassi: collect_geometries( geometry1 , geometry2 ...) Argomenti: geometry geometria sulla quale cercare il punto pi\u00f9 vicino Esempi: geom_to_wkt(collect_geometries(make_point(1,2), make_point(3,4), make_point(5,6))) \u2192 'MultiPoint ((1 2),(3 4),(5 6))'","title":"Variante geometry"},{"location":"gr_funzioni/geometria/geometria_unico/#variante-con-array","text":"Sintassi: collect_geometries( array ) Argomenti: array array con oggetti geometrici Esempi: geom_to_wkt(collect_geometries(array(make_point(1,2), make_point(3,4), make_point(5,6)))) \u2192 'MultiPoint ((1 2),(3 4),(5 6))' Osservazioni:","title":"Variante con array"},{"location":"gr_funzioni/geometria/geometria_unico/#combine","text":"Restituisce la combinazione di due geometrie. Sintassi: combine( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( combine( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 2 1)' ) ) ) \u2192 MULTILINESTRING((4 4, 2 1), (3 3, 4 4), (4 4, 5 5)) geom_to_wkt( combine( geom_from_wkt( 'LINESTRING(3 3, 4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 6 6, 2 1)' ) ) ) \u2192 LINESTRING(3 3, 4 4, 6 6, 2 1)","title":"combine"},{"location":"gr_funzioni/geometria/geometria_unico/#concave_hull","text":">= QGIS 3.18 Firenze e Geos 3.11+ Restituisce un poligono possibilmente concavo che contiene tutti i punti della geometria Sintassi: concave_hull( geometry , target_percent [, allow_holes ]) [ ] indica componenti opzionali Argomenti: geometry una geometria target_percent la percentuale di area del poligono convesso a cui la soluzione cerca di avvicinarsi. Una percentuale-obbiettivo di 1 d\u00e0 lo stesso risultato del poligono convesso. Una percentuale_obbiettivo compresa tra 0 e 0.99 produce un risultato che dovrebbe avere un'area inferiore a quella del poligono convesso. allow_holes argomento opzionale che specifica se consentire i buchi nella geometria di output. L'impostazione predefinita \u00e8 FALSE; impostare TRUE per evitare di includere i buchi nella geometria di output. Esempi: geom_to_wkt(concave_hull(geom_from_wkt('MULTILINESTRING((106 164,30 112,74 70,82 112,130 94,130 62,122 40,156 32,162 76,172 88),(132 178,134 148,128 136,96 128,132 108,150 130,170 142,174 110,156 96,158 90,158 88),(22 64,66 28,94 38,94 68,114 76,112 30,132 10,168 18,178 34,186 52,184 74,190 100,190 122,182 148,178 170,176 184,156 164,146 178,132 186,92 182,56 158,36 150,62 150,76 128,88 118))'), 0.99)) \u2192 'Polygon ((30 112, 36 150, 92 182, 132 186, 176 184, 190 122, 190 100, 186 52, 178 34, 168 18, 132 10, 112 30, 66 28, 22 64, 30 112))'","title":"concave_hull"},{"location":"gr_funzioni/geometria/geometria_unico/#_1","text":"","title":""},{"location":"gr_funzioni/geometria/geometria_unico/#contains","text":"Verifica se una geometria ne contiene un'altra. Restituisce vero se e solo se nessun punto di geometry2 giace all'esterno di geometry1 e almeno un punto dell'interno di geometry2 si trova all'interno di geometry1. Sintassi: contains( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: contains( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ), geom_from_wkt( 'POINT(0.5 0.5 )' ) ) \u2192 vero contains( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 falso Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): contains(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry) dove: geometry1 \u00e8 geometry(get_feature( 'province_rt_rt','pk_uid','46')) geometry2 \u00e8 $geometry seleziono tutti i comuni contains (contenuti) nella provincia con pk_uid 46 (Lucca) PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli contenuti nella provincia di Lucca). NOT contains(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry)","title":"contains"},{"location":"gr_funzioni/geometria/geometria_unico/#convex_hull","text":"Restituisce il poligono convesso di una geometria. Rappresenta la minima geometria convessa che racchiude tutte le geometria contenute nell'insieme. Sintassi: convex_hull( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt( convex_hull( geom_from_wkt( 'LINESTRING(3 3, 4 4, 4 10)' ) ) ) \u2192 POLYGON((3 3,4 10,4 4,3 3)) Osservazioni: La funzione restituisce sempre un poligono.","title":"convex_hull"},{"location":"gr_funzioni/geometria/geometria_unico/#crosses","text":"Verifica se una geometria interseca un'altra. Restituisce vero (1) se le geometrie interessate hanno qualche, ma non tutti, punto interno in comune. Sintassi: crosses( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: crosses( geom_from_wkt( 'LINESTRING(3 5, 4 4, 5 3)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 vero crosses( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 falso Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): crosses(geometry(get_feature( 'fiume_arno','nome','ARNO')), $geometry) dove: geometry1 \u00e8 geometry(get_feature( 'fiume_arno','nome','ARNO')) geometry2 \u00e8 $geometry seleziono tutti i comuni crosses (attraversati) dal fiume ARNO PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli attraversati dal fiume ARNO). NOT crosses(geometry(get_feature( 'fiume_arno','nome','ARNO')), $geometry)","title":"crosses"},{"location":"gr_funzioni/geometria/geometria_unico/#densify_by_count","text":"Prende una geometria di un livello poligonale o lineare e ne genera una nuova in cui le geometrie hanno un numero di vertici maggiore di quella originale. Sintassi: densify_by_count( geometry , _ vertices ) Argomenti: geometry una geometria (accetta (multi)linee o (multi)poligoni). vertices numero di vertici da aggiungere (per segmento) Esempi: geom_to_wkt(densify_by_count(geom_from_wkt('LINESTRING(1 1, 10 1)'), 3)) \u2192 LineString (1 1, 3.25 1, 5.5 1, 7.75 1, 10 1)","title":"densify_by_count"},{"location":"gr_funzioni/geometria/geometria_unico/#densify_by_distance","text":"Prende una geometria di un livello poligono o lineare e ne genera una nuova in cui le geometrie sono densificate aggiungendo ulteriori vertici sui bordi che hanno una distanza massima dell'intervallo di distanza specificato. Sintassi: densify_by_distance( geometry , _ distance ) Argomenti: geometry una geometria (accetta (multi)linee o (multi)poligoni). distance distanza massima dell'intervallo tra i vertici nella geometria in uscita Esempi: geom_to_wkt(densify_by_distance(geom_from_wkt('LINESTRING(1 1, 10 1)'), 4)) \u2192 LineString (1 1, 4 1, 7 1, 10 1)","title":"densify_by_distance"},{"location":"gr_funzioni/geometria/geometria_unico/#difference","text":"Restituisce una geometria che rappresenta la porzione della geometry_a che non interseca la geometry_b . Sintassi: difference( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( difference( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4)' ) ) ) \u2192 LINESTRING(4 4, 5 5) Espressione: Espressione -- differenza linea a - linea b difference( make_line( -- linea a start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))), make_line( -- linea b start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)) ) -- NB: -- \u00e8 importante ordine delle geometrie -- a - b \u00e8 diverso da b - a Espressione -- differenza linea b - linea a difference( make_line( -- linea b start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)), make_line( -- linea a start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))) ) -- NB: -- \u00e8 importante ordine delle geometrie -- a - b \u00e8 diverso da b - a Prova tu Dati e progetto qgz Esempio di sopra:","title":"difference"},{"location":"gr_funzioni/geometria/geometria_unico/#disjoint","text":"Controlla qualora una geometria non ne interseca spazialmente un'altra. Restituisce true (1) se le geometrie non condividono nessuno spazio comune. Sintassi: disjoint( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria * geometry2 una geometria Esempi: disjoint( geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0 ))' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 vero disjoint( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'POINT(4 4)' )) \u2192 falso Osservazione: Vero = 1; Falso= 0 Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): disjoint(geometry(get_feature( 'fiume_arno','nome','ARNO')), $geometry) dove: geometry1 \u00e8 geometry(get_feature( 'fiume_arno','nome','ARNO')) geometry2 \u00e8 $geometry seleziono tutti i comuni disjoint (disgiunti) dal fiume ARNO","title":"disjoint"},{"location":"gr_funzioni/geometria/geometria_unico/#distance","text":"Restituisce la distanza minima (basata su riferimento spaziale) tra due geometrie in unit\u00e0 proiettate. Sintassi: distance( geometry1 , _ geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: distance( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(4 8)' ) ) \u2192 4 --","title":"distance"},{"location":"gr_funzioni/geometria/geometria_unico/#distance_to_vertex","text":"Restituisce la distanza lungo una geometria ad un vertice specificato. Sintassi: distance_to_vertex( geometry , vertex ) Argomenti: geometry una geometria di tipo linestring vertex indice vertice, partendo da 0; se il valore \u00e8 negativo, l'indice del vertice selezionato sar\u00e0 il suo conteggio totale meno il valore assoluto Esempi: distance_to_vertex(geometry:=geom_from_wkt('LineString(0 0, 10 0, 10 10)'),vertex:=1) \u2192 10.0 -- esempio di sopra:","title":"distance_to_vertex"},{"location":"gr_funzioni/geometria/geometria_unico/#end_point","text":"Restituisce l'ultimo nodo di una geometria. Sintassi: end_point( geometry ) Argomenti: geometry oggetto geometria Esempi: geom_to_wkt(end_point(geom_from_wkt('LINESTRING(4 0, 4 2, 0 2)'))) \u2192 'Point (0 2)' -- End_point di geometria poligonale: End_point di geometria lineare:","title":"end_point"},{"location":"gr_funzioni/geometria/geometria_unico/#exif_geotag","text":"Crea una geometria puntuale dai geotag dell'exif di un file di immagine. Sintassi exif_geotag( path ) Descrizione path Un percorso di file immagine. Esempi geom_to_wkt(exif_geotag('/my/photo.jpg')) \u2192 'Point (2 4)'","title":"exif_geotag"},{"location":"gr_funzioni/geometria/geometria_unico/#extend","text":"Estende l'inizio e la fine di una geometria di tipo linestring di una quantit\u00e0 specificata. Le linee sono estese usando la direzione di immersione del primo e dell'ultimo segmento nella linea. Le distanze sono espresse nel SR di tale geometria. Sintassi: extend( geometry , start_distance , end_distance ) Argomenti: geometry una geometria (multi)linestring start_distance distanza alla quale estendere l' inizio della linea end_distance distanza alla quale estendere la fine della linea. Esempi: geom_to_wkt(extend(geom_from_wkt('LineString(0 0, 1 0, 1 1)'),1,2)) \u2192 'LineString (-1 0, 1 0, 1 3)' geom_to_wkt(extend(geom_from_wkt('MultiLineString((0 0, 1 0, 1 1), (2 2, 0 2, 0 5))'),1,2)) \u2192 'MultiLineString ((-1 0, 1 0, 1 3),(3 2, 0 2, 0 7))' --","title":"extend"},{"location":"gr_funzioni/geometria/geometria_unico/#exterior_ring","text":"Restituisce una linestring che rappresenta l'anello esterno di una geometria poligonale. Se la geometria non \u00e8 un poligono, il risultato sar\u00e0 NULL. Sintassi: exterior_ring( geometry ) Argomenti: geometry una geometria poligono Esempi: geom_to_wkt(exterior_ring(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),( 0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2, 0.1, 0.1 0.1))'))) \u2192 'LineString (-1 -1, 4 0, 4 2, 0 2, -1 -1)' --","title":"exterior_ring"},{"location":"gr_funzioni/geometria/geometria_unico/#extrude","text":"Restituisce una versione estrusa della geometria (Multi-)Curve o (Multi-)Linestring in ingresso, con un'estensione specificata da x e y. Sintassi: extrude( geometry , x , y ) Argomenti: geometry una geometria poligono x estensione x, valore numerico y estensione y, valore numerico Esempi: extrude(geom_from_wkt('LineString(1 2, 3 2, 4 3)'), 1, 2) \u2192 Polygon ((1 2, 3 2, 4 3, 5 5, 4 4, 2 4, 1 2)) extrude(geom_from_wkt('MultiLineString((1 2, 3 2), (4 3, 8 3)'), 1, 2) \u2192 MultiPolygon (((1 2, 3 2, 4 4, 2 4, 1 2)),((4 3, 8 3, 9 5, 5 5, 4 3))) Osservazioni: Nell'esempio ho utilizzato la funzione [boundary()](boundary.md) perch\u00e9 la geometria di ingresso deve essere lineare.","title":"extrude"},{"location":"gr_funzioni/geometria/geometria_unico/#flip_coordinates","text":"Restituisce una copia della geometria con le coordinate x e y scambiate. Utile per riparare le geometrie che hanno invertito i valori di latitudine e longitudine. Sintassi: flip_coordinates( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt(flip_coordinates(make_point(1, 2))) \u2192 Point (2 1) -- Esempio con vettore poligonale (aggiorno la geometry): il flip \u00e8 da usare con cautela perch\u00e9 cambia radicalemnte la posizione del vettore","title":"flip_coordinates"},{"location":"gr_funzioni/geometria/geometria_unico/#force_polygon_ccw","text":"Forza una geometria a rispettare la convenzione per cui gli anelli esterni sono in senso antiorario, quelli interni in senso orario. Sintassi: force_polygon_ccw( geometry ) Argomenti: geometry una geometria. Qualunque geometria non poligonale \u00e8 restituita non modificata Esempi: geom_to_wkt(force_polygon_ccw(geometry:=geom_from_wkt('Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1)))'))) \u2192 'Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1))'","title":"force_polygon_ccw"},{"location":"gr_funzioni/geometria/geometria_unico/#force_polygon_cw","text":"Forza una geometria a rispettare la convenzione per cui gli anelli esterni sono in senso orario, quelli interni in senso antiorario. Sintassi: force_polygon_cw( geometry ) Argomenti: geometry una geometria. Qualunque geometria non poligonale \u00e8 restituita non modificata Esempi: geom_to_wkt(force_polygon_cw(geometry:=geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))'))) \u2192 'Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1))'","title":"force_polygon_cw"},{"location":"gr_funzioni/geometria/geometria_unico/#force_rhr","text":"Forza una geometria a rispettare la regola della mano destra, in cui l'area delimitata da un poligono si trova a destra del limite. In particolare, l'anello esterno \u00e8 orientato in senso orario e l'interno in senso antiorario. Sintassi: force_rhr( geometry ) Argomenti: geometry una geometria. Qualsiasi geometria non poligonale viene restituita invariata. Esempi: geom_to_wkt(force_rhr(geometry:=geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))'))) \u2192 Polygon ((-1 -1, 0 2, 4 2, 4 0, -1 -1)) Osservazioni: Ecco un esempio pratico della funzione (presente anche nelgli strumenti fi processing) ovvero un poligono disegnato in senso antiorario viene forzato in senso orario e l'etichettature \u00e8 visibile correttamente.","title":"force_rhr"},{"location":"gr_funzioni/geometria/geometria_unico/#geom_from_gml","text":"Restituisce una geometria da una rappresentazione GML di una geometria. Sintassi: geom_from_gml( _gml ) Argomenti: gml Rappresentazione GML di una geometria come stringa Esempi: geom_to_wkt(geom_from_gml('<gml:LineString srsName=\"EPSG:4326\"><gml:coordinates>4,4 5,5 6,6</gml:coordinates></gml:LineString>') ) \u2192 'LineString (4 4, 5 5, 6 6)'","title":"geom_from_gml"},{"location":"gr_funzioni/geometria/geometria_unico/#geom_from_wkb","text":"Restituisce una geometria creata da una rappresentazione binaria ben nota (WKB). Sintassi: geom_from_wkb( binari ) Argomenti: binari Rappresentazione binaria ben nota (WKB) di una geometria (come BLOB binario) Esempi: geom_from_wkb( geom_to_wkb( make_point(4,5) ) ) \u2192 un oggetto geometria punto","title":"geom_from_wkb"},{"location":"gr_funzioni/geometria/geometria_unico/#geom_from_wkt","text":"Restituisce una geometria creata da una rappresentazione Well-Known Text (WKT). Sintassi: geom_from_wkt( text ) Argomenti: text Rappresentazione Well-Known Text (WKT) di una geometria Esempi: geom_from_wkt( 'POINT(4 5)' ) \u2192 un oggetto geometria","title":"geom_from_wkt"},{"location":"gr_funzioni/geometria/geometria_unico/#geom_to_wkb","text":"Restituisce la rappresentazione binaria ben nota (WKB) di una geometria come BLOB binario. Sintassi: geom_to_wkb( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkb( $geometry ) \u2192 BLOB binario contenente un oggetto geometria","title":"geom_to_wkb"},{"location":"gr_funzioni/geometria/geometria_unico/#geom_to_wkt","text":"Restituisce la rappresentazione Well-Known Text (WKT) della geometria senza metadati del SR Sintassi: geom_to_wkt( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt( make_point(6, 50) ) \u2192 'POINT(6 50)' geom_to_wkt(centroid(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))'))) \u2192 'POINT(0 0.66666667)' geom_to_wkt(centroid(geom_from_wkt('Polygon((1 1, 0 0, -1 1, 1 1))')), 2) \u2192 'POINT(0 0.67)'","title":"geom_to_wkt"},{"location":"gr_funzioni/geometria/geometria_unico/#geometry_1","text":"Restituisce la geometria di un elemento con geometria Sintassi: geometry( feature ) Argomenti: feature un oggetto elemento con geometria Esempi: geom_to_wkt( geometry( get_feature( layer, attributeField, value ) ) ) \u2192 'POINT(6 50)'` intersects( $geometry, geometry( get_feature( layer, attributeField, value ) ) ) \u2192 vero` -- Usando il Select by Expression : selezionare le feature di un layer (quartieri) in funzione di altro layer (test):","title":"geometry"},{"location":"gr_funzioni/geometria/geometria_unico/#geometry_n","text":"Restituisce una geometria specifica da una collezione di geometrie, o NULL se la geometria in ingresso non \u00e8 una collezione. Restituisce anche una parte da una geometria a pi\u00f9 parti. Sintassi: geometry_n( geometry , index ) Argomenti: geometry raccolta di geometrie index indice della geometria da restituire, dove 1 \u00e8 la prima geometria nella raccolta Esempi: geom_to_wkt(geometry_n(geom_from_wkt('GEOMETRYCOLLECTION(POINT(0 1), POINT(0 0), POINT(1 0), POINT(1 1))'),3)) \u2192 'Point (1 0)'","title":"geometry_n"},{"location":"gr_funzioni/geometria/geometria_unico/#geometry_type","text":"Restituisce un valore stringa che descrive il tipo di una geometria (Punto, Linea o Poligono) Sintassi: geometry_type( geometry ) Argomenti: geometry una geometria Esempi: geometry_type( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 'Line' geometry_type( geom_from_wkt( 'MULTILINESTRING((2 5, 3 6, 4 8), (1 1, 0 0))') ) \u2192 'Line' geometry_type( geom_from_wkt( 'POINT(2 5)') ) \u2192 'Point' geometry_type( geom_from_wkt( 'POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))') ) \u2192 'Polygon'","title":"geometry_type"},{"location":"gr_funzioni/geometria/geometria_unico/#hausdorff_distance","text":"Restituisce la distanza di Hausdorff tra due geometrie. Questa \u00e8 in sostanza una misura di come le 2 geometrie sono simili o dissimili: una distanza pi\u00f9 bassa indica geometrie pi\u00f9 simili. La funzione pu\u00f2 essere eseguita con un argomento opzionale di densificazione della frazione. Se non viene specificato, viene utilizzata una approssimazione alla distanza standard di Hausdorff. Questa approssimazione \u00e8 esatta o abbastanza vicina per un grande sottoinsieme di casi utili. Esempi di questi sono: calcolare la distanza tra Linestrings che sono approssimativamente paralleli tra loro e sono sostanzialmente uguali in lunghezza. Ci\u00f2 si verifica nelle verifica di reti lineari. testare la somiglianza di geometrie. Se l'approssimazione predefinita fornita da questo metodo \u00e8 insufficiente, specifica l'argomento opzionale di densificazione della frazione. Specificando questo argomento si esegue una densificazione del segmento prima di calcolare la distanza Hausdorff discreta. Il parametro imposta la frazione con cui densificare ogni segmento. Ogni segmento sar\u00e0 suddiviso in un numero di subsegmenti di uguale lunghezza, la cui frazione della lunghezza totale \u00e8 la pi\u00f9 vicina alla frazione data. Riducendo il parametro di densificazione della frazione, la distanza restituita si avviciner\u00e0 alla vera distanza Hausdorff per le geometrie. Sintassi: hausdorff_distance( geometry1 , geometry2 , densify_fraction ) Argomenti: geometry1 una geometria geometry2 una geometria densify_fraction quantit\u00e0 di densificazione della frazione Esempi: hausdorff_distance( geometry1:= geom_from_wkt('LINESTRING (0 0, 2 1)'),geometry2:=geom_from_wkt('LINESTRING (0 0, 2 0)')) \u2192 2 hausdorff_distance( geom_from_wkt('LINESTRING (130 0, 0 0, 0 150)'),geom_from_wkt('LINESTRING (10 10, 10 150, 130 10)')) \u2192 14.142135623 hausdorff_distance( geom_from_wkt('LINESTRING (130 0, 0 0, 0 150)'),geom_from_wkt('LINESTRING (10 10, 10 150, 130 10)'),0.5) \u2192 70.0 -- Nel caso di geometrie puntuali la hausdorff_distance coincide con la funzione distance , segue un esempio: Espressione format_number( hausdorff_distance( transform($geometry,'EPSG:4326','EPSG:3004'), transform(geometry(get_feature('fontanelle','n',1)),'EPSG:4326','EPSG:3004'))/1000,4) || ' km' || '\\n'|| format_number( distance( transform($geometry,'EPSG:4326','EPSG:3004'), transform(geometry(get_feature('fontanelle','n',1)),'EPSG:4326','EPSG:3004'))/1000,4) || ' km' -- In questo esempio confronto due layer: il numero pi\u00f9 piccolo indica il poligono pi\u00f9 simile a al poligono pi\u00f9 grande.","title":"hausdorff_distance"},{"location":"gr_funzioni/geometria/geometria_unico/#inclination","text":"Restituisce l'inclinazione misurata dallo zenit (0) al nadir (180) del punto_a al punto_b . Sintassi: inclination( point_a , point_b ) Argomenti: point_a geometria punto point_b geometria punto Esempi: inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 5 ) ) \u2192 0.0 inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 0 ) ) \u2192 90.0 inclination( make_point( 5, 10, 0 ), make_point( 50, 100, 0 ) ) \u2192 90.0 inclination( make_point( 5, 10, 0 ), make_point( 5, 10, -5 ) ) \u2192 180.0 --","title":"inclination"},{"location":"gr_funzioni/geometria/geometria_unico/#interior_ring_n","text":"Restituisce un anello interno specifico da una geometria poligonale, o null se la geometria non \u00e8 un poligono. Sintassi: interior_ring_n( geometry , index ) Argomenti: geometry geometria poligono index Indice dell'anello interno da restituire, dove 1 \u00e8 il primo anello interno Esempi: geom_to_wkt(interior_ring_n(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1),(-1 -1, 4 0, 4 2, 0 2, -1 -1))'),1)) \u2192 'LineString (-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))' Osservazioni: Restituisce una lineastring!!!","title":"interior_ring_n"},{"location":"gr_funzioni/geometria/geometria_unico/#intersection","text":"Restituisce una geometria che rappresenta la porzione condivisa fra le due geometrie. Sintassi: intersection( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( intersection( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4)' ) ) ) \u2192 'LINESTRING(3 3, 4 4)' geom_to_wkt( intersection( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'MULTIPOINT(3.5 3.5, 4 5)' ) ) ) \u2192 'POINT(3.5 3.5)' Espressione -- intersezione tra le due linee intersection( make_line( -- linea a start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)), make_line( -- linea b start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))) ) -- NB: -- l' ordine delle geometrie \u00e8 indifferente Prova tu Dati e progetto qgz --","title":"intersection"},{"location":"gr_funzioni/geometria/geometria_unico/#intersects","text":"Controlla qualora una geometria ne interseca un'altra. Restituisce true (1) se la geometrie si intersecano spazialmente (condividono una porzione di spazio) altrimenti da false (0). Sintassi: intersects( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: intersects( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 vero intersects( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'POINT(5 5)' ) ) \u2192 falso Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): intersects(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry) dove: geometry1 \u00e8 geometry(get_feature( 'province_rt_rt','pk_uid','46')) geometry2 \u00e8 $geometry seleziono tutti i comuni intersects (interseca) nella provincia con pk_uid 46 (Lucca) PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli intersecati con la provincia di Lucca). NOT intersects(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry)","title":"intersects"},{"location":"gr_funzioni/geometria/geometria_unico/#intersects_bbox","text":"Controlla se il perimetro di delimitazione della geometria si sovrappone a quello di un'altra geometria. Restituisce vero (1) se le geometrie intersecano spazialmente il perimetro di delimitazione definito e falso (0) se non lo intersecano. Sintassi: intersects_bbox( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: intersects_bbox( geom_from_wkt( 'POINT(4 5)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 vero intersects_bbox( geom_from_wkt( 'POINT(6 5)' ), geom_from_wkt( 'POLYGON((3 3, 4 4, 5 5, 3 3))' ) ) \u2192 falso","title":"intersects_bbox"},{"location":"gr_funzioni/geometria/geometria_unico/#is_closed","text":"Restituisce vero (true) se una linestring \u00e8 chiusa (i punti di inizio e di fine coincidono), o falso (false) se una linestring non \u00e8 chiusa. Se la geometria non \u00e8 una linestring, il risultato sar\u00e0 NULL. Sintassi: is_closed( geometry ) Argomenti: geometry una geometria linestring Esempi: is_closed(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')) \u2192 falso is_closed(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2, 0 0)')) \u2192 vero --","title":"is_closed"},{"location":"gr_funzioni/geometria/geometria_unico/#is_empty","text":"Restituisce vero se una geometria \u00e8 vuota (senza coordinate), falso se la geometria non \u00e8 vuota e NULL se non c'\u00e8 geometria. Vedi anche is_empty_or_null . Sintassi: is_empty( geometry ) Argomenti: geometry una geometria Esempi: is_empty(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')) \u2192 falso is_empty(geom_from_wkt('LINESTRING EMPTY')) \u2192 vero is_empty(geom_from_wkt('POINT(7 4)')) \u2192 falso is_empty(geom_from_wkt('POINT EMPTY')) \u2192 vero","title":"is_empty"},{"location":"gr_funzioni/geometria/geometria_unico/#is_empty_or_null","text":"Restituisce vero se una geometria \u00e8 vuota (senza coordinate), falso se la geometria non \u00e8 vuota e NULL se non c'\u00e8 geometria. Vedi anche is_empty . Sintassi: is_empty_or_null( geometry ) Argomenti: geometry una geometria Esempi: is_empty_or_null(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)')) \u2192 falso iis_empty_or_null(geom_from_wkt('POINT(7 4)')) \u2192 falso is_empty_or_null(geom_from_wkt('POINT EMPTY')) \u2192 vero","title":"is_empty_or_null"},{"location":"gr_funzioni/geometria/geometria_unico/#is_multipart","text":"Restituisce vero se la geometria \u00e8 di tipo Multi. Sintassi: is_multipart( geometry ) Argomenti: geometry una geometria Esempi: is_multipart(geom_from_wkt('MULTIPOINT ((0 0),(1 1),(2 2))')) \u2192 vero is_multipart(geom_from_wkt('POINT (0 0)')) \u2192 falso","title":"is_multipart"},{"location":"gr_funzioni/geometria/geometria_unico/#is_valid","text":"Restituisce vero se una geometria \u00e8 valida; se \u00e8 ben formato in 2D secondo le regole OGC Sintassi: is_valid( geometry ) Argomenti: geometry una geometria Esempi: is_valid(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2, 0 0)')) \u2192 vero is_valid(geom_from_wkt('LINESTRING(0 0)')) \u2192 falso","title":"is_valid"},{"location":"gr_funzioni/geometria/geometria_unico/#length_1","text":"Restituisce il numero di caratteri in una stringa o la lunghezza di una geometria di tipo linestring.","title":"length"},{"location":"gr_funzioni/geometria/geometria_unico/#variabile-stringa","text":"Restituisce il numero di caratteri contenuti in una stringa. Sintassi: length( string ) Argomenti: string stringa della quale calcolare la lunghezza Esempi: length('hello') \u2192 5","title":"Variabile stringa"},{"location":"gr_funzioni/geometria/geometria_unico/#variabile-geometria","text":"Calcola la lunghezza di un oggetto a geometria lineare. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di detta geometria, e l'unit\u00e0 di misura della lunghezza restituita \u00e8 conforme all'unit\u00e0 di misura del SR. Ci\u00f2 differisce dal calcolo eseguito dalla funzione $length , la quale esegue calcoli ellissoidici basati sull'ellissoide del progetto e sulle impostazioni delle unit\u00e0 di distanza. Sintassi: length( geometry ) Argomenti: geometry oggetto geometria linea Esempi: length(geom_from_wkt('LINESTRING(0 0, 4 0)')) \u2192 4.0","title":"Variabile geometria"},{"location":"gr_funzioni/geometria/geometria_unico/#length3d","text":"Calcola la lunghezza 3D di un oggetto linea geometrica. Se la geometria non \u00e8 un oggetto linea 3D, restituisce la sua lunghezza 2D. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di questa geometria, e le unit\u00e0 della lunghezza restituita corrisponderanno alle unit\u00e0 per l'SR. Questo differisce dai calcoli eseguiti dalla funzione $length , che eseguir\u00e0 calcoli ellissoidali basati sulle impostazioni dell'ellissoide e dell'unit\u00e0 di distanza del progetto. Sintassi: length3D( geometry ) Argomenti: geometry oggetto geometria linea Esempi: length3D(geom_from_wkt('LINESTRINGZ(0 0 0, 3 0 4)')) \u2192 5.0","title":"length3D"},{"location":"gr_funzioni/geometria/geometria_unico/#line_interpolate_angle","text":"Restituisce l'angolo parallelo alla geometria ad una distanza specifica lungo una geometria di tipo linestring. Gli angoli sono in gradi in senso orario dal nord. Sintassi: line_interpolate_angle( geometry , distance ) Argomenti: geometry una geometria di tipo linestring distance distanza lungo la linea a cui interpolare l'angolo Esempi: line_interpolate_angle(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),distance:=5) \u2192 90.0 --","title":"line_interpolate_angle"},{"location":"gr_funzioni/geometria/geometria_unico/#line_interpolate_point","text":"Restituisce il punto interpolato ad una specifica distanza lungo una geometria di tipo linestring. Sintassi: line_interpolate_point( geometry , distance ) Argomenti: geometry una geometria di tipo linestring distance distanza lungo la linea Esempi: geom_to_wkt(line_interpolate_point(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),distance:=5)) \u2192 'Point (4 0)' --","title":"line_interpolate_point"},{"location":"gr_funzioni/geometria/geometria_unico/#line_locate_point","text":"Restituisce la distanza lungo una linestring corrispondente alla posizione pi\u00f9 vicina alla linestring di una geometria puntuale specificata. Sintassi: line_locate_point( geometry , point ) Argomenti: geometry una geometria di tipo linestring point geometria puntuale per cui ricercare la posizione pi\u00f9 vicina sulla linestring Esempi: line_locate_point(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),point:=geom_from_wkt('Point(5 1)')) \u2192 5.0","title":"line_locate_point"},{"location":"gr_funzioni/geometria/geometria_unico/#line_merge","text":"Restituisce una geometria di tipo LineString o MultiLineString, dove qualsiasi LineString connessa dalla geometria in ingresso \u00e8 stata fusa (merge) in una linestring singola. Questa funzione restituir\u00e0 NULL se la geometria considerata non \u00e8 una LineString/MultiLineString. Sintassi: line_merge( geometry ) Argomenti: geometry una geometria di tipo LineString/MultiLineString Esempi: geom_to_wkt(line_merge(geom_from_wkt('MULTILINESTRING((0 0, 1 1),(1 1, 2 2))'))) \u2192 'LineString(0 0,1 1,2 2)' geom_to_wkt(line_merge(geom_from_wkt('MULTILINESTRING((0 0, 1 1),(11 1, 21 2))'))) \u2192 'MultiLineString((0 0, 1 1),(11 1, 21 2)' --","title":"line_merge"},{"location":"gr_funzioni/geometria/geometria_unico/#line_substring","text":"Restituisce la porzione di una geometria di linea (o curva) che rientra tra le distanze iniziale e finale specificate (misurata dall'inizio della linea). I valori Z e M sono linearmente interpolati dai valori esistenti. Sintassi: line_substring( geometry , start_distance , end_distance ) Argomenti: geometry una geometria lineare o curva start_distance distanza all'inizio della sottostringa end_distance distanza alla fine della sottostringa Esempi: geom_to_wkt(line_substring(geometry:=geom_from_wkt('LineString(0 0, 10 0)'),start_distance:=2,end_distance:=6)) \u2192 'LineString (2 0,6 0)' line_substring( $geometry, $length *.1,$length *.6) \u2192 <geometria: LineString> -- Funzione utile per la tematizzazione","title":"line_substring"},{"location":"gr_funzioni/geometria/geometria_unico/#m","text":"Restituisce il valore m di una geometria puntuale. Sintassi: m( geometry ) Argomenti: geometry una geometria punto Esempi: ( geom_from_wkt( 'POINTM(2 5 4)' ) ) \u2192 4","title":"m"},{"location":"gr_funzioni/geometria/geometria_unico/#m_max","text":"Restituisce il valore minimo m (misura) di una geometria. Sintassi: m_max( geometry ) Argomenti: geometry una geometria contenente m valori Esempi: m_max( make_point_m( 0,0,1 ) ) \u2192 1 m_max(make_line( make_point_m( 0,0,1 ), make_point_m( -1,-1,2 ), make_point_m( -2,-2,0 ) ) ) \u2192 2","title":"m_max"},{"location":"gr_funzioni/geometria/geometria_unico/#m_min","text":"Restituisce il valore minimo m (misura) di una geometria. Sintassi: m_min( geometry ) Argomenti: geometry una geometria contenente m valori Esempi: m_min( make_point_m( 0,0,1 ) ) \u2192 1 m_min(make_line( make_point_m( 0,0,1 ), make_point_m( -1,-1,2 ), make_point_m( -2,-2,0 ) ) ) \u2192 0","title":"m_min"},{"location":"gr_funzioni/geometria/geometria_unico/#main_angle","text":"Restituisce l'angolo principale di una geometria (senso orario, in gradi dal Nord), il quale rappresenta l'angolo dell'orientamento del rettangolo minimo che copre completamente la geometria. Sintassi: main_angle( geometry ) Argomenti: geometry una geometria poligono Esempi: main_angle(geom_from_wkt('Polygon ((321577 129614, 321581 129618, 321585 129615, 321581 129610, 321577 129614))')) \u2192 38.66 Osservazioni:","title":"main_angle"},{"location":"gr_funzioni/geometria/geometria_unico/#make_circle","text":"Crea un poligono circolare. Sintassi: make_circle( center , radius [, segments=36 ]) [ ] indica componenti opzionali Argomenti: center centro del cerchio radius raggio del cerchio segments argomento opzionale per la segmentazione del poligono. Valore predefinito pari a 36 Esempi: geom_to_wkt(make_circle(make_point(10,10), 5, 4)) \u2192 'Polygon ((10 15, 15 10, 10 5, 5 10, 10 15))' geom_to_wkt(make_circle(make_point(10,10,5), 5, 4)) \u2192 'PolygonZ ((10 15 5, 15 10 5, 10 5 5, 5 10 5, 10 15 5))'' geom_to_wkt(make_circle(make_point(10,10,5,30), 5, 4)) \u2192 'PolygonZM ((10 15 5 30, 15 10 5 30, 10 5 5 30, 5 10 5 30, 10 15 5 30))'","title":"make_circle"},{"location":"gr_funzioni/geometria/geometria_unico/#make_ellipse","text":"Crea un poligono ellittico. Sintassi: make_ellipse( center , semi_major_axis , semi_minor_axis , azimuth [, segments=36 ]) Argomenti: center centro dell'ellisse semi_major_axis semi-asse maggiore dell'ellisse semi_minor_axis semi-asse minore dell'ellisse azimuth orientazione dell'ellisse segments argomento opzionale per la segmentazione del poligono. Valore predefinito pari a 36 Esempi: geom_to_wkt(make_ellipse(make_point(10,10), 5, 2, 90, 4)) \u2192 'Polygon ((15 10, 10 8, 5 10, 10 12, 15 10)) geom_to_wkt(make_ellipse(make_point(10,10,5), 5, 2, 90, 4)) \u2192 'PolygonZ ((15 10 5, 10 8 5, 5 10 5, 10 12 5, 15 10 5))' geom_to_wkt(make_circle(make_point(10,10,5,30), 5, 2, 90, 4)) \u2192 'PolygonZM ((15 10 5 30, 10 8 5 30, 5 10 5 30, 10 12 5 30, 15 10 5 30))'","title":"make_ellipse"},{"location":"gr_funzioni/geometria/geometria_unico/#make_line","text":"Crea una geometria linea da una serie di geometrie punto. Sintassi: make_line( point1 , point2 , \u2026_) Argomenti: point una geometria punto Esempi: geom_to_wkt(make_line(make_point(2,4),make_point(3,5))) \u2192 'LineString (2 4, 3 5)' geom_to_wkt(make_line(make_point(2,4),make_point(3,5),make_point(9,7))) \u2192 'LineString (2 4, 3 5, 9 7)'","title":"make_line"},{"location":"gr_funzioni/geometria/geometria_unico/#array-variant","text":"I vertici di linea sono specificati come una matrice di punti. Sintassi: make_line( array ) Argomenti: array Matrice di punti Esempi: geom_to_wkt(make_line(array(make_point(2,4),make_point(3,5),make_point(9,7)))) \u2192 'LineString (2 4, 3 5, 9 7)' Espressione make_line( array(geometry( get_feature_by_id('fontanelle_Palermo',$id))), array(geometry( get_feature_by_id('fontanelle_Palermo',not $id%2))) )","title":"Array variant"},{"location":"gr_funzioni/geometria/geometria_unico/#make_point","text":"Crea una geometria punto da valori x ed y (e opzionalmente z ed m). Sintassi: make_point( x , y , z , m ) Argomenti: x coordinata x del punto y coordinata y del punto z coordinata opzionale z del punto m valore m del punto Esempi: geom_to_wkt(make_point(2,4,6,8)) \u2192 'PointZM (2 4 6 8)'","title":"make_point"},{"location":"gr_funzioni/geometria/geometria_unico/#make_point_m","text":"Crea una geometria punto da una coordinata x, y ed un valore m. Sintassi: make_point_m_( x , y , m ) Argomenti: x coordinata x del punto y coordinata y del punto m valore m del punto Esempi: geom_to_wkt(make_point_m(2,4,6)) \u2192 'PointM (2 4 6)'","title":"make_point_m"},{"location":"gr_funzioni/geometria/geometria_unico/#make_polygon","text":"Crea una geometria poligono da un'anello esterno e opzionalmente da geometrie ad anello interne. Sintassi: make_polygon( outerRing [, innerRing1 ][, innerRing2 ] \u2026_) [ ] indica componenti opzionali Argomenti: outerRing geometria a linea chiusa per l'anello esterno del poligono innerRing geometria a linea chiusa opzionale per anello interno Esempi: geom_to_wkt(make_polygon(geom_from_wkt('LINESTRING( 0 0, 0 1, 1 1, 1 0, 0 0 )'))) \u2192 'Polygon ((0 0, 0 1, 1 1, 1 0, 0 0))' geom_to_wkt(make_polygon(geom_from_wkt('LINESTRING( 0 0, 0 1, 1 1, 1 0, 0 0 )'),geom_from_wkt('LINESTRING( 0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2 0.1, 0.1 0.1 )'),geom_from_wkt('LINESTRING( 0.8 0.8, 0.8 0.9, 0.9 0.9, 0.9 0.8, 0.8 0.8 )'))) \u2192 'Polygon ((0 0, 0 1, 1 1, 1 0, 0 0),(0.1 0.1, 0.1 0.2, 0.2 0.2, 0.2 0.1, 0.1 0.1),(0.8 0.8, 0.8 0.9, 0.9 0.9, 0.9 0.8, 0.8 0.8))'","title":"make_polygon"},{"location":"gr_funzioni/geometria/geometria_unico/#make_rectangle_3points","text":"Crea un rettangolo da 3 punti. Sintassi: make_rectangle_3points( point1 , point2 , point3 [,option=0]\u2026) Argomenti: point1 Primo punto point2 Secondo punto point3 Terzo punto option Un argomento facoltativo per costruire il rettangolo. Di default questo valore \u00e8 0. Il valore pu\u00f2 essere 0 (distanza) o 1 (proiettato). Distanza opzione: la seconda distanza \u00e8 uguale alla distanza tra il 2 \u00b0 e il 3 \u00b0 punto. Opzione proiettata: la seconda distanza \u00e8 uguale alla distanza della proiezione perpendicolare del terzo punto sul segmento o della sua estensione. Esempi: geom_to_wkt(make_rectangle_3points(make_point(0, 0), make_point(0,5), make_point(5, 5), 0))) \u2192 'Polygon ((0 0, 0 5, 5 5, 5 0, 0 0))' geom_to_wkt(make_rectangle_3points(make_point(0, 0), make_point(0,5),make_point(5, 3), 1))) \u2192 'Polygon ((0 0, 0 5, 5 5, 5 0, 0 0))' --","title":"make_rectangle_3points"},{"location":"gr_funzioni/geometria/geometria_unico/#make_regular_polygon","text":"Crea un poligono regolare. Sintassi: make_regular_polygon( center , radius , number_sides [, circle=0 ]) [ ] indica componenti opzionali Argomenti: center centro del poligono regolare radius secondo punto. Il primo se il poligono regolare \u00e8 inscritto. Il punto intermedio del primo lato se il poligono regolare \u00e8 circoscritto. number_sides Numero di lati del poligono regolare circle Argomento opzionale per la costruzione del poligono regolare. Il valore predefinito \u00e8 0. Il valore pu\u00f2 essere 0 (poligono iscritto) o 1 (poligono circoscritto) Esempi: geom_to_wkt(make_regular_polygon(make_point(0,0), make_point(0,5), 5)) \u2192 'Polygon ((0 5, 4.76 1.55, 2.94 -4.05, -2.94 -4.05, -4.76 1.55, 0 5))' geom_to_wkt(make_regular_polygon(make_point(0,0), project(make_point(0,0), 4.0451, radians(36)), 5)) \u2192 'Polygon ((0 5, 4.76 1.55, 2.94 -4.05, -2.94 -4.05, -4.76 1.55, 0 5))'","title":"make_regular_polygon"},{"location":"gr_funzioni/geometria/geometria_unico/#make_square","text":"Crea un quadrato da una diagonale. Sintassi: make_square( point1 , point2 ) Argomenti: point1 Primo punto della diagonale point2 Secondo punto della diagonale Esempi: geom_to_wkt(make_square( make_point(0,0), make_point(5,5))) \u2192 'Polygon ((0 0, -0 5, 5 5, 5 0, 0 0))' geom_to_wkt(make_square( make_point(5,0), make_point(5,5))) \u2192 'Polygon ((5 0, 2.5 2.5, 5 5, 7.5 2.5, 5 0))'","title":"make_square"},{"location":"gr_funzioni/geometria/geometria_unico/#make_triangle","text":"Crea un poligono triangolare Sintassi: make_triangle( point1 , point2 , point3 ) Argomenti: point1 Primo punto del triangolo point2 Secondo punto del triangolo point3 Secondo punto del triangolo Esempi: geom_to_wkt(make_triangle(make_point(0,0), make_point(5,5), make_point(0,10))) \u2192 'Triangle ((0 0, 5 5, 0 10, 0 0))' geom_to_wkt(boundary(make_triangle(make_point(0,0), make_point(5,5), make_point(0,10)))) \u2192 'LineString (0 0, 5 5, 0 10, 0 0)'","title":"make_triangle"},{"location":"gr_funzioni/geometria/geometria_unico/#make_valid","text":">=QGIS 3.28 Firenze Restituisce una geometria valida o una geometria vuota se non \u00e8 stato possibile renderla valida. Sintassi: make_triangle( geometry [, method=structure ][, keep_collapsed=false ]) [ ] indica componenti opzionali Argomenti: geometry Una geometria method algoritmo di riparazione. Pu\u00f2 essere 'struttura' o 'tracciato'. L'opzione 'tracciato' combina tutti gli anelli in un insieme di linee con nodi e quindi estrae poligoni validi da tale tracciato. Il metodo 'struttura' rende prima validi tutti gli anelli e poi unisce le conchiglie e sottrae i fori dalle conchiglie per generare risultati validi. Si presuppone che i fori e le conchiglie siano classificati correttamente. keep_collapsed se impostato a true, i componenti che sono collassati in una dimensione inferiore saranno mantenuti. Ad esempio, un anello che collassa in una linea o una linea che collassa in un punto. Esempi: - geom_to_wkt(make_valid(geom_from_wkt('POLYGON((3 2, 4 1, 5 8, 3 2, 4 2))'))) \u2192 'Polygon ((3 2, 3 4, 1 4, 1 2, 3 2))' - geom_to_wkt(make_valid(geom_from_wkt('POLYGON((3 2, 4 1, 5 8, 3 2, 4 2))'), 'linework')) \u2192 'GeometryCollection (Polygon ((5 8, 4 1, 3 2, 5 8)),LineString (3 2, 4 2))' - geom_to_wkt(make_valid(geom_from_wkt('POLYGON((3 2, 4 1, 5 8))'), method:='linework')) \u2192 'Polygon ((3 2, 3 4, 1 4, 1 2, 3 2))' - make_valid(geom_from_wkt('LINESTRING(0 0)')) \u2192 Una geometria vuota","title":"make_valid"},{"location":"gr_funzioni/geometria/geometria_unico/#_2","text":"","title":""},{"location":"gr_funzioni/geometria/geometria_unico/#minimal_circle","text":"Restituisce la circonferenza circoscritta minima di una geometria. Rappresenta il cerchio minimo che circoscrive tutte le geometrie presenti in un dataset. Sintassi: minimal_circle( geometry [, segments=36 ]) [ ] indica componenti opzionali Argomenti: geometry una geometria segments argomento opzionale per la segmentazione del poligono. Valore predefinito pari a 36 Esempi: geom_to_wkt( minimal_circle( geom_from_wkt( 'LINESTRING(0 5, 0 -5, 2 1)' ), 4 ) ) \u2192 Polygon ((0 5, 5 -0, -0 -5, -5 0, 0 5)) geom_to_wkt( minimal_circle( geom_from_wkt( 'MULTIPOINT(1 2, 3 4, 3 2)' ), 4 ) ) \u2192 Polygon ((3 4, 3 2, 1 2, 1 4, 3 4)) --","title":"minimal_circle"},{"location":"gr_funzioni/geometria/geometria_unico/#nodes_to_points","text":"Restituisce una geometria multi-punti costituita da ogni nodo della geometria in ingresso. Sintassi: nodes_to_points( geometry [, ignore_closing_nodes=false ]) Argomenti: geometry oggetto geometria ignore_closing_nodes argomento opzionale che specifica se includere i nodi duplicati che chiudono linee o poligoni ad anello. Normalmente false, impostare a true per evitare di includere questi nodi duplicati nella raccolta in uscita. Esempi: geom_to_wkt(nodes_to_points(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))) \u2192 'MultiPoint ((0 0),(1 1),(2 2))' geom_to_wkt(nodes_to_points(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1))'),true)) \u2192 'MultiPoint ((-1 -1),(4 0),(4 2),(0 2))' --","title":"nodes_to_points"},{"location":"gr_funzioni/geometria/geometria_unico/#num_geometries","text":"Restituisce il numero di geometrie in una raccolta di geometrie, o il numero di parti in una geometria multiparte. La funzione restituisce NULL se la geometria di input non \u00e8 una raccolta. Sintassi: num_geometries( geometry ) Argomenti: geometry raccolta di geometrie Esempi: num_geometries(geom_from_wkt('GEOMETRYCOLLECTION(POINT(0 1), POINT(0 0), POINT(1 0), POINT(1 1))')) \u2192 4","title":"num_geometries"},{"location":"gr_funzioni/geometria/geometria_unico/#num_interior_rings","text":"Restituisce il numero di anelli interni in un poligono o in una raccolta di geometrie, o null se la geometria in ingresso non \u00e8 un poligono o una raccolta. Sintassi: num_interior_rings( geometry ) Argomenti: geometry geometria in ingresso Esempi: num_interior_rings(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))')) \u2192 1","title":"num_interior_rings"},{"location":"gr_funzioni/geometria/geometria_unico/#num_points","text":"Restituisce il numero di vertici in una geometria. Sintassi: num_points( geometry ) Argomenti: geometry una geometria Esempi: num_points($geometry) \u2192 numero di vertici in $geometry","title":"num_points"},{"location":"gr_funzioni/geometria/geometria_unico/#num_rings","text":"Restituisce il numero di anelli (includendo anche anelli esterni) in un poligono o in una raccolta di geometrie, o null se la geometria in ingresso non \u00e8 un poligono o una raccolta. Sintassi: num_rings( geometry ) Argomenti: geometry geometria in ingresso Esempi: num_rings(geom_from_wkt('POLYGON((-1 -1, 4 0, 4 2, 0 2, -1 -1),(-0.1 -0.1, 0.4 0, 0.4 0.2, 0 0.2, -0.1 -0.1))')) \u2192 2 --","title":"num_rings"},{"location":"gr_funzioni/geometria/geometria_unico/#offset_curve","text":"Restituisce una geometria formata facendo l'offset di una geometria di tipo linestring a lato. Le distanze sono espresse nel SR di tale geometria. Sintassi: offset_curve( geometry , distance [, segments=8 ][, join=1 ][, miter_limit=2.0 ]) [ ] indica componenti opzionali Argomenti: geometry una geometria (multi)linestring distance distanza di offset. Valori positivi saranno bufferizzati a sinistra delle linee, valori negativi a destra segments numero di segmenti da usare per rappresentare un quarto di cerchio quando \u00e8 utilizzato uno stile di unione arrotondato. Un numero grande risulta in una linea pi\u00f9 morbida, con pi\u00f9 nodi. join stile di unione per gli angoli, dove 1 = arrotondato, 2 = seghettato e 3 = smussato miter_limit limite sul rapporto di seghettatura usato per angoli molto appuntiti (solamente quando si usano le unioni seghettate) Esempi: offset_curve($geometry, 10.5) \u2192 linea scostata a sinistra di 10.5 unit\u00e0 offset_curve($geometry, -10.5) \u2192 linea scostata a destra di 10.5 unit\u00e0 offset_curve($geometry, 10.5, segments=16, join=1) \u2192 linea scostata a sinistra di 10.5 unit\u00e0, usando pi\u00f9 segmenti per risultare in una curva pi\u00f9 morbida offset_curve($geometry, 10.5, join=3) \u2192 linea scostata a sinistra di 10.5 unit\u00e0, usando un'unione smussata Osservazioni: La linea \u00e8 scostata a sinistra o destra rispetto al verso della linea:","title":"offset_curve"},{"location":"gr_funzioni/geometria/geometria_unico/#order_parts","text":"Ordina le parti di una MultiGeometria secondo un dato criterio Sintassi: order_parts( geometry , orderby [, ascending=true ]) [ ] indica componenti opzionali Argomenti: geometry una geometria multi-tipo orderby un espressione stringa che definisce il criterio di ordinamento ascending booleano, True per ascendente, False per discendente Esempi: order_parts(geom_from_wkt('MultiPolygon (((1 1, 5 1, 5 5, 1 5, 1 1)),((1 1, 9 1, 9 9, 1 9, 1 1)))'), 'area($geometry)', False) \u2192 MultiPolygon (((1 1, 9 1, 9 9, 1 9, 1 1)),((1 1, 5 1, 5 5, 1 5, 1 1))) order_parts(geom_from_wkt('LineString(1 2, 3 2, 4 3)'), '1', True) \u2192 LineString(1 2, 3 2, 4 3)","title":"order_parts"},{"location":"gr_funzioni/geometria/geometria_unico/#oriented_bbox","text":"Restituisce una geometria che rappresenta il perimetro di delimitazione minimo orientato di una geometria. Sintassi: oriented_bbox( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt(oriented_bbox(geom_from_wkt('MULTIPOINT(1 2, 3 4, 3 2)'))) \u2192 'Polygon ((1 2, 2 1, 4 3, 3 4, 1 2))'","title":"oriented_bbox"},{"location":"gr_funzioni/geometria/geometria_unico/#overlaps","text":"Controlla qualora una geometria si sovrapponga ad un'altra. Restituisce true (1) se le geometrie condividono aree, ma non sono completamente contenute una nell'altra. Sintassi: overlaps( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: overlaps( geom_from_wkt( 'LINESTRING(3 5, 4 4, 5 5, 5 3)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 1 overlaps( geom_from_wkt( 'LINESTRING(0 0, 1 1)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 0 Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): overlaps(geometry(get_feature( 'cerchio','id','1')), $geometry) dove: geometry1 \u00e8 geometry(get_feature('cerchio','id','1')) geometry2 \u00e8 $geometry seleziono tutti i comuni overlaps (sovrapposti) al cerchio in figura. PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli sovrapposti con il cerchio). NOT overlaps(geometry(get_feature('cerchio','id','1')),$geometry)","title":"overlaps"},{"location":"gr_funzioni/geometria/geometria_unico/#overlay_contains","text":"Restituisce se l'elemento corrente contiene spazialmente almeno un elemento da un layer target o un array di risultati basati su espressioni per gli elementi nel layer target contenuti nell'elemento corrente. Ulteriori informazioni sul predicato GEOS \"Contains\" sottostante, come descritto nella funzione PostGIS ST_CONTAINS . Sintassi: overlay_contains( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_contains('regions') \u2192 true se l'elemento corrente contiene spazialmente una regione overlay_contains('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente contiene spazialmente una regione con una popolazione maggiore di 10000 overlay_contains('regions', name) \u2192 un array di nomi, per le regioni contenute nell'elemento corrente array_to_string(overlay_contains('regions', name)) \u2192 una stringa come una lista di nomi separata da virgola, per le regioni contenute nell'elemento corrente overlay_contains('regions', name)[0] \u2192 una stringa con il nome della regione contenuta nell'elemento corrente array_sort(overlay_contains(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni contenute nell'elemento corrente e con una popolazione superiore a 10000 overlay_contains(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni contenute nell'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti!","title":"overlay_contains"},{"location":"gr_funzioni/geometria/geometria_unico/#overlay_crosses","text":"Restituisce se l'elemento corrente attraversa spazialmente almeno un elemento di un layer target o un array di risultati basati su espressioni per gli elementi nel layer target attraversati dall'elemento corrente. Ulteriori informazioni sul predicato GEOS \"Crosses\" sottostante, come descritto nella funzione PostGIS ST_Crosses . Sintassi: overlay_crosses( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_crosses('regions') \u2192 true se l'elemento corrente attraversa spazialmente una regione overlay_crosses('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente attraversa spazialmente una regione con una popolazione maggiore di 10000 overlay_crosses('regions', name) \u2192 un array di nomi, per le regioni attraversate dall'elemento corrente array_to_string(overlay_crosses('regions', name)) \u2192 una stringa come una lista di nomi separata da virgola, per le regioni attraversate dall'elemento corrente overlay_crosses('regions', name)[0] \u2192 una stringa con il nome della prima regioni attraversata dall'elemento corrente array_sort(overlay_crosses(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni attraversate dall'elemento corrente e con una popolazione superiore a 10000 overlay_crosses(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni attraversate dall'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti!","title":"overlay_crosses"},{"location":"gr_funzioni/geometria/geometria_unico/#overlay_disjoint","text":"Restituisce se l'elemento corrente \u00e8 spazialmente disgiunto da tutti gli elementi di un layer target, o un array di risultati basati su espressione per gli elementi nel layer target che sono disgiunti dall'elemento corrente. Ulteriori informazioni sul sottostante predicato GEOS \"Disjoint\", come descritto nella funzione PostGIS ST_Disjoint . Sintassi: overlay_disjoint( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_disjoint('regions') \u2192 true se l'elemento corrente \u00e8 spazialmente disgiunto da tutte le regioni overlay_disjoint('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente \u00e8 spazialmente disgiunto da tutte le regioni con una popolazione maggiore di 10000 overlay_disjoint('regions', name) \u2192 un array di nomi, per le regioni spazialmente disgiunte dall'elemento corrente array_to_string(overlay_disjoint('regions', name)) \u2192 una stringa come una lista di nomi separata da virgola, per le regioni spazialmente disgiunte dall'elemento corrente overlay_disjoint('regions', name)[0] \u2192 una stringa con il nome della regione spazialmente disgiunte dall'elemento corrente array_sort(overlay_disjoint(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni spazialmente disgiunte dall'elemento corrente e con una popolazione superiore a 10000 overlay_disjoint(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni spazialmente disgiunte dall'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti!","title":"overlay_disjoint"},{"location":"gr_funzioni/geometria/geometria_unico/#overlay_equals","text":"Restituisce se l'elemento corrente \u00e8 spazialmente uguale ad almeno un elemento da un layer target o un array di risultati basati su espressioni per gli elementi nel layer target che sono spazialmente uguali all'elemento corrente. Ulteriori informazioni sul predicato GEOS \"Equals\" sottostante, come descritto nella funzione PostGIS ST_Equals . Sintassi: overlay_equals( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_equals('regions') \u2192 true se l'elemento corrente \u00e8 spazialmente uguale ad una regione overlay_equals('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente \u00e8 spazialmente uguale ad una regione con una popolazione maggiore di 10000 overlay_equals('regions', name) \u2192 un array di nomi, per le regioni spazialmente uguali all'elemento corrente array_to_string(overlay_equals('regions', name)) \u2192 una stringa come lista di nomi separati da virgole, per le regioni spazialmente uguali all'elemento corrente overlay_equals('regions', name)[0] \u2192 una stringa con il nome della regione spazialmente uguale all'elemento corrente array_sort(overlay_equals(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni spazialmente uguali all'elemento corrente e con una popolazione superiore a 10000 overlay_equals(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni spazialmente uguali all'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti!","title":"overlay_equals"},{"location":"gr_funzioni/geometria/geometria_unico/#overlay_intersects","text":"aggiornato a QGIS 3.24 Tisler Restituisce se l'elemento corrente interseca spazialmente almeno un elemento da un layer target o un array di risultati basati su espressioni per gli elementi nel layer target intersecati dall'elemento corrente. Ulteriori informazioni sul predicato GEOS \"Intersects\" sottostante, come descritto nella funzione PostGIS ST_INTERSECTS . Sintassi <= QGIS 3.22.x overlay_intersects( layer [, expression ][, filter ][, limit ][, cache=false ]) Sintassi >= QGIS 3.24.x overlay_intersects( layer [, expression ][, filter ][, limit ][, cache=false ][, min_overlap ][, min_inscribed_circle_radius ][, return_details ][, sort_by_intersection_size ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); min_overlap definisce un filtro opzionale di esclusione: per i poligoni un'area minima in unit\u00e0 quadrate dell'elemento corrente per l'intersezione (se l'intersezione risulta in pi\u00f9 poligoni l'intersezione sar\u00e0 restituita se almeno uno dei poligoni ha un'area maggiore o uguale al valore), per le linee una lunghezza minima in unit\u00e0 dell'elemento corrente (se l'intersezione risulta in pi\u00f9 linee l'intersezione sar\u00e0 restituita se almeno una delle linee ha una lunghezza maggiore o uguale al valore). min_inscribed_circle_radius definisce un filtro opzionale di esclusione (solo per i poligoni): raggio minimo in unit\u00e0 dell'elemento corrente per il cerchio massimo inscritto dell'intersezione (se l'intersezione risulta in pi\u00f9 poligoni l'intersezione sar\u00e0 restituita se almeno uno dei poligoni ha un raggio per il cerchio massimo inscritto maggiore o uguale al valore). Leggi di pi\u00f9 sul predicato GEOS sottostante, come descritto nella funzione PostGIS ST_MaximumInscribedCircle . Questo argomento richiede GEOS >= 3.9. return_details Imposta questo a true per restituire una lista di mappe contenenti (nomi chiave tra virgolette) l'elemento 'id', l'espressione 'result' e il valore 'overlap'. Il 'raggio' del cerchio massimo inscritto viene anche restituito quando il layer di destinazione \u00e8 un poligono. Valido solo se usato con il parametro espressione. sort_by_intersection_size valido solo se usato con un'espressione, impostalo a 'des' per restituire i risultati ordinati dal valore di sovrapposizione in ordine decrescente o impostalo a 'asc' per un ordine crescente. [ ] indica componenti opzionali Esempi: overlay_intersects('regions') \u2192 vero se l'elemento corrente interseca spazialmente una regione overlay_intersects('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente interseca spazialmente una regione con una popolazione maggiore di 10000 overlay_intersects('regions', name) \u2192 un array di nomi, per le regioni intersecate dall'elemento corrente array_to_string(overlay_intersects('regions', name)) \u2192 una stringa come una lista di nomi separata da virgola, per le regioni intersecate dall'elemento corrente array_sort(overlay_intersects(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni intersecate dall'elemento corrente e con una popolazione maggiore di 10000 overlay_intersects(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni intersecate dall'elemento corrente overlay_intersects(layer:='regions', min_overlap:=0.54) \u2192 true se l'elemento corrente interseca spazialmente una regione e l'area di intersezione (di almeno una delle parti in caso di multipoligoni) \u00e8 maggiore o uguale a 0.54 overlay_intersects(layer:='regions', min_inscribed_circle_radius:=0.54) \u2192 true se l'elemento corrente interseca spazialmente una regione e il raggio massimo del cerchio inscritto nell'area di intersezione (di almeno una delle parti in caso di parti multiple) \u00e8 maggiore o uguale a 0.54 overlay_intersects(layer:='regions', expression:= geom_to_wkt($geometry), return_details:=true) \u2192 un array di mappe contenente 'id', 'result', 'overlap' e 'radius' overlay_intersects(layer:='regions', expression:= geom_to_wkt($geometry), sort_by_intersection_size:='des') \u2192 un array di geometrie (in WKT) ordinate per il valore di sovrapposizione in ordine decrescente Esempio pratico: Assegnare l'ID del poligono sovrapposto con maggiore area intersecata: overlay_intersects( 'Reg01012022_G_Wgs84', \"cod_reg\", sort_by_intersection_size:='des')[0] -- sort_by_intersection_size Nuovo parametro Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti!","title":"overlay_intersects"},{"location":"gr_funzioni/geometria/geometria_unico/#overlay_nearest","text":"Restituisce se l'elemento corrente ha elementi da un layer target entro una data distanza o un array di risultati basati su espressioni per gli elementi nel layer di target entro una distanza dall'elemento corrente. Nota: questa funzione pu\u00f2 essere lenta e consuma molta memoria per layer con molte feature. Sintassi: overlay_nearest( layer [, expression ][, filter ][, limit=1 ][, max_distance ][, cache ]) NB: per QGIS >= 3.22.x , il parametro filter \u00e8 dimanico, vedi qui . [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); max_distance una distanza opzionale per limitare la ricerca di elementi corrispondenti. Se non impostato, verranno usati tutti gli elementi nel layer di destinazione, (misurata in maniera cartesiana nel sistema di riferimento dal layer sorgente) cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_nearest('airports') \u2192 true se il layer \"airports\" ha almeno un elemento overlay_nearest('airports', max_distance:= 5000) \u2192 vero se \u00e8 presente un aeroporto entro una distanza di 5000 unit\u00e0 dall'elemento corrente (misurata in maniera cartesiana nel sistema di riferimento dal layer sorgente) overlay_nearest('airports', name) \u2192 il nome dell'aereoporto pi\u00f9 vicino all'elemento corrente, come array array_to_string(overlay_nearest('airports', name)) \u2192 il nome dell'aereoporto pi\u00f9 vicino all'elemento corrente, come stringa overlay_nearest(layer:='airports', expression:= name, max_distance:= 5000) \u2192 il nome dell'aereoporto pi\u00f9 vicino entro una distanza di 5000 unit\u00e0 dall'elemento corrente, come array overlay_nearest(layer:='airports', expression:=\"name\", filter:= \"Use\"='Civilian', limit:=3) \u2192 un array di nomi, per un massimo di tre aeroeporti civili pi\u00f9 vicini ordinati per distanza overlay_nearest(layer:='airports', expression:=\"name\", limit:= -1, max_distance:= 5000) \u2192 un array di nomi, per tutti gli aeroporti entro una distanza di 5000 unit\u00e0 dall'elemento corrente, ordinato per distanza. Esempio 45 Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti! Non documentato: La funzione, usata su uno stesso layer, esclude i casi banali, ovvero: se dovessi ricercare il punto pi\u00f9 vicino appartenente allo stesso layer. Chiaramente il punto pi\u00f9 vicino appartenente allo stesso layer \u00e8 il punto stesso, ma il codice \u00e8 fatto in modo che in questo caso venga escluso il punto stesso (che sarebbe un risultato banale) e cerca il secondo punto pi\u00f9 vicino nello stesso layer. overlay_nearest(@layer_name, $geometry)","title":"overlay_nearest"},{"location":"gr_funzioni/geometria/geometria_unico/#overlay_touches","text":"Restituisce se l'elemento corrente tocca spazialmente almeno un elemento da un layer target o un array di risultati basati su espressioni per gli elementi nel layer target toccati dall'elemento corrente. Leggi ulteriori informazioni sul predicato GEOS \"Touches\", come descritto nella funzione PostGIS ST_TOUCHES . Sintassi: overlay_touches( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_touches('regions') \u2192 true se l'elemento corrente tocca spazialmente una regione overlay_touches('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente tocca spazialmente una regione con una popolazione maggiore di 10000 overlay_touches('regions', name) \u2192 un array di nomi, per le regioni tocacte dall'elemento corrente string_to_array(overlay_touches('regions', name)) \u2192 una stringa come lista di nomi separati da virgole, per le regioni toccate dall'elemento corrente overlay_touches('regions', name)[0] \u2192 una stringa con il nome della regione toccata dall'elemento corrente array_sort(overlay_touches(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni toccate dall'elemento attuale e con una popolazione superiore a 10000 overlay_touches(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni toccate dall'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti!","title":"overlay_touches"},{"location":"gr_funzioni/geometria/geometria_unico/#overlay_within","text":"Restituisce se l'elemento corrente \u00e8 spazialmente all'interno di almeno un elemento da layer destinazione, o un array di risultati basati su espressione per gli elementi nel layer destinazione che contengono l'elemento corrente. Ulteriori informazioni sul sottostante predicato GEOS \"Within\", come descritto nella funzione PostGIS ST_WITHIN . Sintassi: overlay_within( layer [, expression ][, filter ][, limit ][, cache=false ]) [ ] indica componenti opzionali Argomenti: layer l'altro layer; expression un'espressione opzionale per valutare gli elementi dell'altro layer (se non impostata, la funzione restituisce semplicemente un booleano che indica se c'\u00e8 almeno una corrispondenza); filter un'espressione opzionale per filtrare gli elementi corrispondenti (se non impostata, verranno restituiti tutti gli elementi); limit un numero intero opzionale per limitare il numero di elementi corrispondenti (se non impostato, verranno restituiti tutti gli elementi); cache imposta su \"vero\" per creare un indice spaziale locale (il pi\u00f9 delle volte, questo \u00e8 indesiderato, a meno che tu non stia lavorando con un fornitore di dati particolarmente lento); [ ] indica componenti opzionali Esempi: overlay_within('regions') \u2192 true se l'elemento corrente \u00e8 spazialmente all'interno di una regione overlay_within('regions', filter:= population > 10000) \u2192 vero se l'elemento corrente \u00e8 spazialmente all'interno di una regione con una popolazione maggiore di 10000 overlay_within('regions', name) \u2192 un array di nomi, per le regioni contenenti l'elemento corrente array_to_string(overlay_within('regions', name)) \u2192 una stringa come lista di nomi separati da virgole, per le regioni che contengono l'elemento corrente overlay_within('regions', name)[0] \u2192 una stringa con il nome della regione che contengono l'elemento corrente array_sort(overlay_within(layer:='regions', expression:=\"name\", filter:= population > 10000)) \u2192 un array ordinato di nomi, per le regioni contenenti l'elemento corrente e con una popolazione superiore a 10000 overlay_within(layer:='regions', expression:= geom_to_wkt($geometry), limit:=2) \u2192 un array di geometrie (in WKT), per un massimo di due regioni contenenti l'elemento corrente Nota bene: La funzione restituisce un output corretto anche se i due layer hanno EPSG differenti!","title":"overlay_within"},{"location":"gr_funzioni/geometria/geometria_unico/#perimeter_1","text":"Calcola il perimetro di un oggetto a geometria poligonale. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di detta geometria, e l'unit\u00e0 di misura della lunghezza restituita \u00e8 conforme all'unit\u00e0 di misura del SR. Ci\u00f2 differisce dal calcolo eseguito dalla funzione $perimeter , la quale esegue calcoli ellissoidali basati sull'ellissoide del progetto e sulle impostazioni delle unit\u00e0 di misura della distanza. Sintassi: perimeter( geometry ) Argomenti: geometry oggetto geometria poligono Esempi: perimeter(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))')) \u2192 12.0","title":"perimeter"},{"location":"gr_funzioni/geometria/geometria_unico/#point_n","text":"Restituisce un nodo specifico da una geometria. Sintassi: point_n( geometry , index ) Argomenti: geometry oggetto geometria index indice del nodo da restituire, dove 1 \u00e8 il primo nodo; se il valore \u00e8 negativo, l'indice del vertice selezionato sar\u00e0 il suo conteggio totale meno il valore assoluto Esempi: geom_to_wkt(point_n(geom_from_wkt('POLYGON((0 0, 4 0, 4 2, 0 2, 0 0))'),2)) \u2192 'Point (4 0)' -- Esempi correlati: esempio nro 4 - Come aggiungere la quota Z alla tabella attributi","title":"point_n"},{"location":"gr_funzioni/geometria/geometria_unico/#point_on_surface","text":"Restituisce un punto garantendo che sia giacente sulla superficie della geometria. Sintassi: point_on_surface( geometry ) Argomenti: geometry una geometria Esempi: point_on_surface($geometry) \u2192 una geometria punto --","title":"point_on_surface"},{"location":"gr_funzioni/geometria/geometria_unico/#pole_of_inaccessibility","text":"Calcola il polo dell'inaccessibilit\u00e0 approssimato per una superficie, che \u00e8 il punto interno pi\u00f9 distante dal contorno della superficie. Questa funzione usa l'algoritmo 'polylabel' (Vladimir Agafonkin, 2016), che \u00e8 un approccio iterativo garantito per trovare il vero polo dell'inaccessibilit\u00e0 all'interno di una tolleranza specificata. Tolleranze pi\u00f9 precise richiedono pi\u00f9 iterazioni e sar\u00e0 necessario pi\u00f9 tempo per il calcolo. Sintassi: pole_of_inaccessibility( geometry , tolerance ) Argomenti: geometry una geometria tolerance distanza massima tra il punto restituito e la vera posizione del polo Esempi: geom_to_wkt(pole_of_inaccessibility( geom_from_wkt('POLYGON((0 1,0 9,3 10,3 3, 10 3, 10 1, 0 1))'), 0.1)) \u2192 'Point(1.55, 1.55)' --","title":"pole_of_inaccessibility"},{"location":"gr_funzioni/geometria/geometria_unico/#project","text":"Restituisce un punto proiettato da un punto di partenza usando una distanza e una direzione di immersione (azimut) in radianti. Sintassi: project( point , distance , azimuth [, elevation ]) [ ] indica componenti opzionali Argomenti: point punto di partenza point distanza da proiettare azimuth azimuth in radianti in senso orario, dove 0 corrisponde a nord elevation angolo di inclinazione in radianti Esempi: project(make_point(1, 2), 3, radians(270)) \u2192 Point(-2, 2) --","title":"project"},{"location":"gr_funzioni/geometria/geometria_unico/#relate","text":"Testa la rappresentazione Dimensional Extended 9 Intersection Model (DE-9IM) della relazione tra due geometrie.","title":"relate"},{"location":"gr_funzioni/geometria/geometria_unico/#variabile-di-relazione","text":"Restituisce la rappresentazione Dimensional Extended 9 Intersection Model (DE-9IM) della relazione tra due geometrie. Sintassi: relate( geometry , geometry ) ) Argomenti: geometry una geometria geometry una geometria Esempi: relate( geom_from_wkt( 'LINESTRING(40 40,120 120)' ), geom_from_wkt( 'LINESTRING(40 40,60 120)' ) ) \u2192 'FF1F00102'","title":"Variabile di relazione"},{"location":"gr_funzioni/geometria/geometria_unico/#variabile-di-corrispondenza-del-modello","text":"Testa se la relazione DE-9IM tra due geometrie corrisponde a un pattern specificato: restituisc true Vero, false Falso. Sintassi: relate( geometry , geometry , pattern ) Argomenti: geometry una geometria geometry una geometria pattern Tratteggio DE-9IM da far corrispondere Esempi: relate( geom_from_wkt( 'LINESTRING(40 40,120 120)' ), geom_from_wkt( 'LINESTRING(40 40,60 120)' ), '**1F001**' ) \u2192 Vero Link utili: Wikipedia OpenGeo","title":"Variabile di corrispondenza del modello"},{"location":"gr_funzioni/geometria/geometria_unico/#reverse","text":"Inverte il verso di una linestring invertendo l'ordine dei sui vertici. Sintassi: reverse( geometry ) Argomenti: geometry una geometria Esempi: geom_to_wkt(reverse(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))) \u2192 'LINESTRING(2 2, 1 1, 0 0)' --","title":"reverse"},{"location":"gr_funzioni/geometria/geometria_unico/#rotate","text":"Restituisce una versione ruotata di una geometria. I calcoli si trovano nel sistema di riferimento spaziale di questa geometria. Sintassi: rotate( geometry , rotation [, center ][, per_part=false ]) [ ] indica componenti opzionali Argomenti: geometry una geometria rotation rotazione oraria in gradi center punto centrale di rotazione. Se non specificato, viene utilizzato il centro del perimetro di delimitazione della geometria. per_part applica la rotazione per parte. Se true, la rotazione verr\u00e0 applicata attorno al centro del riquadro di delimitazione di ciascuna parte quando la geometria di input \u00e8 multiparte e non \u00e8 specificato un punto centrale di rotazione esplicito. Esempi: rotate($geometry, 45, make_point(4, 5)) \u2192 la geometria ruotava di 45 gradi in senso orario attorno al punto (4, 5) rotate($geometry, 45) \u2192 la geometria ruotava di 45 gradi in senso orario attorno al centro del riquadro di delimitazione >=QGIS 3.24","title":"rotate"},{"location":"gr_funzioni/geometria/geometria_unico/#roundness","text":"Calcola quanto una forma di poligono \u00e8 quasi un cerchio. La funzione restituisce 1 quando la forma del poligono \u00e8 un cerchio perfetto e 0 quando \u00e8 completamente piatta. La definizione usata: Roundness = (4 * pi * Area) / Perimeter^2 Sintassi: roundness( geometry ) Argomenti: geometry un poligono Esempi: round(roundness(geom_from_wkt('POLYGON(( 0 0, 0 1, 1 1, 1 0, 0 0))')), 3) \u2192 0.785 round(roundness(geom_from_wkt('POLYGON(( 0 0, 0 0.1, 1 0.1, 1 0, 0 0))')), 3) \u2192 0.260","title":"roundness"},{"location":"gr_funzioni/geometria/geometria_unico/#scale","text":"Restituisce una versione scalata di una geometria. I calcoli sono nel sistema di riferimento spaziale di questa geometria. Sintassi: scale( geometry , x_scale , y_scale , [, center ] ) Argomenti: geometry una geometria x_scale Fattore di scala asse-x y_scale Fattore di scala asse-y center punto centrale della scalatura. Se non specificato, viene utilizzato il centro del rettangolo di delimitazione della geometria. Esempi: scale($geometry, 2, 0.5, make_point(4, 5)) \u2192 geometria scalata di due volte in orizzontale e dimezzata in verticale, intorno al punto (4, 5) scale($geometry, 2, 0.5) \u2192 geometria scalata di due volte in orizzontale e dimezzata in verticale, intorno al centro del suo riquadro di delimitazione geometria scalata del 75% (in x e y) rispetto il centroide della stessa geometria di partenza: scale($geometry,.75,.75, centroid($geometry))","title":"scale"},{"location":"gr_funzioni/geometria/geometria_unico/#segments_to_lines","text":"Restituisce una geometria multi linea consistente in una linea per ogni segmento nella geometria in ingresso. Sintassi: segments_to_lines( geometry ) Argomenti: geometry oggetto geometria Esempi: geom_to_wkt(segments_to_lines(geom_from_wkt('LINESTRING(0 0, 1 1, 2 2)'))) \u2192 'MultiLineString ((0 0, 1 1),(1 1, 2 2))'","title":"segments_to_lines"},{"location":"gr_funzioni/geometria/geometria_unico/#shared_paths","text":"Restituisce un insieme contenente i percorsi condivisi dalle due geometrie in ingresso. Quelli che vanno nella stessa direzione sono nel primo elemento della collezione, quelli che vanno nella direzione opposta sono nel secondo elemento. I percorsi di per se stessi sono dati nella direzione della prima geometria. Sintassi: shared_paths( geometry1 , geometry2 ) Argomenti: geometry1 una geometria di tipo LineString/MultiLineString geometry2 una geometria di tipo LineString/MultiLineString Esempi: - geom_to_wkt(shared_paths(geom_from_wkt('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150)))'),geom_from_wkt('LINESTRING(151 100,126 156.25,126 125,90 161, 76 175)'))) \u2192 'GeometryCollection (MultiLineString ((126 156.25, 126 125),(101 150, 90 161),(90 161, 76 175)),MultiLineString EMPTY)' - geom_to_wkt(shared_paths(geom_from_wkt('LINESTRING(76 175,90 161,126 125,126 156.25,151 100)'),geom_from_wkt('MULTILINESTRING((26 125,26 200,126 200,126 125,26 125),(51 150,101 150,76 175,51 150))'))) \u2192 'GeometryCollection (MultiLineString EMPTY,MultiLineString ((76 175, 90 161),(90 161, 101 150),(126 125, 126 156.25)))'","title":"shared_paths"},{"location":"gr_funzioni/geometria/geometria_unico/#shortest_line","text":"Restituisce la linea pi\u00f9 corta che unisce la geometria 1 alla geometria 2. La linea risultante partir\u00e0 dalla geometria 1 e finir\u00e0 nella geometria 2. Sintassi: shortest_line( geometry1 , geometry2 ) Argomenti: geometry1 geometria dalla quale cercare la linea pi\u00f9 corta geometry2 geometria verso la quale cercare la linea pi\u00f9 corta Esempi: geom_to_wkt(shortest_line(geom_from_wkt('LINESTRING (20 80, 98 190, 110 180, 50 75 )'),geom_from_wkt('POINT(100 100)'))) \u2192 LineString(73.0769 115.384, 100 100) --","title":"shortest_line"},{"location":"gr_funzioni/geometria/geometria_unico/#simplify","text":"Semplifica una geometria rimuovendo nodi usando una soglia basata sulla distanza (cio\u00e8, l'algoritmo Douglas Peucker). L'algoritmo mantiene grandi deviazioni nelle geometrie e riduce il numero di vertici in segmenti quasi rettilinei. Sintassi: simplify(simplify_vw( geometry , tolerance ) Argomenti: geometry una geometria tolerance deviazione massima dai segmenti rettilinei per i punti da rimuovere Esempi: geom_to_wkt(simplify(geometry:=geom_from_wkt('LineString(0 0, 5 0.1, 10 0)'),tolerance:=5)) \u2192 'LineString(0 0, 10 0)'","title":"simplify"},{"location":"gr_funzioni/geometria/geometria_unico/#simplify_vw","text":"Semplifica una geometria rimuovendo nodi usando una soglia basata sull'area (cio\u00e8, l'algoritmo Visvalingam-Whyatt ). L'algoritmo rimuove i vertici che creano piccole aree nelle geometrie, ad esempio picchi stretti o segmenti quasi rettilinei. Sintassi: simplify_vw( geometry , tolerance ) Argomenti: geometry una geometria tolerance una misura dell'area massima creata da un nodo per il nodo da rimuovere Esempi: geom_from_wkt('LineString(0 0, 5 0, 5.01 10, 5.02 0, 10 0)'),tolerance:=5)) \u2192 'LineString(0 0, 10 0)' --","title":"simplify_vw"},{"location":"gr_funzioni/geometria/geometria_unico/#single_sided_buffer","text":"Restituisce una geometria formata facendo un buffer solo da un lato di una geometria di tipo linestring. Le distanze sono espresse nel SR di tale geometria. Sintassi: single_sided_buffer( geometry , distance [, segments=8 ][, join=1 ][, miter_limit=2.0 ]) [ ] indica componenti opzionali Argomenti: geometry una geometria (multi)linestring distance distanza di buffer. Valori positivi saranno bufferizzati a sinistra delle linee, valori negativi a destra segments numero di segmenti da usare per rappresentare un quarto di cerchio quando \u00e8 utilizzato uno stile di unione arrotondato. Un numero grande risulta in un buffer pi\u00f9 morbido, con pi\u00f9 nodi. join stile di unione per gli angoli, dove 1 = arrotondato, 2 = seghettato e 3 = smussato miter_limit limite sul rapporto di seghettatura usato per angoli molto appuntiti (solamente quando si usano le unioni seghettate) Esempi: single_sided_buffer($geometry, 10.5) \u2192 linea bufferizzata a sinistra di 10.5 unit\u00e0 single_sided_buffer($geometry, -10.5) \u2192 linea bufferizzata a destra di 10.5 unit\u00e0 single_sided_buffer($geometry, 10.5, segments:=16, join:=1) \u2192 linea bufferizzata a sinistra di 10.5 unit\u00e0, usando pi\u00f9 segmenti per risultare in un buffer pi\u00f9 morbido single_sided_buffer($geometry, 10.5, join:=3) \u2192 linea bufferizzata a sinistra di 10.5 unit\u00e0, usando un'unione smussata --","title":"single_sided_buffer"},{"location":"gr_funzioni/geometria/geometria_unico/#sinuosity","text":"Restituisce la sinuosit\u00e0 di una curva che \u00e8 il rapporto tra la lunghezza della curva e la distanza diretta (2D) tra i suoi punti iniziali e finali. Sintassi sinuosity( geometry ) Argomenti geometry Curva in ingresso (circularstring, linestring) Esempi round(sinuosity(geom_from_wkt('LINESTRING(2 0, 2 2, 3 2, 3 3)')), 3) \u2192 1.265 sinuosity(geom_from_wkt('LINESTRING( 3 1, 5 1)')) \u2192 1.0","title":"sinuosity"},{"location":"gr_funzioni/geometria/geometria_unico/#smooth","text":"Smussa una geometria con l'aggiunta di ulteriori nodi che arrotondano gli angoli nella geometria. Sintassi: smooth( geometry , iterations=1 , offset=0.25 , min_length=1 , max_angle=180 ) Argomenti: geometry una geometria iterations Numero di iterazioni di smussatura da applicare. Valori pi\u00f9 alti fanno risultare geometria pi\u00f9 morbide, ma pi\u00f9 complesse. offset valore tra 0 e 0.5 che controlla quanto la geometria smussata segua strettamente la geometria originale. Valori pi\u00f9 piccoli risultano in una lisciatura pi\u00f9 stretta, valori pi\u00f9 grandi risultano in una lisciatura pi\u00f9 larga. min_length lunghezza minima dei segmenti ai quali applicare la smussatura. Questo parametro pu\u00f2 essere usato per evitare di posizionare nodi aggiuntivi eccessivi nei segmenti pi\u00f9 corti della geometria. max_angle angolo massimo (0-180) da applicare al nodo per la smussatura. Abbassando intenzionalmente l'angolo massimo si abbassa l'arrotondamento sugli angoli della geometria. Per esempio, un valore di 80 gradi preserver\u00e0 l'angolo nella geometria. Esempi: geom_to_wkt(smooth(geometry:=geom_from_wkt('LineString(0 0, 5 0, 5 5)'),iterations:=1,offset:=0.2,min_length:=-1,max_angle:=180)) \u2192 'LineString (0 0, 4 0, 5 1, 5 5)'","title":"smooth"},{"location":"gr_funzioni/geometria/geometria_unico/#square_wave","text":"Costruisce onde quadrate/rettangolari lungo il confine di una geometria. Sintassi: square_wave( geometry , wavelength , amplitude , [, strict ] ) Argomenti: geometry una geometria wavelength lunghezza d'onda di un'onda di forma quadra amplitude ampiezza di un'onda di forma triangolare strict Per valore predefinito l'argomento lunghezza d'onda \u00e8 trattato come una \"lunghezza d'onda massima\", dove la lunghezza d'onda effettiva sar\u00e0 regolata dinamicamente in modo che un numero esatto di onde quadrate sia creato lungo i confini della geometria. Se l'argomento strict \u00e8 impostato a true allora la lunghezza d'onda sar\u00e0 usata esattamente e una forma incompleta potrebbe essere usata per la forma d'onda finale. Esempi: square_wave(geom_from_wkt('LineString(0 0, 10 0)'), 3, 1) \u2192 Onde quadrate con lunghezza d'onda 3 e ampiezza 1 lungo la linea","title":"square_wave"},{"location":"gr_funzioni/geometria/geometria_unico/#square_wave_randomized","text":"Costruisce onde quadrate/rettangolari casuali lungo il confine di una geometria. Sintassi: square_wave_randomized( geometry , min_wavelength , max_wavelength , min_amplitude , max_amplitude [, seed=0 ] ) Argomenti: geometry una geometria min_wavelength lunghezza d'onda minima delle onde max_wavelength lunghezza d'onda massima delle onde min_amplitude ampiezza minima delle onde max_amplitude ampiezza massima delle onde seed specifica un seme casuale per la generazione delle onde. Se il seme \u00e8 0, allora verr\u00e0 generato un insieme completamente casuale di onde. Esempi: square_wave_randomized(geom_from_wkt('LineString(0 0, 10 0)'), 2, 3, 0.1, 0.2) \u2192 Onde quadrate di dimensioni casuali con lunghezze d'onda tra 2 e 3 e ampiezze tra 0,1 e 0,2 lungo la linea","title":"square_wave_randomized"},{"location":"gr_funzioni/geometria/geometria_unico/#start_point","text":"Restituisce il primo nodo di una geometria. Sintassi: start_point( geometry ) Argomenti: geometry oggetto geometria Esempi: geom_to_wkt(start_point(geom_from_wkt('LINESTRING(4 0, 4 2, 0 2)'))) \u2192 'Point (4 0)' Start_point di geometria poligonale: Start_point di geometria lineare:","title":"start_point"},{"location":"gr_funzioni/geometria/geometria_unico/#straight_distance_2d","text":"Restituisce la distanza diretta/euclidea tra il primo e l'ultimo vertice di una geometria. La geometria deve essere una curva (circularstring, linestring). Sintassi straight_distance_2d( geometry ) Argomenti geometry una geometria (circularstring, linestring) Esempi straight_distance_2d(geom_from_wkt('LINESTRING(1 0, 1 1)')) \u2192 1 round(straight_distance_2d(geom_from_wkt('LINESTRING(1 4, 3 5, 5 0)')), 3) \u2192 5.657","title":"straight_distance_2d"},{"location":"gr_funzioni/geometria/geometria_unico/#sym_difference","text":"Restituisce una geometria che rappresenta la porzione di due geometrie che non si interseca. Sintassi: sym_difference( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( sym_difference( geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ), geom_from_wkt( 'LINESTRING(3 3, 8 8)' ) ) ) \u2192 LINESTRING(5 5, 8 8) Espressione -- differenza simmetrica tra le due linee sym_difference( make_line( -- linea a start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))), make_line( -- linea b start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)) ) -- NB: -- l' ordine delle geometrie \u00e8 indifferente Prova tu Dati e progetto qgz --","title":"sym_difference"},{"location":"gr_funzioni/geometria/geometria_unico/#tapered_buffer","text":"Crea un buffer lungo una geometria della linea in cui il diametro del buffer varia in modo uniforme sulla lunghezza della linea. Sintassi: tapered_buffer( geometry , start_width , end_width [, segments=8 ]_) [ ] contrassegna componenti opzionali Argomenti: geometry input geometry. Deve essere una (multi) geometria della linea. start_width larghezza del buffer all'inizio della linea, end_width larghezza del buffer alla fine della riga. segments numero di segmenti per approssimare le curve del quarto di cerchio nel buffer Esempi: tapered_buffer(geometry:=geom_from_wkt('LINESTRING(1 2, 4 2)'),start_width:=1,end_width:=2,segments:=8) \u2192 Un buffer rastremato che inizia con un diametro di 1 e termina con un diametro di 2 lungo la geometria della linea. -- QGIS - feature","title":"tapered_buffer"},{"location":"gr_funzioni/geometria/geometria_unico/#touches","text":"Verifica se una geometria tocca un'altra. Restituisce vero (1) se le geometrie hanno almeno un punto in comune, ma i loro interni non si intersecano. Sintassi: touches( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: touches( geom_from_wkt( 'LINESTRING(5 3, 4 4)' ), geom_from_wkt( 'LINESTRING(3 3, 4 4, 5 5)' ) ) \u2192 1 touches( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(5 5)' ) ) \u2192 0 Nota bene: -- Osservazioni: Usando algoritmo Seleziona per espressione presente in strumenti di processing oppure (Ctrl+F3): touches(geometry(get_feature( 'province_rt_rt','pk_uid','46')),$geometry) dove: geometry1 \u00e8 geometry(get_feature( 'province_rt_rt','pk_uid','52')) geometry2 \u00e8 $geometry seleziono tutti i comuni touches (toccati) dalla provincia con pk_uid 46 (Siena) PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli toccati dalla provincia di Siena). NOT touches(geometry(get_feature( 'province_rt_rt','pk_uid','52')),$geometry)","title":"touches"},{"location":"gr_funzioni/geometria/geometria_unico/#transform","text":"Restituisce la geometria trasformata da un SR sorgente ad un SR di destinazione. Sintassi: transform( geometry , source_auth_id , dest_auth_id ) Argomenti: geometry una geometria source_auth_id ID del SR sorgente dest_auth_id ID del SR destinazione Esempi: geom_to_wkt( transform( $geometry, 'EPSG:2154', 'EPSG:4326' ) ) \u2192 POINT(0 51) --","title":"transform"},{"location":"gr_funzioni/geometria/geometria_unico/#translate","text":"Restituisce una versione traslata di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: translate( geometry , dx , dy ) Argomenti: geometry una geometria dx delta x geomdyetry delta y Esempi: translate($geometry, 5, 10) \u2192 una geometria dello stesso tipo come l'originale --","title":"translate"},{"location":"gr_funzioni/geometria/geometria_unico/#triangular_wave","text":"Costruisce onde triangolari lungo il confine di una geometria. Sintassi: triangular_wave( geometry , wavelength , amplitude , [, strict ] ) Argomenti: geometry una geometria wavelength lunghezza d'onda di un'onda di forma triangolare amplitude ampiezza di un'onda di forma triangolare strict Costruisce onde triangolari lungo i confini di una geometria. Per default l'argomento lunghezza d'onda \u00e8 trattato come una \"lunghezza d'onda massima\", dove la lunghezza d'onda effettiva sar\u00e0 regolata dinamicamente in modo da creare un numero esatto di onde triangolari lungo i confini della geometria. Se l'argomento strict \u00e8 impostato a true, allora la lunghezza d'onda sar\u00e0 usata esattamente e una forma incompleta potrebbe essere usato per la forma d'onda finale. Esempi: triangular_wave(geom_from_wkt('LineString(0 0, 10 0)'), 3, 1) \u2192 Onde triangolari con lunghezza d'onda 3 e ampiezza 1 lungo la linea","title":"triangular_wave"},{"location":"gr_funzioni/geometria/geometria_unico/#triangular_wave_randomized","text":"Costruisce onde triangolari casuali lungo il confine di una geometria. Sintassi: triangular_wave_randomized( geometry , min_wavelength , max_wavelength , min_amplitude , max_amplitude [, seed=0 ] ) Argomenti: geometry una geometria min_wavelength lunghezza d'onda minima delle onde max_wavelength lunghezza d'onda massima delle onde min_amplitude ampiezza minima delle onde max_amplitude ampiezza massima delle onde seed specifica un seme casuale per la generazione delle onde. Se il seme \u00e8 0, allora verr\u00e0 generato un insieme completamente casuale di onde. Esempi: triangular_wave_randomized(geom_from_wkt('LineString(0 0, 10 0)'), 2, 3, 0.1, 0.2) \u2192 Onde triangolari di dimensioni casuali con lunghezze d'onda tra 2 e 3 e ampiezze tra 0,1 e 0,2 lungo la linea","title":"triangular_wave_randomized"},{"location":"gr_funzioni/geometria/geometria_unico/#union","text":"Restituisce una geometria che rappresenta l'insieme dei punti dell'unione delle geometrie. Sintassi: union( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: geom_to_wkt( union( geom_from_wkt( 'POINT(4 4)' ), geom_from_wkt( 'POINT(5 5)' ) ) ) \u2192 MULTIPOINT(4 4, 5 5) Espressione -- unione delle due linee union( make_line( -- linea a start_point(geometry(get_feature_by_id('linea_a',0))), start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0)))), make_line( -- linea b start_point($geometry), end_point(geometry(get_feature_by_id('linea_a',0))), end_point($geometry)) ) -- NB: -- l' ordine delle geometrie \u00e8 indifferente Prova tu Dati e progetto qgz --","title":"union"},{"location":"gr_funzioni/geometria/geometria_unico/#wave","text":"Costruisce onde arrotondate (sinusoidali) lungo il confine di una geometria. Sintassi: wave( geometry , wavelength , amplitude , [, strict ] ) Argomenti: geometry una geometria wavelength lunghezza d'onda di un'onda di forma sinusoidale amplitude ampiezza di un'onda di forma sinusoidale strict Per valore predefinito l'argomento lunghezza d'onda \u00e8 trattato come una \"lunghezza d'onda massima\", dove la lunghezza d'onda effettiva sar\u00e0 regolata dinamicamente in modo che un numero esatto di onde quadrate sia creato lungo i confini della geometria. Se l'argomento strict \u00e8 impostato a true allora la lunghezza d'onda sar\u00e0 usata esattamente e una forma incompleta potrebbe essere usata per la forma d'onda finale. Esempi: wave(geom_from_wkt('LineString(0 0, 10 0)'), 3, 1) \u2192 Onde sinusoidali con lunghezza d'onda 3 e ampiezza 1 lungo la linea","title":"wave"},{"location":"gr_funzioni/geometria/geometria_unico/#wave_randomized","text":"Costruisce onde curve casuali (sinusoidali) lungo il confine di una geometria. Sintassi: wave_randomized( geometry , min_wavelength , max_wavelength , min_amplitude , max_amplitude [, seed=0 ] ) Argomenti: geometry una geometria min_wavelength lunghezza d'onda minima delle onde max_wavelength lunghezza d'onda massima delle onde min_amplitude ampiezza minima delle onde max_amplitude ampiezza massima delle onde seed specifica un seme casuale per la generazione delle onde. Se il seme \u00e8 0, allora verr\u00e0 generato un insieme completamente casuale di onde. Esempi: wave_randomized(geom_from_wkt('LineString(0 0, 10 0)'), 2, 3, 0.1, 0.2) \u2192 Onde curve di dimensioni casuali con lunghezze d'onda tra 2 e 3 e ampiezze tra 0,1 e 0,2 lungo la stringa","title":"wave_randomized"},{"location":"gr_funzioni/geometria/geometria_unico/#wedge_buffer","text":"Restituisce un buffer a forma di cuneo che origina da una geometria del punto. Sintassi: wedge_buffer( geometry , azimuth , width , outer_radius [, inner_radius=0.0 ]) [ ] contrassegna componenti opzionali Argomenti: geometry punto centrale (origine) del buffer. Deve essere una geometria puntuale. azimuth (in gradi) per il centro del cuneo da puntare. width buffer w larghezza (in gradi). Si noti che il cuneo si estender\u00e0 fino a met\u00e0 della larghezza angolare su entrambi i lati della direzione dell'azimut. outer_radius raggio esterno per i buffers inner_radius raggio interno opzionale per i buffers Esempi: wedge_buffer(center:=geom_from_wkt('POINT(1 2)'),azimuth:=90,width:=180,outer_radius:=1) \u2192 Un buffer a forma di cuneo centrato sul punto (1,2), rivolto verso est, con una larghezza di 180 gradi e raggio esterno di 1. --","title":"wedge_buffer"},{"location":"gr_funzioni/geometria/geometria_unico/#within","text":"Controlla qualora una geometria sia interna ad un'altra. Restituisce 1 (vero) se la geometria1 \u00e8 completamente contenuta nella_ geometria2_. Sintassi: within( geometry1 , geometry2 ) Argomenti: geometry1 una geometria geometry2 una geometria Esempi: within( geom_from_wkt( 'POINT( 0.5 0.5)' ), geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))' ) ) \u2192 1 within( geom_from_wkt( 'POINT( 5 5 )' ), geom_from_wkt( 'POLYGON((0 0, 0 1, 1 1, 1 0, 0 0 ))' ) ) \u2192 0 Osservazioni: Usando algoritmo `Seleziona per espressione` presente in strumenti di processing oppure ![icona](https://docs.qgis.org/2.18/en/_images/mIconExpressionSelect.png) (Ctrl+F3): - within($geometry,geometry(get_feature( 'province_rt_rt','pk_uid','53'))) dove: geometry1 \u00e8 $geometry geometry2 \u00e8 geometry(get_feature( 'province_rt_rt','pk_uid','53')) seleziono tutti i comuni within (contenuti) nella provincia con pk_uid 53 (Grosseto) PS:** potrei anche negare ( NOT ) l'espressione per selezionare il complementare (tutti i comuni tranne quelli contenuti nella provincia di Grosseto). NOT within($geometry,geometry(get_feature( 'province_rt_rt','pk_uid','53'))) Altro esempio con condizione sulle etichette Espressione CASE WHEN within( $geometry, geometry(get_feature('poligono','id',1))) = 1 THEN 'INTERNO' ELSE 'NON INTERNO' END","title":"within"},{"location":"gr_funzioni/geometria/geometria_unico/#x_1","text":"Restituisce la minima coordinata x di una geometria punto, o la coordinata x del centroide di una geometria non puntuale. Sintassi: x( geometry ) Argomenti: geometry una geometria Esempi: x( geom_from_wkt( 'POINT(2 5)' ) ) \u2192 2 x( $geometry ) \u2192 coordinata x del centroide dell'elemento corrente --","title":"x"},{"location":"gr_funzioni/geometria/geometria_unico/#x_max","text":"Restituisce la coordinata x massima di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: x_max( geometry ) Argomenti: geometry una geometria Esempi: x_max( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 4 --","title":"x_max"},{"location":"gr_funzioni/geometria/geometria_unico/#x_min","text":"Restituisce la coordinata x minima di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: x_min( geometry ) Argomenti: geometry una geometria Esempi: x_min( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 2 --","title":"x_min"},{"location":"gr_funzioni/geometria/geometria_unico/#y_1","text":"Restituisce la coordinata y minima di una geometria puntuale, o la coordinata y del centroide di una geometria non puntuale. Sintassi: y( geometry ) Argomenti: geometry una geometria Esempi: y( geom_from_wkt( 'POINT(2 5)' ) ) \u2192 5 y( $geometry ) \u2192 coordinata y del centroide dell'elemento corrente --","title":"y"},{"location":"gr_funzioni/geometria/geometria_unico/#y_max","text":"Restituisce la coordinata y massima di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: y_max( geometry ) Argomenti: geometry una geometria Esempi: y_max( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 8 --","title":"y_max"},{"location":"gr_funzioni/geometria/geometria_unico/#y_min","text":"Restituisce la coordinata y minima di una geometria. I calcoli sono effettuati nel sistema di riferimento spaziale di tale geometria. Sintassi: y_min( geometry ) Argomenti: geometry una geometria Esempi: y_min( geom_from_wkt( 'LINESTRING(2 5, 3 6, 4 8)') ) \u2192 5 --","title":"y_min"},{"location":"gr_funzioni/geometria/geometria_unico/#z","text":"Restituisce la coordinata z di una geometria puntuale. Sintassi: z( geometry ) Argomenti: geometry una geometria punto Esempi: z( geom_from_wkt( 'POINTZ(2 5 7)' ) ) \u2192 7","title":"z"},{"location":"gr_funzioni/geometria/geometria_unico/#z_1","text":"Restituisce il valore z del punto corrente se \u00e8 3D. Se la feature \u00e8 una feature multipunto, verr\u00e0 restituito il valore z del primo punto. Sintassi $z Esempi $z \u2192 123","title":"$z"},{"location":"gr_funzioni/geometria/geometria_unico/#z_max","text":"Restituisce la coordinata z massima di una geometria. Sintassi: z_max( geometry ) Argomenti: geometry una geometria con z coordinata Esempi: z_max( geom_from_wkt( 'POINT ( 0 0 1 )' ) ) \u2192 1 z_max( geom_from_wkt( 'MULTIPOINT ( 0 0 1 , 1 1 3 )' ) ) \u2192 3 z_max( make_line( make_point( 0,0,0 ), make_point( -1,-1,-2 ) ) ) \u2192 0 z_max( geom_from_wkt( 'LINESTRING( 0 0 0, 1 0 2, 1 1 -1 )' ) ) \u2192 2 z_max( geom_from_wkt( 'POINT ( 0 0 )' ) ) \u2192 NULL","title":"z_max"},{"location":"gr_funzioni/geometria/geometria_unico/#z_min","text":"Restituisce la coordinata z minima di una geometria. Sintassi: z_min( geometry ) Argomenti: geometry una geometria con z coordinata Esempi: z_min( geom_from_wkt( 'POINT ( 0 0 1 )' ) ) \u2192 1 z_min( geom_from_wkt( 'MULTIPOINT ( 0 0 1 , 1 1 3 )' ) ) \u2192 1 z_min( make_line( make_point( 0,0,0 ), make_point( -1,-1,-2 ) ) ) \u2192 -2 z_min( geom_from_wkt( 'LINESTRING( 0 0 0, 1 0 2, 1 1 -1 )' ) ) \u2192 -1 z_min( geom_from_wkt( 'POINT ( 0 0 )' ) ) \u2192 NULL","title":"z_min"},{"location":"gr_funzioni/lat_lon_tools/lat_lon_tools_unico/","text":"Lat Lon Tools \u21b5 Plugin Lat Lon Tools: https://plugins.qgis.org/plugins/latlontools/","title":"Lat Lon Tools"},{"location":"gr_funzioni/lat_lon_tools/lat_lon_tools_unico/#lat-lon-tools","text":"Plugin Lat Lon Tools: https://plugins.qgis.org/plugins/latlontools/","title":"Lat Lon Tools"},{"location":"gr_funzioni/layer_mappa/layer_mappa_unico/","tags":["gruppo"],"text":"Gruppo Layer Mappa \u21b5 Abstract Contiene una lista dei layer della mappa che sono disponibili nel progetto corrente. A partire dalla versione QGIS 3.24 1 , sar\u00e0 possibile visualizzare i campi e valori dei layer in lista decode_uri \u21b5 Prende un livello e decodifica l'uri del fornitore di dati sottostante, i dati sonodisponibili dipendono dal dataprovider. Sintassi: decode_uri( layer ,[, part ]) [ ] contrassegna componenti opzionali Argomento: layer Il layer per cui l'uri dovrebbe essere decodificato part La parte di uri da restituire. Se non specificata, verr\u00e0 restituita una mappa con tutte le parti uri Esempi: decode_uri(@layer) \u2192 {'layerId': '0', 'layerName': '', 'path': '/home/qgis/shapefile.shp'} decode_uri(@layer) \u2192 {'layerId': NULL, 'layerName': 'layer', 'path': '/home/qgis/geopackage.gpkg'} decode_uri(@layer, 'path') \u2192 'C:\\my_data\\qgis\\shape.shp' layer_property \u21b5 Restituisce una propriet\u00e0 del layer corrispondente o un valore dei metadati. Sintassi: layer_property( layer , property ) Argomento: layer una stringa, rappresentante o un nome di un layer o un ID di layer property una stringa corrispondente alla propriet\u00e0 da restituire. Le opzioni valide sono: name : nome del layer id : layer ID title : titolo metadata abstract : metadata abstract string keywords : metadata keywords data_url : metadata URL attribution : stringa di attribuzione dei metadati attribution_url : URL di attribuzione dei metadati source : layer sorgente min_scale : minima scala di visualizzazione per strato max_scale : massima scala di visualizzazione per strato crs : layer CRS crs_definition : layer CRS definizione completa crs_description : layer CRS descrizione extent : estensione del layer (come oggetto geometrico) type : tipo di layer, ad esempio Vector o Raster storage_type : formato di archiviazione (solo livelli vettoriali) geometry_type : tipo di geometria, ad es. Punto (solo livelli vettoriali) feature_count : conteggio approssimativo delle caratteristiche per il livello (solo livelli vettoriali) Esempi: layer_property('streets','title') \u2192 'Basemap Streets' layer_property('airports','feature_count') \u2192 120 layer_property('landsat','crs') \u2192 'EPSG:4326' https://github.com/qgis/QGIS/pull/46505 \u21a9","title":"Layer Mappa"},{"location":"gr_funzioni/layer_mappa/layer_mappa_unico/#gruppo-layer-mappa","text":"Abstract Contiene una lista dei layer della mappa che sono disponibili nel progetto corrente. A partire dalla versione QGIS 3.24 1 , sar\u00e0 possibile visualizzare i campi e valori dei layer in lista","title":"Gruppo Layer Mappa"},{"location":"gr_funzioni/layer_mappa/layer_mappa_unico/#decode_uri","text":"Prende un livello e decodifica l'uri del fornitore di dati sottostante, i dati sonodisponibili dipendono dal dataprovider. Sintassi: decode_uri( layer ,[, part ]) [ ] contrassegna componenti opzionali Argomento: layer Il layer per cui l'uri dovrebbe essere decodificato part La parte di uri da restituire. Se non specificata, verr\u00e0 restituita una mappa con tutte le parti uri Esempi: decode_uri(@layer) \u2192 {'layerId': '0', 'layerName': '', 'path': '/home/qgis/shapefile.shp'} decode_uri(@layer) \u2192 {'layerId': NULL, 'layerName': 'layer', 'path': '/home/qgis/geopackage.gpkg'} decode_uri(@layer, 'path') \u2192 'C:\\my_data\\qgis\\shape.shp'","title":"decode_uri"},{"location":"gr_funzioni/layer_mappa/layer_mappa_unico/#layer_property","text":"Restituisce una propriet\u00e0 del layer corrispondente o un valore dei metadati. Sintassi: layer_property( layer , property ) Argomento: layer una stringa, rappresentante o un nome di un layer o un ID di layer property una stringa corrispondente alla propriet\u00e0 da restituire. Le opzioni valide sono: name : nome del layer id : layer ID title : titolo metadata abstract : metadata abstract string keywords : metadata keywords data_url : metadata URL attribution : stringa di attribuzione dei metadati attribution_url : URL di attribuzione dei metadati source : layer sorgente min_scale : minima scala di visualizzazione per strato max_scale : massima scala di visualizzazione per strato crs : layer CRS crs_definition : layer CRS definizione completa crs_description : layer CRS descrizione extent : estensione del layer (come oggetto geometrico) type : tipo di layer, ad esempio Vector o Raster storage_type : formato di archiviazione (solo livelli vettoriali) geometry_type : tipo di geometria, ad es. Punto (solo livelli vettoriali) feature_count : conteggio approssimativo delle caratteristiche per il livello (solo livelli vettoriali) Esempi: layer_property('streets','title') \u2192 'Basemap Streets' layer_property('airports','feature_count') \u2192 120 layer_property('landsat','crs') \u2192 'EPSG:4326' https://github.com/qgis/QGIS/pull/46505 \u21a9","title":"layer_property"},{"location":"gr_funzioni/layout/layout_unico/","tags":["gruppo"],"text":"Gruppo layout \u21b5 Abstract Questo gruppo contiene funzioni per manipolare le propriet\u00e0 degli oggetti del layout di stampa . item_variables \u21b5 Restituisce una mappa delle variabili da un oggetto del layout dentro il layout di stampa. Sintassi: item_variables( id ) Argomenti: id ID oggetto del layout Esempi: map_get( item_variables('Map 0'), 'map_scale') \u2192 scala dell'oggetto 'Map 0' nel layout di stampa corrente map_credits \u21b5 Restituisce un elenco di stringhe di credito (diritti di utilizzo) per i layer visualizzati in un oggetto della mappa di layout. Sintassi: map_credits( id [, include_layer_names=false ][, layer_name_separator=': ' ]) [ ] indica componenti opzionali Argomenti: id ID oggetto mappa include_layer_names Imposta su vero per includere i nomi dei layer prima delle rispettive stringhe di credito layer_name_separator Stringa da inserire tra i nomi dei layer e le rispettive stringhe di credito, se include_layer_names \u00e8 vero Esempi: array_to_string( map_credits( 'Main Map' ) ) \u2192 lista separata da virgola di crediti layer per i layer mostrati nell'oggetto di layout 'Mappa principale', ad esempio 'CC-BY-NC, CC-BY-SA' array_to_string( map_credits( 'Main Map', include_layer_names := true, layer_name_separator := ': ' ) ) \u2192 lista separata da virgola di nomi di layer e relativi crediti per i layer mostrati nell'oggetto di layout 'Mappa principale', ad es 'Linee ferroviarie: CC-BY-NC, mappa di base: CC-BY-SA'","title":"Layout"},{"location":"gr_funzioni/layout/layout_unico/#gruppo-layout","text":"Abstract Questo gruppo contiene funzioni per manipolare le propriet\u00e0 degli oggetti del layout di stampa .","title":"Gruppo layout"},{"location":"gr_funzioni/layout/layout_unico/#item_variables","text":"Restituisce una mappa delle variabili da un oggetto del layout dentro il layout di stampa. Sintassi: item_variables( id ) Argomenti: id ID oggetto del layout Esempi: map_get( item_variables('Map 0'), 'map_scale') \u2192 scala dell'oggetto 'Map 0' nel layout di stampa corrente","title":"item_variables"},{"location":"gr_funzioni/layout/layout_unico/#map_credits","text":"Restituisce un elenco di stringhe di credito (diritti di utilizzo) per i layer visualizzati in un oggetto della mappa di layout. Sintassi: map_credits( id [, include_layer_names=false ][, layer_name_separator=': ' ]) [ ] indica componenti opzionali Argomenti: id ID oggetto mappa include_layer_names Imposta su vero per includere i nomi dei layer prima delle rispettive stringhe di credito layer_name_separator Stringa da inserire tra i nomi dei layer e le rispettive stringhe di credito, se include_layer_names \u00e8 vero Esempi: array_to_string( map_credits( 'Main Map' ) ) \u2192 lista separata da virgola di crediti layer per i layer mostrati nell'oggetto di layout 'Mappa principale', ad esempio 'CC-BY-NC, CC-BY-SA' array_to_string( map_credits( 'Main Map', include_layer_names := true, layer_name_separator := ': ' ) ) \u2192 lista separata da virgola di nomi di layer e relativi crediti per i layer mostrati nell'oggetto di layout 'Mappa principale', ad es 'Linee ferroviarie: CC-BY-NC, mappa di base: CC-BY-SA'","title":"map_credits"},{"location":"gr_funzioni/maps/maps_unico/","tags":["gruppo"],"text":"Gruppo Maps \u21b5 Abstract Questo gruppo contiene funzioni per la creazione e la manipolazione di strutture di dati 'a mappa' (noti anche come oggetti dizionario, coppie chiave-valore o array associative). Si possono assegnare valori a determinate chiavi. L'ordine delle coppie chiave-valore nell'oggetto mappa non \u00e8 rilevante. from_json \u21b5 Carica una stringa formattata JSON Sintassi: from_json( string ) Argomenti: string stringa json Esempi: from_json('{\"qgis\":\"rocks\"}') \u2192 { \"qgis\" : \"rocks\" } from_json('[1,2,3]') \u2192 [1,2,3] hstore_to_map \u21b5 Crea una mappa da una stringa formattata in hstore Sintassi: hstore_to_map( string ) Argomenti: string una stringa Esempi: hstore_to_map('qgis=>rocks') \u2192 { \"qgis\" : \"rocks\" } json_to_map \u21b5 Crea una mappa da una stringa formattata con json Sintassi: json_to_map( string ) Argomenti: string una stringa json Esempi: json_to_map('{\"qgis\":\"rocks\"}') \u2192 { \"qgis\" : \"rocks\" }` nota bene: Funzione eliminata a partire da QGIS 3.18 https://github.com/qgis/QGIS/pull/42179 map \u21b5 Restituisce una mappa con tutte le chiavi ed i valori passati come coppie di parametri. Sintassi: map( key1 , value1 , key2 , value2 , \u2026_) Argomenti: key una chiave (stringa) value un valore Esempi: map('1','one','2', 'two') \u2192 map: 1: 'one', 2: 'two' \u21b5 Altri esempi: Definisco una map con: chiave Area_Ha -- Area in Ettari valore $area/10000 chiave Perimetro_km -- Perimetro in km valore $perimeter/1000 map_akeys \u21b5 Restituisce tutte le chiavi di una mappa come un array. Sintassi: map_akeys( map ) Argomenti: map una mappa Esempi: map_akeys(map('1','one','2','two')) \u2192 array: '1', '2' Altri esempi: map_akeys( map('Area_Ha',$area/10000,'Perimetro_km',$perimeter/1000)) \u2192 ['Area_Ha','Perimetro_km'] Compositore di stampe \u21b5 akeys utilizzabile in ambito compositore stampe per conoscere tutte le variabili disponibili per ogni Mappa inserita: wordwrap( array_to_string( map_akeys( item_variables( 'Mappa 1') ) ),1,',') risultato della espressione: _project_transform_context item_id item_uuid layer_ids layers layout_dpi layout_name layout_numpages layout_page layout_pageheight layout_pageoffsets layout_pagewidth logo_osgeo4w map_crs map_crs_acronym map_crs_definition map_crs_description map_crs_ellipsoid map_crs_proj4 map_crs_projection map_crs_wkt map_end_time map_extent map_extent_center map_extent_height map_extent_width map_id map_interval map_layer_ids map_layers map_rotation map_scale map_start_time map_units project_abstract project_area_units project_author project_basename project_creation_date project_crs project_crs_acronym project_crs_definition project_crs_description project_crs_ellipsoid project_crs_proj4 project_crs_wkt project_distance_units project_ellipsoid project_filename project_folder project_home project_identifier project_keywords project_last_saved project_path project_title project_units qgis_locale qgis_os_name qgis_platform qgis_release_name qgis_short_version qgis_version qgis_version_no user_account_name user_full_name map_avals \u21b5 Restituisce tutti valori di una mappa come un array. Sintassi: map_avals( map ) Argomenti: map una mappa Esempi: map_avals(map('1','one','2','two')) \u2192 array: 'one', 'two' -- map_concat \u21b5 Restituisce una mappa con tutte le entit\u00e0 della mappe fornite. Se due mappe contengono la stessa chiave, viene restituito il valore della seconda mappa. Sintassi: map_concat(__ map1 , _ map2 , \u2026_) Argomenti: map una mappa Esempi: map_concat(map('1','one', '2','overridden'),map('2','two', '3','three')) \u2192 map: 1: 'one, 2: 'two', 3: 'three' -- map_delete \u21b5 Restituisce una mappa con il valore della corrispondente chiave passata rimosso. Sintassi: map_delete( map , key ) Argomenti: map una mappa key la chiave da rimuovere Esempi: map_delete(map('1','one','2','two'),'2') \u2192 map: 1: 'one' map_exist \u21b5 Restituisce vero se la chiave passata esiste in mappa. Sintassi: map_exist( map , key ) Argomenti: map una mappa key chiave da cercare Esempi: map_exist(map('1','one','2','two'),'3') \u2192 falso map_get \u21b5 Restituisce il valore di una mappa, passando la sua chiave. Sintassi: map_get( map , key ) Argomenti: map una mappa key chiave da cercare Esempi: map_get(map('1','one','2','two'),'2') \u2192 'two' Altri esempi: map_get( map_concat(map('Area_Ha',$area/10000,'Perimetro_km',$perimeter/1000)), map(Proprietario','Pippo','CF','FNDCCCDDDEEEFFF'),'CF') \u2192 'FNDCCCDDDEEEFFF' Compositore di stampe \u21b5 Nuova funzione item_variables presente, nel gruppo Layout, solo se utilizzate all'interno di un contesto di composizione. La funzione accetta un singolo argomento, l'id per un elemento all'interno della composizione e restituisce una mappa del nome della variabile sul valore per quell'elemento. Questo ti permette di fare cose come inserire il testo in un'etichetta che recuperi le propriet\u00e0 di un altro elemento nella composizione, ad es: Inserisci la scala della mappa ( Mappa 1 ) in un'etichetta: map_get( item_variables('Mappa 1'),'map_scale') Inserisci la coordinata x del centro della mappa ( Mappa 1 ) in un'etichetta: x(map_get( item_variables('Mappa 1'),'map_extent_center')) Changelog QGIS 3.0 map_insert \u21b5 Restituisce una mappa con una chiave/valore aggiunto. Se la chiave esiste gi\u00e0, il suo valore verr\u00e0 sovrascritto. Sintassi: map_insert( map , key , value ) Argomenti: map una mappa key la chiave da aggiungere value il valore da aggiungere Esempi: map_insert(map('1','one'),'3','three') \u2192 map: 1: 'one', 3: 'three' map_prefix_keys \u21b5 Restituisce una mappa con tutte le chiavi precedute da una data stringa. Sintassi: map_prefix_keys( map , prefix ) Argomenti: map una mappa prefix una stringa Esempi: map_prefix_keys(map('1','one','2','two'), 'prefix-') \u2192 { 'prefix-1': 'one', 'prefix-2': 'two' } map_to_hstore \u21b5 Unisci gli elementi della mappa in una stringa formattata in hstore. Sintassi: map_to_hstore( map ) Argomenti: map una mappa Esempi: map_to_hstore(map('qgis','rocks')) \u2192 \"qgis\"=>\"rocks\"} map_to_json \u21b5 Unisci gli elementi della mappa in una stringa formattata con json. Sintassi: map_to_json( map ) Argomenti: map una mappa Esempi: map_to_json(map('qgis','rocks')) \u2192 {\"qgis\":\"rocks\"} nota bene: Funzione eliminata a partire da QGIS 3.18 https://github.com/qgis/QGIS/pull/42179 to_json \u21b5 Creare una stringa in formato JSON da una mappa, array o altro valore. Sintassi: to_json( value ) Argomenti: value valore di input Esempi: to_json(map('qgis','rocks')) \u2192 {\"qgis\":\"rocks\"} to_json(array(1,2,3)) \u2192 [1,2,3] url_encode \u21b5 Restituisce una stringa codificata come URL da una mappa. Trasforma tutti i caratteri nella loro forma correttamente codificata producendo una stringa di query completamente conforme. Nota che il segno pi\u00f9 '+' non viene convertito. Sintassi: url_encode( map ) Argomenti: map una mappa Esempi: url_encode(map('a&+b', 'a and plus b', 'a=b', 'a equals b')) \u2192 'a%26+b=a%20and%20plus%20b&a%3Db=a%20equals%20b'","title":"Maps"},{"location":"gr_funzioni/maps/maps_unico/#gruppo-maps","text":"Abstract Questo gruppo contiene funzioni per la creazione e la manipolazione di strutture di dati 'a mappa' (noti anche come oggetti dizionario, coppie chiave-valore o array associative). Si possono assegnare valori a determinate chiavi. L'ordine delle coppie chiave-valore nell'oggetto mappa non \u00e8 rilevante.","title":"Gruppo Maps"},{"location":"gr_funzioni/maps/maps_unico/#from_json","text":"Carica una stringa formattata JSON Sintassi: from_json( string ) Argomenti: string stringa json Esempi: from_json('{\"qgis\":\"rocks\"}') \u2192 { \"qgis\" : \"rocks\" } from_json('[1,2,3]') \u2192 [1,2,3]","title":"from_json"},{"location":"gr_funzioni/maps/maps_unico/#hstore_to_map","text":"Crea una mappa da una stringa formattata in hstore Sintassi: hstore_to_map( string ) Argomenti: string una stringa Esempi: hstore_to_map('qgis=>rocks') \u2192 { \"qgis\" : \"rocks\" }","title":"hstore_to_map"},{"location":"gr_funzioni/maps/maps_unico/#json_to_map","text":"Crea una mappa da una stringa formattata con json Sintassi: json_to_map( string ) Argomenti: string una stringa json Esempi: json_to_map('{\"qgis\":\"rocks\"}') \u2192 { \"qgis\" : \"rocks\" }` nota bene: Funzione eliminata a partire da QGIS 3.18 https://github.com/qgis/QGIS/pull/42179","title":"json_to_map"},{"location":"gr_funzioni/maps/maps_unico/#map","text":"Restituisce una mappa con tutte le chiavi ed i valori passati come coppie di parametri. Sintassi: map( key1 , value1 , key2 , value2 , \u2026_) Argomenti: key una chiave (stringa) value un valore Esempi: map('1','one','2', 'two') \u2192 map: 1: 'one', 2: 'two'","title":"map"},{"location":"gr_funzioni/maps/maps_unico/#_1","text":"Altri esempi: Definisco una map con: chiave Area_Ha -- Area in Ettari valore $area/10000 chiave Perimetro_km -- Perimetro in km valore $perimeter/1000","title":""},{"location":"gr_funzioni/maps/maps_unico/#map_akeys","text":"Restituisce tutte le chiavi di una mappa come un array. Sintassi: map_akeys( map ) Argomenti: map una mappa Esempi: map_akeys(map('1','one','2','two')) \u2192 array: '1', '2' Altri esempi: map_akeys( map('Area_Ha',$area/10000,'Perimetro_km',$perimeter/1000)) \u2192 ['Area_Ha','Perimetro_km']","title":"map_akeys"},{"location":"gr_funzioni/maps/maps_unico/#compositore-di-stampe","text":"akeys utilizzabile in ambito compositore stampe per conoscere tutte le variabili disponibili per ogni Mappa inserita: wordwrap( array_to_string( map_akeys( item_variables( 'Mappa 1') ) ),1,',') risultato della espressione: _project_transform_context item_id item_uuid layer_ids layers layout_dpi layout_name layout_numpages layout_page layout_pageheight layout_pageoffsets layout_pagewidth logo_osgeo4w map_crs map_crs_acronym map_crs_definition map_crs_description map_crs_ellipsoid map_crs_proj4 map_crs_projection map_crs_wkt map_end_time map_extent map_extent_center map_extent_height map_extent_width map_id map_interval map_layer_ids map_layers map_rotation map_scale map_start_time map_units project_abstract project_area_units project_author project_basename project_creation_date project_crs project_crs_acronym project_crs_definition project_crs_description project_crs_ellipsoid project_crs_proj4 project_crs_wkt project_distance_units project_ellipsoid project_filename project_folder project_home project_identifier project_keywords project_last_saved project_path project_title project_units qgis_locale qgis_os_name qgis_platform qgis_release_name qgis_short_version qgis_version qgis_version_no user_account_name user_full_name","title":"Compositore di stampe"},{"location":"gr_funzioni/maps/maps_unico/#map_avals","text":"Restituisce tutti valori di una mappa come un array. Sintassi: map_avals( map ) Argomenti: map una mappa Esempi: map_avals(map('1','one','2','two')) \u2192 array: 'one', 'two' --","title":"map_avals"},{"location":"gr_funzioni/maps/maps_unico/#map_concat","text":"Restituisce una mappa con tutte le entit\u00e0 della mappe fornite. Se due mappe contengono la stessa chiave, viene restituito il valore della seconda mappa. Sintassi: map_concat(__ map1 , _ map2 , \u2026_) Argomenti: map una mappa Esempi: map_concat(map('1','one', '2','overridden'),map('2','two', '3','three')) \u2192 map: 1: 'one, 2: 'two', 3: 'three' --","title":"map_concat"},{"location":"gr_funzioni/maps/maps_unico/#map_delete","text":"Restituisce una mappa con il valore della corrispondente chiave passata rimosso. Sintassi: map_delete( map , key ) Argomenti: map una mappa key la chiave da rimuovere Esempi: map_delete(map('1','one','2','two'),'2') \u2192 map: 1: 'one'","title":"map_delete"},{"location":"gr_funzioni/maps/maps_unico/#map_exist","text":"Restituisce vero se la chiave passata esiste in mappa. Sintassi: map_exist( map , key ) Argomenti: map una mappa key chiave da cercare Esempi: map_exist(map('1','one','2','two'),'3') \u2192 falso","title":"map_exist"},{"location":"gr_funzioni/maps/maps_unico/#map_get","text":"Restituisce il valore di una mappa, passando la sua chiave. Sintassi: map_get( map , key ) Argomenti: map una mappa key chiave da cercare Esempi: map_get(map('1','one','2','two'),'2') \u2192 'two' Altri esempi: map_get( map_concat(map('Area_Ha',$area/10000,'Perimetro_km',$perimeter/1000)), map(Proprietario','Pippo','CF','FNDCCCDDDEEEFFF'),'CF') \u2192 'FNDCCCDDDEEEFFF'","title":"map_get"},{"location":"gr_funzioni/maps/maps_unico/#compositore-di-stampe_1","text":"Nuova funzione item_variables presente, nel gruppo Layout, solo se utilizzate all'interno di un contesto di composizione. La funzione accetta un singolo argomento, l'id per un elemento all'interno della composizione e restituisce una mappa del nome della variabile sul valore per quell'elemento. Questo ti permette di fare cose come inserire il testo in un'etichetta che recuperi le propriet\u00e0 di un altro elemento nella composizione, ad es: Inserisci la scala della mappa ( Mappa 1 ) in un'etichetta: map_get( item_variables('Mappa 1'),'map_scale') Inserisci la coordinata x del centro della mappa ( Mappa 1 ) in un'etichetta: x(map_get( item_variables('Mappa 1'),'map_extent_center')) Changelog QGIS 3.0","title":"Compositore di stampe"},{"location":"gr_funzioni/maps/maps_unico/#map_insert","text":"Restituisce una mappa con una chiave/valore aggiunto. Se la chiave esiste gi\u00e0, il suo valore verr\u00e0 sovrascritto. Sintassi: map_insert( map , key , value ) Argomenti: map una mappa key la chiave da aggiungere value il valore da aggiungere Esempi: map_insert(map('1','one'),'3','three') \u2192 map: 1: 'one', 3: 'three'","title":"map_insert"},{"location":"gr_funzioni/maps/maps_unico/#map_prefix_keys","text":"Restituisce una mappa con tutte le chiavi precedute da una data stringa. Sintassi: map_prefix_keys( map , prefix ) Argomenti: map una mappa prefix una stringa Esempi: map_prefix_keys(map('1','one','2','two'), 'prefix-') \u2192 { 'prefix-1': 'one', 'prefix-2': 'two' }","title":"map_prefix_keys"},{"location":"gr_funzioni/maps/maps_unico/#map_to_hstore","text":"Unisci gli elementi della mappa in una stringa formattata in hstore. Sintassi: map_to_hstore( map ) Argomenti: map una mappa Esempi: map_to_hstore(map('qgis','rocks')) \u2192 \"qgis\"=>\"rocks\"}","title":"map_to_hstore"},{"location":"gr_funzioni/maps/maps_unico/#map_to_json","text":"Unisci gli elementi della mappa in una stringa formattata con json. Sintassi: map_to_json( map ) Argomenti: map una mappa Esempi: map_to_json(map('qgis','rocks')) \u2192 {\"qgis\":\"rocks\"} nota bene: Funzione eliminata a partire da QGIS 3.18 https://github.com/qgis/QGIS/pull/42179","title":"map_to_json"},{"location":"gr_funzioni/maps/maps_unico/#to_json","text":"Creare una stringa in formato JSON da una mappa, array o altro valore. Sintassi: to_json( value ) Argomenti: value valore di input Esempi: to_json(map('qgis','rocks')) \u2192 {\"qgis\":\"rocks\"} to_json(array(1,2,3)) \u2192 [1,2,3]","title":"to_json"},{"location":"gr_funzioni/maps/maps_unico/#url_encode","text":"Restituisce una stringa codificata come URL da una mappa. Trasforma tutti i caratteri nella loro forma correttamente codificata producendo una stringa di query completamente conforme. Nota che il segno pi\u00f9 '+' non viene convertito. Sintassi: url_encode( map ) Argomenti: map una mappa Esempi: url_encode(map('a&+b', 'a and plus b', 'a=b', 'a equals b')) \u2192 'a%26+b=a%20and%20plus%20b&a%3Db=a%20equals%20b'","title":"url_encode"},{"location":"gr_funzioni/matematica/matematica_unico/","tags":["gruppo"],"text":"Gruppo Matematica \u21b5 Abstract Questo gruppo contiene funzioni matematiche es. radice quadrata, seno e coseno. abs \u21b5 Restituisce il valore assoluto di un numero. Sintassi: abs( value ) Argomenti: value un numero Esempi: abs(-2) \u2192 2 acos \u21b5 Restituisce l'arcocoseno del valore in radianti. Sintassi: acos( value ) Argomenti: value coseno di un angolo in radianti Esempi: acos(0.5) \u2192 1.0471975511966 asin \u21b5 Restituisce l'arcoseno del valore in radianti. Sintassi: asin( value ) Argomenti: value seno di un angolo in radianti Esempi: asin(1.0) \u2192 1.5707963267949 atan \u21b5 Restituisce l'arcotangente del valore in radianti. Sintassi: atan( value ) Argomenti: value tangente di un angolo in radianti Esempi: atan(0.5) \u2192 0.463647609000806 atan2 \u21b5 Restituisce la arcotangente di dy/dx usando i segni dei due argomenti per determinare il quadrante del risultato. Sintassi: atan2( dy , dx ) Argomenti: dy y differenza coordinata dx x differenza coordinata Esempi: atan2(1.0, 1.732) \u2192 0.523611477769969 Wikipedia azimuth \u21b5 Restituisce l'azimut dal nord quale angolo in radianti misurato in senso orario dalla verticale del punto_a al punto_b. Sintassi: azimuth( point_a , point_b ) Argomenti: point_a geometria punto point_b geometria punto Esempi: degrees( azimuth( make_point(25, 45), make_point(75, 100) ) ) \u2192 42.273689 degrees( azimuth( make_point(75, 100), make_point(25,45) ) ) \u2192 222.273689 vedasi nel gruppo funzioni Geometria Azimuth ceil \u21b5 Arrotonda un numero all'intero superiore. Sintassi: ceil( value ) Argomenti: value un numero Esempi: ceil(4.9) \u2192 5 ceil(-4.9) \u2192 -4 clamp \u21b5 Limita un valore in ingresso a un intervallo specificato. Sintassi: clamp( minimum , input , maximum ) Argomenti: minimum il pi\u00f9 piccolo valore in input che pu\u00f2 essere mantenuto. input un valore che sar\u00e0 compreso nell'intervallo specificato da minimo e massimo maximum il pi\u00f9 grande valore in input che pu\u00f2 essere mantenuto Esempi: clamp(1,5,10) \u2192 5 (input \u00e8 compreso tra 1 e 10 per cui \u00e8 restituito invariato) clamp(1,0,10) \u2192 1 (input \u00e8 pi\u00f9 piccolo del valore minimo di 1, cos\u00ec la funzione restituisce 1) clamp(1,11,10) \u2192 10 (input \u00e8 pi\u00f9 grande del valore massimo di 10, cos\u00ec la funzione restituisce 10) cos \u21b5 Restituisce il coseno di un angolo. Sintassi: cos( angle ) Argomenti: angle angolo in radianti Esempi: cos( 1.5707963267948966 ) \u2192 0.0 degrees \u21b5 Converte da radianti a gradi decimali. Sintassi: degrees( radians ) Argomenti: radians numerico Esempi: degrees(3.14159) \u2192 179.99984796050427 degrees(1) \u2192 57.2958 degrees(pi()) \u2192 180 exp \u21b5 Restituisce l'esponenziale di un valore. Sintassi: exp( value ) Argomenti: value numero da restituire come esponente Esempi: exp(1.0) \u2192 2.71828182845905 floor \u21b5 Arrotonda un numero all'intero inferiore. Sintassi: floor( value ) Argomenti: value un numero Esempi: floor(4.9) \u2192 4 floor(-4.9) \u2192 -5 Esempi: Vedi esempio conversione Inclination \u21b5 Restituisce l'inclinazione misurata dallo zenit (0) al nadir (180) del punto_a al punto_b. Sintassi: inclination( point_a , point_b ) Argomenti: point_a geometria punto point_b geometria punto Esempi: inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 5 ) ) \u2192 0.0 inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 0 ) ) \u2192 90.0 inclination( make_point( 5, 10, 0 ), make_point( 50, 100, 0 ) ) \u2192 90.0 inclination( make_point( 5, 10, 0 ), make_point( 5, 10, -5 ) ) \u2192 180.0 vedasi nel gruppo funzioni Geometria Inclination ln \u21b5 Restituisce il logaritmo naturale di un valore. Sintassi: ln( value ) Argomenti: value valore numerico Esempi: ln(1) \u2192 0 ln(2.7182818284590452354) \u2192 1 log \u21b5 Restituisce il valore del logaritmo della base e valore passati. Sintassi: log( base , value ) Argomenti: base qualsiasi numero positivo value qualsiasi numero positivo Esempi: log(2, 32) \u2192 5 log(0.5, 32) \u2192 -5 log(2.7182818284590452354, 1) = ln(1) \u2192 1 log10 \u21b5 Restituisce il valore del logaritmo in base10 dell'espressione passata. Sintassi: log10( value ) Argomenti: value qualsiasi numero positivo Esempi: log10(1) \u2192 0 log10(100) \u2192 2 max \u21b5 Restituisce il valore maggiore di un insieme di valori. Sintassi: max( value1 , value2 , \u2026 ) Argomenti: value un numero Esempi: max(2,10.2,5.5) \u2192 10.2 max(20.5,NULL,6.2) \u2192 20.5 min \u21b5 Restituisce il valore minore di un insieme di valori. Sintassi: min( value1 , value2 , \u2026 ) Argomenti: value un numero Esempi: min(20.5,10,6.2) \u2192 6.2 min(2,-10.3,NULL) \u2192 -10.3 pi \u21b5 Restituisce il valore di Pi greco Sintassi: pi() Esempi: pi() \u2192 3.14159265358979 -- Wikipedia Pi greco Mai senza Il mio logo personale: L'unione di tre simboli matematici che hanno rivoluzionato il Mondo: Pi greco; Infinito; derivata prima '; Con un po' di fantasia dovreste leggere il mio nome Tot\u00f2 \ud83d\ude0e radians \u21b5 Converte da gradi decimali a radianti. Sintassi: radians( degrees ) Argomenti: degrees valore numerico Esempi: radians(180) \u2192 3.14159 radians(57.2958) \u2192 1 rand \u21b5 Restituisce un intero casuale nell'intervallo specificato fra un minimo ed un massimo (inclusi). Se viene fornito un seme, il reso sar\u00e0 sempre lo stesso, a seconda del seme. Sintassi: rand( min , max [,seed=null] ) [ ] indica componenti opzionali Argomenti: min un intero indicante il numero casuale pi\u00f9 piccolo desiderato max un intero che indica il numero casuale pi\u00f9 alto desiderato seed qualsiasi valore da utilizzare come seme ( >= QGIS 3.12 ) Esempi: rand(1, 10) \u2192 8 rand( 10, 100,1) \u2192 68 Osservazioni: Novit\u00e0 introdotta nella QGIS 3.12 randf \u21b5 Restituisce un numero in virgola mobile casuale nell'intervallo specificato da un minimo ed un massimo (inclusi). Se viene fornito un seme, il reso sar\u00e0 sempre lo stesso, a seconda del seme. Sintassi: randf( [min=0.0] [,max=1.0] [,seed=null] ) Argomenti: min un numero in virgola mobile indicante il numero casuale pi\u00f9 piccolo desiderato max un numero in virgola mobile indicante il numero casuale pi\u00f9 grande desiderato seed qualsiasi valore da utilizzare come seme ( >= QGIS 3.12 ) Esempi: randf(1, 10) \u2192 4.59258286403147 randf(1, 10,3) \u2192 6.028893906608612 Esempi: Osservazioni Novit\u00e0 introdotta nella QGIS 3.12 round \u21b5 Arrotonda un numero ad un numero di cifre decimali. Sintassi: round( value , places ) Argomenti: value numero decimale da arrotondare places Intero opzionale che indica il numero di posizioni a cui arrotondare i decimali. Pu\u00f2 essere negativo. Esempi: round(1234.567, 2) \u2192 1234.57 round(1234.567) \u2192 1235 round(1234.567,-2) \u2192 1200 Esempi: scale_exp \u21b5 Trasforma un valore dato da un dominio in ingresso in un intervallo in uscita usando una curva esponenziale. Questa funzione pu\u00f2 essere usata per agevolare gradualmente in entrata o in uscita i valori dell'intervallo in uscita specificato. Sintassi: scale_exp( val , domain_min , domain_max , range_min , range_max , exponent ) Argomenti: val Un valore nel dominio in ingresso. La funzione restituir\u00e0 un valore scalato corrispondente nell'intervallo in uscita. domain_min Specifica il valore massimo nel dominio in ingresso, il valore pi\u00f9 basso che il valore in ingresso pu\u00f2 assumere. domain_max Specifica il valore massimo nel dominio in ingresso, il valore pi\u00f9 alto che il valore in ingresso pu\u00f2 assumere. range_min Specifica il valore minimo nell'intervallo in uscita, il valore pi\u00f9 basso che dovrebbe essere restituito in uscita dalla funzione. range_max Specifica il valore massimo nell'intervallo di uscita, il valore pi\u00f9 alto che dovrebbe essere restituito dalla funzione. exponent Un valore positivo (maggiore di 0), che determina il modo con cui i valori in ingresso sono mappati nell'intervallo in uscita. Esponenti grandi agevoleranno gradualmente l'entrata dei valori in uscita\u200b\u200b, partendo lentamente prima di accelerare allorquando i valori in ingresso se si avvicinino al punto di massimo del dominio. Esponenti pi\u00f9 piccoli (minori di 1) ne agevoleranno l'uscita, incominciando velocemente la mappatura per poi rallentare in prossimit\u00e0 del massimo del dominio. Esempi: scale_exp(5,0,10,0,100,2) \u2192 25 (agevolazione graduale in entrata, usando un esponente di 2) scale_exp(3,0,10,0,100,0.5) \u2192 54.772 (agevolazione graduale in uscita, usando un esponente di 0.5) scale_linear \u21b5 Trasforma un dato valore da un dominio in ingresso ad un intervallo in uscita usando un'interpolazione lineare. Sintassi: scale_linear( val , domain_min , domain_max , range_min , range_max ) Argomenti: val Un valore nel dominio in ingresso. La funzione restituir\u00e0 un valore scalato corrispondente nell'intervallo in uscita. domain_min Specifica il valore massimo nel dominio in ingresso, il valore pi\u00f9 basso che il valore in ingresso pu\u00f2 assumere. domain_max Specifica il valore massimo nel dominio in ingresso, il valore pi\u00f9 alto che il valore in ingresso pu\u00f2 assumere. range_min Specifica il valore minimo nell'intervallo in uscita, il valore pi\u00f9 basso che dovrebbe essere restituito in uscita dalla funzione. range_max Specifica il valore massimo nell'intervallo di uscita, il valore pi\u00f9 alto che dovrebbe essere restituito dalla funzione. Esempi: scale_linear(5,0,10,0,100) \u2192 72 scale_linear(0.2,0,1,0,360) \u2192 72 (per scalare un valore tra 0 e 1 in un angolo tra 0 e 360) scale_linear(1500,1000,10000,9,20) \u2192 10.22 (per scalare una popolazione che varia tra 1000 e 10000 in una dimensione del carattere tra 9 e 20) sin \u21b5 Restituisce il seno di un angolo. Sintassi: sin( angle ) Argomenti: angle angolo in radianti Esempi: sin(1.571) \u2192 0.999999682931835 sin(pi()/2) \u2192 1 sqrt \u21b5 Restituisce la radice quadrata di un valore. Sintassi: sqrt( value ) Argomenti: value un numero Esempi: sqrt(9) \u2192 3 tan \u21b5 Restituisce la tangente di un angolo. Sintassi: tan( angle ) Argomenti: angle angolo in radianti Esempi: tan(1.0) \u2192 1.5574077246549 tan(pi()/2) \u2192 infinito","title":"Matematica"},{"location":"gr_funzioni/matematica/matematica_unico/#gruppo-matematica","text":"Abstract Questo gruppo contiene funzioni matematiche es. radice quadrata, seno e coseno.","title":"Gruppo Matematica"},{"location":"gr_funzioni/matematica/matematica_unico/#abs","text":"Restituisce il valore assoluto di un numero. Sintassi: abs( value ) Argomenti: value un numero Esempi: abs(-2) \u2192 2","title":"abs"},{"location":"gr_funzioni/matematica/matematica_unico/#acos","text":"Restituisce l'arcocoseno del valore in radianti. Sintassi: acos( value ) Argomenti: value coseno di un angolo in radianti Esempi: acos(0.5) \u2192 1.0471975511966","title":"acos"},{"location":"gr_funzioni/matematica/matematica_unico/#asin","text":"Restituisce l'arcoseno del valore in radianti. Sintassi: asin( value ) Argomenti: value seno di un angolo in radianti Esempi: asin(1.0) \u2192 1.5707963267949","title":"asin"},{"location":"gr_funzioni/matematica/matematica_unico/#atan","text":"Restituisce l'arcotangente del valore in radianti. Sintassi: atan( value ) Argomenti: value tangente di un angolo in radianti Esempi: atan(0.5) \u2192 0.463647609000806","title":"atan"},{"location":"gr_funzioni/matematica/matematica_unico/#atan2","text":"Restituisce la arcotangente di dy/dx usando i segni dei due argomenti per determinare il quadrante del risultato. Sintassi: atan2( dy , dx ) Argomenti: dy y differenza coordinata dx x differenza coordinata Esempi: atan2(1.0, 1.732) \u2192 0.523611477769969 Wikipedia","title":"atan2"},{"location":"gr_funzioni/matematica/matematica_unico/#azimuth","text":"Restituisce l'azimut dal nord quale angolo in radianti misurato in senso orario dalla verticale del punto_a al punto_b. Sintassi: azimuth( point_a , point_b ) Argomenti: point_a geometria punto point_b geometria punto Esempi: degrees( azimuth( make_point(25, 45), make_point(75, 100) ) ) \u2192 42.273689 degrees( azimuth( make_point(75, 100), make_point(25,45) ) ) \u2192 222.273689 vedasi nel gruppo funzioni Geometria Azimuth","title":"azimuth"},{"location":"gr_funzioni/matematica/matematica_unico/#ceil","text":"Arrotonda un numero all'intero superiore. Sintassi: ceil( value ) Argomenti: value un numero Esempi: ceil(4.9) \u2192 5 ceil(-4.9) \u2192 -4","title":"ceil"},{"location":"gr_funzioni/matematica/matematica_unico/#clamp","text":"Limita un valore in ingresso a un intervallo specificato. Sintassi: clamp( minimum , input , maximum ) Argomenti: minimum il pi\u00f9 piccolo valore in input che pu\u00f2 essere mantenuto. input un valore che sar\u00e0 compreso nell'intervallo specificato da minimo e massimo maximum il pi\u00f9 grande valore in input che pu\u00f2 essere mantenuto Esempi: clamp(1,5,10) \u2192 5 (input \u00e8 compreso tra 1 e 10 per cui \u00e8 restituito invariato) clamp(1,0,10) \u2192 1 (input \u00e8 pi\u00f9 piccolo del valore minimo di 1, cos\u00ec la funzione restituisce 1) clamp(1,11,10) \u2192 10 (input \u00e8 pi\u00f9 grande del valore massimo di 10, cos\u00ec la funzione restituisce 10)","title":"clamp"},{"location":"gr_funzioni/matematica/matematica_unico/#cos","text":"Restituisce il coseno di un angolo. Sintassi: cos( angle ) Argomenti: angle angolo in radianti Esempi: cos( 1.5707963267948966 ) \u2192 0.0","title":"cos"},{"location":"gr_funzioni/matematica/matematica_unico/#degrees","text":"Converte da radianti a gradi decimali. Sintassi: degrees( radians ) Argomenti: radians numerico Esempi: degrees(3.14159) \u2192 179.99984796050427 degrees(1) \u2192 57.2958 degrees(pi()) \u2192 180","title":"degrees"},{"location":"gr_funzioni/matematica/matematica_unico/#exp","text":"Restituisce l'esponenziale di un valore. Sintassi: exp( value ) Argomenti: value numero da restituire come esponente Esempi: exp(1.0) \u2192 2.71828182845905","title":"exp"},{"location":"gr_funzioni/matematica/matematica_unico/#floor","text":"Arrotonda un numero all'intero inferiore. Sintassi: floor( value ) Argomenti: value un numero Esempi: floor(4.9) \u2192 4 floor(-4.9) \u2192 -5 Esempi: Vedi esempio conversione","title":"floor"},{"location":"gr_funzioni/matematica/matematica_unico/#inclination","text":"Restituisce l'inclinazione misurata dallo zenit (0) al nadir (180) del punto_a al punto_b. Sintassi: inclination( point_a , point_b ) Argomenti: point_a geometria punto point_b geometria punto Esempi: inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 5 ) ) \u2192 0.0 inclination( make_point( 5, 10, 0 ), make_point( 5, 10, 0 ) ) \u2192 90.0 inclination( make_point( 5, 10, 0 ), make_point( 50, 100, 0 ) ) \u2192 90.0 inclination( make_point( 5, 10, 0 ), make_point( 5, 10, -5 ) ) \u2192 180.0 vedasi nel gruppo funzioni Geometria Inclination","title":"Inclination"},{"location":"gr_funzioni/matematica/matematica_unico/#ln","text":"Restituisce il logaritmo naturale di un valore. Sintassi: ln( value ) Argomenti: value valore numerico Esempi: ln(1) \u2192 0 ln(2.7182818284590452354) \u2192 1","title":"ln"},{"location":"gr_funzioni/matematica/matematica_unico/#log","text":"Restituisce il valore del logaritmo della base e valore passati. Sintassi: log( base , value ) Argomenti: base qualsiasi numero positivo value qualsiasi numero positivo Esempi: log(2, 32) \u2192 5 log(0.5, 32) \u2192 -5 log(2.7182818284590452354, 1) = ln(1) \u2192 1","title":"log"},{"location":"gr_funzioni/matematica/matematica_unico/#log10","text":"Restituisce il valore del logaritmo in base10 dell'espressione passata. Sintassi: log10( value ) Argomenti: value qualsiasi numero positivo Esempi: log10(1) \u2192 0 log10(100) \u2192 2","title":"log10"},{"location":"gr_funzioni/matematica/matematica_unico/#max","text":"Restituisce il valore maggiore di un insieme di valori. Sintassi: max( value1 , value2 , \u2026 ) Argomenti: value un numero Esempi: max(2,10.2,5.5) \u2192 10.2 max(20.5,NULL,6.2) \u2192 20.5","title":"max"},{"location":"gr_funzioni/matematica/matematica_unico/#min","text":"Restituisce il valore minore di un insieme di valori. Sintassi: min( value1 , value2 , \u2026 ) Argomenti: value un numero Esempi: min(20.5,10,6.2) \u2192 6.2 min(2,-10.3,NULL) \u2192 -10.3","title":"min"},{"location":"gr_funzioni/matematica/matematica_unico/#pi","text":"Restituisce il valore di Pi greco Sintassi: pi() Esempi: pi() \u2192 3.14159265358979 -- Wikipedia Pi greco Mai senza Il mio logo personale: L'unione di tre simboli matematici che hanno rivoluzionato il Mondo: Pi greco; Infinito; derivata prima '; Con un po' di fantasia dovreste leggere il mio nome Tot\u00f2 \ud83d\ude0e","title":"pi"},{"location":"gr_funzioni/matematica/matematica_unico/#radians","text":"Converte da gradi decimali a radianti. Sintassi: radians( degrees ) Argomenti: degrees valore numerico Esempi: radians(180) \u2192 3.14159 radians(57.2958) \u2192 1","title":"radians"},{"location":"gr_funzioni/matematica/matematica_unico/#rand","text":"Restituisce un intero casuale nell'intervallo specificato fra un minimo ed un massimo (inclusi). Se viene fornito un seme, il reso sar\u00e0 sempre lo stesso, a seconda del seme. Sintassi: rand( min , max [,seed=null] ) [ ] indica componenti opzionali Argomenti: min un intero indicante il numero casuale pi\u00f9 piccolo desiderato max un intero che indica il numero casuale pi\u00f9 alto desiderato seed qualsiasi valore da utilizzare come seme ( >= QGIS 3.12 ) Esempi: rand(1, 10) \u2192 8 rand( 10, 100,1) \u2192 68 Osservazioni: Novit\u00e0 introdotta nella QGIS 3.12","title":"rand"},{"location":"gr_funzioni/matematica/matematica_unico/#randf","text":"Restituisce un numero in virgola mobile casuale nell'intervallo specificato da un minimo ed un massimo (inclusi). Se viene fornito un seme, il reso sar\u00e0 sempre lo stesso, a seconda del seme. Sintassi: randf( [min=0.0] [,max=1.0] [,seed=null] ) Argomenti: min un numero in virgola mobile indicante il numero casuale pi\u00f9 piccolo desiderato max un numero in virgola mobile indicante il numero casuale pi\u00f9 grande desiderato seed qualsiasi valore da utilizzare come seme ( >= QGIS 3.12 ) Esempi: randf(1, 10) \u2192 4.59258286403147 randf(1, 10,3) \u2192 6.028893906608612 Esempi: Osservazioni Novit\u00e0 introdotta nella QGIS 3.12","title":"randf"},{"location":"gr_funzioni/matematica/matematica_unico/#round","text":"Arrotonda un numero ad un numero di cifre decimali. Sintassi: round( value , places ) Argomenti: value numero decimale da arrotondare places Intero opzionale che indica il numero di posizioni a cui arrotondare i decimali. Pu\u00f2 essere negativo. Esempi: round(1234.567, 2) \u2192 1234.57 round(1234.567) \u2192 1235 round(1234.567,-2) \u2192 1200 Esempi:","title":"round"},{"location":"gr_funzioni/matematica/matematica_unico/#scale_exp","text":"Trasforma un valore dato da un dominio in ingresso in un intervallo in uscita usando una curva esponenziale. Questa funzione pu\u00f2 essere usata per agevolare gradualmente in entrata o in uscita i valori dell'intervallo in uscita specificato. Sintassi: scale_exp( val , domain_min , domain_max , range_min , range_max , exponent ) Argomenti: val Un valore nel dominio in ingresso. La funzione restituir\u00e0 un valore scalato corrispondente nell'intervallo in uscita. domain_min Specifica il valore massimo nel dominio in ingresso, il valore pi\u00f9 basso che il valore in ingresso pu\u00f2 assumere. domain_max Specifica il valore massimo nel dominio in ingresso, il valore pi\u00f9 alto che il valore in ingresso pu\u00f2 assumere. range_min Specifica il valore minimo nell'intervallo in uscita, il valore pi\u00f9 basso che dovrebbe essere restituito in uscita dalla funzione. range_max Specifica il valore massimo nell'intervallo di uscita, il valore pi\u00f9 alto che dovrebbe essere restituito dalla funzione. exponent Un valore positivo (maggiore di 0), che determina il modo con cui i valori in ingresso sono mappati nell'intervallo in uscita. Esponenti grandi agevoleranno gradualmente l'entrata dei valori in uscita\u200b\u200b, partendo lentamente prima di accelerare allorquando i valori in ingresso se si avvicinino al punto di massimo del dominio. Esponenti pi\u00f9 piccoli (minori di 1) ne agevoleranno l'uscita, incominciando velocemente la mappatura per poi rallentare in prossimit\u00e0 del massimo del dominio. Esempi: scale_exp(5,0,10,0,100,2) \u2192 25 (agevolazione graduale in entrata, usando un esponente di 2) scale_exp(3,0,10,0,100,0.5) \u2192 54.772 (agevolazione graduale in uscita, usando un esponente di 0.5)","title":"scale_exp"},{"location":"gr_funzioni/matematica/matematica_unico/#scale_linear","text":"Trasforma un dato valore da un dominio in ingresso ad un intervallo in uscita usando un'interpolazione lineare. Sintassi: scale_linear( val , domain_min , domain_max , range_min , range_max ) Argomenti: val Un valore nel dominio in ingresso. La funzione restituir\u00e0 un valore scalato corrispondente nell'intervallo in uscita. domain_min Specifica il valore massimo nel dominio in ingresso, il valore pi\u00f9 basso che il valore in ingresso pu\u00f2 assumere. domain_max Specifica il valore massimo nel dominio in ingresso, il valore pi\u00f9 alto che il valore in ingresso pu\u00f2 assumere. range_min Specifica il valore minimo nell'intervallo in uscita, il valore pi\u00f9 basso che dovrebbe essere restituito in uscita dalla funzione. range_max Specifica il valore massimo nell'intervallo di uscita, il valore pi\u00f9 alto che dovrebbe essere restituito dalla funzione. Esempi: scale_linear(5,0,10,0,100) \u2192 72 scale_linear(0.2,0,1,0,360) \u2192 72 (per scalare un valore tra 0 e 1 in un angolo tra 0 e 360) scale_linear(1500,1000,10000,9,20) \u2192 10.22 (per scalare una popolazione che varia tra 1000 e 10000 in una dimensione del carattere tra 9 e 20)","title":"scale_linear"},{"location":"gr_funzioni/matematica/matematica_unico/#sin","text":"Restituisce il seno di un angolo. Sintassi: sin( angle ) Argomenti: angle angolo in radianti Esempi: sin(1.571) \u2192 0.999999682931835 sin(pi()/2) \u2192 1","title":"sin"},{"location":"gr_funzioni/matematica/matematica_unico/#sqrt","text":"Restituisce la radice quadrata di un valore. Sintassi: sqrt( value ) Argomenti: value un numero Esempi: sqrt(9) \u2192 3","title":"sqrt"},{"location":"gr_funzioni/matematica/matematica_unico/#tan","text":"Restituisce la tangente di un angolo. Sintassi: tan( angle ) Argomenti: angle angolo in radianti Esempi: tan(1.0) \u2192 1.5574077246549 tan(pi()/2) \u2192 infinito","title":"tan"},{"location":"gr_funzioni/operatori/operatori_unico/","tags":["gruppo"],"text":"Gruppo Operatori \u21b5 Abstract Questo gruppo contiene operatori es. + - * AND \u21b5 Restituisce 1 quando le condizioni a e b sono vere. Sintassi: a AND b Argomenti: a condizione b condizione Esempi: TRUE AND TRUE \u2192 1 TRUE AND FALSE \u2192 0 4 = 2+2 AND 1 = 1 \u2192 1 4 = 2+2 AND 1 = 2 \u2192 0 Osservazioni: 1 significa Vero 0 significa falso <> (diverso) \u21b5 Confronta due valori e pone a 1 se essi non sono uguali. Sintassi: a <> b Argomenti: a valore b valore Esempi: 5 <> 4 \u2192 1 4 <> 4 \u2192 0 5 <> NULL \u2192 NULL NULL <> NULL \u2192 NULL Osservazioni: 1 significa Vero 0 significa falso / (diviso) \u21b5 Divisione di due valori. Sintassi: a / b Argomenti: a valore b valore Esempi: 5 / 4 \u2192 1.25 5 / NULL \u2192 NULL NULL / 5 \u2192 NULL || (doppio pipe) \u21b5 Unisce due valori assieme in una stringa. Se uno dei valori \u00e8 NULL il risultato sar\u00e0 NULL. Vedi la funzione CONCAT con caratteristiche differenti. Sintassi: a || b Argomenti: a valore b valore Esempi: 'Qui' || ' e ' || 'l\u00e0' \u2192 'Qui e l\u00e0' 'Nothing' || NULL \u2192 NULL 'Dia: ' || \"Diameter\" \u2192 'Dia: 25' (\"Diameter\" - un campo tabella attributi) 1 || 2 \u2192 '12' Osservazioni: Puoi concatenare stringhe usando || o + . Quest'ultimo significa anche somma nelle espressioni. Quindi se hai un intero (campo o valore numerico) questo pu\u00f2 essere soggetto a errori. In questo caso, dovresti usare || . Se si concatenano due valori stringa, \u00e8 possibile utilizzare entrambi. ILIKE \u21b5 Restituisce 1 se il primo parametro soddisfa senza tener conto delle maiuscole o minuscole il modello fornito. LIKE pu\u00f2 essere usato al posto di ILIKE per eseguire una comparazione che tenga conto delle maiuscole e minuscole. Funziona anche con i numeri. Sintassi: string/number ILIKE pattern Argomenti: string/number stringa da cercare pattern pattern di ricerca, puoi usare '%' come carattere jolly, '_' come un singolo carattere e '\\' per eseguire l'escape. Esempi: 'A' ILIKE 'A' \u2192 1 'A' ILIKE 'a' \u2192 1 'A' ILIKE 'B' \u2192 0 'ABC' ILIKE 'b' \u2192 0 'ABC' ILIKE 'B' \u2192 0 'ABC' ILIKE '_b_' \u2192 1 'ABC' ILIKE '_B_' \u2192 1 'ABCD' ILIKE '_b_' \u2192 0 'ABCD' ILIKE '_B_' \u2192 0 'ABCD' ILIKE '_b%' \u2192 1 'ABCD' ILIKE '_B%' \u2192 1 'ABCD' ILIKE '%b%' \u2192 1 'ABCD' ILIKE '%B%' \u2192 1 Osservazioni: 1 significa Vero 0 significa falso IN \u21b5 Restituisce 1 se il valore viene trovato in una lista di valori. Sintassi: a IN_ b _ Argomenti: a valore b lista di valori Esempi: 'A' IN ('A','B') \u2192 1 'A' IN ('C','B') \u2192 0 Osservazioni: La funzione distingue maiuscolo dal minuscolo!!! 1 significa Vero 0 significa falso IS \u21b5 Restituisce 1 se a \u00e8 uguale a b . Sintassi: a IS b Argomenti: a qualsiasi valore b qualsiasi valore Esempi: 'A' IS 'A' \u2192 1 *'A' IS 'a' \u2192 0 4 IS 4 \u2192 1 4 IS 2+2 \u2192 1 4 IS 2 \u2192 0 $geometry IS NULL \u2192 0, se la tua geometria non \u00e8 NULL Osservazioni: La funzione distingue maiuscolo dal minuscolo!!! 1 significa Vero 0 significa falso IS NOT \u21b5 Restituisce 1 se a non \u00e8 uguale a b. Sintassi: Sintassi: a IS NOT b Argomenti: a valore b valore Esempi: 'a' IS NOT 'b' \u2192 1 'a' IS NOT 'a' \u2192 0 4 IS NOT 2+2 \u2192 0 LIKE \u21b5 Restituisce 1 se il primo parametro soddisfa il modello fornito. Funziona anche con i numeri. Sintassi: string/number LIKE pattern Argomenti: string/number valore pattern pattern con cui confrontare il valore, puoi usare '%' come carattere jolly, '_' come un singolo carattere e '\\' per eseguire l'escape. Esempi: 'A' LIKE 'A' \u2192 1 'A' LIKE 'a' \u2192 0 'A' LIKE 'B' \u2192 0 'ABC' LIKE 'B' \u2192 0 'ABC' LIKE '_B_' \u2192 1 'ABCD' LIKE '_B_' \u2192 0 'ABCD' LIKE '_B%' \u2192 1 'ABCD' LIKE '%B%' \u2192 1 '1%' LIKE '1\\\\%' \u2192 1 '1_' LIKE '1\\\\%' \u2192 0 Osservazioni: La funzione distingue maiuscolo dal minuscolo!!! 1 significa Vero 0 significa falso NOT BETWEEN \u21b5 Restituisce TRUE se il valore non \u00e8 all'interno dell'intervallo specificato. L'intervallo \u00e8 considerato comprensivo dei limiti. Sintassi: NOT BETWEEN lower_bound AND higher_bound Argomenti: lower_bound AND higher_bound limite intervallo Esempi: 'B' NOT BETWEEN 'A' AND 'C' \u2192 FALSE 1.0 NOT BETWEEN 1.1 AND 1.2 \u2192 TRUE BETWEEN \u21b5 Restituisce TRUE se il valore rientra nell'intervallo specificato. L'intervallo \u00e8 considerato comprensivo dei limiti. Per verificare l'esclusione pu\u00f2 essere utilizzato NOT BETWEEN . Sintassi: BETWEEN lower_bound AND higher_bound Argomenti: lower_bound AND higher_bound limite intervallo Esempi: 'B' BETWEEN 'A' AND 'C' \u2192 TRUE 2 BETWEEN 1 AND 3 \u2192 TRUE > (maggiore) \u21b5 Confronta due valori e pone a 1 se il valore a sinistra \u00e8 maggiore del valore a destra. Sintassi: a > b Argomenti: a valore b valore Esempi: 5 > 4 \u2192 1 5 > 5 \u2192 0 4 > 5 \u2192 0 Osservazioni: 1 significa Vero 0 significa falso >= (maggiore uguale) \u21b5 Confronta due valori e pone a 1 se il valore a sinistra \u00e8 maggiore o uguale del valore a destra. Sintassi: a >= b Argomenti: a valore b valore Esempi: 5 >= 4 \u2192 1 5 >= 5 \u2192 1 4 >= 5 \u2192 0 Osservazioni: 1 significa Vero 0 significa falso Operatore - (meno) \u21b5 Sottrazione di due valori. Se uno dei due valori \u00e8 NULL il risultato sar\u00e0 NULL. Sintassi a - b Argomenti: a valore b valore Esempi: 5 - 4 \u2192 1 5 - NULL \u2192 NULL to_datetime('2012-05-05 12:00:00') - to_interval('1 day 2 hours') \u2192 2012-05-04T10:00:00 < (minore) \u21b5 Confronta due valori e pone a 1 se il valore a sinistra \u00e8 minore del valore a destra. Sintassi: a < b Argomenti: a valore b valore Esempi: 5 < 4 \u2192 0 5 < 5 \u2192 0 4 < 5 \u2192 1 Osservazioni: 1 significa Vero 0 significa falso <= (minore uguale) \u21b5 Confronta due valori e pone a 1 se il valore a sinistra \u00e8 minore o uguale del valore a destra. Sintassi: a <= b Argomenti: a valore b valore Esempi: 5 <= 4 \u2192 0 5 <= 5 \u2192 1 4 <= 5 \u2192 1 Osservazioni: 1 significa Vero 0 significa falso NOT \u21b5 Nega una condizione. Sintassi NOT a Argomenti: a Esempi: NOT 1 \u2192 0 NOT 0 \u2192 1 Osservazioni: 1 significa Vero 0 significa falso OR \u21b5 Restituisce 1 quando la condizione a oppure b \u00e8 vera. Sintassi a OR b Argomenti: a condizione b condizione Esempi: 4 = 2+2 OR 1 = 1 \u2192 1 4 = 2+2 OR 1 = 2 \u2192 1 4 = 2 OR 1 = 2 \u2192 0 Osservazioni: 1 significa Vero 0 significa falso [] Indice operatore \u21b5 Restituisce un elemento da un array o valore mappa. Sintassi: [] index Argomenti: index indice array o valore chiave della mappa Esempi: array(1,2,3)[0] \u2192 1 array(1,2,3)[2] \u2192 3 array(1,2,3)[-1] \u2192 3 map('a',1,'b',2)['a'] \u2192 1 map('a',1,'b',2)['b'] \u2192 2 ^ (potenza) \u21b5 Elevazione a potenza di due valori. Sintassi: a ^ b Argomenti: a valore b valore Esempi: 5 ^ 4 \u2192 625 5 ^ NULL \u2192 NULL NULL ^ 5 \u2192 NULL -- * (prodotto) \u21b5 Moltiplicazione di due valori. Sintassi a * b Argomenti: a valore b valore Esempi: 5 * 4 \u2192 20 5 NULL \u2192 NULL NULL 5 \u2192 NULL % (resto divisione) \u21b5 Resto della divisione. In aritmetica il resto \u00e8 la quantit\u00e0 di *dividendoche \u00e8 avanzata dalla divisione, cio\u00e8 quella quantit\u00e0 che non \u00e8 stata possibile dividere per il divisore affinch\u00e9 il risultato rimanga nell'insieme dei numeri interi . Per definizione: Il resto di una divisione denota la quantit\u00e0 da sottrarre a un dividendo al fine di renderlo divisibile per un divisore. Sintassi a % b Argomenti: a valore b valore Esempio: 17 : 2 = 8 resto 1 Sottraendo a 17 il resto di 1 si ottiene 16, numero divisibile per due (la cui met\u00e0 \u00e8 8). Nella divisione tra 17 e 2, va tenuto da parte il resto, ossia quel numero che, se diviso, farebbe rientrare il risultato in un altro insieme numerico. Il resto di una divisione denota la quantit\u00e0 da sottrarre a un dividendo al fine di renderlo divisibile per un divisore. Esempi: 5 % 4 \u2192 1 5 % NULL \u2192 NULL NULL % 5 \u2192 NULL Altri esempi: Un esempio molto utile nel campo GIS riguarda l'etichettatura curve di livello: supponiamo di voler etichettare le curve di livello (con passo 50 m) e visualizzare solo le etichette con passo 200 m, l'espressione da usare \u00e8 la seguente: CASE WHEN ( \"ELEV\" % 200 ) = 0 THEN \"ELEV\" END ecco il risultato: PRIMA: DOPO: + (somma) \u21b5 Addizione di due valori. Se uno dei due valori \u00e8 NULL il risultato sar\u00e0 NULL. Sintassi a + b Argomenti: a valore b valore Esempi: 5 + 4 \u2192 9 5 + NULL \u2192 NULL 'QGIS ' + 'ROCKS' \u2192 'QGIS ROCKS' to_datetime('2020-08-01 12:00:00') + '1 day 2 hours' \u2192 2020-08-02T14:00:00 Osservazioni: Puoi concatenare stringhe usando || o + . Quest'ultimo significa anche somma nelle espressioni. Quindi se hai un intero (campo o valore numerico) questo pu\u00f2 essere soggetto a errori. In questo caso, dovresti usare || . Se si concatenano due valori stringa, \u00e8 possibile utilizzare entrambi. ~ (tilde) \u21b5 Esegue un'espressione regolare su di una stringa. Sintassi string ~ regex Argomenti: string Un valore stringa regex Un'espressione regolare. Le slash devono essere precedute da caratteri di escape, es. \\\\d Esempi: 'hello' ~ 'll' \u2192 1 'hello' ~ '^ll' \u2192 0 'hello' ~ 'llo$' \u2192 1 = (uguale) \u21b5 Confronta due valori e pone a 1 se essi sono uguali. Sintassi a = b Argomenti: a valore b valore Esempi: 5 = 4 \u2192 0 4 = 4 \u2192 1 5 = NULL \u2192 NULL NULL = NULL \u2192 NULL Osservazioni: 1 significa Vero 0 significa falso","title":"Operatori"},{"location":"gr_funzioni/operatori/operatori_unico/#gruppo-operatori","text":"Abstract Questo gruppo contiene operatori es. + - *","title":"Gruppo Operatori"},{"location":"gr_funzioni/operatori/operatori_unico/#and","text":"Restituisce 1 quando le condizioni a e b sono vere. Sintassi: a AND b Argomenti: a condizione b condizione Esempi: TRUE AND TRUE \u2192 1 TRUE AND FALSE \u2192 0 4 = 2+2 AND 1 = 1 \u2192 1 4 = 2+2 AND 1 = 2 \u2192 0 Osservazioni: 1 significa Vero 0 significa falso","title":"AND"},{"location":"gr_funzioni/operatori/operatori_unico/#diverso","text":"Confronta due valori e pone a 1 se essi non sono uguali. Sintassi: a <> b Argomenti: a valore b valore Esempi: 5 <> 4 \u2192 1 4 <> 4 \u2192 0 5 <> NULL \u2192 NULL NULL <> NULL \u2192 NULL Osservazioni: 1 significa Vero 0 significa falso","title":"&lt;&gt; (diverso)"},{"location":"gr_funzioni/operatori/operatori_unico/#diviso","text":"Divisione di due valori. Sintassi: a / b Argomenti: a valore b valore Esempi: 5 / 4 \u2192 1.25 5 / NULL \u2192 NULL NULL / 5 \u2192 NULL","title":"/ (diviso)"},{"location":"gr_funzioni/operatori/operatori_unico/#doppio-pipe","text":"Unisce due valori assieme in una stringa. Se uno dei valori \u00e8 NULL il risultato sar\u00e0 NULL. Vedi la funzione CONCAT con caratteristiche differenti. Sintassi: a || b Argomenti: a valore b valore Esempi: 'Qui' || ' e ' || 'l\u00e0' \u2192 'Qui e l\u00e0' 'Nothing' || NULL \u2192 NULL 'Dia: ' || \"Diameter\" \u2192 'Dia: 25' (\"Diameter\" - un campo tabella attributi) 1 || 2 \u2192 '12' Osservazioni: Puoi concatenare stringhe usando || o + . Quest'ultimo significa anche somma nelle espressioni. Quindi se hai un intero (campo o valore numerico) questo pu\u00f2 essere soggetto a errori. In questo caso, dovresti usare || . Se si concatenano due valori stringa, \u00e8 possibile utilizzare entrambi.","title":"|| (doppio pipe)"},{"location":"gr_funzioni/operatori/operatori_unico/#ilike","text":"Restituisce 1 se il primo parametro soddisfa senza tener conto delle maiuscole o minuscole il modello fornito. LIKE pu\u00f2 essere usato al posto di ILIKE per eseguire una comparazione che tenga conto delle maiuscole e minuscole. Funziona anche con i numeri. Sintassi: string/number ILIKE pattern Argomenti: string/number stringa da cercare pattern pattern di ricerca, puoi usare '%' come carattere jolly, '_' come un singolo carattere e '\\' per eseguire l'escape. Esempi: 'A' ILIKE 'A' \u2192 1 'A' ILIKE 'a' \u2192 1 'A' ILIKE 'B' \u2192 0 'ABC' ILIKE 'b' \u2192 0 'ABC' ILIKE 'B' \u2192 0 'ABC' ILIKE '_b_' \u2192 1 'ABC' ILIKE '_B_' \u2192 1 'ABCD' ILIKE '_b_' \u2192 0 'ABCD' ILIKE '_B_' \u2192 0 'ABCD' ILIKE '_b%' \u2192 1 'ABCD' ILIKE '_B%' \u2192 1 'ABCD' ILIKE '%b%' \u2192 1 'ABCD' ILIKE '%B%' \u2192 1 Osservazioni: 1 significa Vero 0 significa falso","title":"ILIKE"},{"location":"gr_funzioni/operatori/operatori_unico/#in","text":"Restituisce 1 se il valore viene trovato in una lista di valori. Sintassi: a IN_ b _ Argomenti: a valore b lista di valori Esempi: 'A' IN ('A','B') \u2192 1 'A' IN ('C','B') \u2192 0 Osservazioni: La funzione distingue maiuscolo dal minuscolo!!! 1 significa Vero 0 significa falso","title":"IN"},{"location":"gr_funzioni/operatori/operatori_unico/#is","text":"Restituisce 1 se a \u00e8 uguale a b . Sintassi: a IS b Argomenti: a qualsiasi valore b qualsiasi valore Esempi: 'A' IS 'A' \u2192 1 *'A' IS 'a' \u2192 0 4 IS 4 \u2192 1 4 IS 2+2 \u2192 1 4 IS 2 \u2192 0 $geometry IS NULL \u2192 0, se la tua geometria non \u00e8 NULL Osservazioni: La funzione distingue maiuscolo dal minuscolo!!! 1 significa Vero 0 significa falso","title":"IS"},{"location":"gr_funzioni/operatori/operatori_unico/#is-not","text":"Restituisce 1 se a non \u00e8 uguale a b. Sintassi: Sintassi: a IS NOT b Argomenti: a valore b valore Esempi: 'a' IS NOT 'b' \u2192 1 'a' IS NOT 'a' \u2192 0 4 IS NOT 2+2 \u2192 0","title":"IS NOT"},{"location":"gr_funzioni/operatori/operatori_unico/#like","text":"Restituisce 1 se il primo parametro soddisfa il modello fornito. Funziona anche con i numeri. Sintassi: string/number LIKE pattern Argomenti: string/number valore pattern pattern con cui confrontare il valore, puoi usare '%' come carattere jolly, '_' come un singolo carattere e '\\' per eseguire l'escape. Esempi: 'A' LIKE 'A' \u2192 1 'A' LIKE 'a' \u2192 0 'A' LIKE 'B' \u2192 0 'ABC' LIKE 'B' \u2192 0 'ABC' LIKE '_B_' \u2192 1 'ABCD' LIKE '_B_' \u2192 0 'ABCD' LIKE '_B%' \u2192 1 'ABCD' LIKE '%B%' \u2192 1 '1%' LIKE '1\\\\%' \u2192 1 '1_' LIKE '1\\\\%' \u2192 0 Osservazioni: La funzione distingue maiuscolo dal minuscolo!!! 1 significa Vero 0 significa falso","title":"LIKE"},{"location":"gr_funzioni/operatori/operatori_unico/#not-between","text":"Restituisce TRUE se il valore non \u00e8 all'interno dell'intervallo specificato. L'intervallo \u00e8 considerato comprensivo dei limiti. Sintassi: NOT BETWEEN lower_bound AND higher_bound Argomenti: lower_bound AND higher_bound limite intervallo Esempi: 'B' NOT BETWEEN 'A' AND 'C' \u2192 FALSE 1.0 NOT BETWEEN 1.1 AND 1.2 \u2192 TRUE","title":"NOT BETWEEN"},{"location":"gr_funzioni/operatori/operatori_unico/#between","text":"Restituisce TRUE se il valore rientra nell'intervallo specificato. L'intervallo \u00e8 considerato comprensivo dei limiti. Per verificare l'esclusione pu\u00f2 essere utilizzato NOT BETWEEN . Sintassi: BETWEEN lower_bound AND higher_bound Argomenti: lower_bound AND higher_bound limite intervallo Esempi: 'B' BETWEEN 'A' AND 'C' \u2192 TRUE 2 BETWEEN 1 AND 3 \u2192 TRUE","title":"BETWEEN"},{"location":"gr_funzioni/operatori/operatori_unico/#maggiore","text":"Confronta due valori e pone a 1 se il valore a sinistra \u00e8 maggiore del valore a destra. Sintassi: a > b Argomenti: a valore b valore Esempi: 5 > 4 \u2192 1 5 > 5 \u2192 0 4 > 5 \u2192 0 Osservazioni: 1 significa Vero 0 significa falso","title":"&gt; (maggiore)"},{"location":"gr_funzioni/operatori/operatori_unico/#maggiore-uguale","text":"Confronta due valori e pone a 1 se il valore a sinistra \u00e8 maggiore o uguale del valore a destra. Sintassi: a >= b Argomenti: a valore b valore Esempi: 5 >= 4 \u2192 1 5 >= 5 \u2192 1 4 >= 5 \u2192 0 Osservazioni: 1 significa Vero 0 significa falso","title":"&gt;= (maggiore uguale)"},{"location":"gr_funzioni/operatori/operatori_unico/#operatore-meno","text":"Sottrazione di due valori. Se uno dei due valori \u00e8 NULL il risultato sar\u00e0 NULL. Sintassi a - b Argomenti: a valore b valore Esempi: 5 - 4 \u2192 1 5 - NULL \u2192 NULL to_datetime('2012-05-05 12:00:00') - to_interval('1 day 2 hours') \u2192 2012-05-04T10:00:00","title":"Operatore - (meno)"},{"location":"gr_funzioni/operatori/operatori_unico/#minore","text":"Confronta due valori e pone a 1 se il valore a sinistra \u00e8 minore del valore a destra. Sintassi: a < b Argomenti: a valore b valore Esempi: 5 < 4 \u2192 0 5 < 5 \u2192 0 4 < 5 \u2192 1 Osservazioni: 1 significa Vero 0 significa falso","title":"&lt; (minore)"},{"location":"gr_funzioni/operatori/operatori_unico/#minore-uguale","text":"Confronta due valori e pone a 1 se il valore a sinistra \u00e8 minore o uguale del valore a destra. Sintassi: a <= b Argomenti: a valore b valore Esempi: 5 <= 4 \u2192 0 5 <= 5 \u2192 1 4 <= 5 \u2192 1 Osservazioni: 1 significa Vero 0 significa falso","title":"&lt;= (minore uguale)"},{"location":"gr_funzioni/operatori/operatori_unico/#not","text":"Nega una condizione. Sintassi NOT a Argomenti: a Esempi: NOT 1 \u2192 0 NOT 0 \u2192 1 Osservazioni: 1 significa Vero 0 significa falso","title":"NOT"},{"location":"gr_funzioni/operatori/operatori_unico/#or","text":"Restituisce 1 quando la condizione a oppure b \u00e8 vera. Sintassi a OR b Argomenti: a condizione b condizione Esempi: 4 = 2+2 OR 1 = 1 \u2192 1 4 = 2+2 OR 1 = 2 \u2192 1 4 = 2 OR 1 = 2 \u2192 0 Osservazioni: 1 significa Vero 0 significa falso","title":"OR"},{"location":"gr_funzioni/operatori/operatori_unico/#indice-operatore","text":"Restituisce un elemento da un array o valore mappa. Sintassi: [] index Argomenti: index indice array o valore chiave della mappa Esempi: array(1,2,3)[0] \u2192 1 array(1,2,3)[2] \u2192 3 array(1,2,3)[-1] \u2192 3 map('a',1,'b',2)['a'] \u2192 1 map('a',1,'b',2)['b'] \u2192 2","title":"[] Indice operatore"},{"location":"gr_funzioni/operatori/operatori_unico/#potenza","text":"Elevazione a potenza di due valori. Sintassi: a ^ b Argomenti: a valore b valore Esempi: 5 ^ 4 \u2192 625 5 ^ NULL \u2192 NULL NULL ^ 5 \u2192 NULL --","title":"^ (potenza)"},{"location":"gr_funzioni/operatori/operatori_unico/#prodotto","text":"Moltiplicazione di due valori. Sintassi a * b Argomenti: a valore b valore Esempi: 5 * 4 \u2192 20 5 NULL \u2192 NULL NULL 5 \u2192 NULL","title":"* (prodotto)"},{"location":"gr_funzioni/operatori/operatori_unico/#resto-divisione","text":"Resto della divisione. In aritmetica il resto \u00e8 la quantit\u00e0 di *dividendoche \u00e8 avanzata dalla divisione, cio\u00e8 quella quantit\u00e0 che non \u00e8 stata possibile dividere per il divisore affinch\u00e9 il risultato rimanga nell'insieme dei numeri interi . Per definizione: Il resto di una divisione denota la quantit\u00e0 da sottrarre a un dividendo al fine di renderlo divisibile per un divisore. Sintassi a % b Argomenti: a valore b valore Esempio: 17 : 2 = 8 resto 1 Sottraendo a 17 il resto di 1 si ottiene 16, numero divisibile per due (la cui met\u00e0 \u00e8 8). Nella divisione tra 17 e 2, va tenuto da parte il resto, ossia quel numero che, se diviso, farebbe rientrare il risultato in un altro insieme numerico. Il resto di una divisione denota la quantit\u00e0 da sottrarre a un dividendo al fine di renderlo divisibile per un divisore. Esempi: 5 % 4 \u2192 1 5 % NULL \u2192 NULL NULL % 5 \u2192 NULL Altri esempi: Un esempio molto utile nel campo GIS riguarda l'etichettatura curve di livello: supponiamo di voler etichettare le curve di livello (con passo 50 m) e visualizzare solo le etichette con passo 200 m, l'espressione da usare \u00e8 la seguente: CASE WHEN ( \"ELEV\" % 200 ) = 0 THEN \"ELEV\" END ecco il risultato: PRIMA: DOPO:","title":"% (resto divisione)"},{"location":"gr_funzioni/operatori/operatori_unico/#somma","text":"Addizione di due valori. Se uno dei due valori \u00e8 NULL il risultato sar\u00e0 NULL. Sintassi a + b Argomenti: a valore b valore Esempi: 5 + 4 \u2192 9 5 + NULL \u2192 NULL 'QGIS ' + 'ROCKS' \u2192 'QGIS ROCKS' to_datetime('2020-08-01 12:00:00') + '1 day 2 hours' \u2192 2020-08-02T14:00:00 Osservazioni: Puoi concatenare stringhe usando || o + . Quest'ultimo significa anche somma nelle espressioni. Quindi se hai un intero (campo o valore numerico) questo pu\u00f2 essere soggetto a errori. In questo caso, dovresti usare || . Se si concatenano due valori stringa, \u00e8 possibile utilizzare entrambi.","title":"+ (somma)"},{"location":"gr_funzioni/operatori/operatori_unico/#tilde","text":"Esegue un'espressione regolare su di una stringa. Sintassi string ~ regex Argomenti: string Un valore stringa regex Un'espressione regolare. Le slash devono essere precedute da caratteri di escape, es. \\\\d Esempi: 'hello' ~ 'll' \u2192 1 'hello' ~ '^ll' \u2192 0 'hello' ~ 'llo$' \u2192 1","title":"~ (tilde)"},{"location":"gr_funzioni/operatori/operatori_unico/#uguale","text":"Confronta due valori e pone a 1 se essi sono uguali. Sintassi a = b Argomenti: a valore b valore Esempi: 5 = 4 \u2192 0 4 = 4 \u2192 1 5 = NULL \u2192 NULL NULL = NULL \u2192 NULL Osservazioni: 1 significa Vero 0 significa falso","title":"= (uguale)"},{"location":"gr_funzioni/raster/raster_unico/","tags":["gruppo"],"text":"Gruppo Raster \u21b5 Abstract Contiene funzioni che calcolano statistiche e valori raster. raster_statistic \u21b5 Restituisce statistiche da un raster. Sintassi: raster_statistic( layer , band , property ) Argomento: layer una stringa, rappresentante o un nome di un raster o un ID di layer band intero rappresentante il numero di banda dal raster, partendo da 1 property una stringa che indica la propriet\u00e0 da restituire. Opzioni valide sono: min : valore minimo max : valore massimo avg : valore medio (media) stdev : deviazione standard dei valori range : intervallo dei valori (max - min) sum : somma di tutti i valori dal raster Esempi: raster_statistic('lc',1,'avg') \u2192 Valore medio per la banda 1 da un raster layer 'lc' raster_statistic('ac2010',3,'min') \u2192 Valore minimo dalla banda 3 da un layer raster 'ac2010' raster_statistic( 'sicilia_dtm40',1,'max') \u2192 valore massimo del DTM Nota bene Queste statistiche sono riferite sempre a tutto il raster anche se la geometria \u00e8 pi\u00f9 o meno estesa del raster. Nel caso che segue ho popolato il campo raster del vettore punto con il valore max dell'intero DTM raster_value \u21b5 Restituisce il valore raster trovato nel punto fornito. NOVIT\u00c0 QGIS 3.4 OTTOBRE 2018 Sintassi: raster_value( layer , band , point ) Argomento: layer il nome o l'id di un layer raster band il numero della banda da cui campionare il valore point geometria del punto (per geometrie multiparte aventi pi\u00f9 di una parte, verr\u00e0 restituito un valore nullo) Esempi: raster_value( 'DTM_Pescaglia',1,$geometry) \u2192 631.2899169921875 Nota bene Esempi: Animazione raster_value() con pi\u00f9 bande e pi\u00f9 layer espressione usata: 'R ' || raster_value( 'Italia_tinitaly',1, $geometry ) || '-' || 'G ' || raster_value( 'Italia_tinitaly',2, $geometry ) || '-' || 'B ' || raster_value( 'Italia_tinitaly',3, $geometry ) || '-' || 'Z ' || raster_value( 'dtm_20m_32',1, $geometry ) Video demo","title":"Raster"},{"location":"gr_funzioni/raster/raster_unico/#gruppo-raster","text":"Abstract Contiene funzioni che calcolano statistiche e valori raster.","title":"Gruppo Raster"},{"location":"gr_funzioni/raster/raster_unico/#raster_statistic","text":"Restituisce statistiche da un raster. Sintassi: raster_statistic( layer , band , property ) Argomento: layer una stringa, rappresentante o un nome di un raster o un ID di layer band intero rappresentante il numero di banda dal raster, partendo da 1 property una stringa che indica la propriet\u00e0 da restituire. Opzioni valide sono: min : valore minimo max : valore massimo avg : valore medio (media) stdev : deviazione standard dei valori range : intervallo dei valori (max - min) sum : somma di tutti i valori dal raster Esempi: raster_statistic('lc',1,'avg') \u2192 Valore medio per la banda 1 da un raster layer 'lc' raster_statistic('ac2010',3,'min') \u2192 Valore minimo dalla banda 3 da un layer raster 'ac2010' raster_statistic( 'sicilia_dtm40',1,'max') \u2192 valore massimo del DTM Nota bene Queste statistiche sono riferite sempre a tutto il raster anche se la geometria \u00e8 pi\u00f9 o meno estesa del raster. Nel caso che segue ho popolato il campo raster del vettore punto con il valore max dell'intero DTM","title":"raster_statistic"},{"location":"gr_funzioni/raster/raster_unico/#raster_value","text":"Restituisce il valore raster trovato nel punto fornito. NOVIT\u00c0 QGIS 3.4 OTTOBRE 2018 Sintassi: raster_value( layer , band , point ) Argomento: layer il nome o l'id di un layer raster band il numero della banda da cui campionare il valore point geometria del punto (per geometrie multiparte aventi pi\u00f9 di una parte, verr\u00e0 restituito un valore nullo) Esempi: raster_value( 'DTM_Pescaglia',1,$geometry) \u2192 631.2899169921875 Nota bene Esempi: Animazione raster_value() con pi\u00f9 bande e pi\u00f9 layer espressione usata: 'R ' || raster_value( 'Italia_tinitaly',1, $geometry ) || '-' || 'G ' || raster_value( 'Italia_tinitaly',2, $geometry ) || '-' || 'B ' || raster_value( 'Italia_tinitaly',3, $geometry ) || '-' || 'Z ' || raster_value( 'dtm_20m_32',1, $geometry ) Video demo","title":"raster_value"},{"location":"gr_funzioni/recente/recente/","tags":["gruppo"],"text":"Recente \u21b5 Abstract Questo gruppo contiene funzioni usate di recente. A seconda del contesto del suo utilizzo (selezione delle funzionalit\u00e0, calcolatrice di campo, generico), qualsiasi espressione applicata viene aggiunta all'elenco corrispondente (fino a venti espressioni), ordinata dalla pi\u00f9 recente alla meno recente. Ci\u00f2 aiuta a recuperare e riapplicare rapidamente qualsiasi espressione utilizzata in precedenza.","title":"Recente"},{"location":"gr_funzioni/recente/recente/#recente","text":"Abstract Questo gruppo contiene funzioni usate di recente. A seconda del contesto del suo utilizzo (selezione delle funzionalit\u00e0, calcolatrice di campo, generico), qualsiasi espressione applicata viene aggiunta all'elenco corrispondente (fino a venti espressioni), ordinata dalla pi\u00f9 recente alla meno recente. Ci\u00f2 aiuta a recuperare e riapplicare rapidamente qualsiasi espressione utilizzata in precedenza.","title":"Recente"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/","tags":["gruppo"],"text":"Gruppo Record e Attributi \u21b5 Abstract Questo gruppo contiene funzioni che operano sugli identificativi dei record. $currentfeature \u21b5 Restituisce l'elemento corrente corrente da valutare. Questo pu\u00f2 essere usato con la funzione 'attribute' per valutare i valori dell'attributo dall'elemento corrente. ATTENZIONE : questa funzione \u00e8 deprecata (a partire da QGIS 3.28.0 Firenze). Si consiglia di utilizzare la variabile sostitutiva @feature . Sintassi: $currentfeature Esempi: - attribute( $currentfeature, 'name' ) \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente - attribute( @feature, 'name' ) \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente $id \u21b5 Restituisce l'id geometria della riga corrente. ATTENZIONE : Questa funzione \u00e8 deprecata (a partire da QGIS 3.28 Firenze). Si consiglia di utilizzare la variabile sostitutiva @id Sintassi: $id Esempi: $id \u2192 71 @id \u2192 71 Osservazioni: Questa funzione inizia sempre da 0 con vettore shapefile da 1 con i database attribute \u21b5 Restituisce un attributo da un elemento. Variante 1 \u21b5 Restituisce il valore di un attributo dall'elemento corrente. Sintassi: attribute( attribute_name ) Argomenti: attribute_name nome dell'attributo da restituire Esempi: attribute( 'name' ) \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente Variante 2 \u21b5 Consente di specificare l'elemento di destinazione e il nome dell'attributo. Sintassi: attribute( feature , attribute_name ) Argomenti: feature un elemento attribute_name nome dell'attributo da restituire Esempi: attribute( $currentfeature, 'name' ) \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente attributes \u21b5 Restituisce una mappa contenente tutti gli attributi di un elemento, con i nomi dei campi come chiavi della mappa. Variante 1 \u21b5 Restituisce una mappa di tutti gli attributi dall'attuale elemento. Sintassi: attributes() Esempi:o attributes()['name'] \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente per trasformare una feature (una riga di una tabella) in un array: Variante 2 \u21b5 Consente di specificare la feature di destinazione. Sintassi: attributes( feature ) Argomenti: feature un elemento Esempi: attributes( @atlas_feature )['name'] \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente dell'atlante display_expression \u21b5 Restituisce l'espressione visualizzata per un dato elemento in un layer. L'espressione \u00e8 sempre valutata. Pu\u00f2 essere usata con lo zero, uno o pi\u00f9 argomenti, vedi sotto per dettagli. Nessun parametro \u21b5 Se chiamata senza parametri, la funzione valuter\u00e0 l'espressione di visualizzazione dell'elemento corrente nel layer corrente. Sintassi: display_expression() Esempi: display_expression() \u2192 L'espressione visualizzata dell'elemento corrente nel layer corrente Un parametro 'feature' \u21b5 Se chiamata con il solo parametro 'feature', la funzione valuter\u00e0 l'elemento specificato nel layer corrente. Sintassi: display_expression( feature ) Argomenti: feature L'elemento che dovrebbe essere valutato. Esempi: display_expression(@atlas_feature) \u2192 L'espressione visualizzata dell'elemento corrente dell'atlante. Parametri del Layer ed elementi \u21b5 Se la funzione viene chiamata sia con un layer che con un elemento, valuter\u00e0 l'elemento specificato dal layer indicato. Sintassi: display_expression( layer , feature [, evaluate=true ]) [ ] indica componenti opzionali Argomenti: layer Il layer (o suo ID o nome) feature L'elemento che dovrebbe essere valutato. evaluate Se l'espressione deve essere valutata. Se false l'espressione sar\u00e0 restituita solo come stringa letterale (che potenzialmente potrebbe essere valutata a posteriori tramite la funzione 'eval'). Esempi: display_expression( 'streets', get_feature_by_id('streets', 1)) \u2192 L'espressione visualizzata dell'elemento con ID 1 sul layer 'streets'. display_expression('a_layer_id', $currentfeature, 'False') \u2192 L'espressione visualizzata del dato elemento non \u00e8 stata valutata. get_feature \u21b5 Restituisce il primo elemento di un layer che corrisponde ad un dato valore di attributo. Variante a valore singolo \u21b5 Insieme all'ID livello, vengono specificati una singola colonna e un valore. Sintassi: get_feature( layer , attribute , value ) Argomenti: layer nome layer o ID attribute nome attributo value valore attributo da far corrispondere Esempi: get_feature('streets','name','main st') \u2192 prima geometria trovata nel vettore \"streets\" con valore \"main st\" nel campo \"name\" get_feature( 'streets', 'fid', attribute( $currentfeature, 'name') ) \u2192 Restituisce la prima feature nel layer \"streets\" il cui campo \"fid\" ha lo stesso valore del campo \"nome\" della feature corrente` (una sorta di JOIN) Variante map \u21b5 QGIS >= 3.24 Insieme all'ID livello, una mappa contenente le colonne (chiave) e il rispettivo valore da utilizzare. Sintassi: get_feature( layer , map ) Argomenti: layer nome layer o ID map Mappa contenente le coppie di colonne e valori da usare. Esempi: get_feature('streets',map('name','main st','lane_num','4')) \u2192 primo elemento trovato in 'streets' con il valore 'main st' nel campo 'name' e il valore '4' nel campo 'lane_num' get_feature_by_id \u21b5 Restituisce l'id dell'elemento della riga corrente. Sintassi: get_feature_by_id( layer , feature_id ) Argomenti: layer layer, nome del layer o id del layer feature_id L'id dell'elemento che deve essere restituito (inizia da 0 per gli shapefile) Esempi: get_feature_by_id('streets', 1) \u2192 l'elemento con id 1 nel vettore \"streets\" is_selected \u21b5 Restituisce Vero se \u00e8 selezionata una funzione. Pu\u00f2 essere usato con zero, uno o due argomenti, vedi sotto per i dettagli. Senza parametri \u21b5 Se chiamata senza parametri, la funzione restituir\u00e0 vero se \u00e8 selezionata la feature corrente nel layer corrente. Sintassi: is_selected() Esempi: is_selected() \u2192 True (vero) se l'elemento corrente \u00e8 selezionato. Una Feature come parametro \u21b5 Se chiamata con il solo parametro 'feature', la funzione restituisce true se l'elemento specificato \u00e8 selezionato nel layer attuale. Sintassi: is_selected( feature ) Argomenti: feature L'elemento che deve essere controllata per la selezione. Esempi: is_selected(@atlas_feature) \u2192 Vero se l'elemento corrente dell'atlante \u00e8 selezionato. is_selected(get_feature('streets', 'name', 'Main St.'))) \u2192 Vero se l'unico elemento con nome \"Main St.\" sul layer \"streets\" attivo \u00e8 selezionato. is_selected(get_feature_by_id('streets', 1)) \u2192 Vero se l'elemento con l'ID 1 sul layer \"streets\" attivo \u00e8 selezionato. Due parametri \u21b5 Se la funzione \u00e8 chiamata sia con un layer che con un elemento, questa restituir\u00e0 vero se l'elemento specificato del layer specificato \u00e8 selezionato. Sintassi: is_selected( layer , feature ) Argomenti: layer Il layer (o il suo ID o nome) su cui verr\u00e0 controllata la selezione. feature L'elemento che deve essere controllato per la selezione. Esempi: is_selected( 'streets', get_feature('streets', 'name', \"street_name\")) \u2192 Vero se \u00e8 selezionata la strada dell'edificio corrente (supponendo che il layer edifici abbia un campo denominato 'street_name' e il layer strade abbia un campo denominato 'name' con valori univoci). is_selected( 'streets', get_feature_by_id('streets', 1)) \u2192 Vero se l'elemento con l'ID 1 nel layer \"streets\" \u00e8 selezionato. Esempio etichettatura tramite regola: Esempio tematizzazione tramite regola: maptip \u21b5 Restituisce il suggerimento mappa di un dato elemento in un vettore. Per impostazione predefinita, l'espressione \u00e8 valutata. Pu\u00f2 essere usata con zero, uno o pi\u00f9 argomenti, vedi sotto per dettagli. Nessun parametro \u21b5 Se chiamata senza parametri, la funzione valuter\u00e0 il suggerimento mappa dell'elemento corrente nel layer corrente. Sintassi: maptip() Esempi: maptip() \u2192 Il suggerimento mappa dell'elemento corrente nel layer corrente. Un parametro 'feature' \u21b5 Se chiamata con il solo parametro 'feature ', la funzione valuter\u00e0 l'elemento specificato nel layer corrente. Sintassi: maptip( feature ) Argomenti: feature L'elemento che dovrebbe essere valutato. Esempi: maptip(@atlas_feature) \u2192 Il suggerimento mappa dell'elemento corrente dell'atlante. Parametri del Layer ed elementi \u21b5 Se la funzione viene chiamata sia con un layer che con un elemento, valuter\u00e0 l'elemento specificato dal layer indicato. Sintassi: maptip( layer , feature [, evaluate=true ]) [ ] indica componenti opzionali Argomenti: layer Il layer (o suo ID o nome) feature L'elemento che dovrebbe essere valutato. evaluate Se l'espressione deve essere valutata. Se false l'espressione sar\u00e0 restituita solo come stringa letterale (che potenzialmente potrebbe essere valutata a posteriori tramite la funzione 'eval_template'). Esempi: maptip('streets', get_feature_by_id('streets', 1)) \u2192 Il suggerimento mappa dell'elemento con ID 1 sul vettore 'streets'. maptip('a_layer_id', $currentfeature, 'False') \u2192 Il suggerimento mappa del dato elemento non valutato. num_selected \u21b5 Restituisce il numero di geometrie selezionate in un vettore dato. Per impostazione predefinita funziona sul vettore sul quale l'espressione \u00e8 valutata. Sintassi: num_selected([ layer=current layer ]) Argomenti: layer Il vettore (o il suo id o nome) sul quale la selezione sar\u00e0 controllata. Esempi: num_selected() \u2192 Il numero di geometrie selezionate nel vettore corrente. num_selected('streets') \u2192 Il numero di geometrie selezionate nel vettore streets represent_attributes \u21b5 Restituisce una mappa con i nomi degli attributi come chiavi ed i valori di rappresentazione configurati come valori. Il valore di rappresentazione per gli attributi dipende dal tipo di widget configurato per ogni attributo. Pu\u00f2 essere usato con zero, uno o pi\u00f9 argomenti, vedi sotto per i dettagli. Nessun paramentro \u21b5 Se chiamata senza parametri, la funzione restituisce la rappresentazione degli attributi dell'elemento corrente nel layer corrente. Sintassi: represent_attributes() Esempio: represent_attributes() \u2192 La rappresentazione degli attributi per l'elemento corrente. Un parametro feature \u21b5 Se chiamata solo con un parametro 'feature', la funzione restituisce la rappresentazione degli attributi dell'elemento specificato dal layer corrente. Sintassi: represent_attributes( feature ) Argomenti: feature L'elemento che dovrebbe essere valutato Esempio: represent_attributes($currentfeature) \u2192 La rappresentazione degli attributi per l'elemento corrente. Parametri layer e feature \u21b5 Se chiamata con un parametro 'layer' e un parametro 'feature', la funzione restituir\u00e0 la rappresentazione degli attributi dell'elemento specificato dal layer specificato Sintassi: represent_attributes( layer , feature ) Argomenti: layer Il layer (o suo ID o nome). feature L'elemento che dovrebbe essere valutato Esempio: represent_attributes(@layer, $currentfeature) \u2192 La rappresentazione degli attributi per l'elemento corrente. represent_value \u21b5 Restituisce il metodo di rappresentazione configurato per un valore di un campo. Esso dipende dal tipo di widget configurato. Spesso, questo \u00e8 molto utile per i widget 'Mappa Valore'. Sintassi: represent_value( value , fieldName ) Argomenti: value Il valore che dovrebbe essere risolto. Molto probabilmente un campo. fieldName Il nome del campo per cui la configurazione del widget dovrebbe essere caricata. (Opzionale) Esempi: represent_value(\"field_with_value_map\") \u2192 Descrizione per il valore represent_value('static value', 'field_name') \u2192 Descrizione per il valore statico sqlite_fetch_and_increment \u21b5 Gestisce i valori incrementali nei database sqlite. I valori predefiniti in SQlite possono essere applicati all'inserimento e non possono venir elaborati con il prefetch. Ci\u00f2 rende impossibile l'acquisizione e l'incremento della chiave primaria tramite l'AUTO_INCREMENT prima della creazione della riga nel database. Note a margine: con postgres, questo funziona tramite l'opzione valuta i valori predefiniti. Quando vengono aggiunti nuovi elementi che hanno relazioni, \u00e8 veramente grazioso poter aggiungere elementi figlio per un genitore, mentre il modulo dei genitori \u00e8 ancora aperto e l'elemento genitore non \u00e8 ancora salvato. Per sorpassare questa limitazione, questa funzione pu\u00f2 essere usata per gestire valori sequenziali in una tabella separata basata su un formato sqlite come il gpkg. La tabella sequenza sar\u00e0 filtrata per un id sequenziale (filter_attribute e filter_value) ed il valore attuale dell'id_field sar\u00e0 incrementato di 1 e verr\u00e0 restituto il valore incrementato. Se colonne aggiuntive richiedono che per esse debbano venir specificati valori, i default_values map possono essere usati per questo scopo. Nota \u21b5 Questa funzione modifica la tabella sqlite di destinazione. Essa \u00e8 intesa per l'uso con la configurazione predefinita per gli attributi. Quando il parametro \u00e8 un layer ed il layer \u00e8 in modo transazione, il valore viene recuperato solo una volta durante il tempo di vita di una transazione e memorizzato ed incrementato. Ci\u00f2 rende insicuro lavorare sullo stesso database con diversi processi in parallelo. Sintassi: sqlite_fetch_and_increment( database , table , id_field , filter_attribute , filter_value [, default_values ]) [ ] indica componenti opzionali Argomenti: database Percorso del file sqlite o del layer geopackage table Nome della tabella che gestisce le sequenze id_field Nome del campo che contiene il valore corrente filter_attribute Nome del campo che contiene un identificatore unico per questa sequenza. Deve avere un indice di tipo UNIQUE. filter_value Nome della sequenza da utilizzare. default_values Compila con i valori predefiniti per campi aggiuntivi sulla tabella. I valori necessitano di essere quotati. Sono consentite le funzioni. Esempi: sqlite_fetch_and_increment(@layer, 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change', 'date(''now'')', 'user', '''' || @user_account_name || '''')) \u2192 0 sqlite_fetch_and_increment(layer_property(@layer, 'path'), 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change', 'date(''now'')', 'user', '''' || @user_account_name || '''')) \u2192 0 uuid \u21b5 Genera un Universally Unique Identifier (UUID) per ciascun record usando il metodo Qt QUuid::createUuid . Aggiornato dalla QGIS 3.18 Sintassi: uuid([ format='WithBraces' ]) [ ] indica componenti opzionali Argomenti: format Il formato, come l'UUID verr\u00e0 formattato. 'WithBraces' (con parentesi {}), 'WithoutBraces' (senza parentesi) o 'Id128' (senza trattino). Esempi: uuid() \u2192 '{0bd2f60f-f157-4a6d-96af-d4ba4cb366a1}' uuid('WithoutBraces') \u2192 '0bd2f60f-f157-4a6d-96af-d4ba4cb366a1' uuid('Id128') \u2192 '0bd2f60ff1574a6d96afd4ba4cb366a1' 1.png)","title":"Record e attributi"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#gruppo-record-e-attributi","text":"Abstract Questo gruppo contiene funzioni che operano sugli identificativi dei record.","title":"Gruppo Record e Attributi"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#currentfeature","text":"Restituisce l'elemento corrente corrente da valutare. Questo pu\u00f2 essere usato con la funzione 'attribute' per valutare i valori dell'attributo dall'elemento corrente. ATTENZIONE : questa funzione \u00e8 deprecata (a partire da QGIS 3.28.0 Firenze). Si consiglia di utilizzare la variabile sostitutiva @feature . Sintassi: $currentfeature Esempi: - attribute( $currentfeature, 'name' ) \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente - attribute( @feature, 'name' ) \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente","title":"$currentfeature"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#id","text":"Restituisce l'id geometria della riga corrente. ATTENZIONE : Questa funzione \u00e8 deprecata (a partire da QGIS 3.28 Firenze). Si consiglia di utilizzare la variabile sostitutiva @id Sintassi: $id Esempi: $id \u2192 71 @id \u2192 71 Osservazioni: Questa funzione inizia sempre da 0 con vettore shapefile da 1 con i database","title":"$id"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#attribute","text":"Restituisce un attributo da un elemento.","title":"attribute"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#variante-1","text":"Restituisce il valore di un attributo dall'elemento corrente. Sintassi: attribute( attribute_name ) Argomenti: attribute_name nome dell'attributo da restituire Esempi: attribute( 'name' ) \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente","title":"Variante 1"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#variante-2","text":"Consente di specificare l'elemento di destinazione e il nome dell'attributo. Sintassi: attribute( feature , attribute_name ) Argomenti: feature un elemento attribute_name nome dell'attributo da restituire Esempi: attribute( $currentfeature, 'name' ) \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente","title":"Variante 2"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#attributes","text":"Restituisce una mappa contenente tutti gli attributi di un elemento, con i nomi dei campi come chiavi della mappa.","title":"attributes"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#variante-1_1","text":"Restituisce una mappa di tutti gli attributi dall'attuale elemento. Sintassi: attributes() Esempi:o attributes()['name'] \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente per trasformare una feature (una riga di una tabella) in un array:","title":"Variante 1"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#variante-2_1","text":"Consente di specificare la feature di destinazione. Sintassi: attributes( feature ) Argomenti: feature un elemento Esempi: attributes( @atlas_feature )['name'] \u2192 valore memorizzato nell'attributo 'name' per l'elemento corrente dell'atlante","title":"Variante 2"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#display_expression","text":"Restituisce l'espressione visualizzata per un dato elemento in un layer. L'espressione \u00e8 sempre valutata. Pu\u00f2 essere usata con lo zero, uno o pi\u00f9 argomenti, vedi sotto per dettagli.","title":"display_expression"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#nessun-parametro","text":"Se chiamata senza parametri, la funzione valuter\u00e0 l'espressione di visualizzazione dell'elemento corrente nel layer corrente. Sintassi: display_expression() Esempi: display_expression() \u2192 L'espressione visualizzata dell'elemento corrente nel layer corrente","title":"Nessun parametro"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#un-parametro-feature","text":"Se chiamata con il solo parametro 'feature', la funzione valuter\u00e0 l'elemento specificato nel layer corrente. Sintassi: display_expression( feature ) Argomenti: feature L'elemento che dovrebbe essere valutato. Esempi: display_expression(@atlas_feature) \u2192 L'espressione visualizzata dell'elemento corrente dell'atlante.","title":"Un parametro 'feature'"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#parametri-del-layer-ed-elementi","text":"Se la funzione viene chiamata sia con un layer che con un elemento, valuter\u00e0 l'elemento specificato dal layer indicato. Sintassi: display_expression( layer , feature [, evaluate=true ]) [ ] indica componenti opzionali Argomenti: layer Il layer (o suo ID o nome) feature L'elemento che dovrebbe essere valutato. evaluate Se l'espressione deve essere valutata. Se false l'espressione sar\u00e0 restituita solo come stringa letterale (che potenzialmente potrebbe essere valutata a posteriori tramite la funzione 'eval'). Esempi: display_expression( 'streets', get_feature_by_id('streets', 1)) \u2192 L'espressione visualizzata dell'elemento con ID 1 sul layer 'streets'. display_expression('a_layer_id', $currentfeature, 'False') \u2192 L'espressione visualizzata del dato elemento non \u00e8 stata valutata.","title":"Parametri del Layer ed elementi"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#get_feature","text":"Restituisce il primo elemento di un layer che corrisponde ad un dato valore di attributo.","title":"get_feature"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#variante-a-valore-singolo","text":"Insieme all'ID livello, vengono specificati una singola colonna e un valore. Sintassi: get_feature( layer , attribute , value ) Argomenti: layer nome layer o ID attribute nome attributo value valore attributo da far corrispondere Esempi: get_feature('streets','name','main st') \u2192 prima geometria trovata nel vettore \"streets\" con valore \"main st\" nel campo \"name\" get_feature( 'streets', 'fid', attribute( $currentfeature, 'name') ) \u2192 Restituisce la prima feature nel layer \"streets\" il cui campo \"fid\" ha lo stesso valore del campo \"nome\" della feature corrente` (una sorta di JOIN)","title":"Variante a valore singolo"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#variante-map","text":"QGIS >= 3.24 Insieme all'ID livello, una mappa contenente le colonne (chiave) e il rispettivo valore da utilizzare. Sintassi: get_feature( layer , map ) Argomenti: layer nome layer o ID map Mappa contenente le coppie di colonne e valori da usare. Esempi: get_feature('streets',map('name','main st','lane_num','4')) \u2192 primo elemento trovato in 'streets' con il valore 'main st' nel campo 'name' e il valore '4' nel campo 'lane_num'","title":"Variante map"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#get_feature_by_id","text":"Restituisce l'id dell'elemento della riga corrente. Sintassi: get_feature_by_id( layer , feature_id ) Argomenti: layer layer, nome del layer o id del layer feature_id L'id dell'elemento che deve essere restituito (inizia da 0 per gli shapefile) Esempi: get_feature_by_id('streets', 1) \u2192 l'elemento con id 1 nel vettore \"streets\"","title":"get_feature_by_id"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#is_selected","text":"Restituisce Vero se \u00e8 selezionata una funzione. Pu\u00f2 essere usato con zero, uno o due argomenti, vedi sotto per i dettagli.","title":"is_selected"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#senza-parametri","text":"Se chiamata senza parametri, la funzione restituir\u00e0 vero se \u00e8 selezionata la feature corrente nel layer corrente. Sintassi: is_selected() Esempi: is_selected() \u2192 True (vero) se l'elemento corrente \u00e8 selezionato.","title":"Senza parametri"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#una-feature-come-parametro","text":"Se chiamata con il solo parametro 'feature', la funzione restituisce true se l'elemento specificato \u00e8 selezionato nel layer attuale. Sintassi: is_selected( feature ) Argomenti: feature L'elemento che deve essere controllata per la selezione. Esempi: is_selected(@atlas_feature) \u2192 Vero se l'elemento corrente dell'atlante \u00e8 selezionato. is_selected(get_feature('streets', 'name', 'Main St.'))) \u2192 Vero se l'unico elemento con nome \"Main St.\" sul layer \"streets\" attivo \u00e8 selezionato. is_selected(get_feature_by_id('streets', 1)) \u2192 Vero se l'elemento con l'ID 1 sul layer \"streets\" attivo \u00e8 selezionato.","title":"Una Feature come parametro"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#due-parametri","text":"Se la funzione \u00e8 chiamata sia con un layer che con un elemento, questa restituir\u00e0 vero se l'elemento specificato del layer specificato \u00e8 selezionato. Sintassi: is_selected( layer , feature ) Argomenti: layer Il layer (o il suo ID o nome) su cui verr\u00e0 controllata la selezione. feature L'elemento che deve essere controllato per la selezione. Esempi: is_selected( 'streets', get_feature('streets', 'name', \"street_name\")) \u2192 Vero se \u00e8 selezionata la strada dell'edificio corrente (supponendo che il layer edifici abbia un campo denominato 'street_name' e il layer strade abbia un campo denominato 'name' con valori univoci). is_selected( 'streets', get_feature_by_id('streets', 1)) \u2192 Vero se l'elemento con l'ID 1 nel layer \"streets\" \u00e8 selezionato. Esempio etichettatura tramite regola: Esempio tematizzazione tramite regola:","title":"Due parametri"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#maptip","text":"Restituisce il suggerimento mappa di un dato elemento in un vettore. Per impostazione predefinita, l'espressione \u00e8 valutata. Pu\u00f2 essere usata con zero, uno o pi\u00f9 argomenti, vedi sotto per dettagli.","title":"maptip"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#nessun-parametro_1","text":"Se chiamata senza parametri, la funzione valuter\u00e0 il suggerimento mappa dell'elemento corrente nel layer corrente. Sintassi: maptip() Esempi: maptip() \u2192 Il suggerimento mappa dell'elemento corrente nel layer corrente.","title":"Nessun parametro"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#un-parametro-feature_1","text":"Se chiamata con il solo parametro 'feature ', la funzione valuter\u00e0 l'elemento specificato nel layer corrente. Sintassi: maptip( feature ) Argomenti: feature L'elemento che dovrebbe essere valutato. Esempi: maptip(@atlas_feature) \u2192 Il suggerimento mappa dell'elemento corrente dell'atlante.","title":"Un parametro 'feature'"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#parametri-del-layer-ed-elementi_1","text":"Se la funzione viene chiamata sia con un layer che con un elemento, valuter\u00e0 l'elemento specificato dal layer indicato. Sintassi: maptip( layer , feature [, evaluate=true ]) [ ] indica componenti opzionali Argomenti: layer Il layer (o suo ID o nome) feature L'elemento che dovrebbe essere valutato. evaluate Se l'espressione deve essere valutata. Se false l'espressione sar\u00e0 restituita solo come stringa letterale (che potenzialmente potrebbe essere valutata a posteriori tramite la funzione 'eval_template'). Esempi: maptip('streets', get_feature_by_id('streets', 1)) \u2192 Il suggerimento mappa dell'elemento con ID 1 sul vettore 'streets'. maptip('a_layer_id', $currentfeature, 'False') \u2192 Il suggerimento mappa del dato elemento non valutato.","title":"Parametri del Layer ed elementi"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#num_selected","text":"Restituisce il numero di geometrie selezionate in un vettore dato. Per impostazione predefinita funziona sul vettore sul quale l'espressione \u00e8 valutata. Sintassi: num_selected([ layer=current layer ]) Argomenti: layer Il vettore (o il suo id o nome) sul quale la selezione sar\u00e0 controllata. Esempi: num_selected() \u2192 Il numero di geometrie selezionate nel vettore corrente. num_selected('streets') \u2192 Il numero di geometrie selezionate nel vettore streets","title":"num_selected"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#represent_attributes","text":"Restituisce una mappa con i nomi degli attributi come chiavi ed i valori di rappresentazione configurati come valori. Il valore di rappresentazione per gli attributi dipende dal tipo di widget configurato per ogni attributo. Pu\u00f2 essere usato con zero, uno o pi\u00f9 argomenti, vedi sotto per i dettagli.","title":"represent_attributes"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#nessun-paramentro","text":"Se chiamata senza parametri, la funzione restituisce la rappresentazione degli attributi dell'elemento corrente nel layer corrente. Sintassi: represent_attributes() Esempio: represent_attributes() \u2192 La rappresentazione degli attributi per l'elemento corrente.","title":"Nessun paramentro"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#un-parametro-feature_2","text":"Se chiamata solo con un parametro 'feature', la funzione restituisce la rappresentazione degli attributi dell'elemento specificato dal layer corrente. Sintassi: represent_attributes( feature ) Argomenti: feature L'elemento che dovrebbe essere valutato Esempio: represent_attributes($currentfeature) \u2192 La rappresentazione degli attributi per l'elemento corrente.","title":"Un parametro feature"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#parametri-layer-e-feature","text":"Se chiamata con un parametro 'layer' e un parametro 'feature', la funzione restituir\u00e0 la rappresentazione degli attributi dell'elemento specificato dal layer specificato Sintassi: represent_attributes( layer , feature ) Argomenti: layer Il layer (o suo ID o nome). feature L'elemento che dovrebbe essere valutato Esempio: represent_attributes(@layer, $currentfeature) \u2192 La rappresentazione degli attributi per l'elemento corrente.","title":"Parametri layer e feature"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#represent_value","text":"Restituisce il metodo di rappresentazione configurato per un valore di un campo. Esso dipende dal tipo di widget configurato. Spesso, questo \u00e8 molto utile per i widget 'Mappa Valore'. Sintassi: represent_value( value , fieldName ) Argomenti: value Il valore che dovrebbe essere risolto. Molto probabilmente un campo. fieldName Il nome del campo per cui la configurazione del widget dovrebbe essere caricata. (Opzionale) Esempi: represent_value(\"field_with_value_map\") \u2192 Descrizione per il valore represent_value('static value', 'field_name') \u2192 Descrizione per il valore statico","title":"represent_value"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#sqlite_fetch_and_increment","text":"Gestisce i valori incrementali nei database sqlite. I valori predefiniti in SQlite possono essere applicati all'inserimento e non possono venir elaborati con il prefetch. Ci\u00f2 rende impossibile l'acquisizione e l'incremento della chiave primaria tramite l'AUTO_INCREMENT prima della creazione della riga nel database. Note a margine: con postgres, questo funziona tramite l'opzione valuta i valori predefiniti. Quando vengono aggiunti nuovi elementi che hanno relazioni, \u00e8 veramente grazioso poter aggiungere elementi figlio per un genitore, mentre il modulo dei genitori \u00e8 ancora aperto e l'elemento genitore non \u00e8 ancora salvato. Per sorpassare questa limitazione, questa funzione pu\u00f2 essere usata per gestire valori sequenziali in una tabella separata basata su un formato sqlite come il gpkg. La tabella sequenza sar\u00e0 filtrata per un id sequenziale (filter_attribute e filter_value) ed il valore attuale dell'id_field sar\u00e0 incrementato di 1 e verr\u00e0 restituto il valore incrementato. Se colonne aggiuntive richiedono che per esse debbano venir specificati valori, i default_values map possono essere usati per questo scopo.","title":"sqlite_fetch_and_increment"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#nota","text":"Questa funzione modifica la tabella sqlite di destinazione. Essa \u00e8 intesa per l'uso con la configurazione predefinita per gli attributi. Quando il parametro \u00e8 un layer ed il layer \u00e8 in modo transazione, il valore viene recuperato solo una volta durante il tempo di vita di una transazione e memorizzato ed incrementato. Ci\u00f2 rende insicuro lavorare sullo stesso database con diversi processi in parallelo. Sintassi: sqlite_fetch_and_increment( database , table , id_field , filter_attribute , filter_value [, default_values ]) [ ] indica componenti opzionali Argomenti: database Percorso del file sqlite o del layer geopackage table Nome della tabella che gestisce le sequenze id_field Nome del campo che contiene il valore corrente filter_attribute Nome del campo che contiene un identificatore unico per questa sequenza. Deve avere un indice di tipo UNIQUE. filter_value Nome della sequenza da utilizzare. default_values Compila con i valori predefiniti per campi aggiuntivi sulla tabella. I valori necessitano di essere quotati. Sono consentite le funzioni. Esempi: sqlite_fetch_and_increment(@layer, 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change', 'date(''now'')', 'user', '''' || @user_account_name || '''')) \u2192 0 sqlite_fetch_and_increment(layer_property(@layer, 'path'), 'sequence_table', 'last_unique_id', 'sequence_id', 'global', map('last_change', 'date(''now'')', 'user', '''' || @user_account_name || '''')) \u2192 0","title":"Nota"},{"location":"gr_funzioni/record_e_attributi/record_e_attributi_unico/#uuid","text":"Genera un Universally Unique Identifier (UUID) per ciascun record usando il metodo Qt QUuid::createUuid . Aggiornato dalla QGIS 3.18 Sintassi: uuid([ format='WithBraces' ]) [ ] indica componenti opzionali Argomenti: format Il formato, come l'UUID verr\u00e0 formattato. 'WithBraces' (con parentesi {}), 'WithoutBraces' (senza parentesi) o 'Id128' (senza trattino). Esempi: uuid() \u2192 '{0bd2f60f-f157-4a6d-96af-d4ba4cb366a1}' uuid('WithoutBraces') \u2192 '0bd2f60f-f157-4a6d-96af-d4ba4cb366a1' uuid('Id128') \u2192 '0bd2f60ff1574a6d96afd4ba4cb366a1' 1.png)","title":"uuid"},{"location":"gr_funzioni/reference/dbquery/","text":"dbquery \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"dbquery"},{"location":"gr_funzioni/reference/dbquery/#dbquery","text":"--","title":"dbquery"},{"location":"gr_funzioni/reference/dbquery/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/dbquery/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/dbquery/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/dbquery/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/dbsql/","text":"dbsql \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"dbsql"},{"location":"gr_funzioni/reference/dbsql/#dbsql","text":"--","title":"dbsql"},{"location":"gr_funzioni/reference/dbsql/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/dbsql/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/dbsql/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/dbsql/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/dbvalue/","text":"dbvalue \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"dbvalue"},{"location":"gr_funzioni/reference/dbvalue/#dbvalue","text":"--","title":"dbvalue"},{"location":"gr_funzioni/reference/dbvalue/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/dbvalue/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/dbvalue/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/dbvalue/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/dbvaluebyid/","text":"dbvaluebyid \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"dbvaluebyid"},{"location":"gr_funzioni/reference/dbvaluebyid/#dbvaluebyid","text":"--","title":"dbvaluebyid"},{"location":"gr_funzioni/reference/dbvaluebyid/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/dbvaluebyid/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/dbvaluebyid/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/dbvaluebyid/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomcontains/","text":"geomcontains \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomcontains"},{"location":"gr_funzioni/reference/geomcontains/#geomcontains","text":"--","title":"geomcontains"},{"location":"gr_funzioni/reference/geomcontains/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomcontains/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomcontains/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomcontains/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomcrosses/","text":"geomcrosses \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomcrosses"},{"location":"gr_funzioni/reference/geomcrosses/#geomcrosses","text":"--","title":"geomcrosses"},{"location":"gr_funzioni/reference/geomcrosses/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomcrosses/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomcrosses/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomcrosses/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomdisjoint/","text":"Funzione geomdisjoint \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"Geomdisjoint"},{"location":"gr_funzioni/reference/geomdisjoint/#funzione-geomdisjoint","text":"--","title":"Funzione geomdisjoint"},{"location":"gr_funzioni/reference/geomdisjoint/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomdisjoint/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomdisjoint/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomdisjoint/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomdistance/","text":"geomdistance \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomdistance"},{"location":"gr_funzioni/reference/geomdistance/#geomdistance","text":"--","title":"geomdistance"},{"location":"gr_funzioni/reference/geomdistance/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomdistance/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomdistance/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomdistance/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomequals/","text":"geomequals \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomequals"},{"location":"gr_funzioni/reference/geomequals/#geomequals","text":"--","title":"geomequals"},{"location":"gr_funzioni/reference/geomequals/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomequals/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomequals/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomequals/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomintersects/","text":"geomintersects \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomintersects"},{"location":"gr_funzioni/reference/geomintersects/#geomintersects","text":"--","title":"geomintersects"},{"location":"gr_funzioni/reference/geomintersects/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomintersects/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomintersects/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomintersects/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomnearest/","text":"geomnearest \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomnearest"},{"location":"gr_funzioni/reference/geomnearest/#geomnearest","text":"--","title":"geomnearest"},{"location":"gr_funzioni/reference/geomnearest/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomnearest/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomnearest/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomnearest/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomoverlaps/","text":"geomoverlaps \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomoverlaps"},{"location":"gr_funzioni/reference/geomoverlaps/#geomoverlaps","text":"--","title":"geomoverlaps"},{"location":"gr_funzioni/reference/geomoverlaps/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomoverlaps/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomoverlaps/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomoverlaps/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomredef/","text":"geomredef \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomredef"},{"location":"gr_funzioni/reference/geomredef/#geomredef","text":"--","title":"geomredef"},{"location":"gr_funzioni/reference/geomredef/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomredef/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomredef/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomredef/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomtouches/","text":"geomtouches \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomtouches"},{"location":"gr_funzioni/reference/geomtouches/#geomtouches","text":"--","title":"geomtouches"},{"location":"gr_funzioni/reference/geomtouches/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomtouches/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomtouches/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomtouches/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/geomwithin/","text":"geomwithin \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"geomwithin"},{"location":"gr_funzioni/reference/geomwithin/#geomwithin","text":"--","title":"geomwithin"},{"location":"gr_funzioni/reference/geomwithin/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/geomwithin/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/geomwithin/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/geomwithin/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/intersecting_geom_count/","text":"Funzione intersecting_geom_count \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"Intersecting geom count"},{"location":"gr_funzioni/reference/intersecting_geom_count/#funzione-intersecting_geom_count","text":"--","title":"Funzione intersecting_geom_count"},{"location":"gr_funzioni/reference/intersecting_geom_count/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/intersecting_geom_count/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/intersecting_geom_count/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/intersecting_geom_count/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/intersecting_geom_sum/","text":"Funzione intersecting_geom_sum \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"Intersecting geom sum"},{"location":"gr_funzioni/reference/intersecting_geom_sum/#funzione-intersecting_geom_sum","text":"--","title":"Funzione intersecting_geom_sum"},{"location":"gr_funzioni/reference/intersecting_geom_sum/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/intersecting_geom_sum/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/intersecting_geom_sum/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/intersecting_geom_sum/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/reference/","text":"Reference \u21b5 Questo gruppo \u00e8 presente SOLO dopo aver installato il plugin refFunctions . Plugin che aggiunge funzioni utente personalizzate al calcolatore di campi di QGIS per fare riferimento, analiticamente o spazialmente, tra i livelli, ad esempio recuperare un valore da un livello usando come valore di campo o una condizione spaziale (interseca, disgiunti ....) come parametro. Funzione Descrizione Funzioni della tabella: dbvalue Recupera il primo valore targetField da targetLayer quando keyField \u00e8 uguale a conditionValue dbvaluebyid Recupera il valore targetField da targetLayer usando l'ID della caratteristica interna dbquery Recupera il primo valore targetField da targetLayer quando whereClause \u00e8 true dbsql Recupera i risultati dalla query SQL Funzioni WKT: WKTcentroid Restituisce il centro di massa della geometria data come geometria del punto WKT WKTpointonsurface Restituisce il punto all'interno della geometria data WKTlenght Restituisce la lunghezza della geometria WKT fornita WKTarea Restituisce l'area della geometria WKT indicata Funzioni geometriche: geomRedef ridefinire la geometria della feature corrente con una nuova geometria WKT (sperimentale!) geomnearest Recupera il valore del campo target dalla funzione di destinazione pi\u00f9 vicina nel livello di destinazione geomdistance Recupera il valore del campo target dalla funzione target nel livello di destinazione se la funzione target \u00e8 in distanza geomwithin Recupera il valore del campo obiettivo quando la funzione di origine si trova all'interno della funzione di destinazione nel livello di destinazione geomtouches Recupera il valore del campo obiettivo quando la funzione sorgente tocca la funzione di destinazione nel livello di destinazione geomintersects Recupera il valore del campo obiettivo quando la caratteristica sorgente interseca la caratteristica obiettivo nel livello di destinazione geomcontains Recupera il valore del campo obiettivo quando la funzione di origine contiene la funzione di destinazione nel livello di destinazione geomcwithin Recupera il valore del campo obiettivo quando la funzione di origine \u00e8 disgiunta dalla funzione di destinazione nel livello di destinazione geomequals Recupera il valore del campo obiettivo quando la funzione di origine \u00e8 uguale alla funzione di destinazione nel livello di destinazione geomoverlaps Recupera il valore del campo obiettivo quando la funzione sorgente si sovrappone alla funzione di destinazione nel livello di destinazione geomcrosses Recupera il valore del campo obiettivo quando la caratteristica sorgente attraversa la caratteristica obiettivo nel livello di destinazione geomdisjoint Recupera il valore del campo obiettivo quando la funzione di origine \u00e8 disgiunta dalla funzione di destinazione nel livello di destinazione intersecting_geom_count Ottieni il conteggio delle funzionalit\u00e0 nel livello di destinazione intersecate dalla funzione di origine intersecting_geom_sum Somma gli attributi delle geometrie del livello di destinazione intersecati dalla funzione di origine","title":"Reference"},{"location":"gr_funzioni/reference/reference/#reference","text":"Questo gruppo \u00e8 presente SOLO dopo aver installato il plugin refFunctions . Plugin che aggiunge funzioni utente personalizzate al calcolatore di campi di QGIS per fare riferimento, analiticamente o spazialmente, tra i livelli, ad esempio recuperare un valore da un livello usando come valore di campo o una condizione spaziale (interseca, disgiunti ....) come parametro. Funzione Descrizione Funzioni della tabella: dbvalue Recupera il primo valore targetField da targetLayer quando keyField \u00e8 uguale a conditionValue dbvaluebyid Recupera il valore targetField da targetLayer usando l'ID della caratteristica interna dbquery Recupera il primo valore targetField da targetLayer quando whereClause \u00e8 true dbsql Recupera i risultati dalla query SQL Funzioni WKT: WKTcentroid Restituisce il centro di massa della geometria data come geometria del punto WKT WKTpointonsurface Restituisce il punto all'interno della geometria data WKTlenght Restituisce la lunghezza della geometria WKT fornita WKTarea Restituisce l'area della geometria WKT indicata Funzioni geometriche: geomRedef ridefinire la geometria della feature corrente con una nuova geometria WKT (sperimentale!) geomnearest Recupera il valore del campo target dalla funzione di destinazione pi\u00f9 vicina nel livello di destinazione geomdistance Recupera il valore del campo target dalla funzione target nel livello di destinazione se la funzione target \u00e8 in distanza geomwithin Recupera il valore del campo obiettivo quando la funzione di origine si trova all'interno della funzione di destinazione nel livello di destinazione geomtouches Recupera il valore del campo obiettivo quando la funzione sorgente tocca la funzione di destinazione nel livello di destinazione geomintersects Recupera il valore del campo obiettivo quando la caratteristica sorgente interseca la caratteristica obiettivo nel livello di destinazione geomcontains Recupera il valore del campo obiettivo quando la funzione di origine contiene la funzione di destinazione nel livello di destinazione geomcwithin Recupera il valore del campo obiettivo quando la funzione di origine \u00e8 disgiunta dalla funzione di destinazione nel livello di destinazione geomequals Recupera il valore del campo obiettivo quando la funzione di origine \u00e8 uguale alla funzione di destinazione nel livello di destinazione geomoverlaps Recupera il valore del campo obiettivo quando la funzione sorgente si sovrappone alla funzione di destinazione nel livello di destinazione geomcrosses Recupera il valore del campo obiettivo quando la caratteristica sorgente attraversa la caratteristica obiettivo nel livello di destinazione geomdisjoint Recupera il valore del campo obiettivo quando la funzione di origine \u00e8 disgiunta dalla funzione di destinazione nel livello di destinazione intersecting_geom_count Ottieni il conteggio delle funzionalit\u00e0 nel livello di destinazione intersecate dalla funzione di origine intersecting_geom_sum Somma gli attributi delle geometrie del livello di destinazione intersecati dalla funzione di origine","title":"Reference"},{"location":"gr_funzioni/reference/wktarea/","text":"wktarea \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"wktarea"},{"location":"gr_funzioni/reference/wktarea/#wktarea","text":"--","title":"wktarea"},{"location":"gr_funzioni/reference/wktarea/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/wktarea/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/wktarea/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/wktarea/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/wktcentroid/","text":"wktcentroid \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"wktcentroid"},{"location":"gr_funzioni/reference/wktcentroid/#wktcentroid","text":"--","title":"wktcentroid"},{"location":"gr_funzioni/reference/wktcentroid/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/wktcentroid/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/wktcentroid/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/wktcentroid/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/wktlenght/","text":"wktlenght \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"wktlenght"},{"location":"gr_funzioni/reference/wktlenght/#wktlenght","text":"--","title":"wktlenght"},{"location":"gr_funzioni/reference/wktlenght/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/wktlenght/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/wktlenght/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/wktlenght/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/reference/wktpointonsurface/","text":"wktpointonsurface \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 nota bene \u21b5 -- osservazioni \u21b5 --","title":"wktpointonsurface"},{"location":"gr_funzioni/reference/wktpointonsurface/#wktpointonsurface","text":"--","title":"wktpointonsurface"},{"location":"gr_funzioni/reference/wktpointonsurface/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/reference/wktpointonsurface/#esempi","text":"","title":"Esempi"},{"location":"gr_funzioni/reference/wktpointonsurface/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/reference/wktpointonsurface/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/relazioni/relazioni/","tags":["gruppo"],"text":"Relazioni \u21b5 Abstract Questo gruppo contiene tutte le relazioni del progetto, sar\u00e0 visibile solo se il progetto ha delle relazioni tra layer.","title":"Relazioni"},{"location":"gr_funzioni/relazioni/relazioni/#relazioni","text":"Abstract Questo gruppo contiene tutte le relazioni del progetto, sar\u00e0 visibile solo se il progetto ha delle relazioni tra layer.","title":"Relazioni"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/","tags":["gruppo"],"text":"Gruppo Stringhe di Testo \u21b5 Abstract Questo gruppo contiene le funzioni che operano sulle stringhe es. sostituzione, conversione in maiuscolo. ascii \u21b5 Restituisce il codice unicode associato al primo carattere di una stringa. Sintassi: ascii( string ) Argomenti: string la stringa da convertire in codice unicode Esempi: ascii('Q') \u2192 81 char \u21b5 Restituisce il carattere associato ad un codice unicode. Sintassi: char( code ) Argomenti: code un numero codice unicode Esempi: char(81) \u2192 'Q' char(178) \u2192 '\u00b2' char(179) \u2192 '\u00b3' concat \u21b5 Concatena svariate stringhe in una sola. Valori NULL sono convertiti in stringhe vuote. Altri valori (come i numeri) sono convertiti in stringa. Sintassi: concat( string1 , string2 , \u2026 ) Argomenti: string un valore stringa Esempi: concat('To', 't\u00f2') \u2192 'Tot\u00f2' concat('a','b','c','d','e') \u2192 'abcde' concat('Anno ', 2018) \u2192 'Anno 2018' concat('QGIS 3.0', NULL) \u2192 'QGIS 3.0' format \u21b5 Formatta una stringa usando gli argomenti forniti. Sintassi: format( string , arg1 , arg2 , \u2026 ) Argomenti: string Una stringa con segnaposto %1, %2 e cos\u00ec via per gli argomenti. I segnaposto possono essere ripetuti. Il segnaposto con il numero pi\u00f9 basso viene sostituito da arg1, il successivo da arg2, ecc. arg Qualsiasi tipo. Qualsiasi numero di argomenti. Esempi: format('This %1 a %2','is', 'test') \u2192 'Questo \u00e8 un test' format('This is %2','a bit unexpected but 2 is lowest number in string','normal') \u2192 'This is a bit unexpected but 2 is lowest number in string' format_date \u21b5 Formatta una data o una stringa in un formato stringa personalizzato. Usa le Qt date/time format strings. Vedi QDateTime::toString . Sintassi: Format_date( datetime , format [, language ] ) Argomenti: datetime valora data, ora, o data/ora format Modello di stringhe usato per formattare la stringa. Espressione Risultato d il giorno in numero senza lo zero iniziale (da 1 a 31) dd il giorno in numero con lo zero iniziale (da 01 a 31) ddd il nome locale del giorno abbreviato (es. da 'Mon' a 'Sun') dddd il nome locale del giorno per esteso (es. da 'Monday' a 'Sunday') M il mese in numero senza lo zero iniziale (1-12) MM il mese in numero con lo zero iniziale (01-12) MMM il nome locale del mese abbreviato (es. da 'Jan' a 'Dec') MMMM il nome locale del mese per esteso (es. da 'January' a 'December') yy l'anno come un numero a due cifre (00-99) yyyy l'anno come un numero a quattro cifre Queste espressioni possono essere usate per la parte time della stringa da formattare: Espressione Risultato h l'ora senza lo zero iniziale (da 0 a 23 o da 1 a 12 se visualizzi AM/PM) hh l'ora con lo zero iniziale (da 00 a 23 o da 01 a 12 se visualizzi AM/PM) H l'ora senza lo zero iniziale (da 0 a 23, anche se visualizzi AM/PM) HH l'ora con lo zero iniziale (da 00 a 23, anche se visualizzi AM/PM) m il minuto senza lo zero iniziale (da 0 a 59) mm il minuto con lo zero iniziale (da 00 a 59) s il secondo senza lo zero iniziale (da 0 a 59) ss il secondo con lo zero iniziale (da 00 a 59) z i millisecondi senza gli zeri iniziali (da 0 a 999) zzz i millisecondi con gli zeri iniziali (da 000 a 999) AP o A interpretato come un orario nel formato AM/PM. AP deve essere \"AM\" oppure \"PM\". ap o a interpretato come un orario nel formato AM/PM. ap deve essere \"am\" oppure \"pm\". language lingua (minuscolo, due o tre lettere, codice lingua ISO 639 ) utilizzata per formattare la data in una stringa personalizzata. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Esempi: format_date('2012-05-15','dd.MM.yyyy') \u2192 '15.05.2012' format_date('2012-05-15','d MMMM yyyy','fr') \u2192 '15 mai 2012' format_date('2012-05-15','dddd') \u2192 'Tuesday', se la lingua corrente \u00e8 una variante inglese format_date('2012-05-15 13:54:20','dd.MM.yy') \u2192 '15.05.12' format_date('13:54:20','hh:mm AP') \u2192 '01:54 PM' format_number \u21b5 Restituisce un numero formattato con il separatore locale per le migliaia. Inoltre tronca il numero al numero di posti forniti. Sintassi: format_number( number [, places ][, language ] ) [ ] indica componenti opzionali Argomenti: number numero da formattare places intero rappresentante il numero di posizioni decimali a cui troncare la stringa. language lingua (minuscolo, due o tre lettere, codice lingua ISO 639 ) utilizzata per formattare il numero in una stringa. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Esempi: format_number(10000000.332,2) \u2192 '10,000,000.33' se ad es. la locale corrente \u00e8 una variante inglese format_number(10000000.332,2,'fr') \u2192 '10 000 000,33' left \u21b5 Restituisce una sottostringa che contiene gli n caratteri pi\u00f9 a sinistra della stringa. Sintassi: left( string , length ) Argomenti: string una stringa length intero. Il numero di caratteri da estrarre dalla parte sinistra della stringa. Esempi: left('Hello World',5) \u2192 'Hello' length \u21b5 Restituisce il numero di caratteri in una stringa o la lunghezza di una geometria di tipo linestring. Variabile stringa \u21b5 Restituisce il numero di caratteri contenuti in una stringa. Sintassi: length( string ) Argomenti: string stringa della quale calcolare la lunghezza Esempi: length('hello') \u2192 5 Variabile geometria \u21b5 Calcola la lunghezza di un oggetto a geometria lineare. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di detta geometria, e l'unit\u00e0 di misura della lunghezza restituita \u00e8 conforme all'unit\u00e0 di misura del SR. Ci\u00f2 differisce dal calcolo eseguito dalla funzione $length, la quale esegue calcoli ellissoidici basati sull'ellissoide del progetto e sulle impostazioni delle unit\u00e0 di distanza. Sintassi: length( geometry ) Argomenti: geometry oggetto geometria linea Esempi: length(geom_from_wkt('LINESTRING(0 0, 4 0)')) \u2192 4 lower \u21b5 Converte una stringa in lettere minuscole. Sintassi: lower( string ) Argomenti: string la stringa da convertire in minuscolo Esempi: lower('HELLO World') \u2192 'hello world' lpad \u21b5 Restituisce una stringa riempita a sinistra fino alla larghezza specificata, utilizzando un carattere di riempimento. Se la larghezza della destinazione \u00e8 inferiore alla lunghezza della stringa, la stringa viene troncata. Sintassi: lpad( string , width , fill ) Argomenti: string stringa da riempire width lunghezza della nuova stringa fill carattere con il quale riempire lo spazio rimanente Esempi: lpad('Hello', 10, 'x') \u2192 'xxxxxHello' lpad('Hello', 3, 'x') \u2192 'Hel' Altri esempi utili \u21b5 se volessi popolare un campo in modo da ottenere segnale01.png, segnale02.png...segnale99.png id path 10 segnale01.png 15 segnale02.png 22 segnale03.png .. .. 520 segnale99.png espressione utilizzata: 'segnale' || lpad( @row_number ,2, '00' )|| '.png' \u2192 'segnale01.png' -- per ricostruire un identificativo univoco CODICE_ASC CODICE_STR NUM_CIV BARRATO CODICE_ASC 000020 1 0000002000001 000575 1 0000057500001 001785 1 1 00001785000011 005495 38 1 00005495000381 001480 572 10 000014800057210 000150 1 0000015000001 lpad(\"CODICE_STR\",8,0)|| lpad( \"NUM_CIV\",5,0) || coalesce(\"BARRATO\",'') regexp_match \u21b5 Restituisce la prima posizione di corrispondenza che soddisfa un'espressione regolare all'interno di una stringa, o 0 se la sottostringa non viene trovata. Sintassi: regexp_match( input_string , regex ) Argomenti: input_string la stringa da confrontare con l'espressione regolare regex L'espressione regolare da confrontare. I caratteri backslash (\\) devono essere doppiamente escaped (es \"\\s\" per selezionare un carattere spazio bianco). Esempi: regexp_match('QGIS ROCKS','\\\\sROCKS') \u2192 5 regexp_match('Buda\u010d','uda\u010d\\\\b') \u2192 2 Osservazioni: link Wikipedia ^ \u00abapice\u00bb ha due significati: se messo all\u2019inizio della regex impone che la linea cominci con quello che segue l\u2019apice; se usato con le parentesi quadre e messo prima di un carattere significa: tranne il carattere che segue, \u00e8 una negazione $ \u00abdollar \u00bb se messa alla fine della regex impone che la linea finisca con quello che precede il dollaro . \u00abpunto\u00bb qualunque carattere * \u00abasterisco\u00bb accetta zero o pi\u00f9 ripetizioni del carattere precedente + \u00abpi\u00f9\u00bb accetta una o pi\u00f9 ripetizioni del carattere precedente [ ] \u00abparentesi quadre\u00bb tutti i caratteri all\u2019interno delle [ ] sono accettati: le due parentesi si comportano come un singolo carattere [^ ] \u00abparentesi quadre con apice\u00bb tutti i caratteri tranne quelli all\u2019interno delle [ ] sono accettati / \u00abslash\u00bb inizia/termina l\u2019espressione regolare \u00abbarra rovesciata\u00bb tratta il carattere speciale che segue come un normale carattere testuale o viceversa tratta un normale carattere come un carattere speciale link1 link2 regexp_match('QGIS ROCKS ciao come stai','$') = length ('QGIS ROCKS ciao come stai')+1 -- Altri esempi \u21b5 vedi qui regexp_matches( \"catasto\" ,'^(.+)\\\\.(.+)\\\\.(.+)\\\\.(.+)_(.+)\\\\.(.+)$')[x] con x che varia da 0 a 5 regexp_replace \u21b5 Restituisce una stringa con la parte che soddisfa l'espressione regolare sostituita. Sintassi: regexp_replace( input_string , regex , replacement ) Argomenti: input_string la stringa in cui sostituire regex L'espressione regolare per sostituire. I caratteri backslash devono essere double escaped (es \"\\s\" per selezionare un carattere spazio bianco). replacement La stringa che sostituir\u00e0 qualsiasi occorrenza corrispondente dell'espressione regolare passata. I gruppi catturati possono essere inseriti nella stringa di sostituzione usando \\\\1 , \\\\2 , etc. Esempi: regexp_replace('QGIS SHOULD ROCK','\\\\sSHOULD\\\\s',' DOES ') \u2192 'QGIS DOES ROCK' regexp_replace('ABC123','\\\\d+','') \u2192 'ABC' regexp_replace('my name is John','(.*) is (.*)','\\\\2 is \\\\1') \u2192 'Il mio nome \u00e8 Giovanni' Esempi:o 2 Tabella: id particella 1 00AXJ 2 000BBG 3 0JJU Aggiornare il campo particella togliendo gli zeri iniziali: espressione da usare: regexp_replace( \"particella\" ,'^0+','')` risultato: id particella 1 AXJ 2 BBG 3 JJU ecco un tool dove provare le regexp: https://regex101.com/r/SSDBmj/1 Esempi:o 3 id valore 1 data20200224 2 data20200225 3 data20200226 eliminare data e inserire un simbolo tra anno, mese e giorno espressione da usare: regexp_replace(\"valore\" ,'(data)(....)(..)(..)','\\\\2-\\\\3-\\\\4')` risultato: id valore 1 2020-02-24 2 2020-02-25 3 2020-02-26 Esempi:o 4 Tabella: id particella 1 00AXJ.su 2 000BBG.cot 3 0JJU.1234 Aggiornare il campo particella togliendo tutto quello dopo il punto (.): espressione da usare: regexp_replace( 'xxxxx.yyy','\\\\.(.+)$','')` risultato: id particella 1 00AXJ 2 000BBG 3 0JJU qui altri esempi regexp_substr \u21b5 Restituisce la porzione di una stringa che soddisfa l'espressione regolare passata. Sintassi: regexp_substr( input_string , regex ) Argomenti: input_string la stringa in cui cercare regex L'espressione regolare da contro abbinare. I caratteri backslash devono essere \"double escaped\" ( es \"\\\\s\" per selezionare un carattere spazio). Esempi: regexp_substr('abc123','(\\\\d+)') \u2192 '123' replace \u21b5 Restituisce una stringa con la stringa, array o mappa di stringhe passate sostituite. Variabile stringa & array \u21b5 Restituisce una stringa con la stringa o array di stringa passate sostituite da una stringa o un array di stringhe. Sintassi: replace( string , before , after ) Argomenti: string la stringa in ingresso before la stringa o array di stringhe da sostituire after la stringa o l'array di stringe da usare come sostituzione Esempi: replace('QGIS SHOULD ROCK','SHOULD','DOES') \u2192 'QGIS DOES ROCK' replace('QGIS ABC',array('A','B','C'),array('X','Y','Z')) \u2192 'QGIS XYZ' replace('QGIS',array('Q','S'),'') \u2192 'GI' Variabile mappa \u21b5 Restituisce una stringa con le chiavi della mappa fornite sostituite dai valori abbinati. Sono valutate per prime le chiavi della mappa pi\u00f9 lunghe. Sintassi: replace( string , map ) Argomenti: string la stringa in ingresso map la mappa che contiene le chiavi e i valori Esempi: replace('APP SHOULD ROCK',map('APP','QGIS','SHOULD','DOES')) \u2192 'QGIS DOES ROCK' replace('forty two',map('for','4','two','2','forty two','42')) \u2192 '42' right \u21b5 Restituisce una sottostringa che contiene gli n caratteri pi\u00f9 a destra della stringa. Sintassi: right( string , length ) Argomenti: string una stringa length intero. Il numero di caratteri da estrarre dalla parte destra della stringa. Esempi: right('Hello World',5) \u2192 'World' rpad \u21b5 Restituisce una stringa riempita a destra della larghezza specificata, utilizzando un carattere di riempimento. Se la larghezza della destinazione \u00e8 inferiore alla lunghezza della stringa, la stringa viene troncata. Sintassi: rpad( string , width , fill ) Argomenti: string stringa da riempire width lunghezza della nuova stringa fill carattere con il quale riempire lo spazio rimanente Esempi: rpad('Hello', 10, 'x') \u2192 'Helloxxxxx' rpad('Hello', 3, 'x') \u2192 'Hel' strpos \u21b5 Restituisce la prima posizione di corrispondenza di una sottostringa dentro in un'altra stringa o 0 se la sottostringa non viene trovata. Sintassi: strpos( haystack , needle ) Argomenti: haystack stringa in cui deve essere cercata needle stringa da cercare Esempi: strpos('HELLO WORLD','WORLD') \u2192 7 strpos('HELLO WORLD','GOODBYE') \u2192 0 substr \u21b5 Restituisce una parte di una stringa. Sintassi: substr( string , start [, length ] ) [ ] indica componenti opzionali Argomenti: string l'intera stringa in entrata start intero rappresentante la posizione di partenza dalla quale estrarre; se il valore di partenza \u00e8 negativo, la stringa restituita inizier\u00e0 dalla fine della stringa meno il valore di partenza length intero rappresentante la lunghezza della stringa da estrarre; se la lunghezza \u00e8 negativa, la stringa restituita ometter\u00e0 la lunghezza data di caratteri dalla fine della stringa Esempi: substr('HELLO WORLD',3,5) \u2192 'LLO W' substr('HELLO WORLD',3,5) \u2192 'WORLD' substr('HELLO WORLD',-5) \u2192 'WORLD' substr('HELLO',3,-1) \u2192 'LL' substr('HELLO WORLD',-5,2) \u2192 'WO' substr('HELLO WORLD',-5,-1) \u2192 'WORL' title \u21b5 Converte tutte le parole in \"title case\" (tutte le parole in minuscolo con la prima lettera maiuscola) Sintassi: title( string ) Argomenti: string stringa da convertire in minuscolo con la prima lettera maiuscola Esempi: title('hello WOrld') \u2192 'Hello World' to_string \u21b5 Converte un numero in stringa. Sintassi: to_string( number ) Argomenti: number Valore intero o reale. Il numero da convertire in stringa. Esempi: to_string(123.23) \u2192 '123.23' trim \u21b5 Rimuove tutti gli spazi vuoti (spazi, tabulazioni, etc.) all'inizio e alla fine di una stringa. Sintassi: trim( string ) Argomenti: string stringa da troncare Esempi: trim(' hello world ') \u2192 'hello world' upper \u21b5 Converte una stringa in lettere maiuscole. Sintassi: upper( string ) Argomenti: string la stringa da convertire in maiuscolo Esempi: upper('hello WOrld') \u2192 'HELLO WORLD' wordwrap \u21b5 Restituisce una stringa posta a capo ad un massimo/minimo numero di caratteri. Sintassi: wordwrap( string , wrap_length , delimiter_string ) Argomenti: string la stringa da spezzare wrap_length un intero. Se wrap_length \u00e8 positivo il numero rappresenta il numero massimo ideale di caratteri a cui spezzare; se negativo, il numero rappresenta il numero minimo di caratteri a cui spezzare. delimiter_string il delimitatore stringa per spezzare in una nuova linea (opzionale). Esempi: wordwrap('UNIVERSITY OF QGIS',13) \u2192 'UNIVERSITY OF QGIS' wordwrap('UNIVERSITY OF QGIS',-3) \u2192 'UNIVERSITY OF QGIS' Per legende con testo lungo, tipico delle legende per carte geologiche: wordwrap(@symbol_label ,50)","title":"Stringhe di testo"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#gruppo-stringhe-di-testo","text":"Abstract Questo gruppo contiene le funzioni che operano sulle stringhe es. sostituzione, conversione in maiuscolo.","title":"Gruppo Stringhe di Testo"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#ascii","text":"Restituisce il codice unicode associato al primo carattere di una stringa. Sintassi: ascii( string ) Argomenti: string la stringa da convertire in codice unicode Esempi: ascii('Q') \u2192 81","title":"ascii"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#char","text":"Restituisce il carattere associato ad un codice unicode. Sintassi: char( code ) Argomenti: code un numero codice unicode Esempi: char(81) \u2192 'Q' char(178) \u2192 '\u00b2' char(179) \u2192 '\u00b3'","title":"char"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#concat","text":"Concatena svariate stringhe in una sola. Valori NULL sono convertiti in stringhe vuote. Altri valori (come i numeri) sono convertiti in stringa. Sintassi: concat( string1 , string2 , \u2026 ) Argomenti: string un valore stringa Esempi: concat('To', 't\u00f2') \u2192 'Tot\u00f2' concat('a','b','c','d','e') \u2192 'abcde' concat('Anno ', 2018) \u2192 'Anno 2018' concat('QGIS 3.0', NULL) \u2192 'QGIS 3.0'","title":"concat"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#format","text":"Formatta una stringa usando gli argomenti forniti. Sintassi: format( string , arg1 , arg2 , \u2026 ) Argomenti: string Una stringa con segnaposto %1, %2 e cos\u00ec via per gli argomenti. I segnaposto possono essere ripetuti. Il segnaposto con il numero pi\u00f9 basso viene sostituito da arg1, il successivo da arg2, ecc. arg Qualsiasi tipo. Qualsiasi numero di argomenti. Esempi: format('This %1 a %2','is', 'test') \u2192 'Questo \u00e8 un test' format('This is %2','a bit unexpected but 2 is lowest number in string','normal') \u2192 'This is a bit unexpected but 2 is lowest number in string'","title":"format"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#format_date","text":"Formatta una data o una stringa in un formato stringa personalizzato. Usa le Qt date/time format strings. Vedi QDateTime::toString . Sintassi: Format_date( datetime , format [, language ] ) Argomenti: datetime valora data, ora, o data/ora format Modello di stringhe usato per formattare la stringa. Espressione Risultato d il giorno in numero senza lo zero iniziale (da 1 a 31) dd il giorno in numero con lo zero iniziale (da 01 a 31) ddd il nome locale del giorno abbreviato (es. da 'Mon' a 'Sun') dddd il nome locale del giorno per esteso (es. da 'Monday' a 'Sunday') M il mese in numero senza lo zero iniziale (1-12) MM il mese in numero con lo zero iniziale (01-12) MMM il nome locale del mese abbreviato (es. da 'Jan' a 'Dec') MMMM il nome locale del mese per esteso (es. da 'January' a 'December') yy l'anno come un numero a due cifre (00-99) yyyy l'anno come un numero a quattro cifre Queste espressioni possono essere usate per la parte time della stringa da formattare: Espressione Risultato h l'ora senza lo zero iniziale (da 0 a 23 o da 1 a 12 se visualizzi AM/PM) hh l'ora con lo zero iniziale (da 00 a 23 o da 01 a 12 se visualizzi AM/PM) H l'ora senza lo zero iniziale (da 0 a 23, anche se visualizzi AM/PM) HH l'ora con lo zero iniziale (da 00 a 23, anche se visualizzi AM/PM) m il minuto senza lo zero iniziale (da 0 a 59) mm il minuto con lo zero iniziale (da 00 a 59) s il secondo senza lo zero iniziale (da 0 a 59) ss il secondo con lo zero iniziale (da 00 a 59) z i millisecondi senza gli zeri iniziali (da 0 a 999) zzz i millisecondi con gli zeri iniziali (da 000 a 999) AP o A interpretato come un orario nel formato AM/PM. AP deve essere \"AM\" oppure \"PM\". ap o a interpretato come un orario nel formato AM/PM. ap deve essere \"am\" oppure \"pm\". language lingua (minuscolo, due o tre lettere, codice lingua ISO 639 ) utilizzata per formattare la data in una stringa personalizzata. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Esempi: format_date('2012-05-15','dd.MM.yyyy') \u2192 '15.05.2012' format_date('2012-05-15','d MMMM yyyy','fr') \u2192 '15 mai 2012' format_date('2012-05-15','dddd') \u2192 'Tuesday', se la lingua corrente \u00e8 una variante inglese format_date('2012-05-15 13:54:20','dd.MM.yy') \u2192 '15.05.12' format_date('13:54:20','hh:mm AP') \u2192 '01:54 PM'","title":"format_date"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#format_number","text":"Restituisce un numero formattato con il separatore locale per le migliaia. Inoltre tronca il numero al numero di posti forniti. Sintassi: format_number( number [, places ][, language ] ) [ ] indica componenti opzionali Argomenti: number numero da formattare places intero rappresentante il numero di posizioni decimali a cui troncare la stringa. language lingua (minuscolo, due o tre lettere, codice lingua ISO 639 ) utilizzata per formattare il numero in una stringa. Per impostazione predefinita, viene utilizzata la locale dell'utente di QGIS corrente. Esempi: format_number(10000000.332,2) \u2192 '10,000,000.33' se ad es. la locale corrente \u00e8 una variante inglese format_number(10000000.332,2,'fr') \u2192 '10 000 000,33'","title":"format_number"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#left","text":"Restituisce una sottostringa che contiene gli n caratteri pi\u00f9 a sinistra della stringa. Sintassi: left( string , length ) Argomenti: string una stringa length intero. Il numero di caratteri da estrarre dalla parte sinistra della stringa. Esempi: left('Hello World',5) \u2192 'Hello'","title":"left"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#length","text":"Restituisce il numero di caratteri in una stringa o la lunghezza di una geometria di tipo linestring.","title":"length"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#variabile-stringa","text":"Restituisce il numero di caratteri contenuti in una stringa. Sintassi: length( string ) Argomenti: string stringa della quale calcolare la lunghezza Esempi: length('hello') \u2192 5","title":"Variabile stringa"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#variabile-geometria","text":"Calcola la lunghezza di un oggetto a geometria lineare. I calcoli sono sempre planimetrici nel Sistema di Riferimento Spaziale (SR) di detta geometria, e l'unit\u00e0 di misura della lunghezza restituita \u00e8 conforme all'unit\u00e0 di misura del SR. Ci\u00f2 differisce dal calcolo eseguito dalla funzione $length, la quale esegue calcoli ellissoidici basati sull'ellissoide del progetto e sulle impostazioni delle unit\u00e0 di distanza. Sintassi: length( geometry ) Argomenti: geometry oggetto geometria linea Esempi: length(geom_from_wkt('LINESTRING(0 0, 4 0)')) \u2192 4","title":"Variabile geometria"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#lower","text":"Converte una stringa in lettere minuscole. Sintassi: lower( string ) Argomenti: string la stringa da convertire in minuscolo Esempi: lower('HELLO World') \u2192 'hello world'","title":"lower"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#lpad","text":"Restituisce una stringa riempita a sinistra fino alla larghezza specificata, utilizzando un carattere di riempimento. Se la larghezza della destinazione \u00e8 inferiore alla lunghezza della stringa, la stringa viene troncata. Sintassi: lpad( string , width , fill ) Argomenti: string stringa da riempire width lunghezza della nuova stringa fill carattere con il quale riempire lo spazio rimanente Esempi: lpad('Hello', 10, 'x') \u2192 'xxxxxHello' lpad('Hello', 3, 'x') \u2192 'Hel'","title":"lpad"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#altri-esempi-utili","text":"se volessi popolare un campo in modo da ottenere segnale01.png, segnale02.png...segnale99.png id path 10 segnale01.png 15 segnale02.png 22 segnale03.png .. .. 520 segnale99.png espressione utilizzata: 'segnale' || lpad( @row_number ,2, '00' )|| '.png' \u2192 'segnale01.png' -- per ricostruire un identificativo univoco CODICE_ASC CODICE_STR NUM_CIV BARRATO CODICE_ASC 000020 1 0000002000001 000575 1 0000057500001 001785 1 1 00001785000011 005495 38 1 00005495000381 001480 572 10 000014800057210 000150 1 0000015000001 lpad(\"CODICE_STR\",8,0)|| lpad( \"NUM_CIV\",5,0) || coalesce(\"BARRATO\",'')","title":"Altri esempi utili"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#regexp_match","text":"Restituisce la prima posizione di corrispondenza che soddisfa un'espressione regolare all'interno di una stringa, o 0 se la sottostringa non viene trovata. Sintassi: regexp_match( input_string , regex ) Argomenti: input_string la stringa da confrontare con l'espressione regolare regex L'espressione regolare da confrontare. I caratteri backslash (\\) devono essere doppiamente escaped (es \"\\s\" per selezionare un carattere spazio bianco). Esempi: regexp_match('QGIS ROCKS','\\\\sROCKS') \u2192 5 regexp_match('Buda\u010d','uda\u010d\\\\b') \u2192 2 Osservazioni: link Wikipedia ^ \u00abapice\u00bb ha due significati: se messo all\u2019inizio della regex impone che la linea cominci con quello che segue l\u2019apice; se usato con le parentesi quadre e messo prima di un carattere significa: tranne il carattere che segue, \u00e8 una negazione $ \u00abdollar \u00bb se messa alla fine della regex impone che la linea finisca con quello che precede il dollaro . \u00abpunto\u00bb qualunque carattere * \u00abasterisco\u00bb accetta zero o pi\u00f9 ripetizioni del carattere precedente + \u00abpi\u00f9\u00bb accetta una o pi\u00f9 ripetizioni del carattere precedente [ ] \u00abparentesi quadre\u00bb tutti i caratteri all\u2019interno delle [ ] sono accettati: le due parentesi si comportano come un singolo carattere [^ ] \u00abparentesi quadre con apice\u00bb tutti i caratteri tranne quelli all\u2019interno delle [ ] sono accettati / \u00abslash\u00bb inizia/termina l\u2019espressione regolare \u00abbarra rovesciata\u00bb tratta il carattere speciale che segue come un normale carattere testuale o viceversa tratta un normale carattere come un carattere speciale link1 link2 regexp_match('QGIS ROCKS ciao come stai','$') = length ('QGIS ROCKS ciao come stai')+1 --","title":"regexp_match"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#altri-esempi","text":"vedi qui regexp_matches( \"catasto\" ,'^(.+)\\\\.(.+)\\\\.(.+)\\\\.(.+)_(.+)\\\\.(.+)$')[x] con x che varia da 0 a 5","title":"Altri esempi"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#regexp_replace","text":"Restituisce una stringa con la parte che soddisfa l'espressione regolare sostituita. Sintassi: regexp_replace( input_string , regex , replacement ) Argomenti: input_string la stringa in cui sostituire regex L'espressione regolare per sostituire. I caratteri backslash devono essere double escaped (es \"\\s\" per selezionare un carattere spazio bianco). replacement La stringa che sostituir\u00e0 qualsiasi occorrenza corrispondente dell'espressione regolare passata. I gruppi catturati possono essere inseriti nella stringa di sostituzione usando \\\\1 , \\\\2 , etc. Esempi: regexp_replace('QGIS SHOULD ROCK','\\\\sSHOULD\\\\s',' DOES ') \u2192 'QGIS DOES ROCK' regexp_replace('ABC123','\\\\d+','') \u2192 'ABC' regexp_replace('my name is John','(.*) is (.*)','\\\\2 is \\\\1') \u2192 'Il mio nome \u00e8 Giovanni' Esempi:o 2 Tabella: id particella 1 00AXJ 2 000BBG 3 0JJU Aggiornare il campo particella togliendo gli zeri iniziali: espressione da usare: regexp_replace( \"particella\" ,'^0+','')` risultato: id particella 1 AXJ 2 BBG 3 JJU ecco un tool dove provare le regexp: https://regex101.com/r/SSDBmj/1 Esempi:o 3 id valore 1 data20200224 2 data20200225 3 data20200226 eliminare data e inserire un simbolo tra anno, mese e giorno espressione da usare: regexp_replace(\"valore\" ,'(data)(....)(..)(..)','\\\\2-\\\\3-\\\\4')` risultato: id valore 1 2020-02-24 2 2020-02-25 3 2020-02-26 Esempi:o 4 Tabella: id particella 1 00AXJ.su 2 000BBG.cot 3 0JJU.1234 Aggiornare il campo particella togliendo tutto quello dopo il punto (.): espressione da usare: regexp_replace( 'xxxxx.yyy','\\\\.(.+)$','')` risultato: id particella 1 00AXJ 2 000BBG 3 0JJU qui altri esempi","title":"regexp_replace"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#regexp_substr","text":"Restituisce la porzione di una stringa che soddisfa l'espressione regolare passata. Sintassi: regexp_substr( input_string , regex ) Argomenti: input_string la stringa in cui cercare regex L'espressione regolare da contro abbinare. I caratteri backslash devono essere \"double escaped\" ( es \"\\\\s\" per selezionare un carattere spazio). Esempi: regexp_substr('abc123','(\\\\d+)') \u2192 '123'","title":"regexp_substr"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#replace","text":"Restituisce una stringa con la stringa, array o mappa di stringhe passate sostituite.","title":"replace"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#variabile-stringa-array","text":"Restituisce una stringa con la stringa o array di stringa passate sostituite da una stringa o un array di stringhe. Sintassi: replace( string , before , after ) Argomenti: string la stringa in ingresso before la stringa o array di stringhe da sostituire after la stringa o l'array di stringe da usare come sostituzione Esempi: replace('QGIS SHOULD ROCK','SHOULD','DOES') \u2192 'QGIS DOES ROCK' replace('QGIS ABC',array('A','B','C'),array('X','Y','Z')) \u2192 'QGIS XYZ' replace('QGIS',array('Q','S'),'') \u2192 'GI'","title":"Variabile stringa &amp; array"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#variabile-mappa","text":"Restituisce una stringa con le chiavi della mappa fornite sostituite dai valori abbinati. Sono valutate per prime le chiavi della mappa pi\u00f9 lunghe. Sintassi: replace( string , map ) Argomenti: string la stringa in ingresso map la mappa che contiene le chiavi e i valori Esempi: replace('APP SHOULD ROCK',map('APP','QGIS','SHOULD','DOES')) \u2192 'QGIS DOES ROCK' replace('forty two',map('for','4','two','2','forty two','42')) \u2192 '42'","title":"Variabile mappa"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#right","text":"Restituisce una sottostringa che contiene gli n caratteri pi\u00f9 a destra della stringa. Sintassi: right( string , length ) Argomenti: string una stringa length intero. Il numero di caratteri da estrarre dalla parte destra della stringa. Esempi: right('Hello World',5) \u2192 'World'","title":"right"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#rpad","text":"Restituisce una stringa riempita a destra della larghezza specificata, utilizzando un carattere di riempimento. Se la larghezza della destinazione \u00e8 inferiore alla lunghezza della stringa, la stringa viene troncata. Sintassi: rpad( string , width , fill ) Argomenti: string stringa da riempire width lunghezza della nuova stringa fill carattere con il quale riempire lo spazio rimanente Esempi: rpad('Hello', 10, 'x') \u2192 'Helloxxxxx' rpad('Hello', 3, 'x') \u2192 'Hel'","title":"rpad"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#strpos","text":"Restituisce la prima posizione di corrispondenza di una sottostringa dentro in un'altra stringa o 0 se la sottostringa non viene trovata. Sintassi: strpos( haystack , needle ) Argomenti: haystack stringa in cui deve essere cercata needle stringa da cercare Esempi: strpos('HELLO WORLD','WORLD') \u2192 7 strpos('HELLO WORLD','GOODBYE') \u2192 0","title":"strpos"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#substr","text":"Restituisce una parte di una stringa. Sintassi: substr( string , start [, length ] ) [ ] indica componenti opzionali Argomenti: string l'intera stringa in entrata start intero rappresentante la posizione di partenza dalla quale estrarre; se il valore di partenza \u00e8 negativo, la stringa restituita inizier\u00e0 dalla fine della stringa meno il valore di partenza length intero rappresentante la lunghezza della stringa da estrarre; se la lunghezza \u00e8 negativa, la stringa restituita ometter\u00e0 la lunghezza data di caratteri dalla fine della stringa Esempi: substr('HELLO WORLD',3,5) \u2192 'LLO W' substr('HELLO WORLD',3,5) \u2192 'WORLD' substr('HELLO WORLD',-5) \u2192 'WORLD' substr('HELLO',3,-1) \u2192 'LL' substr('HELLO WORLD',-5,2) \u2192 'WO' substr('HELLO WORLD',-5,-1) \u2192 'WORL'","title":"substr"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#title","text":"Converte tutte le parole in \"title case\" (tutte le parole in minuscolo con la prima lettera maiuscola) Sintassi: title( string ) Argomenti: string stringa da convertire in minuscolo con la prima lettera maiuscola Esempi: title('hello WOrld') \u2192 'Hello World'","title":"title"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#to_string","text":"Converte un numero in stringa. Sintassi: to_string( number ) Argomenti: number Valore intero o reale. Il numero da convertire in stringa. Esempi: to_string(123.23) \u2192 '123.23'","title":"to_string"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#trim","text":"Rimuove tutti gli spazi vuoti (spazi, tabulazioni, etc.) all'inizio e alla fine di una stringa. Sintassi: trim( string ) Argomenti: string stringa da troncare Esempi: trim(' hello world ') \u2192 'hello world'","title":"trim"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#upper","text":"Converte una stringa in lettere maiuscole. Sintassi: upper( string ) Argomenti: string la stringa da convertire in maiuscolo Esempi: upper('hello WOrld') \u2192 'HELLO WORLD'","title":"upper"},{"location":"gr_funzioni/stringhe_di_testo/stringhe_di_testo_unico/#wordwrap","text":"Restituisce una stringa posta a capo ad un massimo/minimo numero di caratteri. Sintassi: wordwrap( string , wrap_length , delimiter_string ) Argomenti: string la stringa da spezzare wrap_length un intero. Se wrap_length \u00e8 positivo il numero rappresenta il numero massimo ideale di caratteri a cui spezzare; se negativo, il numero rappresenta il numero minimo di caratteri a cui spezzare. delimiter_string il delimitatore stringa per spezzare in una nuova linea (opzionale). Esempi: wordwrap('UNIVERSITY OF QGIS',13) \u2192 'UNIVERSITY OF QGIS' wordwrap('UNIVERSITY OF QGIS',-3) \u2192 'UNIVERSITY OF QGIS' Per legende con testo lungo, tipico delle legende per carte geologiche: wordwrap(@symbol_label ,50)","title":"wordwrap"},{"location":"gr_funzioni/variabili/_file_tipo/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/_file_tipo/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/_file_tipo/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/_file_tipo/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/_file_tipo/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/_file_tipo/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/algorithm_id/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/algorithm_id/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/algorithm_id/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/algorithm_id/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/algorithm_id/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/algorithm_id/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/animation_end_time/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/animation_end_time/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/animation_end_time/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/animation_end_time/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/animation_end_time/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/animation_end_time/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/animation_interval/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/animation_interval/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/animation_interval/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/animation_interval/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/animation_interval/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/animation_interval/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/animation_start_time/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/animation_start_time/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/animation_start_time/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/animation_start_time/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/animation_start_time/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/animation_start_time/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/atlas_feature/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_feature/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_feature/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/atlas_feature/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/atlas_feature/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/atlas_feature/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/atlas_featureid/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_featureid/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_featureid/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/atlas_featureid/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/atlas_featureid/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/atlas_featureid/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/atlas_featurenumber/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_featurenumber/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_featurenumber/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/atlas_featurenumber/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/atlas_featurenumber/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/atlas_featurenumber/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/atlas_filename/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_filename/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_filename/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/atlas_filename/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/atlas_filename/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/atlas_filename/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/atlas_geometry/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_geometry/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_geometry/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/atlas_geometry/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/atlas_geometry/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/atlas_geometry/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/atlas_layerid/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_layerid/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_layerid/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/atlas_layerid/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/atlas_layerid/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/atlas_layerid/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/atlas_layername/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_layername/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_layername/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/atlas_layername/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/atlas_layername/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/atlas_layername/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/atlas_pagename/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_pagename/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_pagename/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/atlas_pagename/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/atlas_pagename/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/atlas_pagename/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/atlas_totalfeatures/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_totalfeatures/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/atlas_totalfeatures/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/atlas_totalfeatures/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/atlas_totalfeatures/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/atlas_totalfeatures/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/canvas_cursor_point/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/canvas_cursor_point/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/canvas_cursor_point/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/canvas_cursor_point/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/canvas_cursor_point/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/canvas_cursor_point/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/cluster_color/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/cluster_color/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/cluster_color/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/cluster_color/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/cluster_color/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/cluster_color/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/cluster_size/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/cluster_size/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/cluster_size/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/cluster_size/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/cluster_size/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/cluster_size/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/current_feature/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/current_feature/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/current_feature/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/current_feature/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/current_feature/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/current_feature/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/current_geometry/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/current_geometry/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/current_geometry/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/current_geometry/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/current_geometry/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/current_geometry/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/current_parent_feature/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/current_parent_feature/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/current_parent_feature/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/current_parent_feature/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/current_parent_feature/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/current_parent_feature/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/current_parent_geometry/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/current_parent_geometry/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/current_parent_geometry/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/current_parent_geometry/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/current_parent_geometry/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/current_parent_geometry/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/form_mode/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/form_mode/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/form_mode/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/form_mode/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/form_mode/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/form_mode/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/frame_duration/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/frame_duration/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/frame_duration/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/frame_duration/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/frame_duration/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/frame_duration/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/frame_number/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/frame_number/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/frame_number/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/frame_number/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/frame_number/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/frame_number/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/frame_rate/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/frame_rate/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/frame_rate/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/frame_rate/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/frame_rate/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/frame_rate/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/fullextent_maxx/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/fullextent_maxx/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/fullextent_maxx/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/fullextent_maxx/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/fullextent_maxx/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/fullextent_maxx/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/fullextent_maxy/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/fullextent_maxy/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/fullextent_maxy/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/fullextent_maxy/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/fullextent_maxy/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/fullextent_maxy/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/fullextent_minx/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/fullextent_minx/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/fullextent_minx/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/fullextent_minx/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/fullextent_minx/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/fullextent_minx/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/fullextent_miny/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/fullextent_miny/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/fullextent_miny/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/fullextent_miny/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/fullextent_miny/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/fullextent_miny/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/geometry_part_count/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_part_count/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_part_count/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/geometry_part_count/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/geometry_part_count/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/geometry_part_count/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/geometry_part_num/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_part_num/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_part_num/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/geometry_part_num/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/geometry_part_num/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/geometry_part_num/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/geometry_point_count/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_point_count/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_point_count/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/geometry_point_count/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/geometry_point_count/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/geometry_point_count/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/geometry_point_num/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_point_num/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_point_num/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/geometry_point_num/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/geometry_point_num/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/geometry_point_num/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/geometry_ring_num/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_ring_num/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/geometry_ring_num/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/geometry_ring_num/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/geometry_ring_num/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/geometry_ring_num/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/grid_axis/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/grid_axis/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/grid_axis/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/grid_axis/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/grid_axis/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/grid_axis/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/grid_number/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/grid_number/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/grid_number/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/grid_number/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/grid_number/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/grid_number/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/item_id/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/item_id/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/item_id/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/item_id/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/item_id/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/item_id/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/item_uuid/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/item_uuid/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/item_uuid/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/item_uuid/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/item_uuid/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/item_uuid/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layer/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layer/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layer/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layer/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layer_crs/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer_crs/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer_crs/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layer_crs/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layer_crs/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layer_crs/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layer_id/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer_id/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer_id/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layer_id/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layer_id/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layer_id/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layer_ids/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer_ids/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer_ids/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layer_ids/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layer_ids/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layer_ids/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layer_name/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer_name/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layer_name/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layer_name/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layer_name/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layer_name/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layers/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layers/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layers/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layers/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layers/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layers/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layout_dpi/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_dpi/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_dpi/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layout_dpi/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layout_dpi/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layout_dpi/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layout_name/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_name/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_name/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layout_name/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layout_name/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layout_name/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layout_numpages/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_numpages/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_numpages/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layout_numpages/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layout_numpages/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layout_numpages/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layout_page/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_page/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_page/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layout_page/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layout_page/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layout_page/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layout_pageheight/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_pageheight/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_pageheight/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layout_pageheight/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layout_pageheight/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layout_pageheight/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layout_pageoffsets/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_pageoffsets/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_pageoffsets/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layout_pageoffsets/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layout_pageoffsets/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layout_pageoffsets/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/layout_pagewidth/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_pagewidth/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/layout_pagewidth/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/layout_pagewidth/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/layout_pagewidth/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/layout_pagewidth/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/legend_column_count/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_column_count/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_column_count/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/legend_column_count/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/legend_column_count/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/legend_column_count/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/legend_filter_by_map/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_filter_by_map/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_filter_by_map/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/legend_filter_by_map/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/legend_filter_by_map/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/legend_filter_by_map/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/legend_filter_out_atlas/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_filter_out_atlas/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_filter_out_atlas/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/legend_filter_out_atlas/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/legend_filter_out_atlas/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/legend_filter_out_atlas/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/legend_split_layers/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_split_layers/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_split_layers/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/legend_split_layers/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/legend_split_layers/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/legend_split_layers/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/legend_title/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_title/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_title/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/legend_title/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/legend_title/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/legend_title/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/legend_wrap_string/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_wrap_string/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/legend_wrap_string/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/legend_wrap_string/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/legend_wrap_string/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/legend_wrap_string/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_crs/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_crs/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_crs/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_crs/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_crs_acronym/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_acronym/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_acronym/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_crs_acronym/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_crs_acronym/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_crs_acronym/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_crs_definition/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_definition/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_definition/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_crs_definition/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_crs_definition/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_crs_definition/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_crs_description/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_description/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_description/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_crs_description/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_crs_description/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_crs_description/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_crs_ellipsoid/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_ellipsoid/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_ellipsoid/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_crs_ellipsoid/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_crs_ellipsoid/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_crs_ellipsoid/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_crs_proj4/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_proj4/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_proj4/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_crs_proj4/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_crs_proj4/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_crs_proj4/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_crs_projection/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_projection/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_projection/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_crs_projection/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_crs_projection/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_crs_projection/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_crs_wkt/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_wkt/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_crs_wkt/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_crs_wkt/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_crs_wkt/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_crs_wkt/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_end_time/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_end_time/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_end_time/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_end_time/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_end_time/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_end_time/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_extent/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_extent/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_extent/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_extent/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_extent/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_extent/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_extent_center/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_extent_center/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_extent_center/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_extent_center/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_extent_center/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_extent_center/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_extent_height/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_extent_height/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_extent_height/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_extent_height/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_extent_height/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_extent_height/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_extent_width/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_extent_width/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_extent_width/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_extent_width/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_extent_width/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_extent_width/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_id/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_id/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_id/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_id/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_id/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_id/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_interval/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_interval/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_interval/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_interval/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_interval/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_interval/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_layer_ids/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_layer_ids/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_layer_ids/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_layer_ids/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_layer_ids/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_layer_ids/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_layers/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_layers/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_layers/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_layers/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_layers/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_layers/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_rotation/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_rotation/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_rotation/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_rotation/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_rotation/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_rotation/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_scale/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_scale/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_scale/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_scale/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_scale/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_scale/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_start_time/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_start_time/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_start_time/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_start_time/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_start_time/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_start_time/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/map_units/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_units/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/map_units/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/map_units/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/map_units/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/map_units/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/model_folder/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/model_folder/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/model_folder/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/model_folder/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/model_folder/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/model_folder/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/model_group/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/model_group/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/model_group/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/model_group/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/model_group/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/model_group/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/model_name/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/model_name/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/model_name/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/model_name/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/model_name/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/model_name/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/model_path/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/model_path/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/model_path/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/model_path/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/model_path/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/model_path/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/notification_message/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/notification_message/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/notification_message/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/notification_message/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/notification_message/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/notification_message/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/parent/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/parent/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/parent/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/parent/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/parent/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/parent/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_abstract/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_abstract/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_abstract/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_abstract/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_abstract/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_abstract/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_area_units/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_area_units/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_area_units/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_area_units/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_area_units/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_area_units/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_author/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_author/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_author/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_author/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_author/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_author/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_basename/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_basename/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_basename/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_basename/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_basename/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_basename/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_creation_date/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_creation_date/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_creation_date/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_creation_date/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_creation_date/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_creation_date/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_crs/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_crs/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_crs/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_crs/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_crs_arconym/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_arconym/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_arconym/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_crs_arconym/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_crs_arconym/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_crs_arconym/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_crs_definition/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_definition/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_definition/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_crs_definition/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_crs_definition/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_crs_definition/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_crs_description/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_description/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_description/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_crs_description/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_crs_description/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_crs_description/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_crs_ellipsoid/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_ellipsoid/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_ellipsoid/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_crs_ellipsoid/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_crs_ellipsoid/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_crs_ellipsoid/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_crs_proj4/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_proj4/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_proj4/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_crs_proj4/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_crs_proj4/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_crs_proj4/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_crs_wkt/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_wkt/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_crs_wkt/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_crs_wkt/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_crs_wkt/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_crs_wkt/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_distance_units/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_distance_units/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_distance_units/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_distance_units/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_distance_units/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_distance_units/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_ellipsoid/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_ellipsoid/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_ellipsoid/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_ellipsoid/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_ellipsoid/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_ellipsoid/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_filename/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_filename/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_filename/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_filename/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_filename/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_filename/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_folder/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_folder/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_folder/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_folder/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_folder/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_folder/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_home/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_home/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_home/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_home/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_home/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_home/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_identifier/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_identifier/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_identifier/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_identifier/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_identifier/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_identifier/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_keywords/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_keywords/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_keywords/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_keywords/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_keywords/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_keywords/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_last_saved/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_last_saved/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_last_saved/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_last_saved/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_last_saved/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_last_saved/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_path/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_path/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_path/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_path/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_path/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_path/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_title/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_title/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_title/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_title/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_title/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_title/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/project_units/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_units/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/project_units/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/project_units/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/project_units/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/project_units/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/qgis_locale/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_locale/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_locale/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/qgis_locale/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/qgis_locale/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/qgis_locale/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/qgis_os_name/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_os_name/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_os_name/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/qgis_os_name/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/qgis_os_name/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/qgis_os_name/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/qgis_platform/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_platform/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_platform/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/qgis_platform/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/qgis_platform/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/qgis_platform/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/qgis_release_name/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_release_name/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_release_name/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/qgis_release_name/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/qgis_release_name/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/qgis_release_name/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/qgis_short_version/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_short_version/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_short_version/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/qgis_short_version/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/qgis_short_version/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/qgis_short_version/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/qgis_version/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_version/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_version/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/qgis_version/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/qgis_version/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/qgis_version/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/qgis_version_no/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_version_no/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/qgis_version_no/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/qgis_version_no/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/qgis_version_no/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/qgis_version_no/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/row_number/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/row_number/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/row_number/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/row_number/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/row_number/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/row_number/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/scale_value/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/scale_value/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/scale_value/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/scale_value/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/scale_value/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/scale_value/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/snapping_results/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/snapping_results/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/snapping_results/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/snapping_results/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/snapping_results/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/snapping_results/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/symbol_angle/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_angle/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_angle/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/symbol_angle/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/symbol_angle/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/symbol_angle/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/symbol_color/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_color/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_color/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/symbol_color/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/symbol_color/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/symbol_color/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/symbol_count/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_count/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_count/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/symbol_count/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/symbol_count/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/symbol_count/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/symbol_id/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_id/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_id/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/symbol_id/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/symbol_id/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/symbol_id/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/symbol_label/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_label/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_label/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/symbol_label/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/symbol_label/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/symbol_label/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/symbol_layer_count/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_layer_count/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_layer_count/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/symbol_layer_count/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/symbol_layer_count/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/symbol_layer_count/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/symbol_layer_index/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_layer_index/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_layer_index/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/symbol_layer_index/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/symbol_layer_index/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/symbol_layer_index/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/symbol_marker_column/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_marker_column/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_marker_column/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/symbol_marker_column/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/symbol_marker_column/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/symbol_marker_column/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/symbol_marker_row/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_marker_row/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/symbol_marker_row/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/symbol_marker_row/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/symbol_marker_row/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/symbol_marker_row/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/user_account_name/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/user_account_name/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/user_account_name/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/user_account_name/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/user_account_name/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/user_account_name/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/user_full_name/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/user_full_name/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/user_full_name/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/user_full_name/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/user_full_name/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/user_full_name/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/value/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/value/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/value/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/value/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/value/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/value/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/variabili/","text":"Variabili \u21b5 Funzionalit\u00e0 introdotta da Nyall Dawson nella QGIS 2.12 Lyon Questo gruppo contiene variabili dinamiche relative all'applicazione, al file di progetto e ad altre impostazioni. Significa che alcune funzioni potrebbero non essere disponibili in base al contesto: seleziona per espressione calcolatore di campi geometry generator propriet\u00e0 del layer compositore di stampe In QGIS , puoi utilizzare le variabili per memorizzare dati utili con valori ricorrenti (ad esempio il titolo del progetto o il nome completo dell\u2019utente) che possono essere utilizzati nelle espressioni. Le variabili possono essere definite a livello globale dell\u2019 applicazione , a livello di progetto , a livello di layer , a livello di composizione e a livello di elemento del compositore . Proprio come le regole CSS a cascata, le variabili possono essere sovrascritte, ad esempio una variabile a livello di progetto sovrascrive le variabili di livello globale di qualsiasi applicazione impostate con lo stesso nome. Puoi utilizzare queste variabili per creare stringhe di testo o altre espressioni personalizzate utilizzando il carattere '@' prima del nome della variabile. Elenco variabili \u21b5 Riguardano (aggiornato a QGIS 3.20 Odense): Variable Description algorithm_id The unique ID of an algorithm animation_end_time End of the animation\u2019s overall temporal time range (as a datetime value) animation_interval Duration of the animation\u2019s overall temporal time range (as an interval value) animation_start_time Start of the animation\u2019s overall temporal time range (as a datetime value) atlas_feature The current atlas feature (as feature object) atlas_featureid The current atlas feature ID atlas_featurenumber The current atlas feature number in the layout atlas_filename The current atlas file name atlas_geometry The current atlas feature geometry atlas_layerid The current atlas coverage layer ID atlas_layername The current atlas coverage layer name atlas_pagename The current atlas page name atlas_totalfeatures The total number of features in atlas canvas_cursor_point The last cursor position on the canvas in the project\u2019s geographical coordinates cluster_color The color of symbols within a cluster, or NULL if symbols have mixed colors cluster_size The number of symbols contained within a cluster current_feature The feature currently being edited in the attribute form or table row current_geometry The geometry of the feature currently being edited in the form or the table row current_parent_feature represents the feature currently being edited in the parent form. Only usable in an embedded form context. current_parent_geometry represents the geometry of the feature currently being edited in the parent form. Only usable in an embedded form context. form_mode What the form is used for, like AddFeatureMode, SingleEditMode, MultiEditMode, SearchMode, AggregateSearchMode or IdentifyMode as string. frame_duration Temporal duration of each animation frame (as an interval value) frame_number Current frame number during animation playback frame_rate Number of frames per second during animation playback fullextent_maxx Maximum x value from full canvas extent (including all layers) fullextent_maxy Maximum y value from full canvas extent (including all layers) fullextent_minx Minimum x value from full canvas extent (including all layers) fullextent_miny Minimum y value from full canvas extent (including all layers) geometry_part_count The number of parts in rendered feature\u2019s geometry geometry_part_num The current geometry part number for feature being rendered geometry_point_count The number of points in the rendered geometry\u2019s part geometry_point_num The current point number in the rendered geometry\u2019s part geometry_ring_num Current geometry ring number for feature being rendered (for polygon features only). The exterior ring has a value of 0. grid_axis The current grid annotation axis (eg, \u2018x\u2019 for longitude, \u2018y\u2019 for latitude) grid_number The current grid annotation value item_id The layout item user ID (not necessarily unique) item_uuid The layout item unique ID layer The current layer layer_crs The Coordinate Reference System Authority ID of the current layer layer_id The ID of current layer layer_ids The IDs of all the map layers in the current project as a list layer_name The name of current layer layers All the map layers in the current project as a list layout_dpi The composition resolution (DPI) layout_name The layout name layout_numpages The number of pages in the layout layout_page The page number of the current item in the layout layout_pageheight The active page height in the layout (in mm for standard paper sizes, or whatever unit was used for custom paper size) layout_pageoffsets Array of Y coordinate of the top of each page. Allows to dynamically position items on pages in a context where page sizes may change layout_pagewidth The active page width in the layout (in mm for standard paper sizes, or whatever unit was used for custom paper size) legend_column_count The number of columns in the legend legend_filter_by_map Indicates if the content of the legend is filtered by the map legend_filter_out_atlas Indicates if the atlas is filtered out of the legend legend_split_layers Indicates if layers can be split in the legend legend_title The title of the legend legend_wrap_string The character(s) used to wrap the legend text map_crs The Coordinate reference system of the current map map_crs_acronym The acronym of the Coordinate reference system of the current map map_crs_definition The full definition of the Coordinate reference system of the current map map_crs_description The name of the Coordinate reference system of the current map map_crs_ellipsoid The acronym of the ellipsoid of the Coordinate reference system of the current map map_crs_proj4 The Proj4 definition of the Coordinate reference system of the current map map_crs_projection The descriptive name of the projection method used by the Coordinate reference system of the map (e.g. \u2018Albers Equal Area\u2019) map_crs_wkt The WKT definition of the Coordinate reference system of the current map map_end_time The end of the map\u2019s temporal time range (as a datetime value) map_extent The geometry representing the current extent of the map map_extent_center The point feature at the center of the map map_extent_height The current height of the map map_extent_width The current width of the map map_id The ID of current map destination. This will be \u2018canvas\u2019 for canvas renders, and the item ID for layout map renders map_interval The duration of the map\u2019s temporal time range (as an interval value) map_layer_ids The list of map layer IDs visible in the map map_layers The list of map layers visible in the map map_rotation The current rotation of the map map_scale The current scale of the map map_start_time The start of the map\u2019s temporal time range (as a datetime value) map_units The units of map measurements model_path Full path (including file name) of current model (or project path if model is embedded in a project). model_folder Folder containing current model (or project folder if model is embedded in a project). model_name Name of current model model_group Group for current model notification_message Content of the notification message sent by the provider (available only for actions triggered by provider notifications). parent Refers to the current feature in the parent layer, providing access to its attributes and geometry when filtering an aggregate function project_abstract The project abstract, taken from project metadata project_area_units The area unit for the current project, used when calculating areas of geometries project_author The project author, taken from project metadata project_basename The basename of current project\u2019s filename (without path and extension) project_creation_date The project creation date, taken from project metadata project_crs The Coordinate reference system of the project project_crs_arconym The acronym of the Coordinate reference system of the project project_crs_definition The full definition of the Coordinate reference system of the project project_crs_description The description of the Coordinate reference system of the project project_crs_ellipsoid The ellipsoid of the Coordinate reference system of the project project_crs_proj4 The Proj4 representation of the Coordinate reference system of the project project_crs_wkt The WKT (well known text) representation of the coordinate reference system of the project project_distance_units The distance unit for the current project, used when calculating lengths of geometries and distances project_ellipsoid The name of the ellipsoid of the current project, used when calculating geodetic areas or lengths of geometries project_filename The filename of the current project project_folder The folder of the current project project_home The home path of the current project project_identifier The project identifier, taken from the project\u2019s metadata project_keywords The project keywords, taken from the project\u2019s metadata project_last_saved Date/time when project was last saved. project_path The full path (including file name) of the current project project_title The title of current project project_units The units of the project\u2019s CRS qgis_locale The current language of QGIS qgis_os_name The current Operating system name, eg \u2018windows\u2019, \u2018linux\u2019 or \u2018osx\u2019 qgis_platform The QGIS platform, eg \u2018desktop\u2019 or \u2018server\u2019 qgis_release_name The current QGIS release name qgis_short_version The current QGIS version short string qgis_version The current QGIS version string qgis_version_no The current QGIS version number row_number Stores the number of the current row snapping_results Gives access to snapping results while digitizing a feature (only available in add feature) scale_value The current scale bar distance value symbol_angle The angle of the symbol used to render the feature (valid for marker symbols only) symbol_color The color of the symbol used to render the feature symbol_count The number of features represented by the symbol (in the layout legend) symbol_id The Internal ID of the symbol (in the layout legend) symbol_label The label for the symbol (either a user defined label or the default autogenerated label - in the layout legend) symbol_layer_count Total number of symbol layers in the symbol symbol_layer_index Current symbol layer index symbol_marker_column Column number for marker (valid for point pattern fills only). symbol_marker_row Row number for marker (valid for point pattern fills only). user_account_name The current user\u2019s operating system account name user_full_name The current user\u2019s operating system user name value The current value with_variable Allows setting a variable for usage within an expression and avoid recalculating the same value repeatedly zoom_level Zoom level of the tile that is being rendered (derived from the current map scale). Normally in interval [0, 20]. Screenshot livelli \u21b5 Propriet\u00e0 Progetto Gruppo sul calcolatore di campi,Seleziona per espressione Generatore di geometria- stile Selezione per espressione Calcolatore di campi,Seleziona per espressione Compositore di stampe","title":"Variabili"},{"location":"gr_funzioni/variabili/variabili/#variabili","text":"Funzionalit\u00e0 introdotta da Nyall Dawson nella QGIS 2.12 Lyon Questo gruppo contiene variabili dinamiche relative all'applicazione, al file di progetto e ad altre impostazioni. Significa che alcune funzioni potrebbero non essere disponibili in base al contesto: seleziona per espressione calcolatore di campi geometry generator propriet\u00e0 del layer compositore di stampe In QGIS , puoi utilizzare le variabili per memorizzare dati utili con valori ricorrenti (ad esempio il titolo del progetto o il nome completo dell\u2019utente) che possono essere utilizzati nelle espressioni. Le variabili possono essere definite a livello globale dell\u2019 applicazione , a livello di progetto , a livello di layer , a livello di composizione e a livello di elemento del compositore . Proprio come le regole CSS a cascata, le variabili possono essere sovrascritte, ad esempio una variabile a livello di progetto sovrascrive le variabili di livello globale di qualsiasi applicazione impostate con lo stesso nome. Puoi utilizzare queste variabili per creare stringhe di testo o altre espressioni personalizzate utilizzando il carattere '@' prima del nome della variabile.","title":"Variabili"},{"location":"gr_funzioni/variabili/variabili/#elenco-variabili","text":"Riguardano (aggiornato a QGIS 3.20 Odense): Variable Description algorithm_id The unique ID of an algorithm animation_end_time End of the animation\u2019s overall temporal time range (as a datetime value) animation_interval Duration of the animation\u2019s overall temporal time range (as an interval value) animation_start_time Start of the animation\u2019s overall temporal time range (as a datetime value) atlas_feature The current atlas feature (as feature object) atlas_featureid The current atlas feature ID atlas_featurenumber The current atlas feature number in the layout atlas_filename The current atlas file name atlas_geometry The current atlas feature geometry atlas_layerid The current atlas coverage layer ID atlas_layername The current atlas coverage layer name atlas_pagename The current atlas page name atlas_totalfeatures The total number of features in atlas canvas_cursor_point The last cursor position on the canvas in the project\u2019s geographical coordinates cluster_color The color of symbols within a cluster, or NULL if symbols have mixed colors cluster_size The number of symbols contained within a cluster current_feature The feature currently being edited in the attribute form or table row current_geometry The geometry of the feature currently being edited in the form or the table row current_parent_feature represents the feature currently being edited in the parent form. Only usable in an embedded form context. current_parent_geometry represents the geometry of the feature currently being edited in the parent form. Only usable in an embedded form context. form_mode What the form is used for, like AddFeatureMode, SingleEditMode, MultiEditMode, SearchMode, AggregateSearchMode or IdentifyMode as string. frame_duration Temporal duration of each animation frame (as an interval value) frame_number Current frame number during animation playback frame_rate Number of frames per second during animation playback fullextent_maxx Maximum x value from full canvas extent (including all layers) fullextent_maxy Maximum y value from full canvas extent (including all layers) fullextent_minx Minimum x value from full canvas extent (including all layers) fullextent_miny Minimum y value from full canvas extent (including all layers) geometry_part_count The number of parts in rendered feature\u2019s geometry geometry_part_num The current geometry part number for feature being rendered geometry_point_count The number of points in the rendered geometry\u2019s part geometry_point_num The current point number in the rendered geometry\u2019s part geometry_ring_num Current geometry ring number for feature being rendered (for polygon features only). The exterior ring has a value of 0. grid_axis The current grid annotation axis (eg, \u2018x\u2019 for longitude, \u2018y\u2019 for latitude) grid_number The current grid annotation value item_id The layout item user ID (not necessarily unique) item_uuid The layout item unique ID layer The current layer layer_crs The Coordinate Reference System Authority ID of the current layer layer_id The ID of current layer layer_ids The IDs of all the map layers in the current project as a list layer_name The name of current layer layers All the map layers in the current project as a list layout_dpi The composition resolution (DPI) layout_name The layout name layout_numpages The number of pages in the layout layout_page The page number of the current item in the layout layout_pageheight The active page height in the layout (in mm for standard paper sizes, or whatever unit was used for custom paper size) layout_pageoffsets Array of Y coordinate of the top of each page. Allows to dynamically position items on pages in a context where page sizes may change layout_pagewidth The active page width in the layout (in mm for standard paper sizes, or whatever unit was used for custom paper size) legend_column_count The number of columns in the legend legend_filter_by_map Indicates if the content of the legend is filtered by the map legend_filter_out_atlas Indicates if the atlas is filtered out of the legend legend_split_layers Indicates if layers can be split in the legend legend_title The title of the legend legend_wrap_string The character(s) used to wrap the legend text map_crs The Coordinate reference system of the current map map_crs_acronym The acronym of the Coordinate reference system of the current map map_crs_definition The full definition of the Coordinate reference system of the current map map_crs_description The name of the Coordinate reference system of the current map map_crs_ellipsoid The acronym of the ellipsoid of the Coordinate reference system of the current map map_crs_proj4 The Proj4 definition of the Coordinate reference system of the current map map_crs_projection The descriptive name of the projection method used by the Coordinate reference system of the map (e.g. \u2018Albers Equal Area\u2019) map_crs_wkt The WKT definition of the Coordinate reference system of the current map map_end_time The end of the map\u2019s temporal time range (as a datetime value) map_extent The geometry representing the current extent of the map map_extent_center The point feature at the center of the map map_extent_height The current height of the map map_extent_width The current width of the map map_id The ID of current map destination. This will be \u2018canvas\u2019 for canvas renders, and the item ID for layout map renders map_interval The duration of the map\u2019s temporal time range (as an interval value) map_layer_ids The list of map layer IDs visible in the map map_layers The list of map layers visible in the map map_rotation The current rotation of the map map_scale The current scale of the map map_start_time The start of the map\u2019s temporal time range (as a datetime value) map_units The units of map measurements model_path Full path (including file name) of current model (or project path if model is embedded in a project). model_folder Folder containing current model (or project folder if model is embedded in a project). model_name Name of current model model_group Group for current model notification_message Content of the notification message sent by the provider (available only for actions triggered by provider notifications). parent Refers to the current feature in the parent layer, providing access to its attributes and geometry when filtering an aggregate function project_abstract The project abstract, taken from project metadata project_area_units The area unit for the current project, used when calculating areas of geometries project_author The project author, taken from project metadata project_basename The basename of current project\u2019s filename (without path and extension) project_creation_date The project creation date, taken from project metadata project_crs The Coordinate reference system of the project project_crs_arconym The acronym of the Coordinate reference system of the project project_crs_definition The full definition of the Coordinate reference system of the project project_crs_description The description of the Coordinate reference system of the project project_crs_ellipsoid The ellipsoid of the Coordinate reference system of the project project_crs_proj4 The Proj4 representation of the Coordinate reference system of the project project_crs_wkt The WKT (well known text) representation of the coordinate reference system of the project project_distance_units The distance unit for the current project, used when calculating lengths of geometries and distances project_ellipsoid The name of the ellipsoid of the current project, used when calculating geodetic areas or lengths of geometries project_filename The filename of the current project project_folder The folder of the current project project_home The home path of the current project project_identifier The project identifier, taken from the project\u2019s metadata project_keywords The project keywords, taken from the project\u2019s metadata project_last_saved Date/time when project was last saved. project_path The full path (including file name) of the current project project_title The title of current project project_units The units of the project\u2019s CRS qgis_locale The current language of QGIS qgis_os_name The current Operating system name, eg \u2018windows\u2019, \u2018linux\u2019 or \u2018osx\u2019 qgis_platform The QGIS platform, eg \u2018desktop\u2019 or \u2018server\u2019 qgis_release_name The current QGIS release name qgis_short_version The current QGIS version short string qgis_version The current QGIS version string qgis_version_no The current QGIS version number row_number Stores the number of the current row snapping_results Gives access to snapping results while digitizing a feature (only available in add feature) scale_value The current scale bar distance value symbol_angle The angle of the symbol used to render the feature (valid for marker symbols only) symbol_color The color of the symbol used to render the feature symbol_count The number of features represented by the symbol (in the layout legend) symbol_id The Internal ID of the symbol (in the layout legend) symbol_label The label for the symbol (either a user defined label or the default autogenerated label - in the layout legend) symbol_layer_count Total number of symbol layers in the symbol symbol_layer_index Current symbol layer index symbol_marker_column Column number for marker (valid for point pattern fills only). symbol_marker_row Row number for marker (valid for point pattern fills only). user_account_name The current user\u2019s operating system account name user_full_name The current user\u2019s operating system user name value The current value with_variable Allows setting a variable for usage within an expression and avoid recalculating the same value repeatedly zoom_level Zoom level of the tile that is being rendered (derived from the current map scale). Normally in interval [0, 20].","title":"Elenco variabili"},{"location":"gr_funzioni/variabili/variabili/#screenshot-livelli","text":"Propriet\u00e0 Progetto Gruppo sul calcolatore di campi,Seleziona per espressione Generatore di geometria- stile Selezione per espressione Calcolatore di campi,Seleziona per espressione Compositore di stampe","title":"Screenshot livelli"},{"location":"gr_funzioni/variabili/with_variable/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/with_variable/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/with_variable/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/with_variable/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/with_variable/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/with_variable/#osservazioni","text":"--","title":"osservazioni"},{"location":"gr_funzioni/variabili/zoom_level/","text":"nome_variabile \u21b5 -- Sintassi \u21b5 -- Esempi \u21b5 bla bla nota bene \u21b5 -- osservazioni \u21b5 --","title":"nome_variabile"},{"location":"gr_funzioni/variabili/zoom_level/#nome_variabile","text":"--","title":"nome_variabile"},{"location":"gr_funzioni/variabili/zoom_level/#sintassi","text":"--","title":"Sintassi"},{"location":"gr_funzioni/variabili/zoom_level/#esempi","text":"bla bla","title":"Esempi"},{"location":"gr_funzioni/variabili/zoom_level/#nota-bene","text":"--","title":"nota bene"},{"location":"gr_funzioni/variabili/zoom_level/#osservazioni","text":"--","title":"osservazioni"},{"location":"img/","text":"Cartella Immagini \u21b5 Questo cartella contiene gli screenshot, suddivisi per argomento, utilizzati nei vari gruppi di funzioni e/o espressioni.","title":"Index"},{"location":"img/#cartella-immagini","text":"Questo cartella contiene gli screenshot, suddivisi per argomento, utilizzati nei vari gruppi di funzioni e/o espressioni.","title":"Cartella Immagini"},{"location":"release/intro_novita/","text":"Novit\u00e0 \u21b5 Abstract In questa sezione verranno documentate le principali novit\u00e0 implementate nel calcolatore di campi e tabella degli attributi , come per esempio nuove funzioni o nuove funzionalit\u00e0 legate alle tabelle. Release \u21b5 Release Data changelog nuove funzioni numero QGIS 3.28 Firenze 21/10/2022 make_valid , geometries_to_array , concave_hull , shared_paths , @feature , @id e @geometry +7 QGIS 3.26 Buones Aires 18/06/2022 BETWEEN , NOT BETWEEN +2 QGIS 3.24 Tisler 18/02/2022 scale , triangular_wave , square_wave , wave , triangular_wave_randomized , square_wave_randomized , wave_randomized , overlay_nearest+, apply_dash_pattern , force_polygon_cw , force_polygon_ccw , densify_by_count , densify_by_distance , roundness , overlay_intersects+, geometry_n+, geometry_type , get_feature+, represent_attributes , map_prefix_keys , url_encode , rotate +17 QGIS 3.22 Bia\u0142owie\u017ca 22/10/2021 exif, exif_geotag, sinuosity, $z, affine_transform, straight_distance_2d, vertex_as_point, vertex_z +8 QGIS 3.20 Odense 21/06/2021 length3D, array_count, array_priorize, array_replace, mime_type +5 QGIS 3.18 Z\u00fcrich 22/02/2021 UUID, array_get, array_min, arra_max, array_majority, array_sum, array_mean, array_median, map_credits, @layer_crs +10 QGIS 3.16 Hannover 23/10/2020 main_angle, to_decimal, overlay_* +10 QGIS 3.14 Pi 19/06/2020 ascii, is_multipart, min_z, max_z, min_m, max_m, close_line, make_date, make_time, make_datetime, make_interval +11 QGIS 3.12 Bucure\u0219ti 21/02/2020 rand, randf, is_valid, is_empty, is_empty_or_null, rotate, datetime_from_epoch, format_date, hash, md5, sha256, geom_to_wkb, geom_from_wkb +13 QGIS 3.10 A Coru\u00f1a 25/10/2019 attributes, to_date, to_datetime, to_time, collect_geometries, make_line +6 QGIS 3.8 Zanzibar 21/06/2019 concatenate_unique, array_all, ecc... QGIS 3.6 Noosa 22/02/2019 force_rhr, make_rectangle_3points, make_square, decode_uri, nullif, try, from_jsom, to_json, sqlite_fecth_and_increment ecc... QGIS 3.4 Madeira 26/10/2018 raster_value(), line_substring, array_foreach, generate_series, array_filter, to_dm, to_dms, hstore_to_map, json_to_map, map_to_hstore, map_to_json, ecc... QGIS 3.2 Bonn 22/06/2018 nuove variabili, ecc... QGIS 3.0 Girona 23/02/2018 vedi changelog Grafico \u21b5","title":"Quadro sinottico"},{"location":"release/intro_novita/#novita","text":"Abstract In questa sezione verranno documentate le principali novit\u00e0 implementate nel calcolatore di campi e tabella degli attributi , come per esempio nuove funzioni o nuove funzionalit\u00e0 legate alle tabelle.","title":"Novit\u00e0"},{"location":"release/intro_novita/#release","text":"Release Data changelog nuove funzioni numero QGIS 3.28 Firenze 21/10/2022 make_valid , geometries_to_array , concave_hull , shared_paths , @feature , @id e @geometry +7 QGIS 3.26 Buones Aires 18/06/2022 BETWEEN , NOT BETWEEN +2 QGIS 3.24 Tisler 18/02/2022 scale , triangular_wave , square_wave , wave , triangular_wave_randomized , square_wave_randomized , wave_randomized , overlay_nearest+, apply_dash_pattern , force_polygon_cw , force_polygon_ccw , densify_by_count , densify_by_distance , roundness , overlay_intersects+, geometry_n+, geometry_type , get_feature+, represent_attributes , map_prefix_keys , url_encode , rotate +17 QGIS 3.22 Bia\u0142owie\u017ca 22/10/2021 exif, exif_geotag, sinuosity, $z, affine_transform, straight_distance_2d, vertex_as_point, vertex_z +8 QGIS 3.20 Odense 21/06/2021 length3D, array_count, array_priorize, array_replace, mime_type +5 QGIS 3.18 Z\u00fcrich 22/02/2021 UUID, array_get, array_min, arra_max, array_majority, array_sum, array_mean, array_median, map_credits, @layer_crs +10 QGIS 3.16 Hannover 23/10/2020 main_angle, to_decimal, overlay_* +10 QGIS 3.14 Pi 19/06/2020 ascii, is_multipart, min_z, max_z, min_m, max_m, close_line, make_date, make_time, make_datetime, make_interval +11 QGIS 3.12 Bucure\u0219ti 21/02/2020 rand, randf, is_valid, is_empty, is_empty_or_null, rotate, datetime_from_epoch, format_date, hash, md5, sha256, geom_to_wkb, geom_from_wkb +13 QGIS 3.10 A Coru\u00f1a 25/10/2019 attributes, to_date, to_datetime, to_time, collect_geometries, make_line +6 QGIS 3.8 Zanzibar 21/06/2019 concatenate_unique, array_all, ecc... QGIS 3.6 Noosa 22/02/2019 force_rhr, make_rectangle_3points, make_square, decode_uri, nullif, try, from_jsom, to_json, sqlite_fecth_and_increment ecc... QGIS 3.4 Madeira 26/10/2018 raster_value(), line_substring, array_foreach, generate_series, array_filter, to_dm, to_dms, hstore_to_map, json_to_map, map_to_hstore, map_to_json, ecc... QGIS 3.2 Bonn 22/06/2018 nuove variabili, ecc... QGIS 3.0 Girona 23/02/2018 vedi changelog","title":"Release"},{"location":"release/intro_novita/#grafico","text":"","title":"Grafico"},{"location":"release/novita_30/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.0 Girona \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog30/index.html Changelog \u21b5 Expressions","title":"QGIS 3.0  | 23/02/2018"},{"location":"release/novita_30/#novita-rilevanti-introdotte-nella-30-girona","text":"https://www.qgis.org/it/site/forusers/visualchangelog30/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.0 Girona"},{"location":"release/novita_30/#changelog","text":"Expressions","title":"Changelog"},{"location":"release/novita_310/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.10 A Coru\u00f1a \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog310/index.html Nuove funzioni \u21b5 Gruppo Record e Attributi \u21b5 https://github.com/qgis/QGIS/pull/30440 Aggiorna campi \u21b5 [https://github.com/qgis/QGIS/pull/31065 Gruppo Data \u21b5 https://github.com/qgis/QGIS/pull/31231 Memorizza Filtro tabella attributi \u21b5 https://github.com/qgis/QGIS/pull/31349 Gruppo Geometria \u21b5 make_line , ora accetta anche array collect_geometries https://github.com/qgis/QGIS/pull/31480","title":"QGIS 3.10 | 25/10/2019"},{"location":"release/novita_310/#novita-rilevanti-introdotte-nella-310-a-coruna","text":"https://www.qgis.org/it/site/forusers/visualchangelog310/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.10 A Coru\u00f1a"},{"location":"release/novita_310/#nuove-funzioni","text":"","title":"Nuove funzioni"},{"location":"release/novita_310/#gruppo-record-e-attributi","text":"https://github.com/qgis/QGIS/pull/30440","title":"Gruppo Record e Attributi"},{"location":"release/novita_310/#aggiorna-campi","text":"[https://github.com/qgis/QGIS/pull/31065","title":"Aggiorna campi"},{"location":"release/novita_310/#gruppo-data","text":"https://github.com/qgis/QGIS/pull/31231","title":"Gruppo Data"},{"location":"release/novita_310/#memorizza-filtro-tabella-attributi","text":"https://github.com/qgis/QGIS/pull/31349","title":"Memorizza Filtro tabella attributi"},{"location":"release/novita_310/#gruppo-geometria","text":"make_line , ora accetta anche array collect_geometries https://github.com/qgis/QGIS/pull/31480","title":"Gruppo Geometria"},{"location":"release/novita_312/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.12 Bucaresti \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog312/index.html Nuove funzioni \u21b5 https://github.com/qgis/QGIS/pull/32630 (chiuso) Gruppo Matematica \u21b5 rand randf qui PR: https://github.com/qgis/QGIS/pull/33204 Gruppo Geometria \u21b5 is_valid qui PR: https://github.com/qgis/QGIS/pull/32900 geom_from_wkb geom_to_wkb qui PR: https://github.com/qgis/QGIS/pull/32561 is_empty is_empty_or_null qui PR: https://github.com/qgis/QGIS/pull/33333 rotate qui PR: https://github.com/qgis/QGIS/pull/33125 Gruppo Data e ora \u21b5 datetime_from_epoch qui PR: https://github.com/qgis/QGIS/pull/32551 format_date qui PR: https://github.com/qgis/QGIS/pull/32908 Gruppo Conversioni \u21b5 hash (value, method) md5 (value) sha256 (value) qui PR: https://github.com/qgis/QGIS/pull/31726 tag espressioni \u21b5 PR: https://github.com/qgis/QGIS/pull/33197 Tabella attributi \u21b5 PR: https://github.com/qgis/QGIS/pull/33322 -- chiusa Interfaccia \u21b5 List referenced layer values qui PR: https://github.com/qgis/QGIS/pull/33436 Stored expressions https://github.com/qgis/QGIS/pull/33437 -- IDEA MIA!!! Organize Columns https://github.com/qgis/QGIS/pull/33918 -- ANCORA APERTA!!!","title":"QGIS 3.12 | 21/02/2020"},{"location":"release/novita_312/#novita-rilevanti-introdotte-nella-312-bucaresti","text":"https://www.qgis.org/it/site/forusers/visualchangelog312/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.12 Bucaresti"},{"location":"release/novita_312/#nuove-funzioni","text":"https://github.com/qgis/QGIS/pull/32630 (chiuso)","title":"Nuove funzioni"},{"location":"release/novita_312/#gruppo-matematica","text":"rand randf qui PR: https://github.com/qgis/QGIS/pull/33204","title":"Gruppo Matematica"},{"location":"release/novita_312/#gruppo-geometria","text":"is_valid qui PR: https://github.com/qgis/QGIS/pull/32900 geom_from_wkb geom_to_wkb qui PR: https://github.com/qgis/QGIS/pull/32561 is_empty is_empty_or_null qui PR: https://github.com/qgis/QGIS/pull/33333 rotate qui PR: https://github.com/qgis/QGIS/pull/33125","title":"Gruppo Geometria"},{"location":"release/novita_312/#gruppo-data-e-ora","text":"datetime_from_epoch qui PR: https://github.com/qgis/QGIS/pull/32551 format_date qui PR: https://github.com/qgis/QGIS/pull/32908","title":"Gruppo Data e ora"},{"location":"release/novita_312/#gruppo-conversioni","text":"hash (value, method) md5 (value) sha256 (value) qui PR: https://github.com/qgis/QGIS/pull/31726","title":"Gruppo Conversioni"},{"location":"release/novita_312/#tag-espressioni","text":"PR: https://github.com/qgis/QGIS/pull/33197","title":"tag espressioni"},{"location":"release/novita_312/#tabella-attributi","text":"PR: https://github.com/qgis/QGIS/pull/33322 -- chiusa","title":"Tabella attributi"},{"location":"release/novita_312/#interfaccia","text":"List referenced layer values qui PR: https://github.com/qgis/QGIS/pull/33436 Stored expressions https://github.com/qgis/QGIS/pull/33437 -- IDEA MIA!!! Organize Columns https://github.com/qgis/QGIS/pull/33918 -- ANCORA APERTA!!!","title":"Interfaccia"},{"location":"release/novita_314/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.14 Pi \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog314/index.html Nuove funzioni \u21b5 Ascii : https://github.com/qgis/QGIS/pull/35839 is_multipart : https://github.com/qgis/QGIS/pull/35889 min/max z : https://github.com/qgis/QGIS/pull/35928 min/max m : https://github.com/qgis/QGIS/pull/35928 close_line : https://github.com/qgis/QGIS/pull/36069 make_date : https://github.com/qgis/QGIS/pull/36245 make_time : https://github.com/qgis/QGIS/pull/36245 make_datetime : https://github.com/qgis/QGIS/pull/36245 make_interval : https://github.com/qgis/QGIS/pull/36303 Fix \u21b5 geom_from_gml: https://github.com/qgis/QGIS/pull/34931 GUI/UI/Forms \u21b5 form: https://github.com/qgis/QGIS/pull/34827 current_feature; current_geometry; current_parent_feature; current_parent_geometry; currente_parent_value; current_value; Edit,Import, export: https://github.com/qgis/QGIS/pull/34997 sorting: https://github.com/qgis/QGIS/pull/36199 widget tabs: https://github.com/qgis/QGIS/pull/35933 Organize Columns: https://github.com/qgis/QGIS/pull/33918 Allinea All Unique: https://github.com/qgis/QGIS/pull/34930 preview: https://github.com/qgis/QGIS/pull/36089 Variabili \u21b5 @frame_ : https://github.com/qgis/QGIS/pull/36300 @frame_number : numero del frame corrente; @frame_rate : frame al secondo; @frame_duration : lunghezza di frame; is_editable: https://github.com/qgis/QGIS/pull/35415 @layer,@layer_ids: https://github.com/qgis/QGIS/pull/35208 @layers @layer_ids expressions: https://github.com/qgis/QGIS/pull/34898 @map_start_time: Start of the map's temporal time range (as a datetime value) @map_end_time: End of the map's temporal time range (as a datetime value) @map_interval: Duration of the map's temporal time range (as an interval value) animation : https://github.com/qgis/QGIS/pull/36324 @animation_start_time; @animation_end_time Miglioramenti funzioni \u21b5 https://github.com/qgis/QGIS/pull/36988","title":"QGIS 3.14 | 19/06/2020"},{"location":"release/novita_314/#novita-rilevanti-introdotte-nella-314-pi","text":"https://www.qgis.org/it/site/forusers/visualchangelog314/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.14 Pi"},{"location":"release/novita_314/#nuove-funzioni","text":"Ascii : https://github.com/qgis/QGIS/pull/35839 is_multipart : https://github.com/qgis/QGIS/pull/35889 min/max z : https://github.com/qgis/QGIS/pull/35928 min/max m : https://github.com/qgis/QGIS/pull/35928 close_line : https://github.com/qgis/QGIS/pull/36069 make_date : https://github.com/qgis/QGIS/pull/36245 make_time : https://github.com/qgis/QGIS/pull/36245 make_datetime : https://github.com/qgis/QGIS/pull/36245 make_interval : https://github.com/qgis/QGIS/pull/36303","title":"Nuove funzioni"},{"location":"release/novita_314/#fix","text":"geom_from_gml: https://github.com/qgis/QGIS/pull/34931","title":"Fix"},{"location":"release/novita_314/#guiuiforms","text":"form: https://github.com/qgis/QGIS/pull/34827 current_feature; current_geometry; current_parent_feature; current_parent_geometry; currente_parent_value; current_value; Edit,Import, export: https://github.com/qgis/QGIS/pull/34997 sorting: https://github.com/qgis/QGIS/pull/36199 widget tabs: https://github.com/qgis/QGIS/pull/35933 Organize Columns: https://github.com/qgis/QGIS/pull/33918 Allinea All Unique: https://github.com/qgis/QGIS/pull/34930 preview: https://github.com/qgis/QGIS/pull/36089","title":"GUI/UI/Forms"},{"location":"release/novita_314/#variabili","text":"@frame_ : https://github.com/qgis/QGIS/pull/36300 @frame_number : numero del frame corrente; @frame_rate : frame al secondo; @frame_duration : lunghezza di frame; is_editable: https://github.com/qgis/QGIS/pull/35415 @layer,@layer_ids: https://github.com/qgis/QGIS/pull/35208 @layers @layer_ids expressions: https://github.com/qgis/QGIS/pull/34898 @map_start_time: Start of the map's temporal time range (as a datetime value) @map_end_time: End of the map's temporal time range (as a datetime value) @map_interval: Duration of the map's temporal time range (as an interval value) animation : https://github.com/qgis/QGIS/pull/36324 @animation_start_time; @animation_end_time","title":"Variabili"},{"location":"release/novita_314/#miglioramenti-funzioni","text":"https://github.com/qgis/QGIS/pull/36988","title":"Miglioramenti funzioni"},{"location":"release/novita_316/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.16 Hannover \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog316/index.html Miglioramenti help in linea \u21b5 help in linea: https://github.com/qgis/QGIS/pull/37532 help in linea : https://github.com/qgis/QGIS/pull/37771 Nuove funzioni \u21b5 main_angle : https://github.com/qgis/QGIS/pull/37798 to_decimal() : https://github.com/qgis/QGIS/pull/38025 refFunction: https://github.com/qgis/QGIS/pull/38405 overlay_intersects(layer[,expression][,filter][,limit][,cache]) overlay_contains(layer[,expression][,filter][,limit][,cache]) overlay_crosses(layer[,expression][,filter][,limit][,cache]) overlay_equals(layer[,expression][,filter][,limit][,cache]) overlay_touches(layer[,expression][,filter][,limit][,cache]) overlay_disjoint(layer[,expression][,filter][,limit][,cache]) overlay_within(layer[,expression][,filter][,limit][,cache]) overlay_nearest(layer[,expression][,filter][,limit][,max_distance][,cache]) rename: https://github.com/qgis/QGIS/pull/39174","title":"QGIS 3.16 | 23/10/2020"},{"location":"release/novita_316/#novita-rilevanti-introdotte-nella-316-hannover","text":"https://www.qgis.org/it/site/forusers/visualchangelog316/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.16 Hannover"},{"location":"release/novita_316/#miglioramenti-help-in-linea","text":"help in linea: https://github.com/qgis/QGIS/pull/37532 help in linea : https://github.com/qgis/QGIS/pull/37771","title":"Miglioramenti help in linea"},{"location":"release/novita_316/#nuove-funzioni","text":"main_angle : https://github.com/qgis/QGIS/pull/37798 to_decimal() : https://github.com/qgis/QGIS/pull/38025 refFunction: https://github.com/qgis/QGIS/pull/38405 overlay_intersects(layer[,expression][,filter][,limit][,cache]) overlay_contains(layer[,expression][,filter][,limit][,cache]) overlay_crosses(layer[,expression][,filter][,limit][,cache]) overlay_equals(layer[,expression][,filter][,limit][,cache]) overlay_touches(layer[,expression][,filter][,limit][,cache]) overlay_disjoint(layer[,expression][,filter][,limit][,cache]) overlay_within(layer[,expression][,filter][,limit][,cache]) overlay_nearest(layer[,expression][,filter][,limit][,max_distance][,cache]) rename: https://github.com/qgis/QGIS/pull/39174","title":"Nuove funzioni"},{"location":"release/novita_318/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.18 Z\u00fcrich \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog318/index.html Espressioni \u21b5 UUID https://github.com/qgis/QGIS/pull/39414 Array_get (supporta indici negativi) https://github.com/qgis/QGIS/pull/39921 array_min/max , array_majority , array_sum/mean/median https://github.com/qgis/QGIS/pull/40364 map_credits https://github.com/qgis/QGIS/pull/40919 variabile @layer_crs GUI/UX \u21b5 Gruppo recente singola linea https://github.com/qgis/QGIS/pull/41545","title":"QGIS 3.18 | 22/02/2021"},{"location":"release/novita_318/#novita-rilevanti-introdotte-nella-318-zurich","text":"https://www.qgis.org/it/site/forusers/visualchangelog318/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.18 Z\u00fcrich"},{"location":"release/novita_318/#espressioni","text":"UUID https://github.com/qgis/QGIS/pull/39414 Array_get (supporta indici negativi) https://github.com/qgis/QGIS/pull/39921 array_min/max , array_majority , array_sum/mean/median https://github.com/qgis/QGIS/pull/40364 map_credits https://github.com/qgis/QGIS/pull/40919 variabile @layer_crs","title":"Espressioni"},{"location":"release/novita_318/#guiux","text":"Gruppo recente singola linea https://github.com/qgis/QGIS/pull/41545","title":"GUI/UX"},{"location":"release/novita_32/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.2 Bonn \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog32/index.html Generatore di espressioni pi\u00f9 utile. \u21b5 Il generatore di espressioni ora semplifica la creazione di espressioni in QGIS! Il builder ora mostra la descrizione per i valori definiti dai dati, compreso l'intervallo di valori attesi dall'espressione Ctrl + clic su un nome di funzione nell'espressione corrente aprir\u00e0 automaticamente l'aiuto per quella funzione Ora mostra gli indicatori per parti di espressioni con errori Mostra un elenco completo dei messaggi di errore ottenuti dall'analisi dell'espressione Form drill-down (a cascata) WIDGET Value Relation (Relazione valore): \u21b5 consente l'implementazione di filtri complessi e dinamici all'interno di moduli di attributo QGIS. La funzionalit\u00e0 pu\u00f2 essere utilizzata per implementare moduli \"drill-down\" all'interno di QGIS, in cui i valori disponibili in un campo dipendono dai valori di altri campi: Questa funzionalit\u00e0 consente agli utenti di creare espressioni \"value-relation\" basate sul valore corrente di un altro campo nella stessa form. Quando l'utente modifica il valore di un campo, le scelte disponibili in tutti i campi correlati vengono filtrate in modo che corrispondano al nuovo valore, consentendo una strategia di filtraggio gerarchica (drill down o cascading) all'interno di un modulo o nella tabella degli attributi. qui un video di Alessandro Pasotti Le espressioni implementate per realizzare quanto descritto sopra sono tre, una funzione e due variabili: current_value() ; Restituisce il valore corrente non salvato di un campo nel modulo o riga della tabella attualmente in fase di modifica. Questo sar\u00e0 diverso dai valori attuali dell'attributo della funzione per le funzioni che sono attualmente in fase di modifica o che non sono ancora state aggiunte a un livello. currente_feature ; Rappresenta la funzione attualmente in fase di modifica nel modulo o nella riga della tabella. Pu\u00f2 essere utilizzato in un contesto modulo / riga per filtrare le funzionalit\u00e0 correlate. current_geometry ; Rappresenta la geometria della feature attualmente in fase di modifica nel modulo o nella riga della tabella. Pu\u00f2 essere utilizzato in un contesto modulo / riga per filtrare le funzionalit\u00e0 correlate. intersects( buffer(@current_geometry ,1000),$geometry) NB: nella cartella esempi trovate un geopackage con i dati e un progetto esempio video:","title":"QGIS 3.2  | 22/06/2018"},{"location":"release/novita_32/#novita-rilevanti-introdotte-nella-32-bonn","text":"https://www.qgis.org/it/site/forusers/visualchangelog32/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.2 Bonn"},{"location":"release/novita_32/#generatore-di-espressioni-piu-utile","text":"Il generatore di espressioni ora semplifica la creazione di espressioni in QGIS! Il builder ora mostra la descrizione per i valori definiti dai dati, compreso l'intervallo di valori attesi dall'espressione Ctrl + clic su un nome di funzione nell'espressione corrente aprir\u00e0 automaticamente l'aiuto per quella funzione Ora mostra gli indicatori per parti di espressioni con errori Mostra un elenco completo dei messaggi di errore ottenuti dall'analisi dell'espressione","title":"Generatore di espressioni pi\u00f9 utile."},{"location":"release/novita_32/#form-drill-down-a-cascata-widget-value-relation-relazione-valore","text":"consente l'implementazione di filtri complessi e dinamici all'interno di moduli di attributo QGIS. La funzionalit\u00e0 pu\u00f2 essere utilizzata per implementare moduli \"drill-down\" all'interno di QGIS, in cui i valori disponibili in un campo dipendono dai valori di altri campi: Questa funzionalit\u00e0 consente agli utenti di creare espressioni \"value-relation\" basate sul valore corrente di un altro campo nella stessa form. Quando l'utente modifica il valore di un campo, le scelte disponibili in tutti i campi correlati vengono filtrate in modo che corrispondano al nuovo valore, consentendo una strategia di filtraggio gerarchica (drill down o cascading) all'interno di un modulo o nella tabella degli attributi. qui un video di Alessandro Pasotti Le espressioni implementate per realizzare quanto descritto sopra sono tre, una funzione e due variabili: current_value() ; Restituisce il valore corrente non salvato di un campo nel modulo o riga della tabella attualmente in fase di modifica. Questo sar\u00e0 diverso dai valori attuali dell'attributo della funzione per le funzioni che sono attualmente in fase di modifica o che non sono ancora state aggiunte a un livello. currente_feature ; Rappresenta la funzione attualmente in fase di modifica nel modulo o nella riga della tabella. Pu\u00f2 essere utilizzato in un contesto modulo / riga per filtrare le funzionalit\u00e0 correlate. current_geometry ; Rappresenta la geometria della feature attualmente in fase di modifica nel modulo o nella riga della tabella. Pu\u00f2 essere utilizzato in un contesto modulo / riga per filtrare le funzionalit\u00e0 correlate. intersects( buffer(@current_geometry ,1000),$geometry) NB: nella cartella esempi trovate un geopackage con i dati e un progetto esempio video:","title":"Form drill-down (a cascata)  WIDGET Value Relation (Relazione valore):"},{"location":"release/novita_320/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.20 Odense \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog320/index.html espressioni \u21b5 length3D : https://github.com/qgis/QGIS/pull/41127 array_count : https://github.com/qgis/QGIS/pull/41338 array_priorize : https://github.com/qgis/QGIS/pull/41338 array_replace : https://github.com/qgis/QGIS/pull/41338 mime_type : https://github.com/qgis/QGIS/pull/41191 alias : https://github.com/qgis/QGIS/pull/42179 tabella attributi \u21b5 https://github.com/qgis/QGIS/pull/41276 https://github.com/qgis/QGIS/pull/42026 GUI/UI \u21b5 icone : https://github.com/qgis/QGIS/pull/42168 finestra dialogo: https://github.com/qgis/QGIS/pull/42745 sintassi operatori: https://github.com/qgis/QGIS/pull/43134","title":"QGIS 3.20 | 21/06/2021"},{"location":"release/novita_320/#novita-rilevanti-introdotte-nella-320-odense","text":"https://www.qgis.org/it/site/forusers/visualchangelog320/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.20 Odense"},{"location":"release/novita_320/#espressioni","text":"length3D : https://github.com/qgis/QGIS/pull/41127 array_count : https://github.com/qgis/QGIS/pull/41338 array_priorize : https://github.com/qgis/QGIS/pull/41338 array_replace : https://github.com/qgis/QGIS/pull/41338 mime_type : https://github.com/qgis/QGIS/pull/41191 alias : https://github.com/qgis/QGIS/pull/42179","title":"espressioni"},{"location":"release/novita_320/#tabella-attributi","text":"https://github.com/qgis/QGIS/pull/41276 https://github.com/qgis/QGIS/pull/42026","title":"tabella attributi"},{"location":"release/novita_320/#guiui","text":"icone : https://github.com/qgis/QGIS/pull/42168 finestra dialogo: https://github.com/qgis/QGIS/pull/42745 sintassi operatori: https://github.com/qgis/QGIS/pull/43134","title":"GUI/UI"},{"location":"release/novita_322/","text":"Novit\u00e0 rilevanti introdotte in QGIS 3.22 Bia\u0142owie\u017ca \u21b5 https://changelog.qgis.org/en/qgis/version/3.22/ Espressioni \u21b5 exif() e exif_geotag() : https://github.com/qgis/QGIS/pull/44081 sotto elenco completo dei tag disponibili: Exif.GPSInfo.GPSAltitude Exif.GPSInfo.GPSAltitudeRef Exif.GPSInfo.GPSDateStamp Exif.GPSInfo.GPSLatitude Exif.GPSInfo.GPSLatitudeRef Exif.GPSInfo.GPSLongitude Exif.GPSInfo.GPSLongitudeRef Exif.GPSInfo.GPSProcessingMethod Exif.GPSInfo.GPSTimeStamp Exif.GPSInfo.GPSVersionID Exif.Image.0xea1c Exif.Image.Artist Exif.Image.DateTime Exif.Image.ExifTag Exif.Image.GPSTag Exif.Image.ImageLength Exif.Image.ImageWidth Exif.Image.Make Exif.Image.Model Exif.Image.ResolutionUnit Exif.Image.Software Exif.Image.XPKeywords Exif.Image.XResolution Exif.Image.YCbCrPositioning Exif.Image.YResolution Exif.Iop.InteroperabilityVersion Exif.Iop.RelatedImageLength Exif.Iop.RelatedImageWidth Exif.Photo.0xea1c Exif.Photo.ColorSpace Exif.Photo.ComponentsConfiguration Exif.Photo.Contrast Exif.Photo.DateTimeDigitized Exif.Photo.DateTimeOriginal Exif.Photo.DigitalZoomRatio Exif.Photo.ExifVersion Exif.Photo.ExposureBiasValue Exif.Photo.ExposureMode Exif.Photo.ExposureProgram Exif.Photo.ExposureTime Exif.Photo.FNumber Exif.Photo.Flash Exif.Photo.FlashpixVersion Exif.Photo.FocalLength Exif.Photo.GainControl Exif.Photo.ISOSpeedRatings Exif.Photo.ImageUniqueID Exif.Photo.InteroperabilityTag Exif.Photo.LightSource Exif.Photo.MaxApertureValue Exif.Photo.MeteringMode Exif.Photo.PixelXDimension Exif.Photo.PixelYDimension Exif.Photo.Saturation Exif.Photo.SceneCaptureType Exif.Photo.Sharpness Exif.Photo.UserComment Exif.Photo.WhiteBalance Exif.Thumbnail.Compression Exif.Thumbnail.JPEGInterchangeFormat Exif.Thumbnail.JPEGInterchangeFormatLength Exif.Thumbnail.ResolutionUnit Exif.Thumbnail.XResolution Exif.Thumbnail.YResolution - exif_geotag() sinuosity : https://github.com/qgis/QGIS/pull/44401 straight_distance_2d : https://github.com/qgis/QGIS/pull/44767 $z : https://github.com/qgis/QGIS/pull/44776 affine_transform : https://github.com/qgis/QGIS/pull/44771 https://github.com/qgis/QGIS/pull/45484 Tabella attributi \u21b5 tabella attributi : https://github.com/qgis/QGIS/pull/44471 Widget \u21b5 widget : https://github.com/qgis/QGIS/pull/44710 Mesh \u21b5 saranno aggiunte in futuro maggiori info selezione tramite espressione : https://github.com/qgis/QGIS/pull/44835 $vertex_as_point and $vertex_z functions : https://github.com/qgis/QGIS/pull/44786","title":"QGIS 3.22 | 22/10/2021"},{"location":"release/novita_322/#novita-rilevanti-introdotte-in-qgis-322-biaowieza","text":"https://changelog.qgis.org/en/qgis/version/3.22/","title":"Novit\u00e0 rilevanti introdotte in QGIS 3.22 Bia\u0142owie\u017ca"},{"location":"release/novita_322/#espressioni","text":"exif() e exif_geotag() : https://github.com/qgis/QGIS/pull/44081 sotto elenco completo dei tag disponibili: Exif.GPSInfo.GPSAltitude Exif.GPSInfo.GPSAltitudeRef Exif.GPSInfo.GPSDateStamp Exif.GPSInfo.GPSLatitude Exif.GPSInfo.GPSLatitudeRef Exif.GPSInfo.GPSLongitude Exif.GPSInfo.GPSLongitudeRef Exif.GPSInfo.GPSProcessingMethod Exif.GPSInfo.GPSTimeStamp Exif.GPSInfo.GPSVersionID Exif.Image.0xea1c Exif.Image.Artist Exif.Image.DateTime Exif.Image.ExifTag Exif.Image.GPSTag Exif.Image.ImageLength Exif.Image.ImageWidth Exif.Image.Make Exif.Image.Model Exif.Image.ResolutionUnit Exif.Image.Software Exif.Image.XPKeywords Exif.Image.XResolution Exif.Image.YCbCrPositioning Exif.Image.YResolution Exif.Iop.InteroperabilityVersion Exif.Iop.RelatedImageLength Exif.Iop.RelatedImageWidth Exif.Photo.0xea1c Exif.Photo.ColorSpace Exif.Photo.ComponentsConfiguration Exif.Photo.Contrast Exif.Photo.DateTimeDigitized Exif.Photo.DateTimeOriginal Exif.Photo.DigitalZoomRatio Exif.Photo.ExifVersion Exif.Photo.ExposureBiasValue Exif.Photo.ExposureMode Exif.Photo.ExposureProgram Exif.Photo.ExposureTime Exif.Photo.FNumber Exif.Photo.Flash Exif.Photo.FlashpixVersion Exif.Photo.FocalLength Exif.Photo.GainControl Exif.Photo.ISOSpeedRatings Exif.Photo.ImageUniqueID Exif.Photo.InteroperabilityTag Exif.Photo.LightSource Exif.Photo.MaxApertureValue Exif.Photo.MeteringMode Exif.Photo.PixelXDimension Exif.Photo.PixelYDimension Exif.Photo.Saturation Exif.Photo.SceneCaptureType Exif.Photo.Sharpness Exif.Photo.UserComment Exif.Photo.WhiteBalance Exif.Thumbnail.Compression Exif.Thumbnail.JPEGInterchangeFormat Exif.Thumbnail.JPEGInterchangeFormatLength Exif.Thumbnail.ResolutionUnit Exif.Thumbnail.XResolution Exif.Thumbnail.YResolution - exif_geotag() sinuosity : https://github.com/qgis/QGIS/pull/44401 straight_distance_2d : https://github.com/qgis/QGIS/pull/44767 $z : https://github.com/qgis/QGIS/pull/44776 affine_transform : https://github.com/qgis/QGIS/pull/44771 https://github.com/qgis/QGIS/pull/45484","title":"Espressioni"},{"location":"release/novita_322/#tabella-attributi","text":"tabella attributi : https://github.com/qgis/QGIS/pull/44471","title":"Tabella attributi"},{"location":"release/novita_322/#widget","text":"widget : https://github.com/qgis/QGIS/pull/44710","title":"Widget"},{"location":"release/novita_322/#mesh","text":"saranno aggiunte in futuro maggiori info selezione tramite espressione : https://github.com/qgis/QGIS/pull/44835 $vertex_as_point and $vertex_z functions : https://github.com/qgis/QGIS/pull/44786","title":"Mesh"},{"location":"release/novita_324/","text":"Novit\u00e0 rilevanti introdotte in QGIS 3.24 Tisler \u21b5 In Memorium: Questa versione prende il nome \"Tisler\" da una piccola isola norvegese che era uno dei luoghi di visita preferiti di H\u00e5vard Tveite , scomparso nel maggio 2021. H\u00e5vard era un membro molto attivo della comunit\u00e0 QGIS, fornendo un prezioso contributo alla documentazione, sviluppando numerosi plugin e occupandosi del QGIS Resources Sharing Repository per citare solo alcuni dei suoi contributi. La mappa nella schermata iniziale di QGIS 3.24 \u00e8 una mappa di orientamento creata da H\u00e5vard. Gli piaceva passare un po' di tempo ogni anno a creare mappe a Tisler. https://changelog.qgis.org/en/qgis/version/3.24/ Espressioni \u21b5 Gruppo Geometria \u21b5 funzione link PR descrizione scale https://github.com/qgis/QGIS/pull/45505 nuova funzione triangular/square/curved https://github.com/qgis/QGIS/pull/45583 nuove funzione (6) overlay_nearest https://github.com/qgis/QGIS/pull/45744 miglioramenti apply_dash_pattern https://github.com/qgis/QGIS/pull/45734 nuova funzione force_polygon_cw/ccw https://github.com/qgis/QGIS/pull/45718 nuove funzione (2) densify_by_count/distance https://github.com/qgis/QGIS/pull/45894 nuove funzione (2) roundness https://github.com/qgis/QGIS/pull/45154 nuova funzione overlay_intersects https://github.com/qgis/QGIS/pull/46185 miglioramenti overlay_intersects https://github.com/qgis/QGIS/pull/46683 miglioramenti geometry_n https://github.com/qgis/QGIS/pull/46684 modifica definizione geometry_type https://github.com/qgis/QGIS/pull/46716 nuova funzione rotate https://github.com/qgis/QGIS/pull/45748 miglioramento Gruppo Record e Attributi \u21b5 funzione link PR descrizione get_feature https://github.com/qgis/QGIS/pull/43352 miglioramenti represent_attributes https://github.com/qgis/QGIS/pull/46502 nuova funzione Gruppo Array \u21b5 funzione link PR descrizione array_remove_at https://github.com/qgis/QGIS/pull/46942 miglioramento Gruppo Maps \u21b5 funzione link PR descrizione map_prefix_keys https://github.com/qgis/QGIS/pull/46087 nuova funzione url_encode https://github.com/qgis/QGIS/pull/46384 nuova funzione PR chiusa \u21b5 annotazioni : https://github.com/qgis/QGIS/pull/45114 chiusa!!! GUI Field Calc \u21b5 esponi i nomi dei campi da layer richiamati : https://github.com/qgis/QGIS/pull/46505 ricerca migliorata : https://github.com/qgis/QGIS/pull/46672 qui i tag per la ricerca. GUI/UX \u21b5 apri tabella attributi : https://github.com/qgis/QGIS/pull/46328 | Nuovo bottone! CORE \u21b5 Gli utenti possono utilizzare espressioni come array(1,2,3) o map('key1','value','key2','value') espressioni nel calcolatore di campo e nella barra dei campi della tabella degli attributi per aggiornare i valori. https://github.com/qgis/QGIS/pull/47046 Gli Array diventano un formato di campo \u21b5 https://github.com/qgis/QGIS/pull/47049","title":"QGIS 3.24 | 18/02/2022"},{"location":"release/novita_324/#novita-rilevanti-introdotte-in-qgis-324-tisler","text":"In Memorium: Questa versione prende il nome \"Tisler\" da una piccola isola norvegese che era uno dei luoghi di visita preferiti di H\u00e5vard Tveite , scomparso nel maggio 2021. H\u00e5vard era un membro molto attivo della comunit\u00e0 QGIS, fornendo un prezioso contributo alla documentazione, sviluppando numerosi plugin e occupandosi del QGIS Resources Sharing Repository per citare solo alcuni dei suoi contributi. La mappa nella schermata iniziale di QGIS 3.24 \u00e8 una mappa di orientamento creata da H\u00e5vard. Gli piaceva passare un po' di tempo ogni anno a creare mappe a Tisler. https://changelog.qgis.org/en/qgis/version/3.24/","title":"Novit\u00e0 rilevanti introdotte in QGIS 3.24 Tisler"},{"location":"release/novita_324/#espressioni","text":"","title":"Espressioni"},{"location":"release/novita_324/#gruppo-geometria","text":"funzione link PR descrizione scale https://github.com/qgis/QGIS/pull/45505 nuova funzione triangular/square/curved https://github.com/qgis/QGIS/pull/45583 nuove funzione (6) overlay_nearest https://github.com/qgis/QGIS/pull/45744 miglioramenti apply_dash_pattern https://github.com/qgis/QGIS/pull/45734 nuova funzione force_polygon_cw/ccw https://github.com/qgis/QGIS/pull/45718 nuove funzione (2) densify_by_count/distance https://github.com/qgis/QGIS/pull/45894 nuove funzione (2) roundness https://github.com/qgis/QGIS/pull/45154 nuova funzione overlay_intersects https://github.com/qgis/QGIS/pull/46185 miglioramenti overlay_intersects https://github.com/qgis/QGIS/pull/46683 miglioramenti geometry_n https://github.com/qgis/QGIS/pull/46684 modifica definizione geometry_type https://github.com/qgis/QGIS/pull/46716 nuova funzione rotate https://github.com/qgis/QGIS/pull/45748 miglioramento","title":"Gruppo Geometria"},{"location":"release/novita_324/#gruppo-record-e-attributi","text":"funzione link PR descrizione get_feature https://github.com/qgis/QGIS/pull/43352 miglioramenti represent_attributes https://github.com/qgis/QGIS/pull/46502 nuova funzione","title":"Gruppo Record e Attributi"},{"location":"release/novita_324/#gruppo-array","text":"funzione link PR descrizione array_remove_at https://github.com/qgis/QGIS/pull/46942 miglioramento","title":"Gruppo Array"},{"location":"release/novita_324/#gruppo-maps","text":"funzione link PR descrizione map_prefix_keys https://github.com/qgis/QGIS/pull/46087 nuova funzione url_encode https://github.com/qgis/QGIS/pull/46384 nuova funzione","title":"Gruppo Maps"},{"location":"release/novita_324/#pr-chiusa","text":"annotazioni : https://github.com/qgis/QGIS/pull/45114 chiusa!!!","title":"PR chiusa"},{"location":"release/novita_324/#gui-field-calc","text":"esponi i nomi dei campi da layer richiamati : https://github.com/qgis/QGIS/pull/46505 ricerca migliorata : https://github.com/qgis/QGIS/pull/46672 qui i tag per la ricerca.","title":"GUI Field Calc"},{"location":"release/novita_324/#guiux","text":"apri tabella attributi : https://github.com/qgis/QGIS/pull/46328 | Nuovo bottone!","title":"GUI/UX"},{"location":"release/novita_324/#core","text":"Gli utenti possono utilizzare espressioni come array(1,2,3) o map('key1','value','key2','value') espressioni nel calcolatore di campo e nella barra dei campi della tabella degli attributi per aggiornare i valori. https://github.com/qgis/QGIS/pull/47046","title":"CORE"},{"location":"release/novita_324/#gli-array-diventano-un-formato-di-campo","text":"https://github.com/qgis/QGIS/pull/47049","title":"Gli Array diventano un formato di campo"},{"location":"release/novita_326/","text":"Novit\u00e0 rilevanti introdotte in QGIS 3.26 \u21b5 \"La versione ricca di funzionalit\u00e0 di QGIS 3.26 Buenos Aires include un vasto numero di miglioramenti a una gamma di funzionalit\u00e0 di base avanzate. Ci\u00f2 include numerosi miglioramenti alle funzionalit\u00e0 3D, strumenti migliorati per le nuvole di punti e l'introduzione di un nuovo framework di tracciatura dei profili per la creazione di sezioni trasversali e profili di elevazione. Soprattutto, il nuovo framework di plottaggio utilizza le funzionalit\u00e0 di rendering QGIS native e viene fornito con tutte le propriet\u00e0 di stile, simbologia e guida dei dati che tutti conosciamo e amiamo subito!\" https://changelog.qgis.org/en/qgis/version/3.26/ Espressioni \u21b5 Gruppi \u21b5 funzione link PR descrizione BETWEEN e NOT BETWEEN https://github.com/qgis/QGIS/pull/47771 Nuovi Operatori @symbol_frame https://github.com/qgis/QGIS/pull/48152 Nuova variabile @parent https://github.com/qgis/QGIS/pull/48488 Miglioramento GUI Field Calc \u21b5 copia valore espressione anteprima fielc calc : https://github.com/qgis/QGIS/pull/47680 omogenizzate i valori booleani : https://github.com/qgis/QGIS/pull/47866 aggiorna descrizione operatore AND : https://github.com/qgis/QGIS/pull/48118 scorrimento tabella attributi in orizzontale : https://github.com/qgis/QGIS/pull/47764 Tabella attributi \u21b5 Nomi dei campi definiti dall'utente nell'esportazione: https://github.com/qgis/QGIS/pull/47630","title":"QGIS 3.26 | 18/06/2022"},{"location":"release/novita_326/#novita-rilevanti-introdotte-in-qgis-326","text":"\"La versione ricca di funzionalit\u00e0 di QGIS 3.26 Buenos Aires include un vasto numero di miglioramenti a una gamma di funzionalit\u00e0 di base avanzate. Ci\u00f2 include numerosi miglioramenti alle funzionalit\u00e0 3D, strumenti migliorati per le nuvole di punti e l'introduzione di un nuovo framework di tracciatura dei profili per la creazione di sezioni trasversali e profili di elevazione. Soprattutto, il nuovo framework di plottaggio utilizza le funzionalit\u00e0 di rendering QGIS native e viene fornito con tutte le propriet\u00e0 di stile, simbologia e guida dei dati che tutti conosciamo e amiamo subito!\" https://changelog.qgis.org/en/qgis/version/3.26/","title":"Novit\u00e0 rilevanti introdotte in QGIS 3.26"},{"location":"release/novita_326/#espressioni","text":"","title":"Espressioni"},{"location":"release/novita_326/#gruppi","text":"funzione link PR descrizione BETWEEN e NOT BETWEEN https://github.com/qgis/QGIS/pull/47771 Nuovi Operatori @symbol_frame https://github.com/qgis/QGIS/pull/48152 Nuova variabile @parent https://github.com/qgis/QGIS/pull/48488 Miglioramento","title":"Gruppi"},{"location":"release/novita_326/#gui-field-calc","text":"copia valore espressione anteprima fielc calc : https://github.com/qgis/QGIS/pull/47680 omogenizzate i valori booleani : https://github.com/qgis/QGIS/pull/47866 aggiorna descrizione operatore AND : https://github.com/qgis/QGIS/pull/48118 scorrimento tabella attributi in orizzontale : https://github.com/qgis/QGIS/pull/47764","title":"GUI Field Calc"},{"location":"release/novita_326/#tabella-attributi","text":"Nomi dei campi definiti dall'utente nell'esportazione: https://github.com/qgis/QGIS/pull/47630","title":"Tabella attributi"},{"location":"release/novita_328/","text":"Novit\u00e0 rilevanti introdotte in QGIS 3.28 Firenze \u21b5 QGIS 3.28 Firenze introduces various feature updates, UX modifications, usability enhancements, and improved integration with various proprietary services and data backends. It is also set to introduce the long-awaited features provided by previous releases into the long-term support release, as outlined in the QGIS Roadmap. The splash screen features a rare and extraordinary 1847 map of Firenze, or Florence, Italy by Giuseppe Molini. This magnificently engraved map was originally drawn in 1731 by the Florentine architect Ferdinando Ruggieri. Oriented to the south, the map covers the old walled center of Florence as it extends on both sides of the Arno River. The upper right quadrant features the lily symbol of Florence. Though printed in 1847, this map has been prepared in the 17 th -century style by copperplate engraving on thick-laid paper. Firenze in 1847 was on the cusp of political transformation. One year following the production of this rare map the Grand Duke of Tuscany, responding to political demonstrations throughout Florence, granted Tuscany its first constitution. https://changelog.qgis.org/en/qgis/version/3.28/ genesi dello splashscreen: https://github.com/pigreco/splashscreen_QGIS328_Firenze Espressioni \u21b5 nuove espressioni: funzione link PR descrizione Adds the $m, $z_at and $m_at expressions https://github.com/qgis/QGIS/pull/49765 CHIUSA!!! make_valid e geometries_to_array https://github.com/qgis/QGIS/pull/49993 nuove funzioni concave_hull https://github.com/qgis/QGIS/pull/48865 nuova funzione to_int https://github.com/qgis/QGIS/pull/49990 PR ancora aperta shared_paths https://github.com/qgis/QGIS/pull/50080 nuova funzione @feature , @id e @geometry https://github.com/qgis/QGIS/pull/50134 nuove variabili Anche nel gruppo Campi e Valore: GUI Field Calc \u21b5 Per evitare di perdere le modifiche alle espressioni nel Field Calc https://github.com/qgis/QGIS/pull/49883 HELP IN LINEA \u21b5 https://github.com/qgis/QGIS/commit/264221442c7f0bdf39f8409690a777bc90b26b35 https://github.com/qgis/QGIS/pull/50404","title":"QGIS 3.28 | 21/10/2022"},{"location":"release/novita_328/#novita-rilevanti-introdotte-in-qgis-328-firenze","text":"QGIS 3.28 Firenze introduces various feature updates, UX modifications, usability enhancements, and improved integration with various proprietary services and data backends. It is also set to introduce the long-awaited features provided by previous releases into the long-term support release, as outlined in the QGIS Roadmap. The splash screen features a rare and extraordinary 1847 map of Firenze, or Florence, Italy by Giuseppe Molini. This magnificently engraved map was originally drawn in 1731 by the Florentine architect Ferdinando Ruggieri. Oriented to the south, the map covers the old walled center of Florence as it extends on both sides of the Arno River. The upper right quadrant features the lily symbol of Florence. Though printed in 1847, this map has been prepared in the 17 th -century style by copperplate engraving on thick-laid paper. Firenze in 1847 was on the cusp of political transformation. One year following the production of this rare map the Grand Duke of Tuscany, responding to political demonstrations throughout Florence, granted Tuscany its first constitution. https://changelog.qgis.org/en/qgis/version/3.28/ genesi dello splashscreen: https://github.com/pigreco/splashscreen_QGIS328_Firenze","title":"Novit\u00e0 rilevanti introdotte in QGIS 3.28 Firenze"},{"location":"release/novita_328/#espressioni","text":"nuove espressioni: funzione link PR descrizione Adds the $m, $z_at and $m_at expressions https://github.com/qgis/QGIS/pull/49765 CHIUSA!!! make_valid e geometries_to_array https://github.com/qgis/QGIS/pull/49993 nuove funzioni concave_hull https://github.com/qgis/QGIS/pull/48865 nuova funzione to_int https://github.com/qgis/QGIS/pull/49990 PR ancora aperta shared_paths https://github.com/qgis/QGIS/pull/50080 nuova funzione @feature , @id e @geometry https://github.com/qgis/QGIS/pull/50134 nuove variabili Anche nel gruppo Campi e Valore:","title":"Espressioni"},{"location":"release/novita_328/#gui-field-calc","text":"Per evitare di perdere le modifiche alle espressioni nel Field Calc https://github.com/qgis/QGIS/pull/49883","title":"GUI Field Calc"},{"location":"release/novita_328/#help-in-linea","text":"https://github.com/qgis/QGIS/commit/264221442c7f0bdf39f8409690a777bc90b26b35 https://github.com/qgis/QGIS/pull/50404","title":"HELP IN LINEA"},{"location":"release/novita_34/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.4 Madeira \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog34/index.html Nuovo/i gruppo/i funzione/i nel calcolatore di campi \u21b5 Nuove funzioni \u21b5 raster_value() line_substring array_foreach generate_series array_filter to_dm to_dms hstore_to_map json_to_map map_to_hstore map_to_json Completamento codice per il costruttore di espressioni \u21b5 Cambiata la rappresentazione di array e map nelle espressioni \u21b5 array rappresentazione: prima \u2192 ora array: 1, 2, 3 \u2192 [ 1, 2, 3 ] map rappresentazione: prima \u2192 ora map: one: 1, two: 2, 3: three \u2192 {'one': 1, 'two': 2, 3: 'three'} Icone per i tipi di campo nel widget di espressioni \u21b5 Miglioramenti del field calc \u21b5 Miglioramenti help in linea di alcune funzioni \u21b5","title":"QGIS 3.4  | 26/10/2018"},{"location":"release/novita_34/#novita-rilevanti-introdotte-nella-34-madeira","text":"https://www.qgis.org/it/site/forusers/visualchangelog34/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.4 Madeira"},{"location":"release/novita_34/#nuovoi-gruppoi-funzionei-nel-calcolatore-di-campi","text":"","title":"Nuovo/i gruppo/i funzione/i nel calcolatore di campi"},{"location":"release/novita_34/#nuove-funzioni","text":"raster_value() line_substring array_foreach generate_series array_filter to_dm to_dms hstore_to_map json_to_map map_to_hstore map_to_json","title":"Nuove funzioni"},{"location":"release/novita_34/#completamento-codice-per-il-costruttore-di-espressioni","text":"","title":"Completamento codice per il costruttore di espressioni"},{"location":"release/novita_34/#cambiata-la-rappresentazione-di-array-e-map-nelle-espressioni","text":"array rappresentazione: prima \u2192 ora array: 1, 2, 3 \u2192 [ 1, 2, 3 ] map rappresentazione: prima \u2192 ora map: one: 1, two: 2, 3: three \u2192 {'one': 1, 'two': 2, 3: 'three'}","title":"Cambiata la rappresentazione di array e map nelle espressioni"},{"location":"release/novita_34/#icone-per-i-tipi-di-campo-nel-widget-di-espressioni","text":"","title":"Icone per i tipi di campo nel widget di espressioni"},{"location":"release/novita_34/#miglioramenti-del-field-calc","text":"","title":"Miglioramenti del field calc"},{"location":"release/novita_34/#miglioramenti-help-in-linea-di-alcune-funzioni","text":"","title":"Miglioramenti help in linea di alcune funzioni"},{"location":"release/novita_36/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.6 Noosa \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog36/index.html Nuove funzioni \u21b5 Gruppo Geometria \u21b5 force_rhr make_rectangle_3points make_square Gruppo layer della mappa \u21b5 decode_uri Gruppo Condizioni \u21b5 nullif try Gruppo maps \u21b5 from_json to_json Gruppo Record e Attributi \u21b5 sqlite_fetch_and_increment Interfaccia calcolatore campi \u21b5 sposta la casella di gruppo valore nell'area di aiuto \u21b5 Show Help-Values \u21b5 Abilita l'uso di parentesi quadre per le map e array \u21b5","title":"QGIS 3.6  | 22/02/2019"},{"location":"release/novita_36/#novita-rilevanti-introdotte-nella-36-noosa","text":"https://www.qgis.org/it/site/forusers/visualchangelog36/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.6 Noosa"},{"location":"release/novita_36/#nuove-funzioni","text":"","title":"Nuove funzioni"},{"location":"release/novita_36/#gruppo-geometria","text":"force_rhr make_rectangle_3points make_square","title":"Gruppo Geometria"},{"location":"release/novita_36/#gruppo-layer-della-mappa","text":"decode_uri","title":"Gruppo layer della mappa"},{"location":"release/novita_36/#gruppo-condizioni","text":"nullif try","title":"Gruppo Condizioni"},{"location":"release/novita_36/#gruppo-maps","text":"from_json to_json","title":"Gruppo maps"},{"location":"release/novita_36/#gruppo-record-e-attributi","text":"sqlite_fetch_and_increment","title":"Gruppo Record e Attributi"},{"location":"release/novita_36/#interfaccia-calcolatore-campi","text":"","title":"Interfaccia calcolatore campi"},{"location":"release/novita_36/#sposta-la-casella-di-gruppo-valore-nellarea-di-aiuto","text":"","title":"sposta la casella di gruppo valore nell'area di aiuto"},{"location":"release/novita_36/#show-help-values","text":"","title":"Show Help-Values"},{"location":"release/novita_36/#abilita-luso-di-parentesi-quadre-per-le-map-e-array","text":"","title":"Abilita l'uso di parentesi quadre per le map e array"},{"location":"release/novita_38/","tags":["novit\u00e0"],"text":"Novit\u00e0 rilevanti introdotte nella 3.8 Zanzibar \u21b5 https://www.qgis.org/it/site/forusers/visualchangelog38/index.html Nuove funzioni \u21b5 Gruppo Aggregates \u21b5 concatenate_unique - PR #9714 Gruppo Arrays \u21b5 array_all - PR #9756 Negative index support \u21b5 [ Negative index support ] PR #9490 Gruppo Files and Paths \u21b5 [ Files and Paths ] PR #9885 Anteprima valori Expression builder \u21b5 PR 10037","title":"QGIS 3.8  | 21/06/2019"},{"location":"release/novita_38/#novita-rilevanti-introdotte-nella-38-zanzibar","text":"https://www.qgis.org/it/site/forusers/visualchangelog38/index.html","title":"Novit\u00e0 rilevanti introdotte nella 3.8 Zanzibar"},{"location":"release/novita_38/#nuove-funzioni","text":"","title":"Nuove funzioni"},{"location":"release/novita_38/#gruppo-aggregates","text":"concatenate_unique - PR #9714","title":"Gruppo Aggregates"},{"location":"release/novita_38/#gruppo-arrays","text":"array_all - PR #9756","title":"Gruppo Arrays"},{"location":"release/novita_38/#negative-index-support","text":"[ Negative index support ] PR #9490","title":"Negative index support"},{"location":"release/novita_38/#gruppo-files-and-paths","text":"[ Files and Paths ] PR #9885","title":"Gruppo Files and Paths"},{"location":"release/novita_38/#anteprima-valori-expression-builder","text":"PR 10037","title":"Anteprima valori Expression builder"},{"location":"tabella_attributi/tabella_attributi/","tags":["concetti","propedeutico","tabella","rinomina","campi"],"text":"Concetti fondamentali sulla tabella degli attributi di QGIS \u21b5 Intro In questa sezioni sono raccolti i concetti fondamentali sulla tabella degli attributi. La conoscenza di questi concetti permette di velocizzare il lavoro e capire il comportamento della tabella. QGIS-DOC La tabella degli attributi ( F6 ) \u00e8 una tabella che contiene i dati alfanumerici (attributi) dello strato vettoriale e rappresenta una delle differenze fondamentali tra un vettore CAD e uno GIS. Negli shapefile la tabella degli attributi rappresenta il file .dbf che \u00e8 uno dei tre file fondamentali che caratterizzano lo shapefile (.shp, .shx, .dbf) la mancanza di uno di questi rende inutilizzabile lo strato. Una tabella \u00e8 caratterizzata da righe (rosso) e colonne (verde), le righe rappresentano i record (nello specifico una feature), le colonne (o campi) rappresentano gli attributi: Osservazione : la geometria \u00e8 anch'essa un attributo (speciale) ma non viene visualizzato nella tabella degli attributi per scelta degli sviluppatori. Per richimare tale attributo basta utilizzare $geometry . Elementi della tabella \u21b5 La tabella attributi di QGIS \u00e8 caratterizzata da vari elementi: nell'intestazione della tabella \u00e8 presente una stringa che da informazioni su: nome della tabella; totale degli elementi/record/feature; numero dei record filtrati ; numero dei record selezionati . barra degli strumenti; matita per attivare modifica; modifica multipla; salva modifiche; aggiorna; aggiungi elemento (solo alfanumerico): cancella elemento/i; taglia; copia elemento/i; incolla elemento/i; seleziona elementi tramite espressione; seleziona tutto; inverti selezione; cancella selezione; seleziona/filtra; sposta la selezione in cima alla tabella; sposta mappa alle righe selezionate; zooma mappa alle righe selezionate; nuovo campo; elimina campo esistente; apre il calcolatore di campi; formattazione condizionale; da finestra a dock e viceversa ( >= QGIS 3.4 ) azioni. menu filtro: Mostra tutti gli Elementi; Mostra gli Elementi Selezionati; Mostra gli Elementi Visibili nella Mappa; Mostra gli Elementi Modificati ed i Nuovi; Filtro Campo (elenca tutti i campi presenti nella tabella); Filtro Avanzato (tramite espressione); Espressioni Filtro Salvate. modalit\u00e0 di visualizzazione della tabella: vista tabella; vista modulo: nella Vista Modulo \u00e8 presente un ulterione menu: Espressione, permette di creare un filtro tramite una espressione; anteprima colonna; Ordina...; storico. Calcolatore di campi rapido \u21b5 Questa barra \u00e8 visibile solo se \u00e8 attiva la modalit\u00e0 modifica e consente di applicare rapidamente calcoli a tutte o parte delle feature del livello. Questa barra utilizza le stesse espressioni del calcolatore di campi Esempio di uso della barra (vedi screenshot sotto): raccoglie tutti i campi della tabella; apre la finestra di dialogo delle espressioni; campo dove digitare numeri, stringhe e forimule/espressioni; aggiorna tutti i record con il valore immesso nella 3; aggiorna solo le righe selezionate con il valore immesso nella 3; nel nostro caso (vedi screenshot sotto), se cliccassi su 4 (aggiorna tutto) aggiornerei tutti i valori del campo \"COD_REG\" con il valore 19; se cliccassi su 5 (Aggiorna selezione) aggiornerei solo le quattro righe selezionate. Corpo della tabella \u21b5 \u00c8 possibile interagire con il corpo della tabella usando il tasto destro del mouse: sulla intestazione dei campi oppure sulle celle: nel caso dell' intestazione colonna compare un tendina con la possibilit\u00e0 di: 1. nascondere la colonna; 2. definire la larghezza della colonna; 3. Imposta Tutte le larghezze di Colonna (>= QGIS 3.18) 4. autodimensiona la larghezza colonna; 5. Autodimensione Tutte le Colonne (>= QGIS 3.18) 6. Organizza le colonne; 7. Ordina. nel caso delle celle (vedi screen sotto) compare un tendina con la possibilit\u00e0 di: 1. selezionare tutte le righe (Ctrl+A); 2. Copiare il contenuto della cella; 3. Zoom alla Geometria; 4. Sposta alla Geometria; 5. Lampeggia Geometria; 6. Apri modalit\u00e0 Modulo PS: Find/Replace \u00e8 un plugin! Rinominare i campi \u21b5 A partire da QGIS 2.16 \u00e8 possibile rinominare i campi della tabella degli attributi (shp, gpkg) con un semplice doppio click sul nome, dopo aver messo in modifica il layer: riferimento : https://gis.stackexchange.com/a/206956/73605 Dockify tabella \u21b5 nuovo pulsante (Novit\u00e0 introdotta nella QGIS 3.4) nella barra degli strumenti della tabella degli attributi per passare dalla modalit\u00e0 docked alla modalit\u00e0 finestra Memorizza Filtro tabella attributi \u21b5 Salva Filtro Opzioni Extra Apertura Tabella \u21b5 PR >= QGIS 3.20 Mostra nella Tabella \u21b5 Mostra nella Tabella >= QGIS 3.24","title":"Concetti tabella attributi"},{"location":"tabella_attributi/tabella_attributi/#concetti-fondamentali-sulla-tabella-degli-attributi-di-qgis","text":"Intro In questa sezioni sono raccolti i concetti fondamentali sulla tabella degli attributi. La conoscenza di questi concetti permette di velocizzare il lavoro e capire il comportamento della tabella. QGIS-DOC La tabella degli attributi ( F6 ) \u00e8 una tabella che contiene i dati alfanumerici (attributi) dello strato vettoriale e rappresenta una delle differenze fondamentali tra un vettore CAD e uno GIS. Negli shapefile la tabella degli attributi rappresenta il file .dbf che \u00e8 uno dei tre file fondamentali che caratterizzano lo shapefile (.shp, .shx, .dbf) la mancanza di uno di questi rende inutilizzabile lo strato. Una tabella \u00e8 caratterizzata da righe (rosso) e colonne (verde), le righe rappresentano i record (nello specifico una feature), le colonne (o campi) rappresentano gli attributi: Osservazione : la geometria \u00e8 anch'essa un attributo (speciale) ma non viene visualizzato nella tabella degli attributi per scelta degli sviluppatori. Per richimare tale attributo basta utilizzare $geometry .","title":"Concetti fondamentali sulla tabella degli attributi di QGIS"},{"location":"tabella_attributi/tabella_attributi/#elementi-della-tabella","text":"La tabella attributi di QGIS \u00e8 caratterizzata da vari elementi: nell'intestazione della tabella \u00e8 presente una stringa che da informazioni su: nome della tabella; totale degli elementi/record/feature; numero dei record filtrati ; numero dei record selezionati . barra degli strumenti; matita per attivare modifica; modifica multipla; salva modifiche; aggiorna; aggiungi elemento (solo alfanumerico): cancella elemento/i; taglia; copia elemento/i; incolla elemento/i; seleziona elementi tramite espressione; seleziona tutto; inverti selezione; cancella selezione; seleziona/filtra; sposta la selezione in cima alla tabella; sposta mappa alle righe selezionate; zooma mappa alle righe selezionate; nuovo campo; elimina campo esistente; apre il calcolatore di campi; formattazione condizionale; da finestra a dock e viceversa ( >= QGIS 3.4 ) azioni. menu filtro: Mostra tutti gli Elementi; Mostra gli Elementi Selezionati; Mostra gli Elementi Visibili nella Mappa; Mostra gli Elementi Modificati ed i Nuovi; Filtro Campo (elenca tutti i campi presenti nella tabella); Filtro Avanzato (tramite espressione); Espressioni Filtro Salvate. modalit\u00e0 di visualizzazione della tabella: vista tabella; vista modulo: nella Vista Modulo \u00e8 presente un ulterione menu: Espressione, permette di creare un filtro tramite una espressione; anteprima colonna; Ordina...; storico.","title":"Elementi della tabella"},{"location":"tabella_attributi/tabella_attributi/#calcolatore-di-campi-rapido","text":"Questa barra \u00e8 visibile solo se \u00e8 attiva la modalit\u00e0 modifica e consente di applicare rapidamente calcoli a tutte o parte delle feature del livello. Questa barra utilizza le stesse espressioni del calcolatore di campi Esempio di uso della barra (vedi screenshot sotto): raccoglie tutti i campi della tabella; apre la finestra di dialogo delle espressioni; campo dove digitare numeri, stringhe e forimule/espressioni; aggiorna tutti i record con il valore immesso nella 3; aggiorna solo le righe selezionate con il valore immesso nella 3; nel nostro caso (vedi screenshot sotto), se cliccassi su 4 (aggiorna tutto) aggiornerei tutti i valori del campo \"COD_REG\" con il valore 19; se cliccassi su 5 (Aggiorna selezione) aggiornerei solo le quattro righe selezionate.","title":"Calcolatore di campi rapido"},{"location":"tabella_attributi/tabella_attributi/#corpo-della-tabella","text":"\u00c8 possibile interagire con il corpo della tabella usando il tasto destro del mouse: sulla intestazione dei campi oppure sulle celle: nel caso dell' intestazione colonna compare un tendina con la possibilit\u00e0 di: 1. nascondere la colonna; 2. definire la larghezza della colonna; 3. Imposta Tutte le larghezze di Colonna (>= QGIS 3.18) 4. autodimensiona la larghezza colonna; 5. Autodimensione Tutte le Colonne (>= QGIS 3.18) 6. Organizza le colonne; 7. Ordina. nel caso delle celle (vedi screen sotto) compare un tendina con la possibilit\u00e0 di: 1. selezionare tutte le righe (Ctrl+A); 2. Copiare il contenuto della cella; 3. Zoom alla Geometria; 4. Sposta alla Geometria; 5. Lampeggia Geometria; 6. Apri modalit\u00e0 Modulo PS: Find/Replace \u00e8 un plugin!","title":"Corpo della tabella"},{"location":"tabella_attributi/tabella_attributi/#rinominare-i-campi","text":"A partire da QGIS 2.16 \u00e8 possibile rinominare i campi della tabella degli attributi (shp, gpkg) con un semplice doppio click sul nome, dopo aver messo in modifica il layer: riferimento : https://gis.stackexchange.com/a/206956/73605","title":"Rinominare i campi"},{"location":"tabella_attributi/tabella_attributi/#dockify-tabella","text":"nuovo pulsante (Novit\u00e0 introdotta nella QGIS 3.4) nella barra degli strumenti della tabella degli attributi per passare dalla modalit\u00e0 docked alla modalit\u00e0 finestra","title":"Dockify tabella"},{"location":"tabella_attributi/tabella_attributi/#memorizza-filtro-tabella-attributi","text":"Salva Filtro","title":"Memorizza Filtro tabella attributi"},{"location":"tabella_attributi/tabella_attributi/#opzioni-extra-apertura-tabella","text":"PR >= QGIS 3.20","title":"Opzioni Extra Apertura Tabella"},{"location":"tabella_attributi/tabella_attributi/#mostra-nella-tabella","text":"Mostra nella Tabella >= QGIS 3.24","title":"Mostra nella Tabella"},{"location":"tag_espressioni/funzioni-tags/","text":"funzioni tags $geometry current, processing, functions $id row, current $length distance, planimetric, length, perimeter, current, linestring, project, settings, ellipsoid, border, setting, calculated $map layout, item, drawn, current, main, print, map, window, overview, canvas $page layout, print, page, current $perimeter distance, planimetric, length, perimeter, current, polygon, project, settings, ellipsoid, setting, calculated $rownum row, number, current $scale denominator, contexts, current, scale, canvas, map $vertex_as_point point, mesh, vertex, current $vertex_index index, mesh, vertex, current $vertex_x coordinate, mesh, vertex, current $vertex_y coordinate, mesh, vertex, current $vertex_z mesh, vertex, current $x first, point, coordinate, current, multipoint $x_at current, retrieves, feature, coordinate $y first, point, coordinate, current, multipoint $y_at current, retrieves, feature, coordinate $z first, point, current, multipoint, altitude, 3D % division, remainder * multiplication, values + addition, null, result, values - subtraction, null, result, values / division, values < left, evaluates, compares, less, values, right <= compares, equal, less, values, left, evaluates, right <> compares, evaluates, values, equal = compares, evaluates, values, equal AND condition CASE casewhen, clause, series, met, first, corresponding, end, none, evaluated, components, conditions, optional, marks, return, evaluation, else, case, evaluate, result, stops, condition, set ILIKE compare, numbers, insensitive, first, match, sensitive, supplied, parameter, case, matches, pattern IN list, contained, found IS compare, same, equal, identical IS NOT compare, same, different LIKE compare, sensitive, numbers, first, works, supplied, parameter, matches, pattern Meshes calculate, functions, return, mesh, related, contains NOT negates, condition NULL equates, null OR condition [] array, operator, element, map, index > greater, compares, evaluates, left, values, right >= compares, equal, values, greater, left, evaluates, right ^ power, values abs absolute acos angle, cosine, inverse, radians affine_transform affine, coordinate, operations, spatial, transformation, reference, offset, system, calculations, translation, rotation, order, added, present, scale age difference, needs, datetimes, order, extract, information, following, interval, dates, functions, yearmonthweekdayhourminutesecond aggregate aggregate, combine, features, calculated, merge, concatenate, sum, mean, median, count, quartile, minimum, maximum, minority, majority, standard, deviation, length, unique angle_at_vertex angles, specified, clockwise, angle, linestring, degrees, bisector, north, average, vertex apply_dash_pattern dash, stroked, multilinestring, input, ring, specified, applies, line, pattern, returning area planimetric, polygon, spatial, reference, system, calculations, area, project, settings, surface, ellipsoid, units array list, array, parameter, containing array_agg array, field, aggregated array_all array, contains, compare, search array_append array, added, end array_cat concatenated, arrays, containing array_distinct array, containing, distinct array_filter array, items, limit, evaluates array_find array, found, first, lowest, index array_first array, first array_foreach evaluated, array, iterate, item array_get array, position, index, last, nth, one, first array_insert array, added, position array_intersect array, element, exists, intersection, overlap array_last array, last array_length elements, array, count array_majority common, array, median array_max array, maximum array_mean array, ignored, mean, numeric, arithmetic array_median array, arithmetic, median, ignored array_min array, minimum array_minority common, array, median array_prepend array, added, beginning array_prioritize sorted, array, first, specified, missing, second, ordering, added, present, result, end array_remove_all array, entries, removed array_remove_at array, removed, index array_replace array, map, replaced, supplied array_reverse array, reversed, order array_slice array, defined, arguments, start, position, slice, portion, end, index array_sort sorted, array, elements, provided array_sum array, ignored, numeric, arithmetic, sum array_to_string concatenates, delimiter, join, aggregate ascii code, first, associated, character, unicode asin sine, inverse, angle, radians atan tangent, inverse, angle, radians atan2 tangent, arguments, signs, angle, inverse, quadrant attribute attribute attributes attributes, names, field, keys, containing, map azimuth measured, clockwise, points, angle, vertical, north, azimuth, radians base_file_name suffix, base, directory, name, file, folder, path boundary polygon, linestrings, instance, combinatorial, topological, points, collections, types, ring, boundary, closure bounds box, input, spatial, reference, calculations, system, represents, bounding bounds_height box, spatial, reference, calculations, system, height, bounding bounds_width width, box, spatial, reference, calculations, system, bounding buffer distance, equal, spatial, reference, calculations, system, points, segments, miter, join, cap, round buffer_by_m line, according, values, varies, vertices, buffer, diameter ceil rounds, number centroid geometric, center char associated, character, unicode, code clamp specified, restricts, input, range close_line first, point, closed, end, input, appending, result, line, multi closest_point closest, point, nearest coalesce list, first, arguments, null collect aggregated, multipart collect_geometries part, set, collects, object, multi color_cmyk cyan, color, black, yellow, representation, components color_cmyka cyan, alpha, color, black, yellow, representation, components color_grayscale_average filter, color, provided, applies, grayscale, representation color_hsl attributes, lightness, color, hue, representation, saturation color_hsla attributes, alpha, lightness, color, transparency, hue, representation, saturation color_hsv attributes, color, hue, representation, saturation color_hsva attributes, alpha, color, transparency, hue, representation, saturation color_mix_rgb green, blue, red, alpha, mixing, color, colors, provided, ratio color_part red, specific, color, component, alpha color_rgb green, blue, red, color, representation, components color_rgba green, blue, red, alpha, color, representation, components combine combination, union concat empty, converted, numbers, concatenates, null, strings, several, other, values concatenate aggregated, field, joined, delimiter, strings concatenate_unique aggregated, unique, field, joined, delimiter, strings contains lie, point, lies, tests, interior, exterior, within, points, contains convex_hull hull, convex, minimum, represents, encloses, set cos angle, cosine count aggregate, features, matching, count count_distinct aggregate, distinct, count count_missing aggregate, missing, count create_ramp map, gradient, steps, strings, ramp, color crosses common, supplied, crosses, tests, interior, points current_parent_value field, actual, unsaved, wrapped, retrieve, widget, current, relation, differ, edited, embedded, coalesce, attribute, form, filter, added, features, parent, context, usable current_value table, field, actual, unsaved, current, differ, edited, row, attribute, form, added, features darker darker, color, lighter datetime_from_epoch passed, datetime, localtime, msecs, date, coordinated, converted, universal, milliseconds, time day date, extracts, interval, days, number, day day_of_week week, day, specified, datetime, corresponds, ranges, date, saturday decode_uri depends, layer, data, dataprovider, provider, uri, underlying, decodes, available degrees converts, degrees, radians densify_by_count generates, layer, line, number, one, new, polygon, vertices, larger, original densify_by_distance maximum, edges, additional, generates, line, densified, adding, new, polygon, interval, layer, one, distance, vertices, specified difference part, represents, intersect, clip disjoint share, intersect, tests, space display_expression evaluated, arguments, details, display, default distance projected, reference, spatial, minimum, units distance_to_vertex distance, specified, vertex end_point last, node, vertex env operating, content, prefixes, gets, definition, found, drive, check, system, environment, path, variables, letters, inject, specific, configuration, depends, administrator, variable, documentation, handy, set epoch interval, date, milliseconds, epoch eval dynamic, fields, parameters, expression, expand, context, passed, variables, evaluates eval_template dynamic, fields, parameters, template, expand, context, passed, variables, evaluates exif exif, retrieves, tag, file, image, values exif_geotag geotags, exif, point, file, image exp exponential extend start, distances, line, last, linestring, amount, parts, bearing, lines, extends, reference, spatial, extended, first, segment, system, multilinestring, specified, end exterior_ring polygon, line, ring, exterior, result, representing extrude curve, version, extension, input, specified, extruded, linestring, multi file_exists path, exists, file file_name extension, name, directory, file, path file_path path, directory, name, folder, file file_size size, file, bytes file_suffix extension, path, suffix, file flip_coordinates latitude, longitude, reversed, swapped, coordinates, repairing, copy floor downwards, rounds, number force_polygon_ccw exterior, clockwise, respect, convention, rings, counter, interior, forces force_polygon_cw exterior, clockwise, respect, convention, rings, interior, counter, forces force_rhr contexts, clockwise, boundary, interior, rings, bounded, force_polygon_cw, explicit, polygon, area, exterior, inconsistency, right, use, hand, particular, respect, counter, forces, ring, recommended, oriented, direction, rule, definition format format, supplied, arguments format_date custom, type, uses, format, strings, time, date, formats, see, qdatetime, tostring format_number formatted, truncates, places, separator, decimal, default, thousands, locale, language from_base64 encoding, base, binary, decodes from_json json, loads, formatted generate_series sequence, containing, numbers, array geom_from_gml representation, conversion geom_from_wkb created, wkb, binary, known, representation, conversion geom_from_wkt text, known, wkt, representation, conversion geom_to_wkb wkb, binary, representation, known, conversion geom_to_wkt text, wkt, srid, representation, known, conversion geometry geometry_n part, input, multipart, collection, specific geometry_type describing, type, point, polygon, line get_feature attribute, first, matching, search, find get_feature_by_id hamming_distance distance, length, input, sensitive, different, strings, corresponding, hamming, equates, characters, case, same, comparison, positions hash hex, bytes, byte, digits, hash, method, given, represented, character, long, bits, produces hausdorff_distance distance, segment, dissimilar, densify, linestrings, parallel, other, matching, total, close, executed, specifying, occurs, equal, fraction, testing, method, discrete, linear, default, approximate, sets, length, large, lower, similar, similarity, parameter, measure, split, make, approach, closest, examples, provided, performs, insufficient, networks, specify, optional, decreasing, approximation, cases, densification, specified, computing, argument, subsegments, hausdorff, exact, indicating, subset, standard hour extracts, number, time, part, interval, hours, hour, datetime hstore_to_map formatted, hstore, map if tests, different, check, result, conditional, depending, condition inclination zenith, nadir, inclination, measured, points interior_ring_n interior, polygon, hole, ring intersection shared, represents, portion, overlap intersects share, space, intersects, tests, intersect, portion, overlaps intersects_bbox box, tests, overlaps, defined, intersect, bounding iqr field, quartile, range, inter, calculated, statistics, aggregates is_closed points, start, closed, end, coincident, result, false, line is_directory path, directory, folder is_empty empty, is_empty_or_null, see, coordinates, false is_empty_or_null empty, is_empty, coordinates, false is_file path, file is_layer_visible specified, visible is_multipart type, multi is_selected selected, arguments, details is_valid rules, valid, ogc, according, formed item_variables layout, item, variables, print, map layer_property property, matching, metadata left first, substring, leftmost, characters, contains, extracts length distance, linestring, length, count, characters, planimetric length3D planimetric, distance, length, spatial, reference, system, calculations, calculates, line, project, differs, object, match, settings, ellipsoid, units levenshtein distance, required, edit, indicate, sensitive, similarity, insertions, similar, mean, measure, different, character, change, substitutions, strings, edits, distances, larger, deletions, equates, case, minimum, levenshtein, smaller lighter darker, color, lighter line_interpolate_angle distance, angles, parallel, specified, clockwise, angle, linestring, degrees, north line_interpolate_point distance, interpolated, linestring, point, specified, along line_locate_point distance, point, specified, closest, linestring, position, corresponding, along line_merge passed, single, return, input, linestrings, merged, connected, linestring, multilinestring line_substring curve, start, specified, measured, falls, existing, interpolated, beginning, distances, line, end, portion ln natural, logarithm log base, logarithm log10 base, logarithm longest_common_substring longest, common, input, sensitive, case, substring, strings lower converts, letters, lower, case lpad length, padded, width, truncated, specified, target, fill, left, character, smaller m point, measure m_max maximum, measure m_min minimum, measure main_angle oriented, minimal, covers, clockwise, angle, long, north, degrees, rectangle, axis, bounding majority occurring, field, majority, aggregate make_circle circular, polygon make_date year, date, month, numbers, day make_datetime minute, month, numbers, day, year, second, hour, datetime make_ellipse polygon, elliptical make_interval minute, seconds, month, year, weeks, values, interval, hours, days make_line point, line, series make_point optional, point make_point_m point, coordinate make_polygon outer, ring, series, inner, optional, polygon make_rectangle_3points rectangle, points make_regular_polygon polygon, regular make_square square, diagonal make_time minute, hour, second, numbers, time make_triangle triangle, polygon map passed, keys, pair, containing, parameters, map map_akeys array, map, keys map_avals array, map map_concat containing, key, concatenate, contain, entries, maps, map map_credits list, rights, layers, layout, item, usage, credit, strings, map map_delete deleted, corresponding, map, key map_exist map, exists, key map_get map, exists, key map_insert map, added, exists, key, overridden map_prefix_keys prefixed, keys, map map_to_hstore formatted, hstore, elements, map, merge maptip evaluated, arguments, maptip, details, default, see max longest, biggest, most, largest, maximum max_length length, maximum, strings, characters, count, aggregate maximum maximum, aggregate md5 hash mean average, aggregate, mean median median, aggregate mime_type type, data, binary min least, smallest, minimum min_length length, characters, count, minimum, strings minimal_circle enclosing, minimal, minimum, represents, encloses, circle, smallest minimum minimum, aggregate minority least, occurring, field, minority, aggregate minute minutes, extracts, part, interval, number, time, datetime month date, extracts, months, part, interval, month, number nodes_to_points vertex, multipoint, node, input now static, evaluating, current, date, time nullif substitute, equals, condition, compare num_geometries collection, multipart, parts, count num_interior_rings rings, holes, count, polygon, collection, interior num_points vertices num_rings rings, holes, polygon, collection, exterior, including num_selected evaluated, selected, works, default, features offset_curve spatial, offsetting, reference, system, linestring, formed, distances, side order_parts criteria, multigeometry, orders, parts, given oriented_bbox oriented, box, minimal, represents, bounding overlaps share, tests, contained, overlaps, same, dimension, space overlay_contains least, predicate, current, contained, target, contains, array, geos, st_contains, postgis, described, underlying, features overlay_crosses predicate, st_crosses, crosses, current, target, array, geos, described, underlying, features, crossed overlay_disjoint predicate, st_disjoint, disjoint, current, target, array, geos, described, underlying, features overlay_equals predicate, current, equals, equal, target, array, geos, st_equals, described, underlying, features overlay_intersects intersected, least, predicate, current, target, array, geos, postgis, described, st_intersects, intersects, underlying, features overlay_nearest distance, layers, large, slow, current, target, array, lot, features overlay_touches least, predicate, touches, current, target, array, geos, described, underlying, touched, st_touches, features overlay_within predicate, current, contain, target, array, geos, described, underlying, features parameter algorithm, parameter, processing perimeter planimetric, distance, polygon, perimeter, spatial, reference, system, calculations, project, differs, object, match, settings, ellipsoid, units pi calculations, pi point_n specific, node, vertex point_on_surface point, surface, lie, centroid, overlay pole_of_inaccessibility inaccessibility, precise, tolerances, calculates, guaranteed, boundary, require, point, true, iterations, internal, uses, approximate, approach, polylabel, find, distant, calculate, pole, take, surface, specified, tolerance, iterative project distance, elevation, projected, start, point, azimuth, radians, bearing project_color scheme, project, color q1 field, quartile, first, calculated q3 third, field, quartile, calculated radians converts, degrees, radians ramp_color ramp, color, representing rand random, inclusive, specified, range, argument, seed, same, provided, minimum, maximum, integer, depending randf random, specified, range, argument, seed, same, provided, float, minimum, maximum, inclusive, depending range field, range, aggregate, minimum, maximum raster_statistic raster, statistics raster_value provided, point, raster, found regexp_match return, found, matching, unicode, regular, position, substring, first regexp_matches array, groups, capturing, captured, order, appear, supplied, regular, strings regexp_replace regular, supplied, replaced regexp_substr regular, matches, supplied, portion relate dimensional, relationship, extended, intersection, representation, model, tests relation_aggregate child, matching, aggregate, features, relation replace array, map, strings, supplied, replaced represent_attributes attributes, keys, arguments, representation, map, see, attribute, configured, names, type, details, depends, widget represent_value depends, configured, field, type, widgets, map, representation, widget reverse direction, order, vertices, reverses, line, reversing right last, substring, rightmost, characters, contains rotate version, spatial, reference, calculations, rotated, system round rounds, places, decimal, number roundness polygon, perfect, flat, close, shape, calculates, circle rpad length, right, padded, width, specified, truncated, target, fill, character, smaller scale version, scaled, spatial, reference, calculations, system scale_exp exponential, curve, ease, transforms, output, given, input, domain, range, specified, values scale_linear transforms, linear, output, given, input, domain, range, interpolation second extracts, part, seconds, interval, number, time, datetime segments_to_lines consisting, segment, input, multi, line set_color_part alpha, component, specific, red, color, sets sha256 hash shortest_line start, resultant, joining, end, shortest, line simplify straight, large, deviations, nodes, algorithm, reduces, simplifies, segments, number, threshold, distance, removing, vertices, based, preserves simplify_vw spikes, areas, straight, nodes, algorithm, area, simplifies, removes, narrow, segments, visvalingam, threshold, create, vertices, removing, based, small sin sine, angle single_sided_buffer buffering, spatial, reference, system, linestring, formed, distances, side sinuosity curve, distance, length, endpoints, sinuosity, ratio, straight smooth adding, corners, smoothed, dimensionality, round, output, contain, input, retain, extra, smooths, nodes, values, same soundex code, represented, similar, matching, algorithm, soundex, same, phonetic, representation, strings, sounds sqlite_fetch_and_increment attributes, children, applied, uncommitted, works, relations, prefetched, intended, creating, several, auto_increment, form, databases, transaction, parents, filter_value, mode, open, primary, evaluate, sidenote, add, require, impossible, default_values, table, insert, nice, formats, current, adding, get, target, work, specified, usage, columns, retrieved, autoincrementing, new, limitation, gpkg, parallel, database, additional, makes, postgres, modifies, sequence, cached, manage, key, same, id_field, acquire, filtered, default, filter_attribute, parent, option, unsafe, sqlite, separate, parameter, map, row, configurations, lifetime, processes, incremented, able, features, purpose sqrt root, square square_wave waves, rectangular, constructs, square, boundary square_wave_randomized waves, rectangular, constructs, square, boundary, randomized start_point first, node stdev deviation, field, standard, aggregate straight_distance_2d distance, curve, circularstring, first, last, direct, euclidean, linestring, vertex string_to_array split, convert, separate, delimiter, divides strpos substring, position, return, found, first, matching substr part sum field, summed, aggregate sym_difference portions, represents, intersect tan angle, tangent tapered_buffer varies, buffer, line, diameter, length title letter, words, lower, converts, leading, capital, title, case to_base64 encoding, base, binary, encodes to_date provided, additional, user, format_date, parse, qdate, converts, default, current, format, object, fromstring, date, optional, documentation, see to_datetime provided, additional, user, format_date, parse, qdate, converts, default, datetime, current, format, object, fromstring, optional, documentation, qtime, see to_decimal converts, minute, degree, equivalent, second, coordinate, decimal to_dm converts, minute, degree, coordinate to_dms converts, minute, degree, second, coordinate to_int converts, invalid, converted, integer to_interval type, month, converts, date, interval, take, hours, days to_json formatted, json, array, create, other, map to_real converts, precision, invalid, rounded, numbers, changes, real, result, converted, saving, conversion, smaller to_string converts, number to_time provided, additional, format, object, parse, time, converts, fromstring, optional, documentation, qtime, see touches point, common, touches, interiors, tests, intersect transform crs, source, transformed, destination, reprojection translate spatial, reference, calculations, system, translated, displace, move triangular_wave waves, boundary, constructs, triangular triangular_wave_randomized waves, boundary, constructs, randomized, triangular trim removes, leading, whitespace, spaces, tabs, trailing try return, tries, error, alternative, provided, exception union union, dissolve, point, represents, set upper converts, upper, letters, case url_encode encoded, producing, form, characters, query, plus, url, compliant, converted, map, sign, transforms uuid createuuid, generates, method, unique, quuid, identifier, row var stored, variable, specified wave waves, rounded, sine, boundary, constructs wave_randomized waves, sine, boundary, curved, constructs, randomized wedge_buffer buffer, wedge, point, originating, shaped week weeks, week, date, extracts, interval, number with_variable variable, argument, value, evaluation within tests, contains, completely wordwrap maximum, minimum, wrapped, characters, multiline x centroid, point, coordinate x_max coordinate, spatial, reference, calculations, system, maximum x_min coordinate, spatial, reference, calculations, system, minimum y centroid, point, coordinate y_max coordinate, spatial, reference, calculations, system, maximum y_min coordinate, spatial, reference, calculations, system, minimum year year, years, date, extracts, part, interval, number z point, coordinate z_max coordinate, maximum z_min coordinate, minimum || behavior, different, see, concat, null, joins, result, values ~ white, space, regular, performs, backslash, characters, escaped, character, expression, match","title":"Funzioni tags"},{"location":"tag_espressioni/tags_esplose/","text":"tag espressioni geometry, get_feature_by_id absolute abs adding smooth, sqlite_fetch_and_increment, densify_by_distance corners smooth smoothed smooth dimensionality smooth round smooth, buffer output smooth, scale_exp, scale_linear contain smooth, map_concat, overlay_within input smooth, bounds, segments_to_lines, extrude, apply_dash_pattern, hamming_distance, scale_exp, close_line, longest_common_substring, geometry_n, line_merge, clamp, scale_linear, nodes_to_points retain smooth extra smooth smooths smooth nodes smooth, simplify_vw, simplify values smooth, +, same smooth, sqlite_fetch_and_increment, soundex, IS NOT, IS, hamming_distance, rand, randf, overlaps addition + null +, result +, affine affine_transform coordinate affine_transform, x, y, to_dm, to_decimal, to_dms, z_max, $vertex_x, $vertex_y, z_min, x_max, y_max, x_min, y_min, $x_at, $y_at, $x, $y, make_point_m, z operations affine_transform spatial affine_transform, bounds, bounds_height, single_sided_buffer, x_max, y_max, x_min, y_min, buffer, length3D, perimeter, area, distance, offset_curve, translate, extend, scale, rotate, bounds_width transformation affine_transform reference affine_transform, bounds, bounds_height, single_sided_buffer, x_max, y_max, x_min, y_min, buffer, length3D, perimeter, area, distance, offset_curve, translate, extend, scale, rotate, bounds_width offset affine_transform system affine_transform, bounds, bounds_height, single_sided_buffer, x_max, y_max, x_min, y_min, buffer, env, length3D, perimeter, area, offset_curve, translate, extend, scale, rotate, bounds_width calculations affine_transform, bounds, bounds_height, pi, x_max, y_max, x_min, y_min, buffer, length3D, perimeter, area, translate, scale, rotate, bounds_width translation affine_transform rotation affine_transform order affine_transform, regexp_matches, array_reverse, age, reverse added affine_transform, array_prepend, array_append, array_insert, current_parent_value, map_insert, array_prioritize, current_value present affine_transform, array_prioritize scale affine_transform, $scale aggregate aggregate, count_distinct, count, count_missing, mean, relation_aggregate, array_to_string, stdev, range, sum, minority, max_length, maximum, median, minimum, majority combine aggregate features aggregate, count, sqlite_fetch_and_increment, relation_aggregate, overlay_nearest, num_selected, current_parent_value, overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint, current_value calculated aggregate, $length, $perimeter, q1, iqr, q3 merge aggregate, map_to_hstore concatenate aggregate, map_concat sum aggregate, array_sum mean aggregate, array_mean, mean, levenshtein median aggregate, array_median, array_majority, array_minority, median count aggregate, count_distinct, count, count_missing, num_geometries, length, array_length, min_length, max_length, num_interior_rings quartile aggregate, q1, iqr, q3 minimum aggregate, array_min, z_min, x_min, y_min, levenshtein, minimal_circle, range, convex_hull, min, min_length, wordwrap, minimum, m_min, distance, rand, randf maximum aggregate, array_max, z_max, x_max, y_max, range, max_length, max, maximum, densify_by_distance, m_max, wordwrap, rand, randf minority aggregate, minority majority aggregate, majority standard aggregate, stdev, hausdorff_distance deviation aggregate, stdev length aggregate, sinuosity, hamming_distance, length, $length, $perimeter, hausdorff_distance, min_length, max_length, lpad, rpad, length3D, tapered_buffer unique aggregate, concatenate_unique, uuid distinct count_distinct, array_distinct matching count, get_feature, relation_aggregate, soundex, hausdorff_distance, layer_property, regexp_match, strpos missing count_missing, array_prioritize aggregated concatenate, collect, concatenate_unique, array_agg field concatenate, concatenate_unique, array_agg, attributes, represent_value, stdev, current_parent_value, q1, iqr, range, sum, minority, majority, current_value, q3 joined concatenate, concatenate_unique delimiter concatenate, concatenate_unique, array_to_string, string_to_array strings concatenate, concatenate_unique, regexp_matches, replace, soundex, format_date, hamming_distance, levenshtein, concat, min_length, max_length, map_credits, longest_common_substring, create_ramp multipart collect, num_geometries, geometry_n algorithm parameter, soundex, simplify_vw, simplify parameter parameter, sqlite_fetch_and_increment, ILIKE, LIKE, hausdorff_distance, array processing parameter, $geometry alpha set_color_part, color_hsva, color_hsla, color_cmyka, color_rgba, color_mix_rgb, color_part component set_color_part, color_part specific set_color_part, env, geometry_n, color_part, point_n red set_color_part, color_rgba, color_mix_rgb, color_rgb, color_part color set_color_part, color_hsva, color_hsla, color_hsv, color_hsl, color_cmyka, color_cmyk, darker, lighter, color_grayscale_average, color_rgba, color_mix_rgb, color_rgb, create_ramp, ramp_color, color_part, project_color sets set_color_part, hausdorff_distance angle cos, acos, tan, angle_at_vertex, line_interpolate_angle, azimuth, main_angle, sin, asin, atan2, atan cosine cos, acos inverse acos, asin, atan2, atan radians acos, degrees, radians, project, azimuth, asin, atan tangent tan, atan2, atan angles angle_at_vertex, line_interpolate_angle specified angle_at_vertex, sqlite_fetch_and_increment, line_substring, extrude, apply_dash_pattern, line_interpolate_angle, line_interpolate_point, line_locate_point, hausdorff_distance, distance_to_vertex, scale_exp, pole_of_inaccessibility, lpad, rpad, densify_by_distance, rand, randf, array_prioritize, clamp, is_layer_visible, extend, var, day_of_week clockwise angle_at_vertex, force_rhr, line_interpolate_angle, force_polygon_ccw, force_polygon_cw, azimuth, main_angle linestring angle_at_vertex, single_sided_buffer, extrude, line_interpolate_angle, straight_distance_2d, line_interpolate_point, length, $length, line_locate_point, line_merge, offset_curve, extend degrees angle_at_vertex, degrees, radians, line_interpolate_angle, main_angle bisector angle_at_vertex north angle_at_vertex, line_interpolate_angle, azimuth, main_angle average angle_at_vertex, mean vertex angle_at_vertex, $vertex_x, $vertex_y, straight_distance_2d, distance_to_vertex, $vertex_index, end_point, $vertex_z, $vertex_as_point, point_n, nodes_to_points array array_prepend, array_append, array_insert, array_median, array_distinct, array_all, array_slice, array_intersect, array_remove_all, array_agg, array_first, array_find, regexp_matches, array_mean, array_sum, array_filter, array_last, map_avals, map_akeys, array_replace, replace, array_max, array_min, [], array_get, array_remove_at, array_reverse, array_majority, array_minority, overlay_nearest, array_length, array_foreach, to_json, overlay_intersects, overlay_contains, overlay_touches, array, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint, generate_series, array_sort, array_prioritize beginning array_prepend, line_substring end array_append, array_slice, CASE, line_substring, close_line, is_closed, array_prioritize, extend, shortest_line position array_insert, array_slice, array_get, line_locate_point, regexp_match, strpos arithmetic array_median, array_mean, array_sum ignored array_median, array_mean, array_sum containing array_distinct, attributes, array_cat, map_concat, array, map, generate_series contains array_all, Meshes, left, right, overlay_contains, contains, within compare array_all, ILIKE, IS NOT, IS, LIKE, nullif search array_all, get_feature defined array_slice, intersects_bbox arguments array_slice, represent_attributes, display_expression, maptip, format, coalesce, is_selected, atan2 start array_slice, line_substring, project, is_closed, extend, shortest_line slice array_slice portion array_slice, line_substring, regexp_substr, intersects, intersection index array_slice, array_find, [], array_get, array_remove_at, $vertex_index element array_intersect, [] exists array_intersect, map_insert, map_exist, map_get, file_exists intersection array_intersect, relate overlap array_intersect, intersection entries array_remove_all, map_concat removed array_remove_all, array_remove_at first array_first, array_find, array_get, get_feature, CASE, ascii, ILIKE, LIKE, straight_distance_2d, q1, start_point, close_line, $x, $y, $z, left, coalesce, regexp_match, array_prioritize, extend, strpos found array_find, IN, env, raster_value, regexp_match, strpos lowest array_find groups regexp_matches capturing regexp_matches captured regexp_matches appear regexp_matches supplied regexp_matches, array_replace, replace, crosses, ILIKE, LIKE, format, regexp_substr, regexp_replace regular regexp_matches, make_regular_polygon, regexp_substr, regexp_replace, regexp_match, ~ numeric array_mean, array_sum items array_filter limit array_filter evaluates array_filter, <=, >=, =, <>, eval, eval_template, >, < last array_last, array_get, straight_distance_2d, end_point, right, extend map map_avals, map_akeys, array_replace, replace, [], sqlite_fetch_and_increment, represent_attributes, attributes, map_concat, map_delete, $scale, represent_value, url_encode, map_to_hstore, hstore_to_map, to_json, $map, item_variables, map_credits, map_insert, map_exist, map_get, create_ramp, map, map_prefix_keys keys map_akeys, represent_attributes, attributes, map, map_prefix_keys replaced array_replace, replace, regexp_replace operator [] nth array_get one array_get, densify_by_count, densify_by_distance reversed array_reverse, flip_coordinates associated char, ascii character char, ascii, levenshtein, hash, lpad, rpad, ~ unicode char, ascii, regexp_match code char, ascii, soundex attribute attribute, get_feature, represent_attributes, current_parent_value, current_value find get_feature, pole_of_inaccessibility attributes color_hsva, color_hsla, sqlite_fetch_and_increment, color_hsv, represent_attributes, color_hsl, attributes transparency color_hsva, color_hsla hue color_hsva, color_hsla, color_hsv, color_hsl representation color_hsva, color_hsla, color_hsv, represent_attributes, color_hsl, soundex, geom_from_wkb, color_cmyka, color_cmyk, represent_value, relate, color_grayscale_average, color_rgba, color_rgb, geom_from_gml, geom_from_wkt, geom_to_wkt, geom_to_wkb saturation color_hsva, color_hsla, color_hsv, color_hsl lightness color_hsla, color_hsl children sqlite_fetch_and_increment applied sqlite_fetch_and_increment uncommitted sqlite_fetch_and_increment works sqlite_fetch_and_increment, LIKE, num_selected relations sqlite_fetch_and_increment prefetched sqlite_fetch_and_increment intended sqlite_fetch_and_increment creating sqlite_fetch_and_increment several sqlite_fetch_and_increment, concat auto_increment sqlite_fetch_and_increment form sqlite_fetch_and_increment, url_encode, current_parent_value, current_value databases sqlite_fetch_and_increment transaction sqlite_fetch_and_increment parents sqlite_fetch_and_increment filter_value sqlite_fetch_and_increment mode sqlite_fetch_and_increment open sqlite_fetch_and_increment primary sqlite_fetch_and_increment evaluate sqlite_fetch_and_increment, CASE sidenote sqlite_fetch_and_increment add sqlite_fetch_and_increment require sqlite_fetch_and_increment, pole_of_inaccessibility impossible sqlite_fetch_and_increment default_values sqlite_fetch_and_increment table sqlite_fetch_and_increment, current_value insert sqlite_fetch_and_increment nice sqlite_fetch_and_increment formats sqlite_fetch_and_increment, format_date current sqlite_fetch_and_increment, $vertex_x, $vertex_y, $geometry, $x_at, $y_at, $scale, overlay_nearest, $length, $perimeter, current_parent_value, $x, $y, $z, $vertex_index, overlay_intersects, $map, $page, overlay_contains, overlay_touches, $vertex_z, $vertex_as_point, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint, to_date, to_datetime, $id, $rownum, now, current_value get sqlite_fetch_and_increment target sqlite_fetch_and_increment, overlay_nearest, overlay_intersects, overlay_contains, overlay_touches, lpad, rpad, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint work sqlite_fetch_and_increment usage sqlite_fetch_and_increment, map_credits columns sqlite_fetch_and_increment retrieved sqlite_fetch_and_increment autoincrementing sqlite_fetch_and_increment new sqlite_fetch_and_increment, densify_by_count, densify_by_distance limitation sqlite_fetch_and_increment gpkg sqlite_fetch_and_increment parallel sqlite_fetch_and_increment, line_interpolate_angle, hausdorff_distance database sqlite_fetch_and_increment additional sqlite_fetch_and_increment, densify_by_distance, to_time, to_date, to_datetime makes sqlite_fetch_and_increment postgres sqlite_fetch_and_increment modifies sqlite_fetch_and_increment sequence sqlite_fetch_and_increment, generate_series cached sqlite_fetch_and_increment manage sqlite_fetch_and_increment key sqlite_fetch_and_increment, map_concat, map_delete, map_insert, map_exist, map_get id_field sqlite_fetch_and_increment acquire sqlite_fetch_and_increment filtered sqlite_fetch_and_increment default sqlite_fetch_and_increment, hausdorff_distance, display_expression, maptip, num_selected, format_number, to_date, to_datetime filter_attribute sqlite_fetch_and_increment parent sqlite_fetch_and_increment, current_parent_value option sqlite_fetch_and_increment unsafe sqlite_fetch_and_increment sqlite sqlite_fetch_and_increment separate sqlite_fetch_and_increment, string_to_array row sqlite_fetch_and_increment, uuid, $id, $rownum, current_value configurations sqlite_fetch_and_increment lifetime sqlite_fetch_and_increment processes sqlite_fetch_and_increment incremented sqlite_fetch_and_increment able sqlite_fetch_and_increment purpose sqlite_fetch_and_increment see represent_attributes, configured represent_attributes, represent_value names represent_attributes, attributes type represent_attributes, format_date, represent_value, geometry_type, mime_type, to_interval, is_multipart details represent_attributes, display_expression, maptip, is_selected depends represent_attributes, represent_value, decode_uri, env widget represent_attributes, represent_value, current_parent_value base log, log10, from_base64, to_base64, base_file_name logarithm log, log10, ln behavior different concat joins box bounds, bounds_height, intersects_bbox, oriented_bbox, bounds_width represents bounds, minimal_circle, convex_hull, oriented_bbox, difference, sym_difference, intersection, union bounding bounds, bounds_height, intersects_bbox, oriented_bbox, main_angle, bounds_width height bounds_height tests intersects_bbox, crosses, relate, contains, touches, disjoint, intersects, overlaps, within, if overlaps intersects_bbox, intersects, overlaps intersect intersects_bbox, difference, touches, sym_difference, disjoint, intersects buffer wedge_buffer, buffer_by_m, tapered_buffer wedge wedge_buffer point wedge_buffer, x, y, closest_point, geometry_type, project, line_interpolate_point, line_locate_point, close_line, $x, $y, $z, exif_geotag, pole_of_inaccessibility, contains, make_point, touches, make_point_m, z, make_line, m, $vertex_as_point, point_on_surface, raster_value, union originating wedge_buffer shaped wedge_buffer buffering single_sided_buffer formed single_sided_buffer, is_valid, offset_curve distances single_sided_buffer, line_substring, levenshtein, offset_curve, extend side single_sided_buffer, offset_curve calculate Meshes, pole_of_inaccessibility functions Meshes, $geometry, age return Meshes, CASE, line_merge, regexp_match, try, strpos mesh Meshes, $vertex_x, $vertex_y, $vertex_index, $vertex_z, $vertex_as_point related Meshes pi pi casewhen CASE clause CASE series CASE, make_polygon, make_line met CASE corresponding CASE, map_delete, hamming_distance, line_locate_point none CASE evaluated CASE, display_expression, maptip, array_foreach, num_selected components CASE, color_cmyka, color_cmyk, color_rgba, color_rgb conditions CASE optional CASE, hausdorff_distance, make_point, make_polygon, to_time, to_date, to_datetime marks CASE evaluation CASE, with_variable else CASE case CASE, ILIKE, lower, upper, hamming_distance, levenshtein, title, longest_common_substring stops CASE condition CASE, AND, OR, NOT, nullif, if set CASE, convex_hull, env, collect_geometries, union centroid x, y, point_on_surface child relation_aggregate relation relation_aggregate, current_parent_value circular make_circle polygon make_circle, force_rhr, geometry_type, $perimeter, densify_by_count, interior_ring_n, densify_by_distance, make_polygon, perimeter, area, make_ellipse, exterior_ring, boundary, roundness, make_regular_polygon, num_interior_rings, num_rings, make_triangle closest closest_point, line_locate_point, hausdorff_distance nearest closest_point represented soundex, hash similar soundex, levenshtein, hausdorff_distance soundex soundex phonetic soundex sounds soundex collection num_geometries, geometry_n, num_interior_rings, num_rings parts num_geometries, order_parts, extend combination combine union combine, union common array_majority, array_minority, crosses, longest_common_substring, touches crosses crosses, overlay_crosses interior crosses, force_rhr, force_polygon_ccw, force_polygon_cw, interior_ring_n, contains, num_interior_rings points crosses, buffer, contains, azimuth, is_closed, boundary, make_rectangle_3points, inclination numbers ILIKE, LIKE, to_real, concat, make_time, make_datetime, generate_series, make_date insensitive ILIKE match ILIKE, length3D, perimeter, ~ sensitive ILIKE, LIKE, hamming_distance, levenshtein, longest_common_substring matches ILIKE, LIKE, regexp_substr pattern ILIKE, LIKE, apply_dash_pattern equal IS, <=, >=, =, <>, buffer, hausdorff_distance, overlay_equals identical IS compares <=, >=, =, <>, >, < less <=, < left <=, >=, >, <, lpad right <=, >=, force_rhr, >, <, rpad greater >=, > concatenated array_cat arrays array_cat concatenates array_to_string, concat join array_to_string, buffer consisting segments_to_lines segment segments_to_lines, hausdorff_distance, extend multi segments_to_lines, extrude, close_line, collect_geometries, is_multipart line segments_to_lines, line_substring, apply_dash_pattern, geometry_type, reverse, close_line, densify_by_count, buffer_by_m, densify_by_distance, length3D, make_line, is_closed, exterior_ring, extend, shortest_line, tapered_buffer maps map_concat contexts force_rhr, $scale boundary force_rhr, pole_of_inaccessibility, boundary, triangular_wave_randomized, triangular_wave, square_wave, square_wave_randomized, wave, wave_randomized rings force_rhr, force_polygon_ccw, force_polygon_cw, num_interior_rings, num_rings bounded force_rhr force_polygon_cw force_rhr explicit force_rhr area force_rhr, area, simplify_vw exterior force_rhr, force_polygon_ccw, force_polygon_cw, contains, exterior_ring, num_rings inconsistency force_rhr use force_rhr hand force_rhr particular force_rhr respect force_rhr, force_polygon_ccw, force_polygon_cw counter force_rhr, force_polygon_ccw, force_polygon_cw forces force_rhr, force_polygon_ccw, force_polygon_cw ring force_rhr, apply_dash_pattern, interior_ring_n, make_polygon, exterior_ring, boundary recommended force_rhr oriented force_rhr, oriented_bbox, main_angle direction force_rhr, reverse rule force_rhr definition force_rhr, env converts degrees, radians, to_int, lower, to_dm, to_decimal, to_dms, to_string, to_real, upper, title, to_time, to_date, to_datetime, to_interval invalid to_int, to_real converted to_int, to_real, concat, url_encode, datetime_from_epoch integer to_int, rand letters lower, upper, env lower lower, hausdorff_distance, title minute to_dm, to_decimal, to_dms, make_time, make_datetime, make_interval degree to_dm, to_decimal, to_dms equivalent to_decimal second to_decimal, to_dms, make_time, make_datetime, array_prioritize decimal to_decimal, format_number, round number to_string, day, month, floor, hour, second, densify_by_count, minute, ceil, round, $rownum, simplify, week, year precision to_real rounded to_real, wave changes to_real real to_real saving to_real conversion to_real, geom_from_wkb, geom_from_gml, geom_from_wkt, geom_to_wkt, geom_to_wkb smaller to_real, levenshtein, lpad, rpad upper upper created geom_from_wkb wkb geom_from_wkb, geom_to_wkb binary geom_from_wkb, from_base64, to_base64, mime_type, geom_to_wkb known geom_from_wkb, geom_from_wkt, geom_to_wkt, geom_to_wkb createuuid uuid generates uuid, densify_by_count, densify_by_distance method uuid, hausdorff_distance, hash quuid uuid identifier uuid criteria order_parts multigeometry order_parts orders order_parts given order_parts, scale_exp, hash, scale_linear crs transform source transform transformed transform destination transform reprojection transform retrieves $x_at, $y_at, exif feature $x_at, $y_at curve sinuosity, line_substring, extrude, straight_distance_2d, scale_exp distance sinuosity, line_interpolate_angle, straight_distance_2d, project, buffer, line_interpolate_point, overlay_nearest, hamming_distance, length, $length, $perimeter, line_locate_point, levenshtein, hausdorff_distance, distance_to_vertex, densify_by_distance, length3D, perimeter, simplify endpoints sinuosity sinuosity sinuosity ratio sinuosity, color_mix_rgb straight sinuosity, simplify_vw, simplify measured line_substring, azimuth, inclination falls line_substring existing line_substring interpolated line_substring, line_interpolate_point version extrude, scale, rotate extension extrude, file_name, file_suffix extruded extrude custom format_date uses format_date, pole_of_inaccessibility format format_date, format, to_time, to_date, to_datetime time format_date, hour, second, make_time, minute, datetime_from_epoch, to_time, now date format_date, day, month, epoch, datetime_from_epoch, to_date, now, to_interval, day_of_week, week, make_date, year qdatetime format_date tostring format_date cyan color_cmyka, color_cmyk black color_cmyka, color_cmyk yellow color_cmyka, color_cmyk darker darker, lighter lighter darker, lighter dash apply_dash_pattern stroked apply_dash_pattern multilinestring apply_dash_pattern, line_merge, extend applies apply_dash_pattern, color_grayscale_average returning apply_dash_pattern extracts day, month, hour, second, left, minute, week, year interval day, month, age, hour, second, epoch, densify_by_distance, make_interval, minute, to_interval, week, year days day, make_interval, to_interval day day, make_datetime, day_of_week, make_date months month part month, hour, second, minute, substr, geometry_n, difference, collect_geometries, year month month, make_datetime, make_interval, to_interval, make_date deleted map_delete denominator $scale canvas $scale, $map widgets represent_value layer decode_uri, densify_by_count, densify_by_distance data decode_uri, mime_type dataprovider decode_uri provider decode_uri uri decode_uri underlying decode_uri, overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint decodes decode_uri, from_base64 available decode_uri describing geometry_type difference age needs age datetimes age extract age information age following age dates age yearmonthweekdayhourminutesecond age dimensional relate relationship relate extended relate, extend model relate vertices reverse, densify_by_count, buffer_by_m, densify_by_distance, simplify_vw, simplify, num_points reverses reverse reversing reverse circularstring straight_distance_2d direct straight_distance_2d euclidean straight_distance_2d elevation project projected project, distance azimuth project, azimuth bearing project, extend segments buffer, simplify_vw, simplify miter buffer cap buffer along line_interpolate_point, line_locate_point layers overlay_nearest, map_credits large overlay_nearest, hausdorff_distance, simplify slow overlay_nearest lot overlay_nearest hamming hamming_distance equates hamming_distance, levenshtein, NULL characters hamming_distance, length, url_encode, left, right, min_length, max_length, wordwrap, ~ comparison hamming_distance positions hamming_distance planimetric length, $length, $perimeter, length3D, perimeter, area perimeter $length, $perimeter, perimeter project $length, $perimeter, length3D, perimeter, area, project_color settings $length, $perimeter, length3D, perimeter, area ellipsoid $length, $perimeter, length3D, perimeter, area border $length setting $length, $perimeter required levenshtein edit levenshtein indicate levenshtein similarity levenshtein, hausdorff_distance insertions levenshtein measure levenshtein, hausdorff_distance, m_max, m_min, m change levenshtein substitutions levenshtein edits levenshtein larger levenshtein, densify_by_count deletions levenshtein levenshtein levenshtein dissimilar hausdorff_distance densify hausdorff_distance linestrings hausdorff_distance, line_merge, boundary other hausdorff_distance, concat, to_json total hausdorff_distance close hausdorff_distance, roundness executed hausdorff_distance specifying hausdorff_distance occurs hausdorff_distance fraction hausdorff_distance testing hausdorff_distance discrete hausdorff_distance linear hausdorff_distance, scale_linear approximate hausdorff_distance, pole_of_inaccessibility split hausdorff_distance, string_to_array make hausdorff_distance approach hausdorff_distance, pole_of_inaccessibility examples hausdorff_distance provided hausdorff_distance, color_grayscale_average, color_mix_rgb, to_time, to_date, to_datetime, raster_value, rand, randf, try, array_sort performs hausdorff_distance, ~ insufficient hausdorff_distance networks hausdorff_distance specify hausdorff_distance decreasing hausdorff_distance approximation hausdorff_distance cases hausdorff_distance densification hausdorff_distance computing hausdorff_distance argument hausdorff_distance, rand, randf, with_variable subsegments hausdorff_distance hausdorff hausdorff_distance exact hausdorff_distance indicating hausdorff_distance subset hausdorff_distance division %, / remainder % downwards floor rounds floor, ceil, round dynamic eval, eval_template fields eval, eval_template parameters eval, eval_template, map expression eval, ~ expand eval, eval_template context eval, eval_template, current_parent_value passed eval, eval_template, datetime_from_epoch, map, line_merge variables eval, eval_template, item_variables, env template eval_template elements array_length, map_to_hstore, array_sort empty concat, is_empty_or_null, is_empty is_empty is_empty_or_null coordinates is_empty_or_null, is_empty, flip_coordinates false is_empty_or_null, is_empty, is_closed is_empty_or_null is_empty enclosing minimal_circle minimal minimal_circle, oriented_bbox, main_angle encloses minimal_circle, convex_hull circle minimal_circle, roundness smallest minimal_circle, min encoded url_encode producing url_encode query url_encode plus url_encode url url_encode compliant url_encode sign url_encode transforms url_encode, scale_exp, scale_linear encoding from_base64, to_base64 encodes to_base64 display display_expression maptip maptip iterate array_foreach item array_foreach, $map, item_variables, map_credits selected num_selected, is_selected exif exif, exif_geotag tag exif file exif, file_name, file_suffix, exif_geotag, file_path, file_exists, is_file, file_size, base_file_name image exif, exif_geotag exponential exp, scale_exp ease scale_exp domain scale_exp, scale_linear range scale_exp, iqr, range, rand, randf, clamp, scale_linear name file_name, file_path, base_file_name directory file_name, is_directory, file_path, base_file_name path file_name, file_suffix, env, is_directory, file_path, file_exists, is_file, base_file_name suffix file_suffix, base_file_name convention force_polygon_ccw, force_polygon_cw hours hour, make_interval, to_interval hour hour, make_time, make_datetime datetime hour, second, make_datetime, minute, datetime_from_epoch, to_datetime, day_of_week seconds second, make_interval actual current_parent_value, current_value unsaved current_parent_value, current_value wrapped current_parent_value, wordwrap retrieve current_parent_value differ current_parent_value, current_value edited current_parent_value, current_value embedded current_parent_value coalesce current_parent_value filter current_parent_value, color_grayscale_average usable current_parent_value inter iqr statistics iqr, raster_statistic aggregates iqr summed sum grayscale color_grayscale_average node start_point, end_point, point_n, nodes_to_points closed close_line, is_closed appending close_line multipoint $x, $y, $z, nodes_to_points altitude $z 3D $z substring left, right, longest_common_substring, regexp_match, strpos leftmost left formatted map_to_hstore, hstore_to_map, to_json, format_number, from_json hstore map_to_hstore, hstore_to_map json to_json, from_json create to_json, simplify_vw truncates format_number places format_number, round separator format_number thousands format_number locale format_number language format_number original densify_by_count geometric centroid center centroid geotags exif_geotag green color_rgba, color_mix_rgb, color_rgb blue color_rgba, color_mix_rgb, color_rgb mixing color_mix_rgb colors color_mix_rgb hash md5, sha256, hash hex hash bytes hash, file_size byte hash digits hash long hash, main_angle bits hash produces hash hull convex_hull convex convex_hull inaccessibility pole_of_inaccessibility precise pole_of_inaccessibility tolerances pole_of_inaccessibility calculates pole_of_inaccessibility, length3D, roundness guaranteed pole_of_inaccessibility true pole_of_inaccessibility iterations pole_of_inaccessibility internal pole_of_inaccessibility polylabel pole_of_inaccessibility distant pole_of_inaccessibility pole pole_of_inaccessibility take pole_of_inaccessibility, to_interval surface pole_of_inaccessibility, area, point_on_surface tolerance pole_of_inaccessibility iterative pole_of_inaccessibility hole interior_ring_n intersected overlay_intersects least overlay_intersects, minority, overlay_contains, overlay_touches, min predicate overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint geos overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint postgis overlay_intersects, overlay_contains described overlay_intersects, overlay_contains, overlay_touches, overlay_within, overlay_equals, overlay_crosses, overlay_disjoint st_intersects overlay_intersects intersects overlay_intersects, intersects milliseconds epoch, datetime_from_epoch epoch epoch loads from_json rightmost right latitude flip_coordinates longitude flip_coordinates swapped flip_coordinates repairing flip_coordinates copy flip_coordinates layout $map, item_variables, $page, map_credits drawn $map main $map print $map, item_variables, $page window $map overview $map page $page occurring minority, majority contained overlay_contains, IN, overlaps st_contains overlay_contains touches overlay_touches, touches touched overlay_touches st_touches overlay_touches padded lpad, rpad width lpad, rpad, bounds_width truncated lpad, rpad fill lpad, rpad letter title words title leading title, trim capital title title title lie contains, point_on_surface lies contains within contains according buffer_by_m, is_valid varies buffer_by_m, tapered_buffer diameter buffer_by_m, tapered_buffer list array, IN, coalesce, map_credits rights map_credits credit map_credits longest max, longest_common_substring biggest max most max largest max overridden map_insert gradient create_ramp steps create_ramp ramp create_ramp, ramp_color edges densify_by_distance densified densify_by_distance multiline wordwrap vertical azimuth year make_datetime, make_interval, make_date, year weeks make_interval, week minutes minute multiplication * natural ln negates NOT operating env content env prefixes env gets env drive env check env, if environment env inject env configuration env administrator env variable env, var, with_variable documentation env, to_time, to_date, to_datetime handy env covers main_angle rectangle main_angle, make_rectangle_3points axis main_angle outer make_polygon inner make_polygon clip difference collects collect_geometries object collect_geometries, length3D, perimeter, to_time, to_date, to_datetime localtime datetime_from_epoch msecs datetime_from_epoch coordinated datetime_from_epoch universal datetime_from_epoch pair map single line_merge merged line_merge connected line_merge folder is_directory, file_path, base_file_name differs length3D, perimeter units length3D, perimeter, area, distance interiors touches overlay point_on_surface coincident is_closed elliptical make_ellipse representing exterior_ring, ramp_color instance boundary combinatorial boundary topological boundary collections boundary types boundary closure boundary perfect roundness flat roundness shape roundness portions sym_difference power ^ equals overlay_equals, nullif st_equals overlay_equals st_crosses overlay_crosses crossed overlay_crosses st_disjoint overlay_disjoint disjoint overlay_disjoint prefixed map_prefix_keys property layer_property metadata layer_property parse to_time, to_date, to_datetime fromstring to_time, to_date, to_datetime qtime to_time, to_datetime user to_date, to_datetime format_date to_date, to_datetime qdate to_date, to_datetime raster raster_value, raster_statistic random rand, randf inclusive rand, randf seed rand, randf depending rand, randf, if float randf removes trim, simplify_vw whitespace trim spaces trim tabs trim trailing trim tries try error try alternative try exception try holes num_interior_rings, num_rings including num_rings root sqrt square sqrt, make_square, square_wave, square_wave_randomized rules is_valid valid is_valid ogc is_valid scheme project_color share disjoint, intersects, overlaps space disjoint, intersects, overlaps, ~ dimension overlaps shared intersection sine sin, asin, wave, wave_randomized size file_size sorted array_sort, array_prioritize ordering array_prioritize offsetting offset_curve translated translate displace translate move translate restricts clamp visible is_layer_visible spikes simplify_vw areas simplify_vw simplifies simplify_vw, simplify narrow simplify_vw visvalingam simplify_vw threshold simplify_vw, simplify removing simplify_vw, simplify based simplify_vw, simplify small simplify_vw convert string_to_array divides string_to_array diagonal make_square amount extend lines extend extends extend resultant shortest_line joining shortest_line shortest shortest_line static now evaluating now stored var deviations simplify reduces simplify preserves simplify substitute nullif subtraction - signs atan2 quadrant atan2 completely within conditional if text geom_from_wkt, geom_to_wkt wkt geom_from_wkt, geom_to_wkt srid geom_to_wkt third q3 interpolation scale_linear triangle make_triangle dissolve union value with_variable scaled scale rotated rotate waves triangular_wave_randomized, triangular_wave, square_wave, square_wave_randomized, wave, wave_randomized constructs triangular_wave_randomized, triangular_wave, square_wave, square_wave_randomized, wave, wave_randomized randomized triangular_wave_randomized, square_wave_randomized, wave_randomized triangular triangular_wave_randomized, triangular_wave rectangular square_wave, square_wave_randomized curved wave_randomized week day_of_week, week corresponds day_of_week ranges day_of_week saturday day_of_week white ~ backslash ~ escaped ~ years year zenith inclination nadir inclination inclination inclination","title":"Tags esplose"},{"location":"webmaster/gbvitrano/","text":"Webmaster \u21b5 Questo sito \u00e8 stato realizzato da: Giovan Battista Vitrano \u21b5 Giovan Battista Vitrano \u00e8 famoso con il nikname gbvitrano . Dipendente del Comune di Palermo impegnato nell'Area tecnica della riqualificazione urbana e delle infrastrutture, specializzato in cose&robe e free&mancia. Civic hacker nel tempo libero e attivista di cose&robe... Per prima cosa, bisogna fare le robe, una prima fase \u00e8 mettere a fuoco le cose da fare, poi c\u2019\u00e8 una seconda fase in cui si da un nome alle singole robe da fare, perch\u00e9 fare delle robe senza sapere di cosa stai parlando \u00e8 stato sempre un problema! La terza fase \u00e8 pi\u00f9 complessa! Una volta che hai le robe giuste, \u00e8 tutta un\u2019altra cosa! Con queste robe, cose da fare c\u2019\u00e8 ne sono tante, dalle cose pi\u00f9 semplici alle cose pi\u00f9 complesse, senza dimenticarsi quelle robe li! Un esempio concreto \u00e8\u2026che con i dataset ci sono un sacco di cose che si fanno, perch\u00e9 fare le cose \u00e8 una roba concreta, \u00e8 un modello che funziona! Quando c\u2019\u00e8 voglia di fare le cose e le robe, \u00e8 solo questione di prime e seconde fasi\u2026 Se siamo in tanti a fare cose sul territorio sono sicuro che ci viene bene\u2026 c\u2019\u00e8 chi fa pi\u00f9 robe, c\u2019\u00e8 chi fa pi\u00f9 cose, ma se queste cose e queste robe li mettiamo al servizio del Paese, avremo tanti territori pieni di cose e di robe che funzionano e la gente ne ha bisogno, ma attenzione a con confondere le cose con le robe, altrimenti si impazzisce! Crozza\u2026docet Contatti \u21b5 Twitter Facebook coseerobe.gbvitrano.it","title":"Webmaster"},{"location":"webmaster/gbvitrano/#webmaster","text":"Questo sito \u00e8 stato realizzato da:","title":"Webmaster"},{"location":"webmaster/gbvitrano/#giovan-battista-vitrano","text":"Giovan Battista Vitrano \u00e8 famoso con il nikname gbvitrano . Dipendente del Comune di Palermo impegnato nell'Area tecnica della riqualificazione urbana e delle infrastrutture, specializzato in cose&robe e free&mancia. Civic hacker nel tempo libero e attivista di cose&robe... Per prima cosa, bisogna fare le robe, una prima fase \u00e8 mettere a fuoco le cose da fare, poi c\u2019\u00e8 una seconda fase in cui si da un nome alle singole robe da fare, perch\u00e9 fare delle robe senza sapere di cosa stai parlando \u00e8 stato sempre un problema! La terza fase \u00e8 pi\u00f9 complessa! Una volta che hai le robe giuste, \u00e8 tutta un\u2019altra cosa! Con queste robe, cose da fare c\u2019\u00e8 ne sono tante, dalle cose pi\u00f9 semplici alle cose pi\u00f9 complesse, senza dimenticarsi quelle robe li! Un esempio concreto \u00e8\u2026che con i dataset ci sono un sacco di cose che si fanno, perch\u00e9 fare le cose \u00e8 una roba concreta, \u00e8 un modello che funziona! Quando c\u2019\u00e8 voglia di fare le cose e le robe, \u00e8 solo questione di prime e seconde fasi\u2026 Se siamo in tanti a fare cose sul territorio sono sicuro che ci viene bene\u2026 c\u2019\u00e8 chi fa pi\u00f9 robe, c\u2019\u00e8 chi fa pi\u00f9 cose, ma se queste cose e queste robe li mettiamo al servizio del Paese, avremo tanti territori pieni di cose e di robe che funzionano e la gente ne ha bisogno, ma attenzione a con confondere le cose con le robe, altrimenti si impazzisce! Crozza\u2026docet","title":"Giovan Battista Vitrano"},{"location":"webmaster/gbvitrano/#contatti","text":"Twitter Facebook coseerobe.gbvitrano.it","title":"Contatti"},{"location":"tags/","text":"\ud83c\udff7\ufe0f Tags \u21b5 Abstract Elenco di tag utilizzati per la ricerca adiacenza \u21b5 Aggregare elementi adiacenti aggiornare \u21b5 Aggiornare geometria aggregare \u21b5 ID univoco per gruppi consecutivi Aggrega con SR differenti Aggregare elementi adiacenti Aggrega valori di una tabella Calcolo area poligoni nel reticolo Conta i punti nel poligono Conteggio valori Elenco comuni Elenco ordinato di Comuni Linea minima distanza tra due punti Nascondi etichette Selezione Selezione ultimo record per data Somma lunghezze nel poligono Spatial join Crea Tema unico contorno per poligoni adiacenti area \u21b5 Campo area Calcolo area poligoni nel reticolo Core area Livello acqua Numerazione poligoni in base a relazione spaziale Selezione Selezionare primi n valori array \u21b5 ID univoco per gruppi consecutivi Creare campo somma cumulativa Aggrega valori di una tabella Array Natural sorting Assegnare categoria prevalente Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Conta punti nel poligono e per data Conteggio valori Conteggio caratteri diversi Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni Etichette formattate diversi stili Finestra temporale Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Layer pi\u00f9 vicino Lunghezze segmenti di un poligono Nome del campo con massimo valore Media e stdev tra campi Numerazione poligoni in base a relazione spaziale Prende attributo da layer sovrapposto Segmento minimo facciata strada Selezionare vertici duplicati Seleziona primo record per ogni duplicato Selezione ultimo record per data Tracciare un grafico Trova valore atlante \u21b5 Atlante con righe tabella in verticale attributi \u21b5 Creare campo somma cumulativa Campo area Campo quota z Campi coordinate Aggiornare geometria Prelevare attributi da layer pi\u00f9 vicini Calcolo incrementi giornalieri Campo coord in lat lon Confrontare campi tabella attributi Elimina duplicati con condizione Estrarre un campo da un attributo HStore Nome del campo con massimo valore Media e stdev tra campi Nascondi etichette Seleziona primo record per ogni duplicato Selezionare record orfani in una relazione padre-figlio Trova valore blob \u21b5 Gpkg blob immagini blog \u21b5 Sitografia calamita \u21b5 Spostare i punti dentro i poligoni in base agli attributi campi \u21b5 Campo virtuale Campo coord in lat lon Nome del campo con massimo valore Media e stdev tra campi Concetti tabella attributi caratteri \u21b5 Conteggio caratteri diversi Legenda Etichettare con apici Ricercare caratteri speciali categoria \u21b5 Assegnare categoria prevalente centroidi \u21b5 Centroidi linee curve Rotazione pattern lineare Segmento minimo facciata strada Tracciare un grafico Unica label changelog \u21b5 Changelog chiave-valore \u21b5 Atlante con righe tabella in verticale Prelevare attributi da layer pi\u00f9 vicini Estrarre un campo da un attributo HStore Etichettare con chiave-valore Nome del campo con massimo valore Media e stdev tra campi Trova valore classificare \u21b5 Prelevare attributi da layer pi\u00f9 vicini Conta punti nel poligono per categorie concetti \u21b5 Concetti Field Calc Editor delle funzioni Concetti tabella attributi condizioni \u21b5 Creare campo somma cumulativa Calcolo incrementi giornalieri Distanze progressive chilometriche Elimina duplicati con condizione Legenda Fill-down con QGIS Generalizzare isoipse Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Conta punti nel poligono per categorie Tematizzare confrontare \u21b5 Confrontare campi tabella attributi contare \u21b5 Conta i punti nel poligono Conta punti nel poligono e per data Conteggio valori Conteggio caratteri diversi Conta punti nel poligono per categorie Selezionare vertici duplicati contorni \u21b5 Crea Tema unico contorno per poligoni adiacenti coordinate \u21b5 Campo quota z Campi coordinate Campo coord in lat lon Decimali delle coordinate come apici corso \u21b5 Corso di formazione avanzato - IN LAVORAZIONE cronometro \u21b5 Crea Cronometro nella Map Canvas csv \u21b5 Provaci tu Aggrega valori di una tabella Centroidi linee curve Prelevare attributi da layer pi\u00f9 vicini Finestra temporale Tracciare un grafico cumulativa \u21b5 Creare campo somma cumulativa custom \u21b5 Editor delle funzioni data \u21b5 Conta punti nel poligono e per data Lavorare con le Ore decimali \u21b5 Decimali delle coordinate come apici decorazioni \u21b5 Crea Cronometro nella Map Canvas dinamico \u21b5 Campo virtuale domande \u21b5 gis-stackexchange duplicati \u21b5 Elimina duplicati con condizione Seleziona primo record per ogni duplicato epsg \u21b5 Conversione esercizi \u21b5 Provaci tu estrarre \u21b5 Estrarre un campo da un attributo HStore etichette \u21b5 Conversione Decimali delle coordinate come apici Etichettare con chiave-valore Etichettare con apici Etichettare itinerario con elenco ordinato Comuni Etichettare Etichette formattate diversi stili Finestra temporale Nascondi etichette Selezionare primi n valori Sposta etichette Unica label fieldCalc \u21b5 Concetti Field Calc Editor delle funzioni Calcolatore di Campi Calcolatore Campi in Processing Corso di formazione avanzato - IN LAVORAZIONE Campo virtuale fill-down \u21b5 Fill-down con QGIS filtro \u21b5 Drilldown form multiple form \u21b5 Drilldown form multiple formattare \u21b5 Distanze progressive chilometriche Etichettare Etichette formattate diversi stili formazione \u21b5 Corso di formazione avanzato - IN LAVORAZIONE geopackage \u21b5 Gpkg blob immagini gis-stackexchange \u21b5 gis-stackexchange gms \u21b5 Conversione grafico \u21b5 Tracciare un grafico gruppo \u21b5 Gruppo Espressioni Utente Aggrega Array Campi e valori Colore Condizioni Conversioni Corrispondenza fuzzy Custom Data ora Espressioni utente File e percorsi Form Generale Geometria Layer Mappa Layout Maps Matematica Operatori Raster Recente Record e attributi Relazioni Stringhe di testo gui \u21b5 Traduzione Interfaccia Field Calc hub-line \u21b5 Creare Hub lines id \u21b5 ID univoco per gruppi consecutivi immagini \u21b5 Gpkg blob immagini incidenza \u21b5 Finestra temporale incrementi \u21b5 Calcolo incrementi giornalieri interfaccia \u21b5 Traduzione Interfaccia Field Calc itinerari \u21b5 Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni layer \u21b5 Prelevare attributi da layer pi\u00f9 vicini linee \u21b5 Aggiungere punto a linea Centroidi linee curve Generalizzare isoipse Geometrie vicine con condizione Creare Hub lines Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Lunghezze segmenti di un poligono Rotazione pattern lineare Rotazione simbolo parallelo ad una linea Segmento minimo facciata strada Sposta etichette Spostare i punti dentro i poligoni in base agli attributi Tracciare un grafico Tracciare puntia distanza prefissata lungo una linea moduli \u21b5 Drilldown form multiple natural-sorting \u21b5 Array Natural sorting news \u21b5 Parlano di noi novit\u00e0 \u21b5 Changelog Pull Request QGIS 3.0 | 23/02/2018 QGIS 3.10 | 25/10/2019 QGIS 3.12 | 21/02/2020 QGIS 3.14 | 19/06/2020 QGIS 3.16 | 23/10/2020 QGIS 3.18 | 22/02/2021 QGIS 3.2 | 22/06/2018 QGIS 3.20 | 21/06/2021 QGIS 3.4 | 26/10/2018 QGIS 3.6 | 22/02/2019 QGIS 3.8 | 21/06/2019 operatori \u21b5 Operatori interfaccia ora \u21b5 Lavorare con le Ore ordinare \u21b5 Array Natural sorting Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni overlay \u21b5 Prelevare attributi da layer pi\u00f9 vicini Geometrie vicine con condizione Layer pi\u00f9 vicino Distanza minima tra due vettori Prende attributo da layer sovrapposto Rotazione simbolo parallelo ad una linea Segmento minimo facciata strada Seleziona poligoni con max area sovrapposta Selezionare punti pi\u00f9 vicini ad un punto selezionato parlano \u21b5 Parlano di noi pigrecoinfinito \u21b5 Sitografia plugin \u21b5 Risorse poligoni \u21b5 Calcolo area poligoni nel reticolo Conta i punti nel poligono Conta punti nel poligono e per data Core area Numerazione poligoni in base a relazione spaziale Prende attributo da layer sovrapposto Conta punti nel poligono per categorie Seleziona poligoni con max area sovrapposta Selezionare primi n valori Somma lunghezze nel poligono Spostare i punti dentro i poligoni in base agli attributi Unica label post \u21b5 Sitografia prevalenza \u21b5 Assegnare categoria prevalente processing \u21b5 Calcolatore Campi in Processing progressive \u21b5 Distanze progressive chilometriche propedeutico \u21b5 Concetti Field Calc Editor delle funzioni Calcolatore di Campi Calcolatore Campi in Processing Gruppo Espressioni Utente Interfaccia Field Calc Operatori interfaccia Concetti tabella attributi prossimit\u00e0 \u21b5 Prelevare attributi da layer pi\u00f9 vicini Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Prende attributo da layer sovrapposto Rotazione simbolo parallelo ad una linea Selezionare punti pi\u00f9 vicini ad un punto selezionato prova \u21b5 Provaci tu pull-request \u21b5 Pull Request punti \u21b5 Aggiungere punto a linea Prelevare attributi da layer pi\u00f9 vicini Conta i punti nel poligono Conta punti nel poligono e per data Etichettare Livello acqua Conta punti nel poligono per categorie Selezionare punti pi\u00f9 vicini ad un punto selezionato Spostare i punti dentro i poligoni in base agli attributi Tematizzare Tracciare un grafico Tracciare puntia distanza prefissata lungo una linea Unica label quota \u21b5 Campo quota z record \u21b5 Selezione ultimo record per data regex \u21b5 Array Natural sorting Campo coord in lat lon Conteggio caratteri diversi Decimali delle coordinate come apici Eliminare testo tra parentesi Legenda Lavorare con le Ore Ricercare caratteri speciali relazioni \u21b5 Drilldown form multiple Geometria pi\u00f9 vicina e filtro condizionato Numerazione poligoni in base a relazione spaziale Selezionare record orfani in una relazione padre-figlio Tracciare un grafico release \u21b5 Release reticolo \u21b5 Calcolo area poligoni nel reticolo ricerca \u21b5 Ricercare caratteri speciali rinomina \u21b5 Concetti tabella attributi risorse \u21b5 Risorse risposte \u21b5 gis-stackexchange selezionare \u21b5 Elimina duplicati con condizione Selezionare vertici duplicati Selezione Seleziona poligoni con max area sovrapposta Selezionare primi n valori Seleziona primo record per ogni duplicato Selezionare punti pi\u00f9 vicini ad un punto selezionato Selezionare record orfani in una relazione padre-figlio Selezione ultimo record per data Trova valore sessadecimale \u21b5 Conversione sessagesimale \u21b5 Conversione shortest-line \u21b5 Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Rotazione pattern lineare Segmento minimo facciata strada software \u21b5 Risorse sovrapposizione \u21b5 Prende attributo da layer sovrapposto spatial-join \u21b5 Numerazione poligoni in base a relazione spaziale Spatial join sr \u21b5 Aggrega con SR differenti stile \u21b5 Crea Tema unico contorno per poligoni adiacenti supporter \u21b5 Supporter tabella \u21b5 Campo quota z Campi coordinate Aggrega valori di una tabella Array Natural sorting Assegnare categoria prevalente Atlante con righe tabella in verticale Prelevare attributi da layer pi\u00f9 vicini Calcolo incrementi giornalieri Campo coord in lat lon Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Conteggio valori Conteggio caratteri diversi Elenco comuni Elenco ordinato di Comuni Elimina duplicati con condizione Estrarre un campo da un attributo HStore Fill-down con QGIS Seleziona primo record per ogni duplicato Selezionare record orfani in una relazione padre-figlio Trova valore Concetti tabella attributi tempo \u21b5 Crea Cronometro nella Map Canvas test \u21b5 Provaci tu testo \u21b5 Eliminare testo tra parentesi Etichette formattate diversi stili traduzione \u21b5 Traduzione transform \u21b5 Aggrega con SR differenti Somma lunghezze nel poligono univoco \u21b5 ID univoco per gruppi consecutivi valori \u21b5 Aggrega valori di una tabella Array Natural sorting Atlante con righe tabella in verticale Calcolo incrementi giornalieri Centroidi linee curve Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Elenco comuni Eliminare testo tra parentesi Legenda Estrarre un campo da un attributo HStore Etichettare con chiave-valore Etichettare itinerario con elenco ordinato Comuni versione \u21b5 Release Traduzione vertici \u21b5 Selezionare vertici duplicati vestizione \u21b5 Generalizzare isoipse Livello acqua Rotazione pattern lineare Tematizzare virtuale \u21b5 Campo virtuale wkt \u21b5 Centroidi linee curve Creare Hub lines x \u21b5 Campi coordinate Decimali delle coordinate come apici Etichettare Livello acqua Sposta etichette Unica label y \u21b5 Campi coordinate Decimali delle coordinate come apici Etichettare Livello acqua Sposta etichette Unica label z \u21b5 Campo quota z Etichettare","title":"\ud83c\udff7\ufe0f Tags"},{"location":"tags/#tags","text":"Abstract Elenco di tag utilizzati per la ricerca","title":"\ud83c\udff7\ufe0f Tags"},{"location":"tags/#adiacenza","text":"Aggregare elementi adiacenti","title":"adiacenza"},{"location":"tags/#aggiornare","text":"Aggiornare geometria","title":"aggiornare"},{"location":"tags/#aggregare","text":"ID univoco per gruppi consecutivi Aggrega con SR differenti Aggregare elementi adiacenti Aggrega valori di una tabella Calcolo area poligoni nel reticolo Conta i punti nel poligono Conteggio valori Elenco comuni Elenco ordinato di Comuni Linea minima distanza tra due punti Nascondi etichette Selezione Selezione ultimo record per data Somma lunghezze nel poligono Spatial join Crea Tema unico contorno per poligoni adiacenti","title":"aggregare"},{"location":"tags/#area","text":"Campo area Calcolo area poligoni nel reticolo Core area Livello acqua Numerazione poligoni in base a relazione spaziale Selezione Selezionare primi n valori","title":"area"},{"location":"tags/#array","text":"ID univoco per gruppi consecutivi Creare campo somma cumulativa Aggrega valori di una tabella Array Natural sorting Assegnare categoria prevalente Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Conta punti nel poligono e per data Conteggio valori Conteggio caratteri diversi Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni Etichette formattate diversi stili Finestra temporale Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Layer pi\u00f9 vicino Lunghezze segmenti di un poligono Nome del campo con massimo valore Media e stdev tra campi Numerazione poligoni in base a relazione spaziale Prende attributo da layer sovrapposto Segmento minimo facciata strada Selezionare vertici duplicati Seleziona primo record per ogni duplicato Selezione ultimo record per data Tracciare un grafico Trova valore","title":"array"},{"location":"tags/#atlante","text":"Atlante con righe tabella in verticale","title":"atlante"},{"location":"tags/#attributi","text":"Creare campo somma cumulativa Campo area Campo quota z Campi coordinate Aggiornare geometria Prelevare attributi da layer pi\u00f9 vicini Calcolo incrementi giornalieri Campo coord in lat lon Confrontare campi tabella attributi Elimina duplicati con condizione Estrarre un campo da un attributo HStore Nome del campo con massimo valore Media e stdev tra campi Nascondi etichette Seleziona primo record per ogni duplicato Selezionare record orfani in una relazione padre-figlio Trova valore","title":"attributi"},{"location":"tags/#blob","text":"Gpkg blob immagini","title":"blob"},{"location":"tags/#blog","text":"Sitografia","title":"blog"},{"location":"tags/#calamita","text":"Spostare i punti dentro i poligoni in base agli attributi","title":"calamita"},{"location":"tags/#campi","text":"Campo virtuale Campo coord in lat lon Nome del campo con massimo valore Media e stdev tra campi Concetti tabella attributi","title":"campi"},{"location":"tags/#caratteri","text":"Conteggio caratteri diversi Legenda Etichettare con apici Ricercare caratteri speciali","title":"caratteri"},{"location":"tags/#categoria","text":"Assegnare categoria prevalente","title":"categoria"},{"location":"tags/#centroidi","text":"Centroidi linee curve Rotazione pattern lineare Segmento minimo facciata strada Tracciare un grafico Unica label","title":"centroidi"},{"location":"tags/#changelog","text":"Changelog","title":"changelog"},{"location":"tags/#chiave-valore","text":"Atlante con righe tabella in verticale Prelevare attributi da layer pi\u00f9 vicini Estrarre un campo da un attributo HStore Etichettare con chiave-valore Nome del campo con massimo valore Media e stdev tra campi Trova valore","title":"chiave-valore"},{"location":"tags/#classificare","text":"Prelevare attributi da layer pi\u00f9 vicini Conta punti nel poligono per categorie","title":"classificare"},{"location":"tags/#concetti","text":"Concetti Field Calc Editor delle funzioni Concetti tabella attributi","title":"concetti"},{"location":"tags/#condizioni","text":"Creare campo somma cumulativa Calcolo incrementi giornalieri Distanze progressive chilometriche Elimina duplicati con condizione Legenda Fill-down con QGIS Generalizzare isoipse Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Conta punti nel poligono per categorie Tematizzare","title":"condizioni"},{"location":"tags/#confrontare","text":"Confrontare campi tabella attributi","title":"confrontare"},{"location":"tags/#contare","text":"Conta i punti nel poligono Conta punti nel poligono e per data Conteggio valori Conteggio caratteri diversi Conta punti nel poligono per categorie Selezionare vertici duplicati","title":"contare"},{"location":"tags/#contorni","text":"Crea Tema unico contorno per poligoni adiacenti","title":"contorni"},{"location":"tags/#coordinate","text":"Campo quota z Campi coordinate Campo coord in lat lon Decimali delle coordinate come apici","title":"coordinate"},{"location":"tags/#corso","text":"Corso di formazione avanzato - IN LAVORAZIONE","title":"corso"},{"location":"tags/#cronometro","text":"Crea Cronometro nella Map Canvas","title":"cronometro"},{"location":"tags/#csv","text":"Provaci tu Aggrega valori di una tabella Centroidi linee curve Prelevare attributi da layer pi\u00f9 vicini Finestra temporale Tracciare un grafico","title":"csv"},{"location":"tags/#cumulativa","text":"Creare campo somma cumulativa","title":"cumulativa"},{"location":"tags/#custom","text":"Editor delle funzioni","title":"custom"},{"location":"tags/#data","text":"Conta punti nel poligono e per data Lavorare con le Ore","title":"data"},{"location":"tags/#decimali","text":"Decimali delle coordinate come apici","title":"decimali"},{"location":"tags/#decorazioni","text":"Crea Cronometro nella Map Canvas","title":"decorazioni"},{"location":"tags/#dinamico","text":"Campo virtuale","title":"dinamico"},{"location":"tags/#domande","text":"gis-stackexchange","title":"domande"},{"location":"tags/#duplicati","text":"Elimina duplicati con condizione Seleziona primo record per ogni duplicato","title":"duplicati"},{"location":"tags/#epsg","text":"Conversione","title":"epsg"},{"location":"tags/#esercizi","text":"Provaci tu","title":"esercizi"},{"location":"tags/#estrarre","text":"Estrarre un campo da un attributo HStore","title":"estrarre"},{"location":"tags/#etichette","text":"Conversione Decimali delle coordinate come apici Etichettare con chiave-valore Etichettare con apici Etichettare itinerario con elenco ordinato Comuni Etichettare Etichette formattate diversi stili Finestra temporale Nascondi etichette Selezionare primi n valori Sposta etichette Unica label","title":"etichette"},{"location":"tags/#fieldcalc","text":"Concetti Field Calc Editor delle funzioni Calcolatore di Campi Calcolatore Campi in Processing Corso di formazione avanzato - IN LAVORAZIONE Campo virtuale","title":"fieldCalc"},{"location":"tags/#fill-down","text":"Fill-down con QGIS","title":"fill-down"},{"location":"tags/#filtro","text":"Drilldown form multiple","title":"filtro"},{"location":"tags/#form","text":"Drilldown form multiple","title":"form"},{"location":"tags/#formattare","text":"Distanze progressive chilometriche Etichettare Etichette formattate diversi stili","title":"formattare"},{"location":"tags/#formazione","text":"Corso di formazione avanzato - IN LAVORAZIONE","title":"formazione"},{"location":"tags/#geopackage","text":"Gpkg blob immagini","title":"geopackage"},{"location":"tags/#gis-stackexchange","text":"gis-stackexchange","title":"gis-stackexchange"},{"location":"tags/#gms","text":"Conversione","title":"gms"},{"location":"tags/#grafico","text":"Tracciare un grafico","title":"grafico"},{"location":"tags/#gruppo","text":"Gruppo Espressioni Utente Aggrega Array Campi e valori Colore Condizioni Conversioni Corrispondenza fuzzy Custom Data ora Espressioni utente File e percorsi Form Generale Geometria Layer Mappa Layout Maps Matematica Operatori Raster Recente Record e attributi Relazioni Stringhe di testo","title":"gruppo"},{"location":"tags/#gui","text":"Traduzione Interfaccia Field Calc","title":"gui"},{"location":"tags/#hub-line","text":"Creare Hub lines","title":"hub-line"},{"location":"tags/#id","text":"ID univoco per gruppi consecutivi","title":"id"},{"location":"tags/#immagini","text":"Gpkg blob immagini","title":"immagini"},{"location":"tags/#incidenza","text":"Finestra temporale","title":"incidenza"},{"location":"tags/#incrementi","text":"Calcolo incrementi giornalieri","title":"incrementi"},{"location":"tags/#interfaccia","text":"Traduzione Interfaccia Field Calc","title":"interfaccia"},{"location":"tags/#itinerari","text":"Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni","title":"itinerari"},{"location":"tags/#layer","text":"Prelevare attributi da layer pi\u00f9 vicini","title":"layer"},{"location":"tags/#linee","text":"Aggiungere punto a linea Centroidi linee curve Generalizzare isoipse Geometrie vicine con condizione Creare Hub lines Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Lunghezze segmenti di un poligono Rotazione pattern lineare Rotazione simbolo parallelo ad una linea Segmento minimo facciata strada Sposta etichette Spostare i punti dentro i poligoni in base agli attributi Tracciare un grafico Tracciare puntia distanza prefissata lungo una linea","title":"linee"},{"location":"tags/#moduli","text":"Drilldown form multiple","title":"moduli"},{"location":"tags/#natural-sorting","text":"Array Natural sorting","title":"natural-sorting"},{"location":"tags/#news","text":"Parlano di noi","title":"news"},{"location":"tags/#novita","text":"Changelog Pull Request QGIS 3.0 | 23/02/2018 QGIS 3.10 | 25/10/2019 QGIS 3.12 | 21/02/2020 QGIS 3.14 | 19/06/2020 QGIS 3.16 | 23/10/2020 QGIS 3.18 | 22/02/2021 QGIS 3.2 | 22/06/2018 QGIS 3.20 | 21/06/2021 QGIS 3.4 | 26/10/2018 QGIS 3.6 | 22/02/2019 QGIS 3.8 | 21/06/2019","title":"novit\u00e0"},{"location":"tags/#operatori","text":"Operatori interfaccia","title":"operatori"},{"location":"tags/#ora","text":"Lavorare con le Ore","title":"ora"},{"location":"tags/#ordinare","text":"Array Natural sorting Elenco ordinato di Comuni Etichettare itinerario con elenco ordinato Comuni","title":"ordinare"},{"location":"tags/#overlay","text":"Prelevare attributi da layer pi\u00f9 vicini Geometrie vicine con condizione Layer pi\u00f9 vicino Distanza minima tra due vettori Prende attributo da layer sovrapposto Rotazione simbolo parallelo ad una linea Segmento minimo facciata strada Seleziona poligoni con max area sovrapposta Selezionare punti pi\u00f9 vicini ad un punto selezionato","title":"overlay"},{"location":"tags/#parlano","text":"Parlano di noi","title":"parlano"},{"location":"tags/#pigrecoinfinito","text":"Sitografia","title":"pigrecoinfinito"},{"location":"tags/#plugin","text":"Risorse","title":"plugin"},{"location":"tags/#poligoni","text":"Calcolo area poligoni nel reticolo Conta i punti nel poligono Conta punti nel poligono e per data Core area Numerazione poligoni in base a relazione spaziale Prende attributo da layer sovrapposto Conta punti nel poligono per categorie Seleziona poligoni con max area sovrapposta Selezionare primi n valori Somma lunghezze nel poligono Spostare i punti dentro i poligoni in base agli attributi Unica label","title":"poligoni"},{"location":"tags/#post","text":"Sitografia","title":"post"},{"location":"tags/#prevalenza","text":"Assegnare categoria prevalente","title":"prevalenza"},{"location":"tags/#processing","text":"Calcolatore Campi in Processing","title":"processing"},{"location":"tags/#progressive","text":"Distanze progressive chilometriche","title":"progressive"},{"location":"tags/#propedeutico","text":"Concetti Field Calc Editor delle funzioni Calcolatore di Campi Calcolatore Campi in Processing Gruppo Espressioni Utente Interfaccia Field Calc Operatori interfaccia Concetti tabella attributi","title":"propedeutico"},{"location":"tags/#prossimita","text":"Prelevare attributi da layer pi\u00f9 vicini Geometria pi\u00f9 vicina e filtro condizionato Geometrie vicine con condizione Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Prende attributo da layer sovrapposto Rotazione simbolo parallelo ad una linea Selezionare punti pi\u00f9 vicini ad un punto selezionato","title":"prossimit\u00e0"},{"location":"tags/#prova","text":"Provaci tu","title":"prova"},{"location":"tags/#pull-request","text":"Pull Request","title":"pull-request"},{"location":"tags/#punti","text":"Aggiungere punto a linea Prelevare attributi da layer pi\u00f9 vicini Conta i punti nel poligono Conta punti nel poligono e per data Etichettare Livello acqua Conta punti nel poligono per categorie Selezionare punti pi\u00f9 vicini ad un punto selezionato Spostare i punti dentro i poligoni in base agli attributi Tematizzare Tracciare un grafico Tracciare puntia distanza prefissata lungo una linea Unica label","title":"punti"},{"location":"tags/#quota","text":"Campo quota z","title":"quota"},{"location":"tags/#record","text":"Selezione ultimo record per data","title":"record"},{"location":"tags/#regex","text":"Array Natural sorting Campo coord in lat lon Conteggio caratteri diversi Decimali delle coordinate come apici Eliminare testo tra parentesi Legenda Lavorare con le Ore Ricercare caratteri speciali","title":"regex"},{"location":"tags/#relazioni","text":"Drilldown form multiple Geometria pi\u00f9 vicina e filtro condizionato Numerazione poligoni in base a relazione spaziale Selezionare record orfani in una relazione padre-figlio Tracciare un grafico","title":"relazioni"},{"location":"tags/#release","text":"Release","title":"release"},{"location":"tags/#reticolo","text":"Calcolo area poligoni nel reticolo","title":"reticolo"},{"location":"tags/#ricerca","text":"Ricercare caratteri speciali","title":"ricerca"},{"location":"tags/#rinomina","text":"Concetti tabella attributi","title":"rinomina"},{"location":"tags/#risorse","text":"Risorse","title":"risorse"},{"location":"tags/#risposte","text":"gis-stackexchange","title":"risposte"},{"location":"tags/#selezionare","text":"Elimina duplicati con condizione Selezionare vertici duplicati Selezione Seleziona poligoni con max area sovrapposta Selezionare primi n valori Seleziona primo record per ogni duplicato Selezionare punti pi\u00f9 vicini ad un punto selezionato Selezionare record orfani in una relazione padre-figlio Selezione ultimo record per data Trova valore","title":"selezionare"},{"location":"tags/#sessadecimale","text":"Conversione","title":"sessadecimale"},{"location":"tags/#sessagesimale","text":"Conversione","title":"sessagesimale"},{"location":"tags/#shortest-line","text":"Layer pi\u00f9 vicino Linea minima distanza tra due punti Distanza minima tra due vettori Rotazione pattern lineare Segmento minimo facciata strada","title":"shortest-line"},{"location":"tags/#software","text":"Risorse","title":"software"},{"location":"tags/#sovrapposizione","text":"Prende attributo da layer sovrapposto","title":"sovrapposizione"},{"location":"tags/#spatial-join","text":"Numerazione poligoni in base a relazione spaziale Spatial join","title":"spatial-join"},{"location":"tags/#sr","text":"Aggrega con SR differenti","title":"sr"},{"location":"tags/#stile","text":"Crea Tema unico contorno per poligoni adiacenti","title":"stile"},{"location":"tags/#supporter","text":"Supporter","title":"supporter"},{"location":"tags/#tabella","text":"Campo quota z Campi coordinate Aggrega valori di una tabella Array Natural sorting Assegnare categoria prevalente Atlante con righe tabella in verticale Prelevare attributi da layer pi\u00f9 vicini Calcolo incrementi giornalieri Campo coord in lat lon Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Conteggio valori Conteggio caratteri diversi Elenco comuni Elenco ordinato di Comuni Elimina duplicati con condizione Estrarre un campo da un attributo HStore Fill-down con QGIS Seleziona primo record per ogni duplicato Selezionare record orfani in una relazione padre-figlio Trova valore Concetti tabella attributi","title":"tabella"},{"location":"tags/#tempo","text":"Crea Cronometro nella Map Canvas","title":"tempo"},{"location":"tags/#test","text":"Provaci tu","title":"test"},{"location":"tags/#testo","text":"Eliminare testo tra parentesi Etichette formattate diversi stili","title":"testo"},{"location":"tags/#traduzione","text":"Traduzione","title":"traduzione"},{"location":"tags/#transform","text":"Aggrega con SR differenti Somma lunghezze nel poligono","title":"transform"},{"location":"tags/#univoco","text":"ID univoco per gruppi consecutivi","title":"univoco"},{"location":"tags/#valori","text":"Aggrega valori di una tabella Array Natural sorting Atlante con righe tabella in verticale Calcolo incrementi giornalieri Centroidi linee curve Prelevare attributi da layer pi\u00f9 vicini Confrontare campi tabella attributi Elenco comuni Eliminare testo tra parentesi Legenda Estrarre un campo da un attributo HStore Etichettare con chiave-valore Etichettare itinerario con elenco ordinato Comuni","title":"valori"},{"location":"tags/#versione","text":"Release Traduzione","title":"versione"},{"location":"tags/#vertici","text":"Selezionare vertici duplicati","title":"vertici"},{"location":"tags/#vestizione","text":"Generalizzare isoipse Livello acqua Rotazione pattern lineare Tematizzare","title":"vestizione"},{"location":"tags/#virtuale","text":"Campo virtuale","title":"virtuale"},{"location":"tags/#wkt","text":"Centroidi linee curve Creare Hub lines","title":"wkt"},{"location":"tags/#x","text":"Campi coordinate Decimali delle coordinate come apici Etichettare Livello acqua Sposta etichette Unica label","title":"x"},{"location":"tags/#y","text":"Campi coordinate Decimali delle coordinate come apici Etichettare Livello acqua Sposta etichette Unica label","title":"y"},{"location":"tags/#z","text":"Campo quota z Etichettare","title":"z"}]}